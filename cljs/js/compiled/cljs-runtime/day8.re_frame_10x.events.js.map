{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","f","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor","context","db","cljs.core/contains?","cljs.core.get_in","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_","component-name","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__20903#","re-frame.trace/register-trace-cb","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","p__20907","vec__20909","seq__20910","cljs.core/seq","first__20911","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5751__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.events/read-string-maybe","s","e20916","cljs.tools.reader.edn.read_string","day8.re-frame-10x.utils.utils/default-readers","e","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","p__20917","vec__20918","cljs.core.nth","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4336__auto__","y__4337__auto__","cljs.core/assoc-in","p__20921","vec__20922","width","p__20925","vec__20927","selected-tab","cljs.core.update_in","cljs.core/not","p__20933","vec__20934","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__4253__auto__","p__20964","vec__20965","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","p1__20971#","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__20972","vec__20973","p__20976","vec__20977","event-str","old-event","p__20980","vec__20981","day8.re-frame-10x.events/filtered-view-trace-mw","p1__20984#","filtered-view-trace","p__20985","vec__20986","p__20989","vec__20990","ns-str","p__20993","vec__20994","day8.re-frame-10x.events/low-level-trace-mw","p1__20997#","p__20998","vec__20999","low-level","p__21002","vec__21003","trace-type","capture?","p__21006","vec__21007","debug?","p1__21010#","p__21011","vec__21012","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom","handle-window-resize","cljs.core/deref","G__21015","reagent.impl.batching/next-tick","height","cljs.core/reset!","handle-window-position","pos","map__21016","cljs.core/--destructure-map","left","top","screen-left","screen-top","cljs.core.not_EQ_","window-position-interval","unmount","G__21017","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","day8.re_frame_10x.events.goog$module$goog$object.set","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.dom.render","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__21018","map__21019","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","goog.string/escapeString","new-window-html","w","js/window.open","d","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","ctx","p1__21020#","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/after","p__21021","vec__21022","dim","new-dim","p1__21025#","p__21026","vec__21027","map__21030","p1__21031#","p__21032","vec__21033","map__21036","js/window.addEventListener","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync","p__21037","vec__21038","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__21041","vec__21042","p__21048","vec__21049","filter-input","filter-type","new-db","p1__21045#","cljs.core/some","and__4251__auto__","p1__21046#","p1__21047#","cljs.core.remove","cljs.core.conj","clojure.string/lower-case","js/parseFloat","p__21053","vec__21054","filter-id","p1__21052#","trace-detail-expansions","cljs.core.update","p__21058","vec__21059","expansions","showing?","p1__21057#","p__21062","vec__21063","categories","new-categories","clojure.set/superset?","clojure.set.difference","clojure.set.union","p__21066","vec__21067","p1__21070#","p__21071","vec__21072","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","p1__21075#","paths","p__21076","vec__21077","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__21080","vec__21081","map__21084","valid-path?","cljs.core.pr_str","p__21085","vec__21086","open?","p__21089","vec__21090","diff?","p__21093","vec__21094","p__21099","vec__21100","p__21105","vec__21106","search-string","p__21109","vec__21110","p__21113","vec__21114","new-paths","cljs.core.disj","re-frame.interop/reagent-id","re-frame.db/app-db","p__21117","vec__21118","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5757__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__21131","p__21132","map__21133","vec__21134","new-traces","filtered-traces","cljs.core.filter","cljs.core.sort_by","map__21137","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.into","cljs.core.comp","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__21130#","cljs.core.drop_while","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.juxt","cljs.core/identity","p__21144","map__21145","temp__5755__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","p__21146","map__21147","p__21148","map__21149","p__21150","p__21151","map__21152","vec__21153","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","p__21156","vec__21157","ignore?","p__21160","vec__21161","p__21164","vec__21165","p__21168","vec__21169","pinned","pinned?","p__21172","vec__21173","filter-value","p__21176","vec__21177","code-open?","open?-path","p__21180","vec__21181","execution-order?","p__21184","vec__21185","form","new-form","p__21188","vec__21189","p__21192","vec__21193","_show-all-code?","new-show-all-code?","p__21196","vec__21197","current-state","new-state","p__21200","vec__21201","component","new-direction","errors"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-name    (get-in trace [:tags :component-name] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-name \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string {:readers utils/default-readers} s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (rdom/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                               (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                    \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))]\n      (let [d (.-document w)]\n        ;; We had to comment out the following unmountComponentAtNode as it causes a React exception we assume\n        ;; because React says el is not a root container that it knows about.\n        ;; In theory by not freeing up the resources associated with this container (e.g. event handlers) we may be\n        ;; creating memory leaks. However with observation of the heap in developer tools we cannot see any significant\n        ;; unbounded growth in memory usage.\n        ;(when-let [el (.getElementById d \"--re-frame-10x--\")]\n        ;  (r/unmount-component-at-node el)))\n        (.open d)\n        (.write d new-window-html)\n        (goog.object/set w \"onload\" #(mount w d))\n        (.close d)\n        true)\n      false)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (if (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n      (do\n        (localstorage/save! \"external-window?\" true)\n        {:db             (-> (:db ctx)\n                             (assoc-in [:settings :external-window?] true)\n                             (dissoc-in [:errors :popup-failed?]))\n         :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]})\n      {:db       (assoc-in (:db ctx) [:errors :popup-failed?] true)\n       :dispatch [:global/external-closed]})))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db       (assoc db :current-epoch-index nil\n                         :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-fx\n  :epochs/load-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} [_ new-id]]\n    {:db       (assoc db :current-epoch-id new-id)\n     :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n(rf/reg-event-db\n  :subs/set-pinned\n  [(rf/path [:subs :pinned])]\n  (fn [pinned [_ id pinned?]]\n    (assoc-in pinned [id :pin?] pinned?)))\n\n(rf/reg-event-db\n  :subs/set-filter\n  [(rf/path [:subs :filter-str])]\n  (fn [_ [_ filter-value]]\n    filter-value))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n :code/set-execution-order\n [(rf/path [:code :execution-order?])]\n (fn [_ [_ execution-order?]]\n   execution-order?))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n\n;;\n\n(rf/reg-event-db\n  :errors/dismiss-popup-failed\n  [(rf/path [:errors])]\n  (fn [errors _]\n    (dissoc errors :popup-failed?)))\n\n;;\n\n(rf/reg-event-db\n  :history/toggle-history\n  (fn [db _]\n    (update-in db [:history :showing-history?] not)))\n"]}