{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":";AAQA,0GAAA,1GAACA,iOAEC,WAAKC,GAAGC;AAAR,AACE,sDAAA,/CAACC,4CAAIF;;AAET,0GAAA,uIAAA,gDAAA,mFAAA,pXAACD,icAGC,WAAKI,SAASF;AAAd,AACE,4DAAA,rDAACC,4CAAIC;;AAET,0GAAA,sJAAA,gDAAA,mFAAA,nYAACJ,geAIC,gCAAAK,rBAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAmBJ;QAAnB,AAAAK,4CAAAD,WAAA,IAAA,/DAAqBG;AAArB,AAEE,gEAAA,xDAAG,CAAG,AAACC,UAAU,CAAG,wBAAA,vBAAGF,gCACHC,MACdA;;AAGV,0GAAA,qIAAA,gDAAA,mFAAA,lXAACT,+bAIC,WAAKI,SAASF;AAAd,AACE,4DAAA,rDAACC,4CAAIC;;AAET,0GAAA,sJAAA,gDAAA,mFAAA,nYAACJ,8dAMC,iBAAAW,NAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAAYV;QAAZ,AAAAK,4CAAAK,WAAA,IAAA,/DAAcH;AAAd,AACE,QAAG,AAACC,UAAU,CAAGG,QAAMJ,MACpBA;;AAEP,0GAAA,oIAAA,gDAAA,mFAAA,jXAACT,8bAGC,WAAKI,SAASF;AAAd,AACE,4DAAA,rDAACC,4CAAIC;;AAET,0GAAA,sIAAA,gDAAA,mFAAA,nXAACJ,gcAGC,WAAKI,SAASF;AAAd,AACE,oBAAI,AAAA,6GAAoBE;AAAxB;;AAEE,4DAAA,rDAACD,4CAAIC;;;AAEX,0GAAA,+JAAA,gDAAA,mFAAA,5YAACJ,ydAGC,WAAKI;AAAL,AACE,OAAA,yGAAmBA;;AAEvB,0GAAA,0IAAA,gDAAA,mFAAA,vXAACJ,ocAGC,WAAKI;AAAL,AACE,uDAAA,hDAACU,oGAAc,AAACC,eAAK,AAAA,uGAAiBX;;AAE1C,0GAAA,mJAAA,gDAAA,mFAAA,hYAACJ,6cAGC,WAAKI;AAAL,AACE,uDAAA,hDAACU,oGAAc,AAACC,eAAK,AAAA,iHAAsBX;;AAE/C,0GAAA,2IAAA,gDAAA,mFAAA,xXAACJ,qcAKC,WAAKI;AAAL,AACE,OAAA,wGAAkBA;;AAEtB,0GAAA,0HAAA,gDAAA,mFAAA,vWAACJ,obAGC,WAAKI;AAAL,AACE,OAAA,wFAASA;;AAEb,0GAAA,0JAAA,gDAAA,mFAAA,vYAACJ,odAGC,WAAKI;AAAL,AACE,OAAA,wHAAyBA;;AAI7B,0GAAA,1GAACJ,6NAEC,WAAKC,GAAGC;AAAR,AACE,sDAAA,/CAACC,4CAAIF;;AAET,0GAAA,+JAAA,gDAAA,mFAAA,5YAACD,mfAGC,WAAKgB,MAAMd;AAAX,AACE,4DAAA,mFAAA,qDAAA,7LAACe,+CAAOD;;AAEZ,0GAAA,gKAAA,gDAAA,mFAAA,7YAAChB,ofAGC,WAAKgB,MAAMd;AAAX,AACE,4DAAA,mFAAA,qDAAA,7LAACe,+CAAOD;;AAEZ,0GAAA,qHAAA,gDAAA,mFAAA,lWAAChB,2aAGC,WAAKkB,gBAAgBhB;AAArB,AACE,mDAAA,WAAAiB,vDAACC;AAAD,AAAM,qFAAA,9EAACC,8CAAM,cAAAF,dAACG,kFAAW,cAAAH,dAACI;GACrB,4DAAA,5DAACpB,4CAAIe;;AAEd,0GAAA,mIAAA,gDAAA,mFAAA,hXAAClB,ybAGC,WAAKkB,gBAAgBhB;AAArB,AACE,mEAAA,5DAACC,4CAAIe;;AAET,0GAAA,+HAAA,gDAAA,mFAAA,5WAAClB,qbAGC,WAAKkB,gBAAgBhB;AAArB,AACE,mEAAA,5DAACC,4CAAIe;;AAET,0GAAA,uIAAA,gDAAA,mFAAA,pXAAClB,ycAGC,sBAAAwB,XAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAiBvB;WAAjB,AAAAK,4CAAAkB,WAAA,IAAA,lEAAmBE;AAAnB,AACE,OAACC,0BAAUF,WAAWC;;AAE1B,0GAAA,6HAAA,gDAAA,mFAAA,1WAAC3B,mbAGC,WAAK6B,KAAK3B;AAAV,AACE,OAAA,+FAAa2B;;AAIjB,0GAAA,1GAAC7B,yOAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,wFAASD;;AAEb,0GAAA,1GAACD,qOAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,iGAAcD;;AAElB,0GAAA,1GAACD,2OAEC,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,0DAAA,/LAACe,+CAAOhB;;AAEZ,0GAAA,1GAACD,wOAEC,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,0DAAA,/LAACe,+CAAOhB;;AAEZ,0GAAA,1GAACD,wOAEC,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,0DAAA,/LAACe,+CAAOhB;;AAEZ,0GAAA,8HAAA,gDAAA,mFAAA,3WAACD,gcAGC,WAAK8B,OAAO5B;AAAZ,AACE,OAAA,gGAAa4B;;AAEjB,0GAAA,2IAAA,gDAAA,mFAAA,xXAAC9B,4cAGC,WAAK8B,OAAO5B;AAAZ,AACE,OAAC6B,gBAAMD;;AAEX,0GAAA,kJAAA,gDAAA,mFAAA,oFAAA,gDAAA,mFAAA,qGAAA,gDAAA,mFAAA,9zBAAC9B,65BAKC,WAAAgC,SAA+B9B;AAA/B,AAAA,IAAA+B,aAAAD;aAAA,AAAAzB,4CAAA0B,WAAA,IAAA,pEAAMH;gBAAN,AAAAvB,4CAAA0B,WAAA,IAAA,vEAAaC;aAAb,AAAA3B,4CAAA0B,WAAA,IAAA,pEAAuBE;AAAvB,AACE,oDAAA,7CAACC,8EAAQ,AAACC,4CAAoBH,UAAUC,QAAQL;;AAEpD,8CAAA,sDAAAQ,pGAAME,6GAA8CtC;AAApD,AAAA,IAAAqC,aAAAD;aAAA,AAAA/B,4CAAAgC,WAAA,IAAA,pEAA6BT;qBAA7B,AAAAvB,4CAAAgC,WAAA,IAAA,5EAAoCE;AAApC,AACE,IAAMC,8LAAeD,pKACA,AAACrB,4CAAI,6DAAA,7DAACuB,6CAAKC,vGACX,AAACC;AAFtB,AAGE,oDAAA,7CAACT,8EAEK,AAACU,+CACC,WAAK9B;AAAL,AAAY,SAAK,AAAC+B,4CAAc/B,YACf,AAACY,0BAAUc,UAAU,kJAAA,lJAACM,6CAAK,AAAA,8FAAYhC,WAAS,gKAAA,hKAACiC,2DAAkB,AAAA,8FAAYjC;IAClGc;;AAEV,0GAAA,kKAAA,gDAAA,mFAAA,wGAAA,gDAAA,mFAAA,1nBAAC9B,muBAICwC;AAEF,0GAAA,+IAAA,gDAAA,mFAAA,oFAAA,gDAAA,mFAAA,nlBAACxC,4rBAICwC;AAEF,0GAAA,wJAAA,gDAAA,mFAAA,rYAACxC,sdAGC,WAAKkD;AAAL,AACE,OAAA,gHAAqBA;;AAIzB,0GAAA,1GAAClD,wOAEC,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,uDAAA,5LAACe,+CAAOhB;;AAIZ,0GAAA,1GAACD,iPAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,4FAAWD;;AAEf,0GAAA,6IAAA,gDAAA,mFAAA,1XAACD,udAGC,WAAKmD,SAASjD;AAAd,AACE,0CAAA,nCAAC0B,0BAAUuB;;AAIf,0GAAA,1GAACnD,yOAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,uFAASD;;AAEb,0GAAA,2IAAA,gDAAA,mFAAA,xXAACD,6cAGC,WAAKoD,OAAOlD;AAAZ,sFACO,AAACkB,4CAAI,AAACiC,6CAAK9B,cAAI,oDAAA,sDAAA,mJAAA,7PAACoB,+JAAkBW,8JAAgChC,qBAC7D,AAAA,qGAAgB8B,pnBACrB,OAACtC,gDAAQyC,gBAAMC;;AAExB,0GAAA,iJAAA,gDAAA,mFAAA,qFAAA,gDAAA,mFAAA,tlBAACxD,wqBAIC,WAAAyD,SAAwBvD;AAAxB,AAAA,IAAAwD,aAAAD;aAAA,AAAAlD,4CAAAmD,WAAA,IAAA,pEAAMN;gBAAN,AAAA7C,4CAAAmD,WAAA,IAAA,vEAAaC;AAAb,AACE,IAAMC,aAAW,AAAA,4GAAmBR;IAC9BS,QAAW,wIAAA,8JAAA,4JAAA,hcACE,eAAA,dAAMD,qBAAY,AAACE,eAAK,AAAA,wFAAUV,WAClC,CAAGQ,aAAW,AAACL,gBAAMI,aAAY,AAACJ,gBAAM,AAAA,wFAAUH,WAGlD,CAAGQ,aAAW,AAACE,eAAKH,aAAY,AAACG,eAAK,AAAA,wFAAUV,SAC1C,AAACjD,4CAAI,AAAA,qGAAgBiD,QAAQQ;;AAPtD,AAQEC;;AAEN,0GAAA,qIAAA,gDAAA,mFAAA,lXAAC7D,ydAGC,WAAK+D,YAAY7D;AAAjB,AACE,OAAA,8FAAa6D;;AAEjB,0GAAA,iJAAA,gDAAA,mFAAA,9XAAC/D,ydAGC,WAAK6D,MAAM3D;AAAX,AACE,OAACoD,4CAAoBO;;AAEzB,0GAAA,kIAAA,gDAAA,mFAAA,/WAAC7D,sdAGC,WAAKgB,MAAMd;AAAX,AACE,4DAAA,mFAAA,qDAAA,7LAACe,+CAAOD;;AAEZ,0GAAA,4IAAA,gDAAA,mFAAA,zXAAChB,8cAGC,WAAKoD,OAAOlD;AAAZ,AACE,OAAC6B,gBAAM,mDAAA,nDAAC5B,4CAAIiD;;AAEhB,0GAAA,iJAAA,gDAAA,mFAAA,9XAACpD,mdAGC,WAAKoD,OAAOlD;AAAZ,AACE,OAAA,iHAAsBkD;;AAE1B,0GAAA,0IAAA,gDAAA,mFAAA,vXAACpD,kdAGC,WAAKoD,OAAOlD;AAAZ,AACE,OAAA,gFAAK,AAACqD,gBAAMH;;AAEhB,0GAAA,4HAAA,gDAAA,mFAAA,zWAACpD,8bAGC,WAAKoD;AAAL,AACE,OAAA,4FAAYA;;AAEhB,0GAAA,+IAAA,gDAAA,mFAAA,5XAACpD,udAGC,WAAK6D;AAAL,AACE,OAAA,gFAAK,AAACN,gBAAMM;;AAEhB,0GAAA,yIAAA,gDAAA,mFAAA,tXAAC7D,idAGC,WAAK6D;AAAL,AACE,OAAA,gFAAK,AAACC,eAAKD;;AAEf,0GAAA,uJAAA,gDAAA,mFAAA,gGAAA,gDAAA,mFAAA,vmBAAC7D,yrBAIC,WAAAgE;AAAA,AAAA,IAAAC,aAAAD;cAAA,AAAAzD,4CAAA0D,WAAA,IAAA,rEAAMC;UAAN,AAAA3D,4CAAA0D,WAAA,IAAA,jEAAcE;AAAd,AACE,SAAK,CAAA,MAAK,AAACpC,gBAAMoC,WACZ,EAAI,YAAA,XAAMD,sBACN,CAAGA,UAAQ,gDAAA,hDAAC3D,4CAAI4D;;AAE7B,0GAAA,yJAAA,gDAAA,mFAAA,gGAAA,gDAAA,mFAAA,zmBAACnE,2rBAIC,WAAAoE;AAAA,AAAA,IAAAC,aAAAD;cAAA,AAAA7D,4CAAA8D,WAAA,IAAA,rEAAMH;UAAN,AAAA3D,4CAAA8D,WAAA,IAAA,jEAAcF;AAAd,AACE,2CAAA,lCAAK,CAAA,MAAK,AAACpC,gBAAMoC,aACZ,GAAA,YAAA,XAAOD,wBACP,CAAGA,UAAQ,AAACI,0CAAkBH;;AAIvC,0GAAA,0IAAA,gDAAA,mFAAA,vXAACnE,+dAGC,WAAK8B;AAAL,AACE,IAAMyC,iBAAe,mDAAA,nDAAChE,4CAAIuB;IACpB0C,eAAe,AAACF,0CAAkBxC;AADxC,AAEE,OAAC2C,2CAAmBF,eAAeC;;AAEzC,0GAAA,qJAAA,gDAAA,mFAAA,lYAACxE,0eAGC,WAAK8B;AAAL,AACE,sDAAA,WAAA4C,1DAACC;AAAD,AAAS,SAAI,6DAAAD,7DAACE,oFACD,iEAAAF,jEAACG;GACN/C;;AAEZ,0GAAA,oJAAA,gDAAA,mFAAA,jYAAC9B,4eAGC,WAAK8E;AAAL,AACE,OAAC/C,gBAAM,AAAC4C,+CAAOC,6DAA+BE;;AAElD,AAAA;;;mCAAA,2CAAAC,9EAAcE;AAAd,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,iEAAA,jEAAcJ;AAAd,AAAA;;;AAAA,CAAA,iEAAA,jEAAcA,4EAGVW;AAHJ,AAGOA;;;AAHP,CAAA,iEAAA,jEAAcX,4EAIVW,EAAEC;AAJN,AAIS,QAAaD,IAAEC;;;AAJxB,AAAA,CAAA,wEAAA,xEAAcZ,mFAKVW,EAAEC,EAAIC;AALV,AAMG,OAACC,+CAAOC,iBAAE,CAAaJ,IAAEC,GAAGC;;;AAN/B;AAAA,CAAA,qDAAA,WAAAP,hEAAcN;AAAd,AAAA,IAAAO,WAAA,AAAAjC,gBAAAgC;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAAnC,gBAAAgC;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAE,SAAAH;;;AAAA,CAAA,2DAAA,3DAAcN;;AAAd,AAQA,0GAAA,kJAAA,gDAAA,mFAAA,2GAAA,gDAAA,mFAAA,7mBAACjF,qtBAIC,WAAAiG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;mBAAA,AAAA1F,4CAAA4F,WAAA,IAAA,1EAAME;mBAAN,AAAA9F,4CAAA4F,WAAA,IAAA,1EAAmBG;IAAnBF,aAAAF;QAAA,AAAA3F,4CAAA6F,WAAA,IAAA,/DAAkClG;mBAAlC,AAAAK,4CAAA6F,WAAA,IAAA,1EAAoCG;AAApC,AACE,IAAME,cAAY,kDAAA,lDAACC,sDAAYL;IAA/BG,aACkB,AAACjG,4CAAIkG,YAAY,gBAAA,fAAKF;YADxC,AAAAhG,4CAAAiG,WAAA,IAAA,nEACOG;UADP,AAAApG,4CAAAiG,WAAA,IAAA,jEACaI;IACPC,YAAY,6CAAA,7CAACzE,8EAAQ,AAAC0E,4CAAoB,AAAA,gFAAKH,OAAO,AAAA,gFAAKC,MAAMN;IACjES,aAAY,AAACtC,2CAAmBkC,MAAMC;IAGtCI,YAAY,AAACC,kDAAU,AAACtE,6CACC,AAACgC,+CAAOuC,mDACR,4CAAA,5CAAC9F,2GACH6D,iCAAK4B;IAC5BM,cAAY,AAACF,kDAAU,AAACtE,6CACC,AAACgC,+CAAO5B,6CACR,4CAAA,5CAAC3B,2GACH6D,iCAAK4B;AAblC,AAAA,kDAAA,8GAAA,yGAAA,gHAAA,pOAckCE,0GACAC,8GACAG,4GAEA,CAAA,CAAGJ,aAAWC,aAAUG;;AAE9D,0GAAA,oJAAA,gDAAA,mFAAA,jYAACnH,weAGC,WAAK6D;AAAL,AACE,IAAAuD,aAAsF,kDAAA,lDAACjH,4CAAI0D;IAA3FuD,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAjH,4CAAAiH,eAAA,xEAAuBE;yBAAvB,AAAAnH,4CAAAiH,eAAA,hFAAkCG;sBAAlC,AAAApH,4CAAAiH,eAAA,7EAAqDI;qBAArD,AAAArH,4CAAAiH,eAAA,5EAAqEK;IAQ/DC,yBAAuB,CAAA,CAAGJ,aAAWC,sBAAmBC;AAR9D,AAAA,kDAAA,4FAAA,oGAAA,mGAAA,mHAAA,zUAS8BC,gGACAF,sGACAC,4GACAE,mGAIA,CAAA,CAAGD,iBAAeF,sBAAmBC;;AAEvE,0GAAA,iIAAA,gDAAA,mFAAA,9WAACxH,sdAGC,WAAK8B;AAAL,AACE,IAAM6F,kBAAgB,AAACpE,gBAAM,AAACoB,+CAAOC,6DAA+B9C;IAC9D0C,eAAgB,AAACF,0CAAkBxC;AADzC,AAEE,OAAC2C,2CAAmBkD,gBAAgBnD;;AAE1C,0GAAA,uIAAA,gDAAA,mFAAA,pXAACxE,4dAGC,WAAK8B;AAAL,AACE,UAAK,AAAC8F,uBAAO9F;;AAIjB,0GAAA,1GAAC9B,wNAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,mFAAOD;;AAEX,0GAAA,kIAAA,gDAAA,mFAAA,/WAACD,udAGC,WAAK8B;AAAL,AACE,OAAC6C,+CAAOuC,kDAAoBpF;;AAEhC,0GAAA,yIAAA,gDAAA,mFAAA,tXAAC9B,2cAGC,WAAK6H;AAAL,AACE,OAAA,8GAAoBA;;AAExB,0GAAA,yHAAA,gDAAA,mFAAA,tWAAC7H,2bAGC,WAAKoD;AAAL,AACE,OAAA,8FAAYA;;AAEhB,0GAAA,qJAAA,gDAAA,mFAAA,lYAACpD,yeAGC,WAAK+D;AAAL,AACE,OAAA,8FAAYA;;AAEhB,AAAK+D,sCAAQ,AAAAC,8BAAA,AAAA,ynBAAA,2GAAA,WAAAC,nCAAOC;AAAP,AAAgB,UAAK,uBAAAD,vBAACJ;WAAtB;AAEb,AAAAM,yBAAA,AAAA,uDAAA,AAAA,0GAAeJ;AACf,AAAAI,yBAAA,AAAA,sEAAA,AAAA,0GAAuBJ;AACvB,AAAAI,yBAAA,AAAA,qEAAA,AAAA,mXAAA,iFAAA,8DAAA,qEAAA,oEAAA;AACA,AAAAA,yBAAA,AAAA,6DAAA,AAAA,6RAAkB,AAAAC,6BAAA,AAAA,iLAAW,AAAAC,yDAAA,AAAA,qEAAA,qEAAA,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAC;AAAA,AAAA,OAAAC,sBAAAD;+XAAX,5XAAW,8FAAA,KAAA,0FAAA,AAAA,yLAAA;AAC7B,AAAAH,yBAAA,AAAA,6DAAA,AAAA,+LAAkB,AAAAC,6BAAA,AAAA,4GAAA,zBAAWI;AAC7B,AAAAL,yBAAA,AAAA,oEAAA,AAAA,2EAAsBM;AACtB,AAAAN,yBAAA,AAAA,0DAAA,AAAA,0GAAiBJ;AACjB,AAAAI,yBAAA,AAAA,2DAAA,AAAA,2EAAkBM;AAClB,AAAAN,yBAAA,AAAA,+EAAA,AAAA,2EAA2BM;AAC3B,AAAAN,yBAAA,AAAA,iFAAA,AAAA,44BACE,AAAAO,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,gdAAA,AAAA,qOAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAA9G,0BAAA8G,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,EAAA,AAAA9G,0BAAA8G,SAAA,wDAAA,EAAA,AAAA9G,0BAAA8G,SAAA,uEAAA,EAAA,AAAA9G,0BAAA8G,SAAA,8DAAA,EAAA,AAAA9G,0BAAA8G,SAAA,8DAAA,EAAA,AAAA9G,0BAAA8G,SAAA,qEAAA,AAAA9G,0BAAA8G,SAAA;GAAA,AAAA,2NAAA,AAAA,gdAAA,AAAA,KAAA,AAAA,kbAAA,AAAA,qOAAA,AAAA,6gGAAA,AAAA;AAEF,AAAAR,yBAAA,AAAA,qEAAA,AAAA,6LAAuB,AAAAE,yDAAA,AAAA,iFAAA,iFAAA,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAQ;AAAA,AAAA,OAAAN,sBAAAM;GAAA,8FAAA,KAAA,0FAAA,AAAA,qMAAA;AAEvB,wCAAA,xCAAMC,wFACHC;AADH,AAEE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAOF;;;8CAAA,9CAAME,oGAUHC;AAVH,AAWE,UAAA,NAAOC;YAAP,RACOC;IACAF,YAAMA;;AAFb,AAGE,IAAAG,qBAAkB,AAAC9F,gBAAM2F;AAAzB,AAAA,oBAAAG;AAAA,eAAAA,XAASP;AAAT,AACE,eAAO,OAAA,NAAKK;eAAK,CAAGC,QAAM,CAAG,AAACP,sCAAeC,YAAU,SAAA,TAACQ,cAAeH;eAAO,AAACI,eAAKL;;;;;;AACpFE;;;;;AAEN,AAAKI,uDACH,AAACC,kBAAQR;AAEX,sCAAA,tCAAMS,oFAAcC,QAAQC;AAA5B,AAEE,OAACC,kBAAQ,AAACL,qDAA8BI,SAC/B,AAACJ,qDAA8BG;;AAE1C,8CAAA,9CAAMG,oGAAmBC;AAAzB,AACE,IAAAC,WAAM,AAAA,0FAAUD;IAAhBC,eAAA,EAAA,CAAAA,oBAAAhB,oBAAA,AAAAgB,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAOF;;;0CAAA,kDAAAC,SAAAC,rGAAMG;AAAN,AAAA,IAAAF,aAAAF;eAAA,AAAA1J,4CAAA4J,WAAA,IAAA,tEAEIG;gBAFJ,AAAA/J,4CAAA4J,WAAA,IAAA,vEAEaI;IAFbH,aAAAF;mBAAA,AAAA3J,4CAAA6J,WAAA,IAAA,1EAEyBI;AAFzB,AAGE,IAAMC,YAAU,EAAI,0DAAA,1DAACC,6CAAEF,oGACL,WAAKG;AAAL,AAAS,oHAAA,5GAAM,AAAA,sFAAQ,AAACrJ,cAAIqJ;GAC5B,qBAAA,rBAACC;IACbC,mJAEe,AAACzJ,4CAAI,WAAKuJ,nMAgBV,gDAAA,hDAAC7J,wGAAe4I;AAhBX,AAAS,IAAMoB,QAAa,AAACxJ,cAAIqJ;IAClBH,mBAAa,AAAA,mGAAeM;UADlC,2CAAA,oEAAA,mFAAA,sSAAA,gFAAA,oLAAA,lvBAEMC,mGAA0B,AAACxJ,cAAIoJ,qEACL,AAACpJ,cAAIoJ,4DACL,wDAAA,qHAAA,7KAAC1J,+CAAOqJ,4FAAU,AAAC/G,gBAAMiH,kJACzBA,sEACA,AAACQ,wGAAOR,+EACR,iBAAAS,mBAAI,AAAA,sFAAQH;AAAZ,AAAA,oBAAAG;AAAAA;;AAAA,0FAAA;;KAPhC,8DAQgC,AAAA,4FAAaH;IACvCC,UAAa,EAAI,gCAAA,hCAACnJ,0BAAUkJ,8DACb,kDAAA,lDAACzJ,8CAAM0J,0DAAW,AAAA,oFAAQD,QAC1BC;IACfA,UAAa,EAAI,gCAAA,hCAACnJ,0BAAUkJ,kFACb,sDAAA,tDAACzJ,8CAAM0J,kFAAoB,AAAA,wGAAiBD,QAC5CC;AAdrB,AAeEA;4DAjBhBR,zDACA,AAACzH,+CAAO2H;AAJ7B,AAuBEI;;AAGJ,0GAAA,mIAAA,gDAAA,mFAAA,hXAAC7K,2dAGC,WAAKuK;AAAL,AACE,OAAA,wGAAkBA;;AAEtB,0GAAA,iIAAA,gDAAA,mFAAA,9WAACvK,ydAGC,WAAKuK;AAAL,AACE,OAAA,sGAAiBA;;AAErB,0GAAA,uIAAA,gDAAA,mFAAA,+FAAA,gDAAA,mFAAA,tlBAACvK,+qBAICqK;AAEF,0GAAA,sHAAA,gDAAA,mFAAA,+FAAA,gDAAA,mFAAA,rkBAACrK,4pBAICqK;AAGF,0GAAA,0HAAA,gDAAA,mFAAA,vWAACrK,2aAGC,WAAK6B,KAAK3B;AAAV,AACE,OAAA,+FAAa2B;;AAGjB,0GAAA,+HAAA,gDAAA,mFAAA,4EAAA,gDAAA,mFAAA,+GAAA,gDAAA,mFAAA,gFAAA,gDAAA,mFAAA,hgCAAC7B,4kCAMC,WAAAkL;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAA3K,4CAAA4K,WAAA,IAAA,tEAAMC;iCAAN,AAAA7K,4CAAA4K,WAAA,IAAA,xFAAeE;iBAAf,AAAA9K,4CAAA4K,WAAA,IAAA,xEAAoCG;WAApC,AAAA/K,4CAAA4K,WAAA,IAAA,lEAA+CI;AAA/C,AACE,IAAMC,aAAW,WAAKC,GAAGC;AAAR,AACE,IAAMC,KAAG,AAACC,mBAAQ,oDAAA,uKAAA,3NAAC3K,+CAAOsK,wFAAM,AAAA,gFAAKE;IAC/BI,KAAG,AAACD,mBAAQ,oDAAA,uKAAA,3NAAC3K,+CAAOsK,wFAAM,AAAA,gFAAKG;AADrC,AAEE,GAAI,AAAChB,6CAAEiB,GAAGE;AACR,OAAChC,kBAAQ,AAAA,mFAAO4B,IAAI,AAAA,mFAAOC;;AAC3BC;;;AALvB,AAME,IAAAG,WAAS,AAACC,6CAAKP,WAAWJ;IAA1BU,eAAA,sKAAAA,pJACST,4BAAqB,8GAAAS,9GAAChJ,+CAAOkJ;AADtC,AAAA,oBAES,AAACC,oBAAUX;AAAY,OAAC3G,+CAAO,WAAAuH;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA9E,4BAAA8E;WAAA,AAAAhM,4CAAAgM,eAAA,lEAAaxK;SAAb,AAAAxB,4CAAAgM,eAAA,hEAAkBC;AAAlB,AACE,IAAAnB,mBAAI,AAACoB,+BAAc1K,KAAK2J;AAAxB,AAAA,GAAAL;AAAAA;;AACI,2DAAA,sFAAA,1IAAChK,+CAAOsK,wFAAMa;;GAF5BN;;AAFhCA;;;AAMN,0GAAA,yHAAA,gDAAA,mFAAA,tWAAC9L,2bAGC,WAAKsM,KAAKpM;AAAV,6LACOoM,hKACA,sDAAA,tDAACC,7BACD,OAACC;;AAEV,0GAAA,iIAAA,gDAAA,mFAAA,9WAACxM,6bAGC,WAAKyM;AAAL,AACE,0DAAA,+DAAA,lHAACtM,4CAAIsM;;AAET,0GAAA,6HAAA,gDAAA,mFAAA,1WAACzM,ybAGC,WAAKyM;AAAL,AACE,0DAAA,yDAAA,5GAACtM,4CAAIsM;;AAET,0GAAA,oIAAA,gDAAA,mFAAA,jXAACzM,gcAGC,WAAKyM;AAAL,AACE,0DAAA,+DAAA,lHAACtM,4CAAIsM;;AAET,0GAAA,gIAAA,gDAAA,mFAAA,7WAACzM,4bAGC,WAAKyM;AAAL,AACE,0DAAA,gEAAA,nHAACtM,4CAAIsM;;AAET,0GAAA,qJAAA,gDAAA,mFAAA,lYAACzM,8cAGC,WAAKsM;AAAL,AACE,OAACvK,gBAAM,AAAC4C,+CAAOqH,+DAAiCM;;AAEpD,0GAAA,yJAAA,gDAAA,mFAAA,tYAACtM,0cAGC,WAAKsM,KAAKpM;AAAV,AACE,OAAA,2HAAA,LAAyBoM;;AAE7B,0GAAA,kIAAA,gDAAA,mFAAA,/WAACtM,mbAGC,WAAKsM,KAAKpM;AAAV,AACE,OAAA,8FAAaoM;;AAEjB,0GAAA,sHAAA,gDAAA,mFAAA,nWAACtM,uaAGC,WAAKsM,KAAKpM;AAAV,AACE,OAAA,wFAASoM;;AAIb,0GAAA,1GAACtM,wNAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,mFAAOD;;AAEX,0GAAA,4HAAA,gDAAA,mFAAA,zWAACD,idAGC,WAAK8B,OAAO5B;AAAZ,AACE,OAACwM,qDAAa,WAAKC,EAAE3L;AAAP,AACE,IAAA4L,qBAAiB,qDAAA,mFAAA,qDAAA,7LAAC3L,+CAAOD;AAAzB,AAAA,GAAA,CAAA4L,sBAAA;AAAA;;AAAA,WAAAA,PAAYC;AAAZ,AAAA,kDAAA,oDAAA,mJAAA,qQAAA,1ZACaF,8DACA,AAAA,gFAAK3L,6DACL,AAACgK,wGAAO,AAAA,0FAAUhK,kEAClB,cAAU,AAAC8L,oDAAY,WAAKH,MAAEE,nFAA2BE;AAAlC,AAAa,8DAAA,vDAAC1L,8CAAMwL,2DAASF;UAJjE,PAIkBE,6DACL,qDAAA,mFAAA,qDAAA,7LAAC5L,+CAAOD;;GACvBc;;AAElB,0GAAA,8HAAA,gDAAA,mFAAA,3WAAC9B,6bAGC,WAAK6M,KAAK3M;AAAV,AACE,OAAA,oFAAO,AAACqD,gBAAMsJ;;AAElB,0GAAA,6IAAA,gDAAA,mFAAA,1XAAC7M,8cAGC,WAAKgN,KAAK9M;AAAV,AACE,OAAC+M,uBAAcD;;AAEnB,0GAAA,uIAAA,gDAAA,mFAAA,pXAAChN,wbAGA,WAAK6M,KAAK3M;AAAV,AACE,wDAAA,8EAAA,/HAACC,4CAAI0M;;AAER,0GAAA,0HAAA,gDAAA,mFAAA,vWAAC7M,2aAGC,WAAK6M,KAAK3M;AAAV,AACE,OAAA,+FAAa2M;;AAEjB,0GAAA,uIAAA,gDAAA,mFAAA,pXAAC7M,wbAGC,WAAK6M,KAAK3M;AAAV,AACE,OAAA,4GAAmB2M;;AAEvB,0GAAA,iIAAA,gDAAA,mFAAA,9WAAC7M,kbAGC,WAAK6M,KAAK3M;AAAV,AACE,OAAA,sGAAiB2M;;AAErB,0GAAA,kIAAA,gDAAA,mFAAA,/WAAC7M,mbAGC,WAAK6M,KAAK3M;AAAV,AACE,OAAA,uGAAiB2M;;AAErB,AAAKK,gCAAO,uBAAA,vBAACC;AAEb,0GAAA,1GAACnN,4PAEC,WAAKE,EAAEA;AAAP,AACE,IAAMkN,UAAQ,yCAAA,zCAAaF;AAA3B,AACE,gBAAA,fAAM,AAAQE;;AACd,OAAS,oBAAA,pBAAcA;;AAE7B,0GAAA,sIAAA,gDAAA,mFAAA,oGAAA,cAAA,gDAAA,mFAAA,xmBAACpN,gtBAMC,WAAAqN,SAA+BnN;AAA/B,AAAA,IAAAoN,aAAAD;mBAAA,AAAA9M,4CAAA+M,WAAA,IAAA,1EAAMC;iBAAN,AAAAhN,4CAAA+M,WAAA,IAAA,xEAAmBE;AAAnB,AACE,OAAC9M,UAAU,CAAG6M,eACAC;;AAIlB,0GAAA,1GAACxN,mOAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,6FAAYD;;AAEhB,0GAAA,iIAAA,gDAAA,mFAAA,9WAACD,6bAGC,WAAKyN,UAAUvN;AAAf,AACE,OAAA,6FAAYuN;;AAIhB,0GAAA,1GAACzN,6NAEC,WAAKC,GAAGC;AAAR,AACE,OAAA,uFAASD;;AAEb,0GAAA,oIAAA,gDAAA,mFAAA,jXAACD,0bAGC,WAAK0N,OAAOxN;AAAZ,AACE,OAAA,qGAAgBwN;;AAIpB,0GAAA,1GAAC1N,qPAEC,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACe,+CAAOhB","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","db","_","cljs.core.get","settings","p__20699","vec__20700","cljs.core.nth","panel-width%","n","Math/ceil","p__20703","vec__20704","width","cljs.core.sort_by","cljs.core/vals","trace","cljs.core.get_in","app-db-settings","p1__20707#","cljs.core.map","cljs.core.assoc","cljs.core/val","cljs.core/key","p__20708","vec__20709","expansions","path","cljs.core/contains?","root","traces","cljs.core/count","p__20712","vec__20713","beginning","ending","cljs.core.into","day8.re-frame-10x.utils.utils/id-between-xf","p__20716","vec__20717","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","day8.re-frame-10x.metamorphic/render?","cljs.core.subs","clojure.string.last_index_of","trace-root","snapshot","epochs","cljs.core.juxt","day8.re-frame-10x.metamorphic/matched-event","cljs.core/first","cljs.core/>","p__20726","vec__20727","match-ids","current-id","match","cljs.core/last","match-state","p__20743","vec__20744","current","ids","p__20747","vec__20748","day8.re-frame-10x.utils.utils/last-in-vec","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","p1__20751#","cljs.core.filter","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","frame-traces","var_args","G__20756","day8.re-frame-10x.subs/+nil","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq20753","G__20754","cljs.core/next","G__20755","self__4851__auto__","x","y","more","cljs.core.reduce","cljs.core/+","p__20765","p__20766","vec__20767","vec__20770","af-start-end","epoch-traces","frame-number","vec__20774","frame-pairs","cljs.core.partition","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","day8.re-frame-10x.metamorphic/subscription?","render-time","map__20778","cljs.core/--destructure-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","start-of-render","cljs.core/empty?","epoch","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__20786#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__20792","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__20793","cljs.core/map?","G__20814","day8.re-frame-10x.subs/sub-type-value","sub-type","G__20815","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5751__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__20816","p__20817","p__20818","vec__20819","vec__20822","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/constantly","subx","state","sub","cljs.core.pr_str","or__4253__auto__","p__20825","vec__20826","all-subs","ignore-unchanged-l2?","filter-str","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__20829","cljs.core.sort","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__20830","map__20831","id","clojure.string/includes?","subs","cljs.core.mapcat","cljs.core/frequencies","counts","cljs.core.keep_indexed","i","temp__5757__auto__","code","cljs.core.map_indexed","cljs.core/vec","form","zprint.core/zprint-str","day8.re-frame-10x.subs/canvas","js/document.createElement","context","p__20837","vec__20838","window-width","char-width","component","errors"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/all-events-by-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              (:matches-by-id epochs))\n         (sort-by first >))))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n  :subs/filter-str\n  :<- [:subs/root]\n  (fn [root _]\n    (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n               ignore-unchanged-l2? (remove metam/unchanged-l2-subscription?)\n               (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                                (or (str/includes? path filter-str)\n                                                    (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n :code/execution-order?\n :<- [:code/root]\n (fn [code _]\n   (get code :execution-order? true)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  :code/max-column-width\n  :<- [:settings/window-width-rounded 100]\n  :<- [:code/single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n\n;;\n\n(rf/reg-sub\n  :history/showing-history?\n  (fn [db _]\n    (get-in db [:history :showing-history?])))\n"]}