{"version":3,"sources":["day8/re_frame_10x/db.cljs"],"mappings":";AAIA,+BAAA,/BAAMA,sEAASC;AAAf,AACE,IAAMC,uBAA2B,uEAAA,oBAAA,3FAACC;IAC5BC,oBAA2B,uEAAA,aAAA,pFAACD;IAC5BE,eAA2B,uEAAA,eAAA,tFAACF;IAC5BG,eAA2B,uEAAA,eAAA,tFAACH;IAC5BI,eAA2B,AAACC,6CAAK,AAACC,uBAAY,uEAAA,eAAA,tFAACN;IAC/CO,gBAA2B,uEAAA,4BAAA,nGAACP;IAC5BQ,yBAA2B,uEAAA,mBAAA,1FAACR;IAC5BS,6BAA2B,uEAAA,6BAAA,2CAAA,uDAAA,MAAA,yDAAA,MAAA,oDAAA,IAAA,qDAAA,xXAACT;IAC5BU,2BAA2B,uEAAA,qBAAA,5FAACV;IAC5BW,qBAA2B,uEAAA,eAAA,tFAACX;IAC5BY,iBAA2B,uEAAA,iBAAA,xFAACZ;IAC5Ba,kBAA2B,uEAAA,kBAAA,2CAAA,2DAAA,KAAA,8DAAA,lQAACb;IAC5Bc,sBAA2B,uEAAA,vEAACd,6FAAuC,iBAAMe,MAAI,AAACC;IACLC,MAAI,AAACD;AADX,AAAA,2DAAA,2CAAA,sDAAA,0DAAA,aAAA,gDAAA,AAAA,qEAAA,oDAAA,gBAAA,2CAAA,sDAAA,0DAAA,oBAAA,gDAAA,AAAA,oFAAA,oDAAA,5sBAEGD,iGAASA,gQACTE,iGAASA;;IAC/EC,aAA2B,uEAAA,kBAAA,zFAAClB;IAC5BmB,wBAA2B,uEAAA,yBAAA,hGAACnB;IAC5BoB,aAA2B,uEAAA,aAAA,iFAAA,8DAAA,oEAAA,2DAAA,lWAACpB;AAlBlC,AAmBE,oBAAMW;AAAN,AACE,sEAAA,mFAAA,zJAACU;;AADH;;AAEA,sEAAA,mFAAA,zJAACA,8OAAoCtB;;AACrC,sEAAA,mFAAA,zJAACsB,2OAAmCpB;;AACpC,sEAAA,mFAAA,zJAACoB,6OAAoCnB;;AACrC,sEAAA,mFAAA,zJAACmB,wPAA0CT;;AAC3C,sEAAA,mFAAA,zJAACS,mQAA+CP;;AAChD,sEAAA,mFAAA,zJAACO,2PAA2CR;;AAC5C,sEAAA,mFAAA,zJAACQ,gRAAqDH;;AACtD,sEAAA,mFAAA,zJAACG,iQAA8CF;;AAC/C,sEAAA,mFAAA,zJAACE,iOAA8BvB;;AAE/B,sEAAA,mFAAA,zJAACuB,yQAAkDZ;;AACnD,oBAAMD;AAAN,AACE,sEAAA,mFAAA,zJAACa;;AADH;;AAEA,sEAAA,mFAAA,zJAACA,wOAAkClB;;AACnC,sEAAA,mFAAA,zJAACkB,8OAAoCD;;AACrC,sEAAA,mFAAA,zJAACC,8QAAoDX;;AACrD,sEAAA,mFAAA,zJAACW,4NAA2BjB;;AAC5B,sEAAA,mFAAA,zJAACiB,kPAAuCd;;AACxC,sEAAA,mFAAA,zJAACc;;AACD,6EAAA,mFAAA,zJAACA","names":["day8.re-frame-10x.db/init-db","debug?","panel-width%","day8.re_frame_10x.utils.localstorage.get","show-panel?","selected-tab","filter-items","app-db-paths","cljs.core.into","cljs.core/sorted-map","json-ml-paths","external-window?","external-window-dimensions","show-epoch-traces?","using-trace?","ignored-events","low-level-trace","filtered-view-trace","id1","cljs.core/random-uuid","id2","num-epochs","follows-events?","categories","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch"],"sourcesContent":["(ns day8.re-frame-10x.db\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]))\n\n(defn init-db [debug?]\n  (let [panel-width%               (localstorage/get \"panel-width-ratio\" 0.35)\n        show-panel?                (localstorage/get \"show-panel\" true)\n        selected-tab               (localstorage/get \"selected-tab\" :event)\n        filter-items               (localstorage/get \"filter-items\" [])\n        app-db-paths               (into (sorted-map) (localstorage/get \"app-db-paths\" {}))\n        json-ml-paths              (localstorage/get \"app-db-json-ml-expansions\" #{})\n        external-window?           (localstorage/get \"external-window?\" false)\n        external-window-dimensions (localstorage/get \"external-window-dimensions\" {:width 800 :height 800 :top 0 :left 0})\n        show-epoch-traces?         (localstorage/get \"show-epoch-traces?\" true)\n        using-trace?               (localstorage/get \"using-trace?\" true)\n        ignored-events             (localstorage/get \"ignored-events\" {})\n        low-level-trace            (localstorage/get \"low-level-trace\" {:reagent true :re-frame true})\n        filtered-view-trace        (localstorage/get \"filtered-view-trace\" (let [id1 (random-uuid)\n                                                                                 id2 (random-uuid)]\n                                                                             {id1 {:id id1 :ns-str \"re-com.box\" :ns 're-com.box :sort 0}\n                                                                              id2 {:id id2 :ns-str \"re-com.input-text\" :ns 're-com.input-text :sort 1}}))\n        num-epochs                 (localstorage/get \"retained-epochs\" 25)\n        follows-events?            (localstorage/get \"app-db-follows-events?\" true)\n        categories                 (localstorage/get \"categories\" #{:event :sub/run :sub/create :sub/dispose})]\n    (when using-trace?\n      (rf/dispatch [:global/enable-tracing]))\n    (rf/dispatch [:settings/panel-width% panel-width%])\n    (rf/dispatch [:settings/show-panel? show-panel?])\n    (rf/dispatch [:settings/selected-tab selected-tab])\n    (rf/dispatch [:settings/set-ignored-events ignored-events])\n    (rf/dispatch [:settings/set-filtered-view-trace filtered-view-trace])\n    (rf/dispatch [:settings/set-low-level-trace low-level-trace])\n    (rf/dispatch [:settings/set-number-of-retained-epochs num-epochs])\n    (rf/dispatch [:settings/app-db-follows-events? follows-events?])\n    (rf/dispatch [:settings/debug? debug?])\n    ;; Important that window dimensions are set before we open an external window.\n    (rf/dispatch [:settings/external-window-dimensions external-window-dimensions])\n    (when external-window?\n      (rf/dispatch [:global/launch-external]))\n    (rf/dispatch [:traces/filter-items filter-items])\n    (rf/dispatch [:traces/set-categories categories])\n    (rf/dispatch [:trace-panel/update-show-epoch-traces? show-epoch-traces?])\n    (rf/dispatch [:app-db/paths app-db-paths])\n    (rf/dispatch [:app-db/set-json-ml-paths json-ml-paths])\n    (rf/dispatch [:global/add-unload-hook])\n    (rf/dispatch [:app-db/reagent-id])))\n"]}