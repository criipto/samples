{"version":3,"sources":["cljs_re_frame/events.cljs"],"mappings":";AAUA,oCAAA,pCAAKA;AAEL,AAAKC,kCAAWC;AAEhB,6CAAA,7CAAKC,gIACF,AAACC,oBAAS,AAACC,6DAA+BJ;AAE7C,gDAAA,hDAAKK,mIACF,AAACF,oBAAS,AAACG,iEAAmCN;AAEjD,0CAAA,1CAAMO,4FAAoBC;AAA1B,AACE,IAAAC,WAAS,AAAUT,wCAAWQ;AAA9B,AAAA,GAAA,CAAAC,YAAA;AAAA;;AAAA,6DAAAA,tDACSC;;;AAEX,uBAAA,vBAACC,6IAEA,WAAKC,KAAKC;AAAV,AACE,IAAMC,QAAM,AAACP,wCAAmBQ;AAAhC,AACE,IAAAC,WAAQJ;AAAR,AAAA,GACE,GAAA,UAAA,TAAOE;AAAO,qDAAAE,SAAA,vDAACC,6KAA0BH;;AAD3CE;;;AAGL,yDAAA,zDAACE,0KAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBX;kBAAnB,AAAAY,4CAAAD,WAAA,IAAA,zEAAqBG;AAArB,AAAA,kDAAA,kSAAA,oEAAA,2CAAA,jWACO,sBAAA,mFAAA,kDAAA,3JAACC,mBAASF,kNAAuBC,iLACjB,AAACE,8BAAgBF;;AAEzC,sDAAA,tDAAMG,oHAA6BC;AAAnC,AACE,qCAAA,mFAAA,qDAAA,+DAAA,mDAAA,mFAAA,3WAACC,sBAAYD;;AAEf,yDAAA,zDAACb,yHAEAhB,2CACA,WAAA+B,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAb,4BAAAa;YAAAA,RAAqBE;SAArB,AAAAd,4CAAAY,eAAA,hEAAaT;IAAbU,aAAAF;QAAA,AAAAT,4CAAAW,WAAA,IAAA,/DAA6BvB;aAA7B,AAAAY,4CAAAW,WAAA,IAAA,pEAA+BE;AAA/B,AACE,IAAMC,eAAQ,AAACC,6BAAgBF;IACzBG,gBAAc,iBAAAC,WAAQH;IAARG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,0FAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,oDAAAA,7CAEQC;;;AAH5B,AAAA,kDAAA,iHAIWjB,nBACA,sBAAA,mFAAA,qFAAA,gEAAA,2CAAA,gEAAA,zWAACE,4VACeW,sEAAgBE,hdAChC,ueAAA,veAACxB,6iBAAoB,iBAAA2B,WAAQH;IAARG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,yFAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,2DAAAA,pDAEQd;;MATxC,6DAAA,mFAAA,iHAAA;;AAYH,yDAAA,zDAACe,4IAEA,cAAAC,HAAKpB;AAAL,AAAA,IAAAqB,aAAAD;QAAA,AAAArB,4CAAAsB,WAAA,IAAA,/DAASlC;oBAAT,AAAAY,4CAAAsB,WAAA,IAAA,3EAAWC;AAAX,AACE,wDAAA,jDAAC/B,8CAAMS,uGAAgCsB;;AAE1C,yDAAA,6GAAA,tKAAC9B,yPAEC,wDAAA,xDAAC+B,uLACF,WAAAC,SAA6CrC;AAA7C,AAAA,IAAAsC,aAAAD;IAAAC,iBAAA,AAAA7B,4BAAA6B;YAAAA,RAAsCd;IAAtCe,oBAAA,AAAA7B,4CAAA4B,eAAA;AAAA,AACE,IAAME,eAAa,iBAAAC,WAAQF;IAARE,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,0FAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,oDAAAA,7CAEQX;;;AAF3B,AAAA,kDAAA,iHAGWY,nBACA,+CAAA,mFAAA,qFAAA,gEAAA,2CAAA,qEAAA,vYAAC3B,qXAA8CwB,2EAA0BC,9eACzE,ogBAAA,pgBAACpC,0kBAAoB,iBAAAuC,WAAQH;IAARG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,yFAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,2DAAAA,pDAEQ1B;;;;AAE3C,qBAAA,rBAAC2B,yFAEA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAArC,4BAAAqC;WAAA,AAAApC,4CAAAoC,eAAA,lEAAaC;AAAb,AACE,OAACC,qCAAkBD;;AAEtB,yDAAA,zDAAC1C,sKAEA,WAAA4C,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA1C,4BAAA0C;YAAAA,RAAqB3B;SAArB,AAAAd,4CAAAyC,eAAA,hEAAatC;IAAbuC,aAAAF;QAAA,AAAAtC,4CAAAwC,WAAA,IAAA,/DAA6BpD;IAA7BqD,aAAA,AAAAzC,4CAAAwC,WAAA,IAAA;IAAAC,iBAAA,AAAA5C,4BAAA4C;cAAA,AAAA3C,4CAAA2C,eAAA,rEAAuCC;AAAvC,AACE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,mVAAA,oEAAA,2CAAA,lZACa,sBAAA,mFAAA,kDAAA,0EAAA,rOAACxC,mBAASF,obACM,8BAAA,9BAACG;;;KAF9B;AAAA,kDAAA,kVAAA,6DAAA,mFAAA,lbAGiB,sBAAA,mFAAA,kDAAA,0EAAA,rOAACD,mBAASF;;;KAH3B;AAAA,kDAAA,mVAAA,6DAAA,mFAAA,nbAKiB,sBAAA,mFAAA,kDAAA,0EAAA,rOAACE,mBAASF;;;;AAL3B,kDAAA,gDAOO,sBAAA,mFAAA,kDAAA,3JAACE,mBAASF,kNAAuByC;;;;AAE3C,yDAAA,zDAACjD,sKAEA,WAAAoD,SAAkBzD;AAAlB,AAAA,IAAA0D,aAAAD;IAAAC,iBAAA,AAAAjD,4BAAAiD;SAAA,AAAAhD,4CAAAgD,eAAA,hEAAa7C;AAAb,AAAA,kDAAA,8RAAA,iEAAA,2CAAA,uDAAA,mDAAA,qFAAA,+NAAA,iEAAA,mFAAA,qIAAA,gEAAA,mFAAA,gIAAA,pyCACO,sBAAA,mFAAA,2DAAA,oEAAA,xOAACE,mBAASF,oeAEI3B,6GACY,+BAAA,2CAAA,4DAAA,tIAACyE;;AAInC,yDAAA,zDAAC3B,sLAEA,cAAA4B,HAAK/C;AAAL,AAAA,IAAAgD,aAAAD;QAAA,AAAAhD,4CAAAiD,WAAA,IAAA,/DAAS7D;eAAT,AAAAY,4CAAAiD,WAAA,IAAA,tEAAWC;AAAX,AACE,IAAMC,eAAa,AAAA,0FAAWlD;IACxBmD,qXAAkBF,7BACAnC,zPAEA,+JAAA,AAAA,0FAAA,zPAACsC,4CAAI,6CAAA,7CAACC,+FAASC,3NACf,6CAAA,7CAACC;IACnBC,mBAAiB,AAACC,0DAAWC,kEAAMR,aAAaC;AANtD,wEAOMnD,nBACA,sBAAA,mFAAA,2DAAA,oEAAA,xOAACE,rDACD,oSAAA,7RAACX,yVAAgBiE;;AAE1B,yDAAA,zDAACrC,yLAEA,cAAAwC,HAAK3D;AAAL,AAAA,IAAA4D,aAAAD;QAAA,AAAA5D,4CAAA6D,WAAA,IAAA,/DAASzE;mBAAT,AAAAY,4CAAA6D,WAAA,IAAA,1EAAWC;eAAX,AAAA9D,4CAAA6D,WAAA,IAAA,tEAAwBE;AAAxB,6CACM9D,nBACA,sBAAA,mFAAA,zGAACE,kKAAkB2D,qBAAc,qDAAA,rDAAChE,4CAAIiE,7PACtC,4UAAA,mFAAA,gFAAA,xeAAC5D,mdAAmB2D;;AAE3B,yDAAA,zDAACrE,yJAEAb,8CACA,WAAAoF,SAAkB5E;AAAlB,AAAA,IAAA6E,aAAAD;IAAAC,iBAAA,AAAApE,4BAAAoE;SAAA,AAAAnE,4CAAAmE,eAAA,hEAAahE;AAAb,AAAA,kDAAA,4TAAA,6DAAA,mFAAA,iHAAA,7gBACO,yDAAA,uIAAA,hMAACiE,sDAAOjE;;AAGhB,yDAAA,zDAACmB,sKAEA,cAAA+C,HAAKlE;AAAL,AAAA,IAAAmE,aAAAD;QAAA,AAAAnE,4CAAAoE,WAAA,IAAA,/DAAShF;SAAT,AAAAY,4CAAAoE,WAAA,IAAA,hEAAWC;AAAX,AACE,6BAAA,mFAAA,+DAAA,+DAAA,vOAAClE,mBAASF,kJAAcoE","names":["cljs-re-frame.events/messages-url","cljs-re-frame.events/js-storage","js/sessionStorage","cljs-re-frame.events/set-token-interceptor","re-frame.core/after","Authentication.authentication/save-token-to-js-storage!","cljs-re-frame.events/remove-token-interceptor","Authentication.authentication/remove-token-from-js-storage!","cljs-re-frame.events/read-local-storage","k","G__22077","cljs.reader.read_string","re-frame.core/reg-cofx","cofx","_","token","Authentication.authentication/js-storage-key-for-auth","G__22079","cljs.core.assoc","re_frame.core.reg_event_fx","p__22080","p__22081","map__22082","cljs.core/--destructure-map","cljs.core.get","vec__22083","cljs.core.nth","db","active-page","cljs.core/assoc-in","cljs-re-frame.router/path-for","cljs-re-frame.events/token-payload->user-profile","payload","cljs.core/select-keys","p__22086","p__22087","map__22088","vec__22089","_cofx","result","result*","clojure.walk/keywordize-keys","parsed-result","G__22092","Authentication.authentication/parse-id-token","G__22093","re_frame.core.reg_event_db","p__22094","vec__22095","error-message","re_frame.core.inject_cofx","p__22098","map__22099","local-store-token","parsed-token","G__22100","cljs-re-frame.db/default-db","G__22101","re-frame.core/reg-fx","p__22102","map__22103","path","cljs-re-frame.router/set-token!","p__22104","p__22105","map__22106","vec__22107","map__22110","handler","G__22111","cljs.core/Keyword","p__22112","map__22113","ajax.core/json-response-format","p__22115","vec__22116","messages","old-messages","new-messages","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","updated-messages","cljs.core.merge_with","cljs.core/merge","p__22120","vec__22121","request-type","response","p__22124","map__22125","cljs.core.dissoc","p__22126","vec__22127","id"],"sourcesContent":["(ns cljs-re-frame.events\n  (:require [ajax.core :as ajax]\n            [Authentication.authentication :as auth]\n            [cljs-re-frame.db :as db]\n            [cljs-re-frame.router :as router]\n            [cljs.reader :refer [read-string]]\n            [clojure.walk :refer [keywordize-keys]]\n            [day8.re-frame.http-fx]\n            [re-frame.core :as rf]))\n\n(def messages-url \"https://criipto-bank.netlify.app/feliz/messages.json\")\n\n(def js-storage js/sessionStorage)\n\n(def set-token-interceptor\n  [(rf/after (auth/save-token-to-js-storage! js-storage))])\n\n(def remove-token-interceptor\n  [(rf/after (auth/remove-token-from-js-storage! js-storage))])\n\n(defn read-local-storage [k]\n  (some->> (.getItem js-storage k)\n           read-string))\n\n(rf/reg-cofx\n ::local-store-token\n (fn [cofx _]\n   (let [token (read-local-storage auth/js-storage-key-for-auth)]\n     (cond-> cofx\n       (some? token) (assoc ::local-store-token token)))))\n\n(rf/reg-event-fx\n ::set-active-page\n (fn [{:keys [db]} [_ active-page]]\n   {:db (assoc-in db [:nav :active-page] active-page)\n    :navigate-to {:path (router/path-for active-page)}}))\n\n(defn token-payload->user-profile [payload]\n  (select-keys payload [:name :birthdate :age :cprNumberIdentifier :country]))\n\n(rf/reg-event-fx\n :authorized\n set-token-interceptor\n (fn [{:keys [db] :as _cofx} [_ result]]\n   (let [result* (keywordize-keys result)\n         parsed-result (some-> result*\n                               :id_token\n                               auth/parse-id-token)]\n     {:db (-> db\n              (assoc-in [:authorization-result :token]\n                        {:raw result* :parsed parsed-result})\n              (assoc :user-profile (some-> parsed-result\n                                           :payload\n                                           token-payload->user-profile)))\n      :dispatch [::set-active-page :overview]})))\n\n(rf/reg-event-db\n :authorization-error\n (fn [db [_ error-message]]\n   (assoc db :authorization-error-message error-message)))\n\n(rf/reg-event-fx\n ::initialize-db\n [(rf/inject-cofx ::local-store-token)]\n (fn [{:keys [::local-store-token] :as _cofx} _]\n   (let [parsed-token (some-> local-store-token\n                              :id_token\n                              auth/parse-id-token)]\n     {:db (-> db/default-db\n              (assoc-in [:authorization-result :token] {:raw local-store-token :parsed parsed-token})\n              (assoc :user-profile (some-> parsed-token\n                                           :payload\n                                           token-payload->user-profile)))})))\n\n(rf/reg-fx\n :navigate-to\n (fn [{:keys [path]}]\n   (router/set-token! path)))\n\n(rf/reg-event-fx\n ::router/route-changed\n (fn [{:keys [db] :as _cofx} [_ {:keys [handler]}]]\n   (case handler\n     :auth {:db (assoc-in db [:nav :active-page] :overview)\n            :navigate-to {:path (router/path-for :overview)}}\n     :messages {:db (assoc-in db [:nav :active-page] :messages)\n                :dispatch [::get-messages]}\n     :overview {:db (assoc-in db [:nav :active-page] :overview)\n                :dispatch [::get-messages]}\n     {:db (assoc-in db [:nav :active-page] handler)})))\n\n(rf/reg-event-fx\n ::get-messages\n (fn [{:keys [db]} _]\n   {:db (assoc-in db [:loading :messages] true)\n    :http-xhrio {:method :get\n                 :uri messages-url\n                 :response-format (ajax/json-response-format {:keyword? true})\n                 :on-success [::get-messages-success]\n                 :on-failure [::endpoint-request-error ::get-messages]}}))\n\n(rf/reg-event-db\n ::get-messages-success\n (fn [db [_ messages]]\n   (let [old-messages (:messages db)\n         new-messages (->> messages\n                           keywordize-keys\n                           :messages\n                           (map (juxt :id identity))\n                           (into {}))\n         updated-messages (merge-with merge old-messages new-messages)]\n     (-> db\n         (assoc-in [:loading :messages] false)\n         (assoc :messages updated-messages)))))\n\n(rf/reg-event-db\n ::endpoint-request-error\n (fn [db [_ request-type response]]\n   (-> db\n       (assoc-in [:errors request-type] (get response :status-text))\n       (assoc-in [:loading request-type] false))))\n\n(rf/reg-event-fx\n ::logout\n remove-token-interceptor\n (fn [{:keys [db]} _]\n   {:db (dissoc db :authorization-result :user-profile)\n    :dispatch [::set-active-page :front-page]}))\n\n(rf/reg-event-db\n ::message-read\n (fn [db [_ id]]\n   (assoc-in db [:messages id :read?] true)))\n"]}