{"version":3,"sources":["cljs_re_frame/events.cljs"],"mappings":"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","names":["cljs-re-frame.events/messages-url","cljs-re-frame.events/js-token-storage","js/sessionStorage","cljs-re-frame.events/read-local-storage","k","G__21830","cljs.reader.read_string","re-frame.core/reg-cofx","cofx","_","token","Authentication.authentication/js-storage-key-for-auth","G__21831","cljs.core.assoc","re_frame.core.reg_event_fx","p__21832","p__21833","map__21834","cljs.core/--destructure-map","cljs.core.get","vec__21835","cljs.core.nth","db","active-page","G__21838","cljs.core/assoc-in","fexpr__21839","cljs-re-frame.events/token-payload->user-profile","payload","cljs.core/select-keys","re-frame.core/after","Authentication.authentication/save-token-to-js-storage!","p__21840","p__21841","map__21842","vec__21843","_cofx","result","result*","clojure.walk/keywordize-keys","parsed-result","G__21846","Authentication.authentication/parse-id-token","G__21847","re_frame.core.reg_event_db","p__21848","vec__21849","error-message","re_frame.core.inject_cofx","p__21852","map__21853","local-store-token","parsed-token","G__21854","G__21855","cljs-re-frame.db/default-db","G__21856","p__21857","map__21858","ajax.core/json-response-format","p__21859","vec__21860","messages","old-messages","new-messages","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","updated-messages","cljs.core.merge_with","cljs.core/merge","p__21863","vec__21864","request-type","response","Authentication.authentication/remove-token-from-js-storage!","p__21867","map__21868","cljs.core.dissoc","p__21869","vec__21870","id","cljs.core.update_in","cljs.core.fnil","cljs.core/not"],"sourcesContent":["(ns cljs-re-frame.events\n  (:require [ajax.core :as ajax]\n            [Authentication.authentication :as auth]\n            [cljs-re-frame.db :as db]\n            [cljs.reader :refer [read-string]]\n            [clojure.walk :refer [keywordize-keys]]\n            [day8.re-frame.http-fx]\n            [re-frame.core :as rf]))\n\n(def messages-url \"https://criipto-bank.netlify.app/feliz/messages.json\")\n\n(def js-token-storage js/sessionStorage)\n\n(defn read-local-storage [k]\n  (some->> (.getItem js-token-storage k)\n           read-string))\n\n(rf/reg-cofx\n ::local-store-token\n (fn [cofx _]\n   (let [token (read-local-storage auth/js-storage-key-for-auth)]\n     (cond-> cofx\n       (some? token) (assoc ::local-store-token token)))))\n\n(rf/reg-event-fx\n ::set-active-page\n (fn [{:keys [db]} [_ active-page]]\n   (cond-> {:db (assoc-in db [:nav :active-page] active-page)}\n     (#{:overview :messages} active-page) (assoc :dispatch [::get-messages]))))\n\n(defn token-payload->user-profile [payload]\n  (select-keys payload [:name :birthdate :age :cprNumberIdentifier :country]))\n\n(rf/reg-event-fx\n :authorized\n [(rf/after (auth/save-token-to-js-storage! js-token-storage))]\n (fn [{:keys [db] :as _cofx} [_ result]]\n   (let [result* (keywordize-keys result)\n         parsed-result (some-> result*\n                               :id_token\n                               auth/parse-id-token)]\n     {:db (-> db\n              (assoc-in [:authorization-result :token]\n                        {:raw result* :parsed parsed-result})\n              (assoc :user-profile (some-> parsed-result\n                                           :payload\n                                           token-payload->user-profile)))\n      :dispatch [::set-active-page :overview]})))\n\n(rf/reg-event-db\n :authorization-error\n (fn [db [_ error-message]]\n   (assoc db :authorization-error-message error-message)))\n\n(rf/reg-event-fx\n ::initialize-db\n [(rf/inject-cofx ::local-store-token)]\n (fn [{:keys [::local-store-token] :as _cofx} _]\n   (let [parsed-token (some-> local-store-token\n                              :id_token\n                              auth/parse-id-token)]\n     (cond-> {:db (-> db/default-db\n                      (assoc-in [:authorization-result :token] {:raw local-store-token :parsed parsed-token})\n                      (assoc :user-profile (some-> parsed-token\n                                                   :payload\n                                                   token-payload->user-profile)))}\n       (some? local-store-token) (assoc :dispatch [::get-messages])))))\n\n(rf/reg-event-fx\n ::get-messages\n (fn [{:keys [db]} _]\n   {:db (assoc-in db [:loading :messages] true)\n    :http-xhrio {:method :get\n                 :uri messages-url\n                 :response-format (ajax/json-response-format {:keyword? true})\n                 :on-success [::get-messages-success]\n                 :on-failure [::endpoint-request-error ::get-messages]}}))\n\n(rf/reg-event-db\n ::get-messages-success\n (fn [db [_ messages]]\n   (let [old-messages (:messages db)\n         new-messages (->> messages\n                           keywordize-keys\n                           :messages\n                           (map (juxt :id identity))\n                           (into {}))\n         updated-messages (merge-with merge old-messages new-messages)]\n     (-> db\n         (assoc-in [:loading :messages] false)\n         (assoc :messages updated-messages)))))\n\n(rf/reg-event-db\n ::endpoint-request-error\n (fn [db [_ request-type response]]\n   (-> db\n       (assoc-in [:errors request-type] (get response :status-text))\n       (assoc-in [:loading request-type] false))))\n\n(rf/reg-event-fx\n ::logout\n [(rf/after (auth/remove-token-from-js-storage! js-token-storage))]\n (fn [{:keys [db]} _]\n   {:db (dissoc db :authorization-result :user-profile)\n    :dispatch [::set-active-page :front-page]}))\n\n(rf/reg-event-db\n ::toggle-message\n (fn [db [_ id]]\n   (-> db\n       (update-in [:messages id :unfolded?] (fnil not false))\n       (assoc-in [:messages id :read?] true))))\n"]}