{"version":3,"sources":["Authentication/authentication.cljs"],"mappings":";;AAMA,AAAKA,6CACH,KAAAC,gBAAA;AAAA,AAAO,OAAQ,AAAYC;GAA3B;AAEF,4CAAA,5CAAKC;AAEL,0CAAA,1CAAKC;AAEL,0CAAA,1CAAKC;AAEL,GAAA,QAAAC,2CAAAC,0DAAAC;AAAA;AAAA,AAAA,AAAiBC,8CACf,iBAAMC,kBAAgBC;IAChBC,OAAK,qBAAA,2CAAA,mGAAA,sGAAA,zQAACC,yHAAiBV,wGACEC,+FACHM;IACtBI,gBAAc,KAAAC,uDAAOH;IACrBI,eAAa,AAAiBF;AALpC,AAME,AAAA,AAAIE,kBACM,WAAKC;AAAL,AACE,IAAAC,qBAAyB,iBAAAE,WAASH;AAAT,AAAA,GAAA,CAAAG,YAAA;AAAA;;AAAA,0DAAAA,nDAAgBC;;;AAAzC,AAAA,oBAAAH;AAAA,AAAA,oBAAAA,hBAAWC;AAAX,AACE,GAAI,uEAAA,tEAAM,0DAAA,1DAACG,4CAAIH;AACb,8BAAA,mFAAA,1GAACI,0KAAyBJ;;AAC1B,8BAAA,mFAAA,1GAACI,6LAAkCJ;;;AAHvC;;UAID,WAAKK;AAAL,AACE,8BAAA,mFAAA,1GAACD,6LAAkCC;;;AAChDV;;;AAEJ,sCAAA,tCAAMW;AAAN,AACE,IAAMb,OAAK,qBAAA,2CAAA,+HAAA,/LAACC,mIAAsB,AAACa,gBAAM1B,0GACTK;AADhC,AAEE,OAAqBI,+DAAcG;;AAEvC,AAAKe,oDAAiB,6CAAA,WAAAC,xDAACE;AAAD,AAAO,iEAAAF,mEAAA,2EAAA,xMAACP;GAAR,WAAAQ;AAAA,AAA0C,kBAAAA,XAAQE;;AACxE,AAAKC,qDAAkB,AAACF,6CAAKH,kDAAiBM;AAE9C,+CAAA,/CAAMC,sGAAgBC;AAAtB,AACE,IAAAC,aAA+C,4DAAA,5DAACK,mDAAUN;oBAA1D,AAAAE,4CAAAD,WAAA,IAAA,3EAAOE;qBAAP,AAAAD,4CAAAD,WAAA,IAAA,5EAAqBG;gBAArB,AAAAF,4CAAAD,WAAA,IAAA,vEAAoCI;IAC9BE,gBAAc,AAACV,mDAAkBM;IACjCK,iBAAe,AAACX,mDAAkBO;AAFxC,AAAA,kDAAA,sEAAA,0EAAA,xFAGWG,yEACCC,8EACEH;;AAEhB,AAAKI,wDACH,CAAA,uDAAA,1CAAkBzC,8CAAgBC;AAEpC,uDAAA,vDAAMyC;AAAN,AACE,OAAe,AAAW3C,4BACX,qBAAA,rBAACW,yDACD,AAASiC,eACT,AAAYC;;AAE7B,+DAAA,/DAAMC,sIAA2BC;AAAjC,AACE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAAA,NAAuCG;2BAAvC,AAAAhC,4CAAA6B,eAAA,lFAAaE;AAAb,AACE,AAACR;;AACD,IAAMU,eAAO,AAACC,mBAAQ,oEAAA,mFAAA,mDAAA,1MAACC,+CAAOJ;AAA9B,AACE,GAAM,GAAKE;AAAX,AACE,OAAUN,mBAAWL,sDAAwB,4CAAK,AAAA,iFAAM,AAAA,sFAAQS;;AADlE;;;;AAGN,mEAAA,nEAAMK,8IAA+BT;AAArC,AACE;AAAA,AAAO,OAAaA,sBAAWL","names":["Authentication.authentication/redirect-uri","cljs.core/Delay","js/window","Authentication.authentication/auth-domain","Authentication.authentication/client-id","Authentication.authentication/acr-mitid","js/Authentication","js/Authentication.authentication","js/Authentication.authentication.authenticator","Authentication.authentication/authenticator","session-storage","js/sessionStorage","args","cljs.core/clj->js","authenticator","js/module$node_modules$$criipto$auth_js$dist$criipto_auth","match-object","result","temp__5753__auto__","parsed-result","G__21796","cljs.core.js__GT_clj","cljs.core.get","re-frame.core/dispatch","err","Authentication.authentication/login","cljs.core/deref","Authentication.authentication/json-string->clj","p1__21797#","p1__21798#","cljs.core.comp","js/JSON","Authentication.authentication/b64-enc-json->clj","goog.crypt.base64/decodeString","Authentication.authentication/parse-id-token","id-token","vec__21799","cljs.core.nth","header-base64","payload-base64","signature","clojure.string.split","header-parsed","payload-parsed","Authentication.authentication/js-storage-key-for-auth","Authentication.authentication/clear-url-params!","js/document","js/location","Authentication.authentication/save-token-to-js-storage!","js-storage","p__21802","map__21803","cljs.core/--destructure-map","authorization-result","_db","error?","cljs.core/boolean","cljs.core.get_in","Authentication.authentication/remove-token-from-js-storage!"],"sourcesContent":["(ns Authentication.authentication\n  (:require [\"@criipto/auth-js\" :as auth]\n            [goog.crypt.base64 :as b64]\n            [clojure.string :as str]\n            [re-frame.core :as rf]))\n\n(def redirect-uri\n  (delay (.-href (.-location js/window))))\n\n(def auth-domain \"mnie-test.criipto.id\")\n\n(def client-id \"urn:mnie:1010\")\n\n(def acr-mitid \"urn:grn:authn:dk:mitid:low\")\n\n(defonce ^Object authenticator\n  (let [session-storage js/sessionStorage\n        args (clj->js {:domain auth-domain\n                       :clientID client-id\n                       :store session-storage})\n        authenticator (auth. args)\n        match-object (.redirect.match authenticator)]\n    (.. match-object\n        (then (fn [result]\n                (when-let [parsed-result (some->> result js->clj)]\n                  (if (nil? (get parsed-result \"error\"))\n                    (rf/dispatch [:authorized parsed-result])\n                    (rf/dispatch [:authorization-error parsed-result])))))\n        (catch (fn [err]\n                 (rf/dispatch [:authorization-error err]))))\n    authenticator))\n\n(defn login []\n  (let [args (clj->js {:redirectUri (deref redirect-uri)\n                       :acrValues acr-mitid})]\n    (.redirect.authorize authenticator args)))\n\n(def json-string->clj (comp #(js->clj % :keywordize-keys true) #(.parse js/JSON %)))\n(def b64-enc-json->clj (comp json-string->clj b64/decodeString))\n\n(defn parse-id-token [id-token]\n  (let [[header-base64 payload-base64 signature] (str/split id-token #\"\\.\")\n        header-parsed (b64-enc-json->clj header-base64)\n        payload-parsed (b64-enc-json->clj payload-base64)]\n    {:header header-parsed\n     :payload payload-parsed\n     :signature signature}))\n\n(def js-storage-key-for-auth\n  (str \"oidc.user:\" auth-domain \":\" client-id))\n\n(defn clear-url-params! []\n  (.replaceState (.-history js/window)\n                 (clj->js {})\n                 (.-title js/document)\n                 (.-pathname js/location)))\n\n(defn save-token-to-js-storage! [js-storage]\n  (fn [{:keys [authorization-result] :as _db}]\n    (clear-url-params!) ;; clearing away the 'code' url-parameter such that page reloads doesn't trigger call to get token (`../oauth2/token`)\n    (let [error? (boolean (get-in authorization-result [:raw :error]))]\n      (when (not error?)\n        (.setItem js-storage js-storage-key-for-auth (str (:raw (:token authorization-result))))))))\n\n(defn remove-token-from-js-storage! [js-storage]\n  (fn [] (.removeItem js-storage js-storage-key-for-auth)))\n"]}