{"version":3,"sources":["markdown/lists.cljc"],"mappings":"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","names":["markdown.lists/close-lists","lists","clojure.string.join","iter__4652__auto__","s__22042","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__22044","cljs.core/chunk-buffer","i__22043","vec__22045","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22041","cljs.core/chunk-rest","vec__22048","cljs.core/first","cljs.core/cons","cljs.core/rest","list-type","cljs.core/name","markdown.lists/add-row","row-type","num-indents","indents","content","state","lists-to-close","p1__22053#","cljs.core.take_while","cljs.core/second","cljs.core/reverse","remaining-lists","cljs.core/vec","cljs.core.drop_last","cljs.core.apply","cljs.core/str","cljs.core.assoc","cljs.core/last","cljs.core.conj","cljs.core.update_in","cljs.core/conj","cljs.core._EQ_","markdown.lists/ul","text","vec__22070","cljs.core.partial","cljs.core/=","clojure.string/trim","markdown.common/*substring*","or__4253__auto__","markdown.common/make-heading","markdown.lists/ol","vec__22082","cljs.core.drop_while","cljs.core/not=","p__22085","map__22086","cljs.core/--destructure-map","cljs.core.get","markdown.lists/li","codeblock","last-line-empty?","eof","and__4251__auto__","clojure.string/blank?","cljs.core.dissoc","cljs.core/not","trimmed","in-list?","cljs.core/re-find","cljs.core/not-empty","cljs.core/chunk-first"],"sourcesContent":["(ns markdown.lists\n  (:require [clojure.string :as string]\n            [markdown.common :refer [*substring* make-heading]]))\n\n(defn close-lists [lists]\n  (string/join\n    (for [[list-type] lists]\n      (str \"</li></\" (name list-type) \">\"))))\n\n(defn add-row [row-type list-type num-indents indents content state]\n  (if list-type\n    (cond\n      (< num-indents indents)\n      (let [lists-to-close  (take-while #(> (second %) num-indents) (reverse (:lists state)))\n            remaining-lists (vec (drop-last (count lists-to-close) (:lists state)))]\n\n        [(apply str (close-lists lists-to-close) \"</li><li>\" content)\n         (assoc state :lists (if (> num-indents (second (last remaining-lists)))\n                               (conj remaining-lists [row-type num-indents])\n                               remaining-lists))])\n\n      (> num-indents indents)\n      [(str \"<\" (name row-type) \"><li>\" content)\n       (update-in state [:lists] conj [row-type num-indents])]\n\n      (= num-indents indents)\n      [(str \"</li><li>\" content) state])\n\n    [(str \"<\" (name row-type) \"><li>\" content)\n     (assoc state :lists [[row-type num-indents]])]))\n\n(defn ul [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (*substring* text (inc num-indents)))]\n    (add-row :ul list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn ol [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (string/join (drop-while (partial not= \\space) (string/trim text))))]\n    (add-row :ol list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn li [text {:keys [codeblock last-line-empty? eof lists] :as state}]\n  (cond\n\n    (and last-line-empty? (string/blank? text))\n    [(str (close-lists (reverse lists)) text)\n     (-> state (dissoc :lists) (assoc :last-line-empty? false))]\n\n    (and lists codeblock)\n    [text state]\n\n    (and (not eof)\n         lists\n         (string/blank? text))\n    [text (assoc state :last-line-empty? false :eof false)]\n\n    :else\n    (let [indents  (if last-line-empty? 0 (count (take-while (partial = \\space) text)))\n          trimmed  (string/trim text)\n          in-list? (:lists state)]\n      (cond\n        (re-find #\"^[\\*\\+-] \" trimmed)\n        (ul (if in-list? text trimmed) state)\n\n        (re-find #\"^[0-9]+\\. \" trimmed)\n        (ol (if in-list? text trimmed) state)\n\n        (pos? indents)\n        [text state]\n\n        (and (or eof last-line-empty?)\n             (not-empty lists))\n        [(close-lists (reverse lists))\n         (assoc state :lists [] :buf text)]\n\n        :else\n        [text state]))))\n"]}