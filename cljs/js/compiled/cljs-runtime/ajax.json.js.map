{"version":3,"sources":["ajax/json.cljc"],"mappings":";AAmBU,8BAAA,9BAAMA,oEAAmBC;AAAzB,AACE,OAAYC,eAAQ,AAACC,qBAAQF;;AAM/B,6BAAA,7BAAMG,kEAAkBC,IAAIC,gBAAUC;AAAtC,AACK,IAAMC,aAAW,AAAQN,WAAQK;AAAjC,AACK,oBAAIF;AACAG;;AACA,8HAAA,vHAACC,0DAAQD,wIAA4BF;;;AAE7D,qCAAA,rCAAMI,kFAA0BC;AAAhC,AACE;AAAA,AAAA,kDAAA,mEAAA,qEAAA,hFACYA;;;AAaH,yBAAA,zBAAMC,0DAAsBC,OAAON;AAAnC,AACE,oBAAI,iBAAAO,oBAAKD;AAAL,AAAA,oBAAAC;AAAY,oDAAA,7CAACC,iDAAI,AAAUR,aAAKM;;AAAhCC;;;AACF,OAAYP,eAAK,AAAUM;;AAC3BN;;;AAEf,sCAAA,tCAAMS,oFAA2BC;AAAjC,AAAA;AAEE;;;AAAA,AACM,gGAAA,zFAACK;;+EADPJ;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAEYN;sBAFZ,AAAAQ,4CAAAF,eAAA,7EAEmBb;UAFnB,AAAAe,4CAAAF,eAAA,jEAE6Bd;AAF7B,AAGK,gDAAA,2CAAA,pFAACkB,yIACO,iGAA+BC;AAA/B,AACH,IAAAC,WAAWpB;IAAXqB,WACWpB;IADXqB,WAEW,AAACf,uBAAaC,OAAO,AAACe,qBAAMJ;AAFvC,AAAA,0FAAAC,SAAAC,SAAAC,gCAAAF,SAAAC,SAAAC,tJAACV,0CAAAA,sEAAAA;GAFN,4PAAA,qEAAA,mFAAA,hVAKe,CAAA,OACG,yGAAA,vFAAIJ,QAAO,CAAA,gEAAA,RAAiBA,4BAC5B,mCAAA,cAAA,/BAAIP;;sEAV3BY;;;;;+EAAAA;;;;;;;;;AAaF;;;;;;;;;;AAAKW,iCASD,AAACb,oCACqCZ;AAE1C,AAAK0B,gCACD,AAACpB,mCACsCV","names":["ajax.json/write-json-native","data","js/JSON","cljs.core/clj->js","ajax.json/read-json-native","raw","keywords?","text","result-raw","cljs.core.js__GT_clj","ajax.json/make-json-request-format","write-json","ajax.json/strip-prefix","prefix","and__4251__auto__","cljs.core._EQ_","ajax.json/make-json-response-format","read-json","p__21467","map__21468","cljs.core/--destructure-map","cljs.core.get","ajax$json$make_json_response_format_$_json_response_format","ajax.interceptors/map->ResponseFormat","xhrio","G__21469","G__21470","G__21471","ajax.protocols/-body","ajax.json/json-response-format","ajax.json/json-request-format"],"sourcesContent":["(ns ajax.json\n  (:require [ajax.interceptors :refer \n                [map->ResponseFormat]]\n            [ajax.protocols :refer\n                [-body -process-request -process-response -abort -status\n                -get-response-header -status-text -js-ajax-request\n                -was-aborted]]\n            #?@ (:clj  [[cheshire.core :as c]\n                        [clojure.java.io :as io]]))\n  #? (:clj (:import [java.io OutputStreamWriter ByteArrayOutputStream\n                InputStreamReader Closeable OutputStream\n                InputStream])))\n\n;;; NB If you're looking to use the google closure JSON implementation,\n;;; You'll need ajax.goog-json instead\n\n#? (:clj (defn write-json-cheshire [stream data]\n           (c/generate-stream data (io/writer stream))))\n\n#? (:cljs (defn write-json-native [data]\n            (.stringify js/JSON (clj->js data))))\n\n#? (:clj (defn read-json-cheshire [raw keywords? text]\n           ; NB Raw is ignored since it makes no sense in this context\n           (c/parse-stream (io/reader text) keywords?)))\n\n#? (:cljs (defn read-json-native [raw keywords? text]\n               (let [result-raw (.parse js/JSON text)]\n                    (if raw\n                        result-raw\n                        (js->clj result-raw :keywordize-keys keywords?)))))\n\n(defn make-json-request-format [write-json]\n  (fn json-request-format []\n      {:write write-json\n       :content-type \"application/json\"}))\n\n#? (:clj (defn strip-prefix\n           ^InputStream [^String prefix ^InputStream text]\n           (if prefix\n             (let [utf8 (.getBytes prefix \"UTF-8\")]\n               (loop [i 0]\n                 (if (and (< i (alength utf8))\n                          (= (aget utf8 i) (.read text)))\n                   (recur (inc i))\n                   text)))\n             text))\n     :cljs (defn strip-prefix [^String prefix text]\n             (if (and prefix (= 0 (.indexOf text prefix)))\n               (.substring text (.-length prefix))\n               text)))\n\n(defn make-json-response-format [read-json]\n  \"Create a json request format given `read-json` function.\"\n  (fn json-response-format\n    ([] (json-response-format {}))\n    ([{:keys [prefix keywords? raw]}]\n       (map->ResponseFormat\n        {:read (fn json-read-response-format [xhrio] \n            (read-json raw\n                       keywords?\n                       (strip-prefix prefix (-body xhrio))))\n         :description (str \"JSON\"\n                         (if prefix (str \" prefix '\" prefix \"'\"))\n                         (if keywords? \" keywordize\"))\n         :content-type [\"application/json\"]}))))\n\n(def json-response-format\n  \"Returns a JSON response format using the native JSON \n   implementation. Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx\"\n    (make-json-response-format \n        #? (:clj read-json-cheshire :cljs read-json-native)))\n\n(def json-request-format \n    (make-json-request-format \n        #? (:clj write-json-cheshire :cljs write-json-native)))\n"]}