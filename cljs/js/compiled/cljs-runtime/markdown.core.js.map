{"version":3,"sources":["markdown/core.cljs"],"mappings":"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","names":["p__22404","map__22405","cljs.core/--destructure-map","cljs.core.get","markdown.core/init-transformer","replacement-transformers","custom-transformers","inhibit-separator","html","line","next-line","state","*inhibit-separator*-orig-val__22406","*inhibit-separator*-temp-val__22407","markdown.common/*inhibit-separator*","vec__22408","cljs.core.nth","text","new-state","cljs.core.reduce","p__22415","vec__22416","transformer","G__22419","G__22420","cljs.core.assoc","or__4253__auto__","cljs.core.into","markdown.transformers/transformer-vector","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","markdown.core/format","seq22421","G__22422","cljs.core/first","cljs.core/next","self__4851__auto__","fmt","args","cljs.core.apply","goog.string/format","markdown.core/parse-references","lines","cljs.core/deref","references","cljs.core.atom","seq__22423","cljs.core/seq","chunk__22424","count__22425","i__22426","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","markdown.links/parse-reference-link","markdown.core/parse-footnotes","footnotes","seq__22427","chunk__22428","count__22429","i__22430","markdown.links/parse-footnote-link","markdown.core/parse-metadata","vec__22435","metadata","p1__22434#","cljs.core/split-with","cljs.core/not-empty","markdown.transformers/parse-metadata-headers","markdown.core/md-to-html-string*","params","*substring*-orig-val__22438","*formatter*-orig-val__22439","*substring*-temp-val__22440","*formatter*-temp-val__22441","markdown.common/*substring*","s","n","cljs.core/str","cljs.core.drop","markdown.transformers/*formatter*","vec__22442","cljs.core.partial","cljs.core/assoc","js/goog.string.StringBuffer","G__22448","vec__22449","seq__22450","first__22451","vec__22455","seq__22456","first__22457","more","cljs.core.merge","cljs.core.dissoc","cljs.core/empty?","markdown.transformers/footer","markdown.core/md->html","seq22458","G__22459","markdown.core/md->html-with-meta","seq22460","G__22461","markdown.core/mdToHtml","seq22462","self__4852__auto__","markdown.core/mdToHtmlWithMeta","seq22463"],"sourcesContent":["(ns markdown.core\n  (:require [markdown.common\n             :refer [*substring* *inhibit-separator*]]\n            [markdown.links\n             :refer [parse-reference parse-reference-link parse-footnote-link]]\n            [markdown.transformers\n             :refer [transformer-vector footer parse-metadata-headers]]))\n\n\n(defn- init-transformer [{:keys [replacement-transformers custom-transformers inhibit-separator]}]\n  (fn [html line next-line state]\n    (binding [*inhibit-separator* inhibit-separator]\n      (let [[text new-state]\n            (reduce\n              (fn [[text state] transformer]\n                (transformer text (assoc state :next-line next-line)))\n              [line state]\n              (or replacement-transformers\n                  (into transformer-vector custom-transformers)))]\n        (.append html text)\n        new-state))))\n\n(defn format \"Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj\"\n  [fmt & args] (apply goog.string/format fmt args))\n\n(defn parse-references [lines]\n  (let [references (atom {})]\n    (doseq [line lines]\n      (parse-reference-link line references))\n    @references))\n\n(defn parse-footnotes [lines]\n  (let [footnotes (atom {:next-fn-id 1 :processed {} :unprocessed {}})]\n    (doseq [line lines]\n      (parse-footnote-link line footnotes))\n    @footnotes))\n\n(defn parse-metadata [lines]\n  (let [[metadata lines] (split-with #(not-empty (.trim %)) lines)]\n    [(parse-metadata-headers metadata) lines]))\n\n(defn md-to-html-string*\n  \"processes input text line by line and outputs an HTML string\"\n  [text params]\n  (binding [markdown.common/*substring* (fn [s n] (apply str (drop n s)))\n            markdown.transformers/*formatter* format]\n    (let [params      (when params (apply (partial assoc {}) params))\n          lines       (.split (str text \"\\n\") \"\\n\")\n          html        (goog.string.StringBuffer. \"\")\n          references  (when (:reference-links? params) (parse-references lines))\n          footnotes   (when (:footnotes? params) (parse-footnotes lines))\n          [metadata lines] (if (:parse-meta? params) (parse-metadata lines) [nil lines])\n          transformer (init-transformer params)]\n      (loop [[line & more] lines\n             state (merge {:clojurescript    true\n                           :references       references\n                           :footnotes        footnotes\n                           :last-line-empty? true}\n                          params)]\n        (let [line  (if (:skip-next-line? state) \"\" line)\n              state\n              (if (:buf state)\n                (transformer html\n                             (:buf state)\n                             (:next-line state)\n                             (-> state\n                                 (dissoc :buf :lists :next-line)\n                                 (assoc :last-line-empty? true)))\n                state)]\n          (if (not-empty more)\n            (recur more\n                   (assoc (transformer html line (first more) (dissoc state :skip-next-line?))\n                     :last-line-empty? (empty? (.trim line))))\n            (transformer (.append html (footer (:footnotes state))) line \"\" (assoc state :eof true)))))\n      {:metadata metadata :html (.toString html)})))\n\n(defn md->html [text & params]\n  (:html (md-to-html-string* text params)))\n\n(defn md->html-with-meta [text & params]\n  (md-to-html-string* text (into [:parse-meta? true] params)))\n\n(defn ^:export mdToHtml\n  \"Js accessible wrapper\"\n  [& params]\n  (apply md->html params))\n\n(defn ^:export mdToHtmlWithMeta\n  \"Js accessible wrapper\"\n  [& params]\n  (apply md->html-with-meta params))\n"]}