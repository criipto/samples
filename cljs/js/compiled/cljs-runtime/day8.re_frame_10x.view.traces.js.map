{"version":3,"sources":["day8/re_frame_10x/view/traces.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.traces/query->fn","query","cljs.core._EQ_","trace","clojure.string/includes?","clojure.string/lower-case","day8.re-frame-10x.view.traces/add-filter","filter-items","filter-input","filter-type","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.view.traces/render-traces","visible-traces","trace-detail-expansions","cljs.core/deref","debug?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","cljs.core.doall","cljs.core.map_indexed","p__20039","map__20040","cljs.core/--destructure-map","cljs.core.get","index","op-type","id","operation","tags","duration","show-row?","cljs.core.get_in","op-name","cljs.core/vector?","cljs.core/second","cljs.core/List","clojure.string.join","G__20041","cljs.core/Keyword","day8.re-frame-10x.material/arrow-drop-down","day8.re-frame-10x.material/arrow-right","ev","cljs.core/name","day8.re-frame-10x.utils.pretty-print-condensed/truncate","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","temp__5753__auto__","vec__20042","seq__20043","cljs.core/seq","first__20044","cljs.core/first","cljs.core/next","_","params","or__4253__auto__","cljs.core.map","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string","js/console","tag-str","cljs.core.prn_str","cljs.core.subs","day8.re-frame-10x.view.traces/render","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.atom","input-error","categories","beginning","end","traces","current-traces","show-epoch-traces?","p1__20045#","p1__20046#","p1__20047#","p1__20048#","toggle-category-fn","traces-to-filter","G__20049","cljs.core.remove","and__4251__auto__","cljs.core.filter","cljs.core/contains?","cljs.core.apply","cljs.core/every-pred","cljs.core.sort_by","save-query","js/isNaN","js/parseFloat","cljs.core/reset!","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/checkbox","cljs.core.keyword","day8.re-frame-10x.view.components/search-input","item","day8.re-frame-10x.utils.re-com/box","cljs.core/count"],"sourcesContent":["(ns day8.re-frame-10x.view.traces\n  (:require [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.svgs :as svgs]\n            [day8.re-frame-10x.material :as material]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button\n                                  (if show-row?\n                                    [material/arrow-drop-down :fill \"#6EC0E6\"]\n                                    [material/arrow-right :fill \"#6EC0E6\"])]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n        [rc/v-box\n         :class \"tab-contents\"\n         :size \"1\"\n         :children [[rc/v-box\n                     :class \"filter\"\n                     :children [[:div.filter-control\n                                 [:ul.filter-categories \"show: \"\n                                  [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n                                   \"events\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n                                   \"subscriptions\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n                                   \"reagent\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n                                   \"internals\"]]\n                                 [rc/checkbox\n                                  :model show-epoch-traces?\n                                  :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n                                  :label \"Only show traces for this epoch?\"]\n                                 [:div.filter-fields\n                                  [:select {:value     @filter-type\n                                            :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n                                   [:option {:value \"contains\"} \"contains\"]\n                                   [:option {:value \"slower-than\"} \"slower than\"]]\n                                  [:div.filter-control-input {:style {:margin-left 10}}\n                                   [components/search-input {:on-save     save-query\n                                                             :on-change   #(reset! filter-input (.. % -target -value))\n                                                             :placeholder \"Type to filter traces\"}]\n                                   (if @input-error\n                                     [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                                      \"Please enter a valid number.\"])]]]\n                                [:ul.filter-items\n                                 (map (fn [item]\n                                        ^{:key (:id item)}\n                                        [:li.filter-item\n                                         [:button.button\n                                          {:style    {:margin 0}\n                                           :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                                          (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                                      @filter-items)]]]\n                    [rc/box\n                     :size \"1\"\n                     :style {:padding-top \"20px\"\n                             :margin      \"0px 10px\"\n                             :overflow    \"auto\"}\n                     :child [:table\n                             [:thead>tr\n                              [:th {:style {:padding 0}}\n                               [:button.text-button\n                                {:style    {:cursor \"pointer\"}\n                                 :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n                                (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n                              [:th \"operations\"]\n                              [:th\n                               (str (count visible-traces) \" traces\")\n                               [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"]]\n                              [:th {:style {:text-align \"right\"}} \"meta\"]]\n                             [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]]))))\n"]}