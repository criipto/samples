{"version":3,"sources":["hickory/core.cljs"],"mappings":"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","names":["hickory$core$HiccupRepresentable$as_hiccup$dyn","x__4550__auto__","m__4551__auto__","hickory.core/as-hiccup","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","hickory.core/HiccupRepresentable","this","hickory$core$HickoryRepresentable$as_hickory$dyn","hickory.core/as-hickory","hickory.core/HickoryRepresentable","hickory.core/node-type","type","js/Node","hickory.core/Attribute","hickory.core/Comment","hickory.core/Document","hickory.core/DocumentType","hickory.core/Element","hickory.core/Text","hickory.core/extend-type-with-seqable","t","cljs.core/PROTOCOL_SENTINEL","array","cljs.core.array_seq","js/NodeList","js/NamedNodeMap","js/MozNamedAttrMap","hickory.core/format-doctype","dt","name","publicId","systemId","cljs.core/empty?","goog.string/format","pred__21891","expr__21892","js/Error","cljs.core/=","hickory.utils/lower-case-keyword","cljs.core.map","tag","cljs.core.into","cljs.core.concat","hickory.utils/unescapable-content","p1__21890#","hickory.utils/html-escape","pred__21899","expr__21900","cljs.core/not-empty","hickory.core/extract-doctype","s","temp__5753__auto__","doctype","cljs.core/second","or__4253__auto__","cljs.core/re-find","hickory.core/remove-el","el","hickory.core/parse-dom-with-domparser","js/DOMParser","hickory.core/parse-dom-with-write","doc","js/document.implementation","doctype-el","title-el","cljs.core/first","hickory.core/parse","hickory.core/parse-fragment"],"sourcesContent":["(ns hickory.core\n  (:require [hickory.utils :as utils]\n            [clojure.zip :as zip]\n            [goog.string :as gstring]))\n\n;;\n;; Protocols\n;;\n\n(defprotocol HiccupRepresentable\n  \"Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.\"\n  (as-hiccup [this]\n    \"Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.\"))\n\n(defprotocol HickoryRepresentable\n  \"Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable\"\n  (as-hickory [this]\n    \"Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.\"))\n\n(defn node-type\n  [type]\n  (aget js/Node (str type \"_NODE\")))\n\n(def Attribute (node-type \"ATTRIBUTE\"))\n(def Comment (node-type \"COMMENT\"))\n(def Document (node-type \"DOCUMENT\"))\n(def DocumentType (node-type \"DOCUMENT_TYPE\"))\n(def Element (node-type \"ELEMENT\"))\n(def Text (node-type \"TEXT\"))\n\n(defn extend-type-with-seqable\n  [t]\n  (extend-type t\n    ISeqable\n    (-seq [array] (array-seq array))))\n\n(extend-type-with-seqable js/NodeList)\n\n(when (exists? js/NamedNodeMap)\n  (extend-type-with-seqable js/NamedNodeMap))\n\n(when (exists? js/MozNamedAttrMap) ;;NamedNodeMap has been renamed on modern gecko implementations (see https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap)\n  (extend-type-with-seqable js/MozNamedAttrMap))\n\n(defn format-doctype\n  [dt]\n  (let [name (aget dt \"name\")\n        publicId (aget dt \"publicId\")\n        systemId (aget dt \"systemId\")]\n    (if (not (empty? publicId))\n      (gstring/format \"<!DOCTYPE %s PUBLIC \\\"%s\\\" \\\"%s\\\">\" name publicId systemId)\n      (str \"<!DOCTYPE \" name \">\"))))\n\n(extend-protocol HiccupRepresentable\n  object\n  (as-hiccup [this] (condp = (aget this \"nodeType\")\n                      Attribute [(utils/lower-case-keyword (aget this \"name\"))\n                                 (aget this \"value\")]\n                      Comment (str \"<!--\" (aget this \"data\") \"-->\")\n                      Document (map as-hiccup (aget this \"childNodes\"))\n                      DocumentType (format-doctype this)\n                      ;; There is an issue with the hiccup format, which is that it\n                      ;; can't quite cover all the pieces of HTML, so anything it\n                      ;; doesn't cover is thrown into a string containing the raw\n                      ;; HTML. This presents a problem because it is then never the case\n                      ;; that a string in a hiccup form should be html-escaped (except\n                      ;; in an attribute value) when rendering; it should already have\n                      ;; any escaping. Since the HTML parser quite properly un-escapes\n                      ;; HTML where it should, we have to go back and un-un-escape it\n                      ;; wherever text would have been un-escaped. We do this by\n                      ;; html-escaping the parsed contents of text nodes, and not\n                      ;; html-escaping comments, data-nodes, and the contents of\n                      ;; unescapable nodes.\n                      Element (let [tag (utils/lower-case-keyword (aget this \"tagName\"))]\n                                (into [] (concat [tag\n                                                  (into {} (map as-hiccup (aget this \"attributes\")))]\n                                                 (if (utils/unescapable-content tag)\n                                                   (map #(aget % \"wholeText\") (aget this \"childNodes\"))\n                                                   (map as-hiccup (aget this \"childNodes\"))))))\n                      Text (utils/html-escape (aget this \"wholeText\")))))\n\n(extend-protocol HickoryRepresentable\n  object\n  (as-hickory [this] (condp = (aget this \"nodeType\")\n                       Attribute [(utils/lower-case-keyword (aget this \"name\")) (aget this \"value\")]\n                       Comment {:type :comment\n                                :content [(aget this \"data\")]}\n                       Document {:type :document\n                                 :content (not-empty\n                                            (into [] (map as-hickory\n                                                          (aget this \"childNodes\"))))}\n                       DocumentType {:type :document-type\n                                     :attrs {:name (aget this \"name\")\n                                             :publicid (aget this \"publicId\")\n                                             :systemid (aget this \"systemId\")}}\n                       Element {:type :element\n                                :attrs (not-empty (into {} (map as-hickory (aget this \"attributes\"))))\n                                :tag (utils/lower-case-keyword (aget this \"tagName\"))\n                                :content (not-empty\n                                           (into [] (map as-hickory\n                                                         (aget this \"childNodes\"))))}\n                       Text (aget this \"wholeText\"))))\n\n(defn extract-doctype\n  [s]\n  ;;Starting HTML5 doctype definition can be uppercase\n  (when-let [doctype (second (or (re-find #\"<!DOCTYPE ([^>]*)>\" s)\n                                 (re-find #\"<!doctype ([^>]*)>\" s)))]\n    (re-find #\"([^\\s]*)(\\s+PUBLIC\\s+[\\\"]?([^\\\"]*)[\\\"]?\\s+[\\\"]?([^\\\"]*)[\\\"]?)?\" doctype)))\n\n(defn remove-el\n  [el]\n  (.removeChild (aget el \"parentNode\") el))\n\n(defn parse-dom-with-domparser\n  [s]\n  (if (exists? js/DOMParser)\n    (.parseFromString (js/DOMParser.) s \"text/html\")))\n\n(defn parse-dom-with-write\n  \"Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write.\"\n  [s]\n  ;;See http://www.w3.org/TR/domcore/#dom-domimplementation-createhtmldocument for more details.\n  (let [doc (.createHTMLDocument js/document.implementation \"\") ;;empty title for older implementation\n        doctype-el (aget doc \"doctype\")]\n    (when-not (extract-doctype s);; Remove default doctype if parsed string does not define it.\n      (remove-el doctype-el))\n    (when-let [title-el (first (aget doc \"head\" \"childNodes\"))];; Remove default title if parsed string does not define it.\n      (when (empty? (aget title-el \"text\"))\n          (remove-el title-el)))\n    (.write doc s)\n    doc))\n\n(defn parse\n  \"Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory.\n\n```klipse\n  (-> (parse \\\"<a style=\\\\\\\"visibility:hidden\\\\\\\">foo</a><div style=\\\\\\\"color:green\\\\\\\"><p>Hello</p></div>\\\")\n    as-hiccup)\n```\n\n```klipse\n  (-> (parse \\\"<a style=\\\\\\\"visibility:hidden\\\\\\\">foo</a><div style=\\\\\\\"color:green\\\\\\\"><p>Hello</p></div>\\\")\n    as-hickory)\n```\n\n\n  \"\n  [s]\n  (or (parse-dom-with-domparser s) (parse-dom-with-write s)))\n\n(defn parse-fragment\n  \"Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory.\"\n  [s]\n  (aget (parse s) \"body\" \"childNodes\"))\n"]}