{"version":3,"sources":["day8/re_frame_10x/view/fx.cljs"],"mappings":";AAQA,wDAAA,xDAAKA;AAEL,sCAAA,mFAAA,gFAAA,mFAAA,0EAAA,mFAAA,iGAAA,2CAAA,mEAAA,OAAA,kJAAA,mFAAA,wEAAA,2CAAA,2IAAA,mFAAA,2FAAA,2CAAA,yDAAA,uBAAA,mFAAA,yFAAA,2CAAA,iEAAA,SAAA,uDAAA,0BAAA,mFAAA,2DAAA,2CAAA,0IAAA,mFAAA,yFAAA,2CAAA,iEAAA,kCAAA,mFAAA,0FAAA,2CAAA,0DAAA,OAAA,sEAAA,MAAA,mEAAA,MAAA,oEAAA,oBAAA,yDAAA,UAAA,yHAAA,mFAAA,2DAAA,mFAAA,0FAAA,2CAAA,0DAAA,5+GAAKC,2tBAWkBD,wVAEAE,+9BAOCF,w/BASJG;AAYpB,0CAAA,1CAAMC,4FAAeC,MAAMC;AAA3B,AAAA,+HAAA,wDAAA,gBAAA,6DAAA,mFAAA,wHAAA,wDAAA,4CAAA,uDAAA,yDAAA,6DAAA,mFAAA,mFAAA,+EAAA,wIAAA,iGAAA,pmCACGC,gVAGEC,6gBAGgBH,iHAChBI,gDAAyBH,wFAAMD;;AAGpC,mCAAA,nCAAMK;AAAN,AACE,kBAAA,AAAAC,dAAMC,8BAAa,qGAAA,mFAAA,xLAACC;AAApB,AAAA,+HAAA,wDAAA,cAAA,uDAAA,2CAAA,uDAAA,eAAA,wFAAA,6DAAA,mFAAA,2HAAA,8RAAA,2HAAA,yRAAA,2HAAA,ySAAA,wHAAA,qDAAA,z3DACGN,oUAGKO,0QACOV,oDAA0B,2DAAA,mFAAA,qDAAA,nMAACW,+CAAOH,sTAClCR,kDAAwB,2DAAA,mFAAA,qDAAA,nMAACW,+CAAOH,mTAChCR,uDAA6B,2DAAA,mFAAA,qDAAA,nMAACW,+CAAOH,8TACrCI","names":["day8.re-frame-10x.view.fx/code-hover-background-color","day8.re-frame-10x.view.fx/fx-styles","day8.re-frame-10x.common-styles/white-background-color","day8.re-frame-10x.common-styles/blue-modern-color","day8.re-frame-10x.view.fx/event-section","title","data","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.view.components/simple-render","day8.re-frame-10x.view.fx/render","cljs.core/deref","event-trace","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","day8.re-frame-10x.common-styles/gs-19s","cljs.core.get_in","day8.re-frame-10x.utils.re-com/gap-f"],"sourcesContent":["(ns day8.re-frame-10x.view.fx\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.view.components :as components]\n            [zprint.core :as zp]\n            [clojure.string :as str]))\n\n(def code-hover-background-color \"rgba(100, 100, 255, 0.08)\")\n\n(def fx-styles\n  [:#--re-frame-10x--\n   [:.code-panel\n    #_{:padding-bottom common/gs-31}] ;; Leaving the empty def here for now\n   ;; We rely on highlight JS for our background now.\n   ;[:.code-listing\n   ; {:background-color common/white-background-color\n   ;  :padding          \"5px\"\n   ;  :margin-right     \"19px\"}]\n   [:.code-listing--highlighted\n    {:font-weight      \"bold\"\n     :background-color code-hover-background-color}]\n   [:.code-fragment\n    {:background-color common/white-background-color}\n    [:.code-fragment__content\n     {:height \"19px\"}]\n    [:.code-fragment__result\n     {:visibility \"hidden\"\n      :color \"#b4b4b4\"}] ;; Was common/medium-gray\n    [:&:hover\n     {:background-color code-hover-background-color}\n     [:.code-fragment__result\n      {:visibility \"visible\"}]]\n    [:.code-fragment__button\n     {:display      \"none\"\n      :padding-left \"6px\"\n      :margin-left  \"6px\"\n      :border-left  \"1px solid #cdd8df\"\n      :cursor       \"pointer\"\n      :color        common/blue-modern-color}]\n    [:&:hover\n     [:.code-fragment__button\n      {:display \"grid\"}]]]])\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n(defn event-section [title data]\n  [rc/v-box\n   :class \"event-section\"\n   :children\n   [[rc/h-box\n     :class \"event-section--header app-db-path--header\"\n     :align :center\n     :children [[:h2 title]]]\n    [components/simple-render data [title] \"event-section--data app-db-path--pod-border\"]]])\n\n\n(defn render []\n  (let [event-trace @(rf/subscribe [:epochs/current-event-trace])]\n    [rc/v-box\n     :class \"event-panel\"\n     :style {:width \"100%\"}\n     :gap common/gs-19s\n     :children [[event-section \"Coeffects\" (get-in event-trace [:tags :coeffects])]\n                [event-section \"Effects\" (get-in event-trace [:tags :effects])]\n                [event-section \"Interceptors\" (get-in event-trace [:tags :interceptors])]\n                [rc/gap-f :size \"0px\"]]]))\n"]}