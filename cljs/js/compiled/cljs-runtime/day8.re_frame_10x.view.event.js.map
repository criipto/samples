{"version":3,"sources":["day8/re_frame_10x/view/event.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.common-styles/white-background-border-color","day8.re-frame-10x.view.event/event-styles","day8.re-frame-10x.common-styles/navbar-tint-lighter","day8.re-frame-10x.common-styles/navbar-text-color","day8.re-frame-10x.common-styles/gs-19","day8.re-frame-10x.common-styles/gs-12","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/hyperlink-href","day8.re-frame-10x.view.event/code-header","code-execution-id","line","cljs.core/deref","open?-path","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","max-column-width","trace-id","open?","cljs.core.get_in","line-str","day8.re_frame_10x.utils.pretty_print_condensed.pr_str_truncated","=>str","result-length","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.utils.re-com/box","event","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","cljs.core/not","day8.re-frame-10x.utils.utils/copy-to-clipboard","cljs.core.pr_str","cljs.core/List","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.view.components/simple-render","var_args","G__19976","day8.re-frame-10x.view.event/re-seq-idx","js/Error","re","s","day8.re_frame_10x.view.event.re_seq_idx","offset","temp__5757__auto__","matches","match-str","match-vals","cljs.core/vec","match-index","cljs.core/cons","cljs.core/LazySeq","post-idx","x__4336__auto__","y__4337__auto__","cljs.core.subs","day8.re-frame-10x.view.event/collapse-whitespace-and-index","s'","clojure.string/replace","v","i-s","i-s'","cljs.core._EQ_","cljs.core.conj","cljs.core/count","cljs.core.nth","day8.re-frame-10x.view.event/find-bounds","form-str","search-str","num-seen","vec__19977","reindex","esc-str","js/goog.string.regExpEscape","regex","cljs.core/re-pattern","results","and__4251__auto__","cljs.core/seq","vec__19980","vec__19983","result","_","pre-match","matched-form","index","start","stop","G__19986","clojure.string.index_of","length","end","G__19987","day8.re-frame-10x.view.event/event-expression","scroll-pos","cljs.core.atom","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","this","old-argv","new-argv","node","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","cljs.core/reset!","vec__19988","highlighted-form","show-all-code?","start-index","end-index","before","highlight","after","cljs.core.gensym","day8.re-frame-10x.common-styles/white-background-color","day8.re-frame-10x.view.components/highlight","day8.re-frame-10x.view.event/repl-msg-area","repl-msg-state","cljs.core.get","day8.re-frame-10x.view.event/repl-section","execution-order?","day8.re-frame-10x.utils.re-com/checkbox","day8.re-frame-10x.utils.re-com/hyperlink","day8.re-frame-10x.common-styles/gs-7s","day8.re-frame-10x.utils.re-com/hyperlink-info","day8.re-frame-10x.view.event/indent-block","indent-level","first?","cljs.core.doall","iter__4652__auto__","s__19992","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__19994","cljs.core/chunk-buffer","i__19993","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19991","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","num","cljs.core.range","day8.re-frame-10x.common-styles/standard-background-color","day8.re-frame-10x.view.event/event-fragments","unordered-fragments","code-exec-id","code-open?","max-frags","fragments","cljs.core.sort_by","s__19996","b__19998","i__19997","iter__19995","frag","cljs.core.take","id","day8.re-frame-10x.utils.re-com/label","day8.re-frame-10x.common-styles/gs-5s","day8.re-frame-10x.view.event/event-code","code-traces","code-execution","cljs.core.remove","cljs.core/fn?","day8.re-frame-10x.view.event/render","epoch-id","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/gap-f","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units :as units]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [day8.re-frame-10x.utils.utils :as utils])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :padding          [[0 common/gs-12]]\n     :overflow         \"hidden\"}]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"\n     :overflow-y       \"hidden\"}]])\n\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label \"Instructions for enabling Event Code Tracing\"\n               :attr {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  (let [open?-path       [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        max-column-width @(rf/subscribe [:code/max-column-width])\n        trace-id         code-execution-id\n        open?            (get-in @(rf/subscribe [:code/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width (:form line))\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))]\n    [rc/h-box\n     :class \"code-fragment__content\"\n     :size \"1\"\n     :align :center\n     :style {:border   code-border\n             :overflow \"hidden\"\n             :padding  \"0px 6px\"}\n     :children [[rc/box\n                 :width \"17px\"\n                 :height \"17px\"\n                 :class \"noselect\"\n                 :style {:cursor \"pointer\"\n                         :color  \"#b0b2b4\"}\n                 :attr {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child [rc/box\n                         :margin \"auto\"\n                         :child [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [rc/h-box\n                 :size \"1\"\n                 :style {:overflow \"hidden\"}\n                 :children [[rc/box\n                             :style {:margin-left \"2px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code line-str]]\n                            [rc/box\n                             :class \"code-fragment__result\"\n                             :style {:flex        \"1\"\n                                     :margin-left \"8px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code =>str (when (pos? result-length)\n                                                   (pp/pr-str-truncated result-length (:result line)))]]]]\n                [rc/box\n                 :class \"code-fragment__button\"\n                 :attr {:title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n                        :on-click (handler-fn (do (utils/copy-to-clipboard (pr-str (list 'day8.re-frame-10x/traced-result trace-id (:id line))))\n                                                  (rf/dispatch [:code/repl-msg-state :start])))}\n                 :child \"repl\"]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  [rc/box\n   :size \"1\"\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn- re-seq-idx\n  \"Like re-seq but returns matches and indices\"\n  ([re s] (re-seq-idx re s 0))\n  ([re s offset]  ;; copied from re-seq* impl https://github.com/clojure/clojurescript/blob/0efe8fede9e06b8e1aa2fcb3a1c70f66cad6392e/src/main/cljs/cljs/core.cljs#L10014\n   (when-some [matches (.exec re s)]\n     (let [match-str (aget matches 0)\n           match-vals (if (== (.-length matches) 1)\n                        match-str\n                        (vec matches))\n           match-index (.-index matches)]\n       (cons [match-vals, (+ offset match-index)]\n             (lazy-seq\n              (let [post-idx (+ (.-index matches)\n                                (max 1 (.-length match-str)))]\n                (when (<= post-idx (.-length s))\n                  (re-seq-idx re (subs s post-idx) (+ offset post-idx))))))))))\n\n(defn collapse-whitespace-and-index\n  \"given a string argument `s` it will return a vector of two values:\n     - a modified version of `s`, call it s'\n     - a vector of indexes, v\n   s' will be a copy of s in which all consecutive whitespace is collapsed to one whitespace\n   v  will be a vector of index for characters in s' back to the original s\n   For example:\n      (collapse-whitespace-and-index \\\"a b  c\\\")\n   will return\n       [\\\"a b c\\\" [0 1 2 3 5]]     ;; notice that the 4 is not there\n   \" \n  [s]\n  (let [s' (clojure.string/replace s #\"\\s+\" \" \") ;; generate a new string with whitespace replaced \n        v (loop [v []     ;; Build up an index between the string with and without whitespace\n                       i-s 0\n                       i-s' 0] \n                  (cond \n                    (= (count s') i-s') (conj v (count s)) ;; we have reached the end of both strings\n                    (= (nth s i-s) (nth s' i-s')) \n                       (recur (conj v i-s) (inc i-s) (inc i-s')) ;; when we have a match save the index\n                    :else (recur v (inc i-s) i-s')))]    ;; no match (whitespace) increment the index on the orignal string\n    [s' v]))\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str num-seen]\n  (if (nil? search-str)\n    [0 0]  ;; on mouse out etc\n    (let [[form-str reindex]   (collapse-whitespace-and-index form-str) ;; match without whitespace\n          esc-str    (goog.string.regExpEscape search-str)\n          regex      (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" esc-str \")(\\\\s|\\\\)|\\\\]|\\\\})\")\n          re         (re-pattern regex)\n          results    (re-seq-idx re form-str)]\n      ;; (js/console.log \"FIND-BOUNDS\" form-str  regex reindex results) \n      (if (and search-str num-seen (seq results) (>= (count results)  num-seen))\n        (let [result                              (nth results (dec num-seen))\n              [[_ pre-match matched-form] index]  result\n              index                               (+ index (count pre-match))\n              start                               (nth reindex index)\n              stop                                (nth reindex (+ index (count matched-form)))]\n          [start stop])\n      ;; If the regex fails, fall back to string index just in case.\n        (let [start  (some->> form-str \n                              (str/index-of (pr-str search-str))\n                              (nth reindex))\n              length (if (some? start)\n                       (count (pr-str search-str))\n                       1)\n              end    (some->> start\n                              (+ length)\n                              (nth reindex))]\n          [start end])))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (reagent/create-class\n      {:get-snapshot-before-update\n       (fn event-expression-get-snapshot-before-update [this old-argv new-argv]\n         (let [node (rdom/dom-node this)]\n           (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (rdom/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               show-all-code?   @(rf/subscribe [:code/show-all-code?])\n               [start-index end-index] (find-bounds form-str (:form highlighted-form) (:num-seen highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n           ^{:key (gensym)}\n           [rc/box\n            :style {:max-height       (when-not show-all-code? (str (* 10 17) \"px\")) ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           code-border\n                    :background-color common/white-background-color\n                    :white-space      \"pre\"} ;; TODO: This is a quick fix for issue #270\n            :attr {:on-double-click (handler-fn (rf/dispatch [:code/set-show-all-code? (not show-all-code?)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn repl-msg-area\n  []\n  (let [repl-msg-state @(rf/subscribe [:code/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      ^{:key (gensym)}\n      [:div\n       {:style            {:opacity            \"0\"\n                           :color              \"white\"\n                           :background-color   \"green\"\n                           :padding            \"0px 4px\"\n                           :white-space        \"nowrap\"\n                           :overflow           \"hidden\"\n                           :animation-duration \"5000ms\"\n                           :margin-right       \"5px\"\n                           :animation-name     \"fade-clipboard-msg-re-frame-10x\"}\n        :on-animation-end #(rf/dispatch [:code/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into the REPL\"])))\n\n\n(defn repl-section\n  []\n  (let [execution-order?    @(rf/subscribe [:code/execution-order?])]\n   [rc/h-box\n    :height \"23px\"\n    :align :end\n    :style {:margin-bottom \"2px\"}\n    :children [[rc/checkbox\n                :model execution-order?\n                :label \"show trace in execution order\"\n                :on-change (handler-fn (rf/dispatch [:code/set-execution-order (not execution-order?)]))] \n               [rc/box\n                :size \"1\"\n                :child \"\"]\n               [repl-msg-area]\n               [rc/box\n                :size \"1\"\n                :child \"\"]\n               [rc/hyperlink\n                :label \"repl requires\"\n                :style {:margin-right common/gs-7s}\n                :attr {:title \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"}\n               ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n                :on-click #(do (utils/copy-to-clipboard \"(require '[day8.re-frame-10x])\")\n                               (rf/dispatch [:code/repl-msg-state :start]))]\n               [rc/hyperlink-info \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]]))\n\n\n(defn indent-block\n  [indent-level first?]\n  [rc/h-box\n   :children (doall\n               (for [num (range indent-level)]\n                 [rc/box\n                  :width \"12px\"\n                  :style {:background-color common/standard-background-color\n                          :border-top       (when first? code-border)\n                          :border-left      code-border}\n                  :child \"\"]))])\n\n\n(defn event-fragments\n  [unordered-fragments code-exec-id]\n  (let [code-open?       @(rf/subscribe [:code/code-open?])\n        max-frags        50\n        execution-order? @(rf/subscribe [:code/execution-order?])\n        fragments        (if execution-order?\n                           unordered-fragments \n                           (sort-by :syntax-order unordered-fragments))]\n    [rc/v-box\n     :size \"1\"\n     :style {:overflow-y \"auto\"}\n     :children [(doall\n                  (for [frag (take max-frags fragments)]\n                    (let [id     (:id frag)\n                          first? (zero? id)]\n                      ^{:key id}\n                      [rc/v-box\n                       :class \"code-fragment\"\n                       :style {:margin-top (when-not first? \"-1px\")}\n                       :attr {:on-mouse-enter (handler-fn (rf/dispatch [:code/hover-form frag]))\n                              :on-mouse-leave (handler-fn (rf/dispatch [:code/exit-hover-form frag]))}\n                       :children [[rc/h-box\n                                   :children [[indent-block (:indent-level frag) first?]\n                                              [code-header code-exec-id frag]]]\n                                  (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                    [rc/h-box\n                                     :children [[indent-block (:indent-level frag) false]\n                                                [code-block code-exec-id frag id]]])]])))\n                (when (> (count fragments) max-frags)\n                  [rc/label\n                   :style {:margin-top common/gs-5s\n                           :font-style \"italic\"}\n                   :label (str \"(only showing first \" max-frags \" of \" (count fragments) \" traces)\")])]]))\n\n\n(defn event-code\n  []\n  (let [code-traces    @(rf/subscribe [:code/current-code])\n        code-execution (first code-traces)                  ;; Ignore multiple code executions for now\n        #_#_debug? @(rf/subscribe [:settings/debug?])\n        #_#_highlighted-form (rf/subscribe [:code/highlighted-form])]\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (subs (pr-str @highlighted-form) 0 50) \"\\n\"])\n                  [event-expression]\n                  [repl-section]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:trace-id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-epoch-id])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size \"1\"\n     :class \"event-panel\"\n     :gap common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"]}