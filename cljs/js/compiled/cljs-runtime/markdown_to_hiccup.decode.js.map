{"version":3,"sources":["markdown_to_hiccup/decode.cljc"],"mappings":"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","names":["var_args","G__22133","markdown-to-hiccup.decode/decode-string","js/Error","s","goog.string/unescapeEntities","transform-fn","decoded","markdown_to_hiccup.decode.decode_string","markdown-to-hiccup.decode/encode-string","G__22136","markdown-to-hiccup.decode/decode-iseq","iseq","cljs.core.map","markdown-to-hiccup.decode/decode","cljs.core/seq","transform-str-fn","p1__22134#","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","markdown-to-hiccup.decode/dispatch","seq22137","G__22138","cljs.core/first","cljs.core/next","self__4851__auto__","x","rest","cljs.core/map?","or__4253__auto__","cljs.core/vector?","js/markdown-to-hiccup","js/markdown-to-hiccup.decode","js/markdown-to-hiccup.decode.decode","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__22139","cljs.core/MultiFn","cljs.core.symbol","transform","m","cljs.core.into","cljs.core/sorted-map","markdown_to_hiccup.decode.decode_iseq","v","cljs.core/vec","cljs.core/identity","f"],"sourcesContent":["(ns markdown-to-hiccup.decode\n  #?(:clj (:import [org.apache.commons.lang3 StringEscapeUtils])\n     :cljs (:require [goog.string :as gstr])))\n\n(defn decode-string\n  ([s]\n  #?(:clj (StringEscapeUtils/unescapeHtml4 s)\n     :cljs (gstr/unescapeEntities s)))\n  ([s transform-fn]\n   (let [decoded (decode-string s)]\n     (transform-fn decoded))))\n\n(defn encode-string\n  [s]\n  #?(:clj (StringEscapeUtils/escapeHtml4 s)\n     :cljs (throw (.Exception \"No yet implemented.\")))) ;; need to find a js encoder\n\n(declare decode)\n(defn decode-iseq\n  ([iseq] (map decode (seq iseq)))\n  ([iseq transform-str-fn] (map #(decode % transform-str-fn)\n                            (seq iseq))))\n\n(defn dispatch [x & rest]\n  \"I use standard predicate functions for type checking to support\n   both Clojure and ClojureScript, which do not dispatch\n   on the same types exactly (e.g. java.util.String vs string). Preserves\n   polymorphism by also allowing dispatch on a :decode-type key.\"\n  (cond\n    (map? x) (or (:decode-type x)\n                 ::map)\n    (vector? x) ::vector\n    (string? x) ::string\n    :else ::pass))\n\n(defmulti decode dispatch)\n(defmethod decode ::string\n  ([s] (decode-string s))\n  ([s transform] (decode-string s transform)))\n(defmethod decode ::map\n  ([m] (into (sorted-map) (decode-iseq m)))\n  ([m transform] (into (sorted-map) (decode-iseq m transform))))\n(defmethod decode ::vector\n  ([v] (vec (decode-iseq v)))\n  ([v transform] (vec (decode-iseq v transform))))\n(defmethod decode ::pass\n  ([x] (identity x))\n  ([x f] (identity x)))\n"]}