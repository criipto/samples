{"version":3,"sources":["day8/re_frame/http_fx.cljs"],"mappings":";AAyBA;;;2CAAA,+EAAAA,1HAAMG,8FAEHC,WAAWC,WAAWC;AAFzB,AAAA,IAAAL,aAAAD;qBAAA,AAAAE,4CAAAD,WAAA,IAAA,5EAEgCM;eAFhC,AAAAL,4CAAAD,WAAA,IAAA,tEAEyCO;AAFzC,AAIE,oBAAID;AACF,QAACH,2CAAAA,qDAAAA,ZAAWI,iCAAAA;;AACZ,IAAMC,UAAQ,uGAAA,2CAAA,sEAAA,qFAAA,sFAAA,mGAAA,teAACC,qMACmB,AAAaJ,sFACb,AAAeA,mFACf,AAAeA,+FACf,AAAmBA,mIACfA,nCAAwB,mCAAA,nCAACK,qEAC/CH;AANhB,AAOE,QAACH,2CAAAA,oDAAAA,XAAWI,gCAAAA;;;AAGlB,kDAAA,0DAAAG,5GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VACUI;iBADV,AAAAF,4CAAAF,eAAA,iEAAA,mFAAA,5NAEWT;iBAFX,AAAAW,4CAAAF,eAAA,gEAAA,mFAAA,3NAEsBR;AAFtB,AAME,IAAMa,MAAI,KAAKC;AAAf,kHACMF,rDACA,6DAAA,yGAAA,tKAACG,gHACUF,iHACA,yFAAA,WAAAG,pGAACE,gDAAQpB,9UAIpB,OAACuB;AAJU,AACU,OAACF,uBAAS,wDAAAH,xDAACI,6CAAKrB;GAD1B,WAAAkB;AAAA,AAEU,OAACE,uBAAS,wDAAAF,xDAACG,6CAAKpB;GACjBa,WACpB,mHAAA,gEAAA;;AAER,4CAAA,5CAAMS,gGAAqBV,QAAQX;AAAnC,AACE,IAAAsB,qBAAoB,AAAA,8FAAaX;AAAjC,AAAA,oBAAAW;AAAA,iBAAAA,bAASC;AAAT,AACE,OAACL,uBAAS,AAACC,6CAAKI,WAAWvB;;AAD7B;;;AA4BF,oCAAA,pCAAMwB,gFACHb;AADH,AAIE,IAEMc,mBAAiB,gDAAA,9CAAI,AAACC,4BAAYf,UAASA,2FAASA;AAF1D,AAGE,IAAAgB,aAAA,AAAAC,cAAgBH;IAAhBI,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,kBAAA,AAAAD,kDAAAE,hEAAQpB;AAAR,AAAA,AACE,IAAMX,cAAM,yBAAA,gDAAIW,hDAAQD,zBAAuB8B;AAA/C,AACE,AAACnB,0CAAoBV,YAAQX;;AAFjC;AAAA,eAAA2B;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAAX,9BAAQhB;AAAR,AAAA,AACE,IAAMX,cAAM,yBAAA,gDAAIW,hDAAQD,zBAAuB8B;AAA/C,AACE,AAACnB,0CAAoBV,YAAQX;;AAFjC;AAAA,eAAA,AAAAuC,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAIJ,qBAAA,rBAACc,sFAAmBjB","names":["p__22055","vec__22056","cljs.core.nth","day8.re-frame.http-fx/ajax-xhrio-handler","on-success","on-failure","xhrio","success?","response","details","cljs.core.merge","goog.net.ErrorCode/getDebugMessage","p__22061","map__22062","cljs.core/--destructure-map","cljs.core.get","day8.re-frame.http-fx/request->xhrio-options","request","api","js/goog.net.XhrIo","cljs.core.assoc","p1__22059#","p1__22060#","cljs.core.partial","re-frame.core/dispatch","cljs.core.conj","cljs.core.dissoc","day8.re-frame.http-fx/dispatch-on-request","temp__5751__auto__","on-request","day8.re-frame.http-fx/http-effect","seq-request-maps","cljs.core/sequential?","seq__22063","cljs.core/seq","chunk__22064","count__22065","i__22066","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","ajax.simple/ajax-request","re-frame.core/reg-fx"],"sourcesContent":["(ns day8.re-frame.http-fx\n  (:require\n    [goog.net.ErrorCode :as errors]\n    [re-frame.core :refer [reg-fx dispatch console]]\n    [ajax.simple :as ajax]\n    [ajax.xhrio]\n    #_[cljs.spec :as s])\n  (:import (goog.net XhrIo)))\n\n;; I provide the :http-xhrio effect handler leveraging cljs-ajax lib\n;; see API docs https://github.com/JulianBirch/cljs-ajax\n;; Note we use the ajax-request.\n;;\n;; Deviation from cljs-ajax options in request\n;; :handler       - not supported, see :on-success and :on-failure\n;; :on-success    - event vector dispatched with result\n;; :on-failure    - event vector dispatched with result\n;; :on-request    - event vector dispatched with raw xhrio object\n;;\n;; NOTE: if you need tokens or other values for your handlers,\n;;       provide them in the on-success, on-failure & on-request events e.g.\n;;       [:success-event \"my-token\"] your handler will get event-v\n;;       [:success-event \"my-token\" result]\n\n\n(defn ajax-xhrio-handler\n  \"ajax-request only provides a single handler for success and errors\"\n  [on-success on-failure xhrio [success? response]]\n  ; see http://docs.closure-library.googlecode.com/git/class_goog_net_XhrIo.html\n  (if success?\n    (on-success response)\n    (let [details (merge\n                    {:uri             (.getLastUri xhrio)\n                     :last-method     (.-lastMethod_ xhrio)\n                     :last-error      (.getLastError xhrio)\n                     :last-error-code (.getLastErrorCode xhrio)\n                     :debug-message   (-> xhrio .getLastErrorCode (errors/getDebugMessage))}\n                    response)]\n      (on-failure details))))\n\n\n(defn request->xhrio-options\n  [{:as   request\n    :keys [on-success on-failure]\n    :or   {on-success      [:http-no-on-success]\n           on-failure      [:http-no-on-failure]}}]\n  ; wrap events in cljs-ajax callback\n  (let [api (new goog.net.XhrIo)]\n    (-> request\n        (assoc\n          :api     api\n          :handler (partial ajax-xhrio-handler\n                            #(dispatch (conj on-success %))\n                            #(dispatch (conj on-failure %))\n                            api))\n        (dissoc :on-success :on-failure :on-request))))\n\n(defn dispatch-on-request [request xhrio]\n  (if-let [on-request (:on-request request)]\n    (dispatch (conj on-request xhrio))))\n\n;; Specs commented out until ClojureScript has a stable release of spec.\n;\n;(s/def ::method keyword?)\n;(s/def ::uri string?)\n;(s/def ::response-format (s/keys :req-un [::description ::read ::content-type]))\n;(s/def ::format (s/keys :req-un [::write ::content-type]))\n;(s/def ::timeout nat-int?)\n;(s/def ::params any?)\n;(s/def ::headers map?)\n;(s/def ::with-credentials boolean?)\n;\n;(s/def ::on-success vector?)\n;(s/def ::on-failure vector?)\n;(s/def ::on-request vector?)\n;\n;(s/def ::request-map (s/and (s/keys :req-un [::method ::uri ::response-format ::on-success ::on-failure ::on-request]\n;                                    :opt-un [::format ::timeout ::params ::headers ::with-credentials])\n;                            (fn [m] (if (contains? m :params)\n;                                      (contains? m :format)\n;                                      true))))\n;\n;(s/def ::sequential-or-map (s/or :request-map ::request-map :seq-request-maps (s/coll-of ::request-map\n;                                                                                         :kind sequential?\n;                                                                                         :into [])))\n\n(defn http-effect\n  [request]\n  #_(when-not (s/valid? ::sequential-or-map request)\n      (throw (ex-info \"http-xhrio fx: spec error\" (s/explain-data ::sequential-or-map request))))\n  (let [#_ #_ [conform-val v] (s/conform ::sequential-or-map request)\n        #_ #_ seq-request-maps (if (= :seq-request-maps conform-val) v [v])\n        seq-request-maps (if (sequential? request) request [request])]\n    (doseq [request seq-request-maps]\n      (let [xhrio (-> request request->xhrio-options ajax/ajax-request)]\n        (dispatch-on-request request xhrio)))))\n\n(reg-fx :http-xhrio http-effect)\n"]}