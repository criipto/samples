{"version":3,"sources":["markdown/transformers.cljc"],"mappings":"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","names":["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take","trimmed","clojure.string/trim","and__4251__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__22350","map__22351","cljs.core/--destructure-map","cljs.core.get","markdown.transformers/empty-line","code","codeblock","state","or__4253__auto__","clojure.string/blank?","cljs.core.dissoc","markdown.transformers/superscript","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join","cljs.core._EQ_","cljs.core/first","cljs.core.into","cljs.core.concat","cljs.core/seq","cljs.core/second","cljs.core.drop","cljs.core/rest","p__22352","map__22353","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc","temp__5751__auto__","heading","markdown.common/make-heading","p__22354","map__22355","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core.apply","cljs.core/str","cljs.core.drop_last","p__22359","map__22360","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__22358#","clojure.string/replace","vec__22361","cljs.core.nth","url","cljs.core/deref","markdown.common.freeze_string","cljs.core.subs","cljs.core/count","cljs.core/vreset!","cljs.core.merge","markdown.transformers/autoemail-transformer","left-pad","s","G__22367","encoder","c","markdown.transformers/*formatter*","p1__22366#","encoded","cljs.core.map","p__22368","map__22369","markdown.transformers/set-line-state","inline-heading","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__22370","map__22371","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","p__22372","map__22373","markdown.transformers/close-paragraph","G__22374","markdown.transformers/paragraph","p__22375","map__22376","markdown.transformers/code","cljs.core.not_EQ_","markdown.common/escape-code","clojure.string/replace-first","num-spaces","cljs.core.take_while","cljs.core/=","p__22377","map__22378","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__22379","clojure.string.split","vec__22380","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while","cljs.core.remove","p__22383","map__22384","markdown.transformers/blockquote-1","p__22385","map__22386","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce","p__22388","vec__22389","id","label","cljs.core.interpose","p1__22387#","markdown.transformers/parse-metadata-line","line","vec__22392","vec__22395","_","key","val","cljs.core/re-matches","next-val","cljs.core.keyword","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__22401","data","cljs.core/sequential?","prev-val","postfix","norm-val","new-val","cljs.core.conj","js/Error","markdown.transformers/parse-metadata-headers","lines-seq","cljs.core/string?","parsed","cljs.core/reduced","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"],"sourcesContent":["(ns markdown.transformers\n  (:require [clojure.string :as string]\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              separator\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]))\n\n(declare ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (if text (string/trim text))]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                     (= 1 (count s)) (str \"0\")))\n        encoder (if (:clojurescript state)\n                  (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                  (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n        text\n        #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n        #(let [encoded (->> (subs % 1 (dec (count %)))\n                            (map encoder)\n                            (apply str))]\n           (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim))))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof lists code codeblock] :as state}]\n  (cond\n    (or lists codeblock)\n    [text state]\n\n    code\n    (if (or eof (not= \"    \" (string/join (take 4 text))))\n      [(str \"</code></pre>\" text) (dissoc state :indented-code :code :last-line-empty?)]\n      [(str \"\\n\" (escape-code (string/replace-first text #\"    \" \"\"))) state])\n\n    (empty? (string/trim text))\n    [text state]\n\n    :default\n    (let [num-spaces (count (take-while (partial = \\space) text))]\n      (if (> num-spaces 3)\n        [(str \"<pre><code>\" (escape-code (string/replace-first text #\"    \" \"\")))\n         (assoc state :code true :indented-code true)]\n        [text state]))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed (string/trim text)\n        next-line-closes? (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim)))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \"\\n\" (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (= [\\` \\` \\`] (take 3 trimmed)))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (if (not-empty lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock lists] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end )]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (not (empty? remain))\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists.\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced (flatten-metadata acc))))\n    [] lines-seq))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n"]}