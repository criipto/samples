import { empty, cons, head, isEmpty, fold as fold_1, item, ofSeq, map, sortBy, sum, length as length_1, take, filter, ofArray } from "../../fable_modules/fable-library.3.6.3/List.js";
import { op_Addition, fromParts } from "../../fable_modules/fable-library.3.6.3/Decimal.js";
import { map as map_1, take as take_1, initializeInfinite, filter as filter_1, singleton, collect, delay, toList, fold } from "../../fable_modules/fable-library.3.6.3/Seq.js";
import { get_Unicode } from "../../fable_modules/fable-library.3.6.3/Encoding.js";
import { randomNext, comparePrimitives, min } from "../../fable_modules/fable-library.3.6.3/Util.js";
import { rangeDouble } from "../../fable_modules/fable-library.3.6.3/Range.js";
import { some, value as value_1 } from "../../fable_modules/fable-library.3.6.3/Option.js";
import { Account, LedgerEntry } from "../Models.js";
import { date, now, addDays } from "../../fable_modules/fable-library.3.6.3/Date.js";
import { op_UnaryNegation_Int32 } from "../../fable_modules/fable-library.3.6.3/Int32.js";

const listOfCompanies = ofArray(["Hessel, Friesen and Boehm", "Rolfson, Keebler and Halvorson", "Morissette Inc", "Mueller - Ortiz", "Rowe, Murazik and Williamson", "Considine - Kassulke", "Haag - Cummings", "Schimmel and Sons", "Romaguera LLC", "Shields and Sons", "Hilll Inc", "Littel LLC", "Witting and Sons", "Murray and Sons", "Konopelski Group", "Langosh, Schinner and Roberts", "Gottlieb Inc", "Bednar Inc", "Connelly, Kuhn and Jacobson", "Mante - Medhurst", "Bergstrom and Sons", "Schaden Group", "Johnston and Sons", "Crist and Sons", "Torp, Cummerata and Harber", "Friesen - Flatley", "Goyette, Reinger and DuBuque", "Daugherty Inc", "Ruecker, Hyatt and Prosacco", "Purdy - Lebsack", "Barton Inc", "Mraz Group", "Rath, Hand and Schoen", "Turner LLC", "Dietrich - Morar", "Cormier, Crist and Hammes", "Hahn, Ledner and Stokes", "Casper LLC", "Hand, Bahringer and Medhurst", "Kirlin - Von", "Stanton - Bosco", "Reichert and Sons", "Crist - Williamson", "Bradtke, Hagenes and Keebler", "Rempel, Corkery and McDermott", "Jerde - Howe", "Rempel, Langworth and Effertz", "Kunze, Grady and Waelchi", "Gusikowski - Effertz", "Klocko - Sipes", "Heidenreich, Ledner and Mills", "Tromp - Sipes", "Herman - Mitchell", "Shanahan, Powlowski and Ankunding", "Dare and Sons", "Dicki Inc", "Upton and Sons", "Fay, Fahey and Wiza", "Runolfsson - Olson", "Miller, Stehr and Mertz", "Homenick, Muller and Wunsch", "Langworth LLC", "Hirthe Group", "Crist - Schmitt", "Schumm Inc", "Daniel, Hagenes and Huels", "Smitham, Anderson and Nolan", "Doyle - Walsh", "Sauer LLC", "Cronin, Wiza and Boyle", "Reilly LLC", "Veum - Pagac", "Schuster - Lesch", "Kassulke - Blanda", "Purdy - Rohan", "Schmidt - Lesch", "Koelpin Group", "Hills Group", "Walker - McGlynn", "Kunde LLC", "Gulgowski Inc", "Doyle, Botsford and Olson", "Gibson - Murray", "Volkman, Haag and McGlynn", "Gusikowski Group", "Larson Inc", "Hessel, Stroman and Langworth", "Wilderman and Sons", "Stanton - Yundt", "Erdman and Sons", "Jast, Champlin and Toy", "Kutch, O\u0027Kon and Toy", "Goldner - Olson", "Welch - Schoen", "Rowe, Hagenes and Connelly", "Rutherford - Gleason", "O\u0027Keefe, Keebler and Ortiz", "Funk - Robel", "Luettgen and Sons", "O\u0027Reilly - McGlynn", "Daugherty - Bosco", "Bergnaum - Reichert", "Harvey, Kunde and Bogisich", "Wehner and Sons", "Marquardt Group", "Stamm - Reilly", "Berge - Beier", "Prohaska, Ernser and Gaylord", "Volkman Group", "Zulauf, Cartwright and Vandervort", "Herman - Mitchell", "Turner, Blick and Oberbrunner", "Waters, Gulgowski and Mann", "Reynolds Inc", "Cummings and Sons", "Kautzer Group", "Leffler and Sons", "Huel - Denesik", "Kozey, West and Lesch", "Borer - Bogisich", "Wehner Group", "Considine, Nicolas and Runte", "Lesch Inc", "Dickens, Kshlerin and Kuhn", "Connelly LLC", "Shields - Marvin", "Pouros Group", "Davis, Goodwin and Raynor", "D\u0027Amore Group", "Oberbrunner - Kreiger", "Prosacco Inc", "Douglas Inc", "O\u0027Kon - Rippin", "Huel, Murray and Feest", "Powlowski, Reilly and Harris", "Altenwerth Group", "Sauer - Hauck", "Smith Group", "VonRueden, Kutch and Ullrich", "Rice - Carroll", "Heidenreich, Schaefer and Stehr", "Little, Hudson and King", "Marks, Altenwerth and Kiehn", "White and Sons", "Little Group", "Howe, Senger and Willms", "Hilll - Champlin", "Johnson - Gibson", "Crist - Simonis", "Okuneva LLC", "Maggio - Upton", "Kuvalis, O\u0027Keefe and Mosciski", "Metz - Effertz", "Ondricka LLC", "Lang, Tremblay and Will", "Schmidt and Sons", "Rohan Group", "Reilly - Hermann", "Christiansen Group", "Ritchie, Trantow and Sawayn", "Kautzer, Schmeler and Buckridge", "Hayes, Bruen and Runolfsson", "Hickle - Collins", "Konopelski Group", "Romaguera - Mante", "Runolfsdottir and Sons", "Erdman Group", "Kuhn - Corkery", "Legros and Sons", "Smith - Krajcik", "Thompson - Powlowski", "Rath - Sauer", "Reinger LLC", "Sporer - Howe", "Hoeger, Gerhold and Howell", "Hirthe - Johnston", "Wiza - Mayer", "Mertz - O\u0027Keefe", "Murazik LLC", "McGlynn and Sons", "Legros LLC", "McGlynn - Goldner", "Bauch Group", "Bashirian, Murray and Reinger", "Howe - Prosacco", "Toy Group", "Bruen, Wisozk and Goodwin", "Stokes - Jakubowski", "Rosenbaum and Sons", "Rowe LLC", "Haag Group", "Dooley, Ryan and Osinski", "Homenick and Sons", "Oberbrunner - Weber", "Rogahn, Ernser and Gleichner", "Larson - Nicolas", "Mohr - Crooks", "Funk Inc", "Davis, Dach and Jast", "Murray - Crist"]);

const listOfAmounts = ofArray([fromParts(99452, 0, 0, false, 2), fromParts(1500000, 0, 0, true, 2), fromParts(60100, 0, 0, true, 2), fromParts(1000000, 0, 0, false, 2), fromParts(250000, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(106926, 0, 0, true, 2), fromParts(131117, 0, 0, true, 2), fromParts(30950, 0, 0, true, 2), fromParts(511758, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(38000, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(122865, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(830000, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(421875, 0, 0, true, 2), fromParts(67263, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(49463, 0, 0, true, 2), fromParts(220000, 0, 0, true, 2), fromParts(180000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(711452, 0, 0, true, 2), fromParts(3130000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(38100, 0, 0, true, 2), fromParts(131139, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(368022, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(122865, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(830000, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(69764, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(5875, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(400000, 0, 0, true, 2), fromParts(76800, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(200000, 0, 0, true, 2), fromParts(10794, 0, 0, true, 0), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(1500, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(131132, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(59183, 0, 0, true, 2), fromParts(123360, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(110000, 0, 0, true, 2), fromParts(1079470, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(150053, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(86900, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(20000, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(1947862, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(188772, 0, 0, true, 2), fromParts(38100, 0, 0, true, 2), fromParts(11000, 0, 0, false, 0), fromParts(1000000, 0, 0, true, 2), fromParts(1500000, 0, 0, false, 2), fromParts(38000, 0, 0, true, 2), fromParts(2000000, 0, 0, false, 2), fromParts(1100000, 0, 0, true, 2), fromParts(74590, 0, 0, true, 2), fromParts(57947, 0, 0, true, 2), fromParts(66211, 0, 0, true, 2), fromParts(150000, 0, 0, true, 2), fromParts(700000, 0, 0, false, 2), fromParts(150000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(62100, 0, 0, true, 2), fromParts(30000, 0, 0, true, 2), fromParts(30000, 0, 0, true, 2), fromParts(1079474, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(131132, 0, 0, true, 2), fromParts(70810, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(5000, 0, 0, true, 0), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(2000000, 0, 0, false, 2), fromParts(231000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(127000, 0, 0, false, 2), fromParts(70410, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(202500, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(700000, 0, 0, false, 2), fromParts(150000, 0, 0, true, 2), fromParts(1079474, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(3010000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(17100, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(210938, 0, 0, true, 2), fromParts(20000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(67756, 0, 0, true, 2), fromParts(133235, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(20990, 0, 0, true, 2), fromParts(75760, 0, 0, true, 2), fromParts(139500, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(150000, 0, 0, true, 2), fromParts(800, 0, 0, true, 0), fromParts(1079470, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(151702, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(3010000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(99927, 0, 0, true, 2), fromParts(627480, 0, 0, true, 2), fromParts(308712, 0, 0, true, 2), fromParts(22889, 0, 0, true, 2), fromParts(397125, 0, 0, true, 2), fromParts(15475, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(352500, 0, 0, true, 2), fromParts(50000, 0, 0, false, 2)]);

export const primes = new Int32Array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619]);

export function getSeed(name) {
    return fold((res, b) => (res * primes[~(~b)]), 1, get_Unicode().getBytes(name));
}

export function generate(name, maxLedgerLength) {
    let rnd;
    const arg00 = getSeed(name) | 0;
    rnd = {};
    const accountNames = filter((_arg1) => (Math.random() > 0.5), ofArray(["Checking", "Savings", "Budget", "Household", "Children budget", "Childs savings", "Investment", "Mastercard"]));
    const accountNames_1 = take(min((x, y) => comparePrimitives(x, y), length_1(accountNames), 4), accountNames);
    const length = (maxl) => sum(toList(delay(() => collect((matchValue) => singleton((Math.random() < 0.75) ? 1 : 0), rangeDouble(1, 1, maxl)))), {
        GetZero: () => 0,
        Add: (x_1, y_1) => (x_1 + y_1),
    });
    const randomElements = (lst) => {
        let source_1;
        const lst_1 = sortBy((_arg2) => randomNext(0, 2147483647), lst, {
            Compare: (x_2, y_2) => comparePrimitives(x_2, y_2),
        });
        return map((option_1) => value_1(option_1), ofSeq((source_1 = filter_1((option) => (option != null), initializeInfinite((i) => {
            const elem = item(i % length_1(lst_1), lst_1);
            return (Math.random() < 0.5) ? some(elem) : (void 0);
        })), take_1(length_1(lst_1), source_1))));
    };
    return map((accountName) => {
        const listOfAmounts_1 = randomElements(listOfAmounts);
        const listOfCompanies_1 = randomElements(listOfCompanies);
        const ledgerEntries = fold_1((entries_1, entry) => {
            let balance;
            if (!isEmpty(entries_1)) {
                const e_1 = head(entries_1);
                balance = e_1.Balance;
            }
            else {
                balance = fromParts(0, 0, 0, false, 0);
            }
            return cons(new LedgerEntry(entry.Date, entry.Amount, op_Addition(balance, entry.Amount), entry.Text), entries_1);
        }, empty(), fold_1((entries, tupledArg) => {
            let e, copyOfStruct_1, copyOfStruct;
            const amount_1 = tupledArg[0];
            const text_1 = tupledArg[1];
            const dateInterval_1 = tupledArg[2];
            return cons(new LedgerEntry((!isEmpty(entries)) ? ((e = head(entries), addDays(e.Date, dateInterval_1))) : ((copyOfStruct_1 = ((copyOfStruct = now(), date(copyOfStruct))), addDays(copyOfStruct_1, dateInterval_1))), amount_1, fromParts(0, 0, 0, false, 0), text_1), entries);
        }, empty(), toList(delay(() => map_1((i_1) => {
            const amount = item(i_1, listOfAmounts_1);
            const text = item(i_1, listOfCompanies_1);
            const dateInterval = op_UnaryNegation_Int32(length(10));
            return [amount, text, dateInterval];
        }, rangeDouble(0, 1, length(maxLedgerLength) % maxLedgerLength))))));
        return new Account(accountName, ledgerEntries);
    }, accountNames_1);
}

//# sourceMappingURL=Statements.js.map
