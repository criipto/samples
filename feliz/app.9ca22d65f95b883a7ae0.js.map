{"version":3,"file":"app.9ca22d65f95b883a7ae0.js","mappings":"uBAAIA,E,uCC4YSC,EAAmBC,E,qtDCxYzB,SAASC,EAAYC,GACxB,OAAOC,MAAMC,QAAQF,IAAMG,YAAYC,OAAOJ,GAiB3C,SAASK,EAAgBL,EAAGM,GAC/B,OAAOC,OAAOC,eAAeR,GAAGS,cAAgBF,OAAOC,eAAeF,GAAGG,YAEtE,IAAMC,EAAb,WACI,WAAYC,GAAM,UACdC,KAAKD,KAAOA,EAFpB,iBAIK,uDAJL,MAII,WACI,OAAOC,KAAKC,UALpB,KAOK,6CAPL,MAOI,WACI,OAAOD,KAAKC,UARpB,KAUK,0CAVL,MAUI,WACI,IAAMC,EAAMF,KAAKD,KAAKI,OAEtB,OADAH,KAAKC,QAAUC,EAAIE,OACXF,EAAIG,OAbpB,KAeK,uCAfL,MAeI,WACI,MAAM,IAAIC,MAAM,kCAhBxB,qBAkBI,gBAlBJ,KAsBO,SAASC,EAAcC,GAC1B,MAAkC,mBAApBA,EAAEC,cACVD,EAAEC,gBACF,IAAIX,EAAWU,EAAEE,OAAOC,aAE3B,SAASC,EAAWC,GAAI,MAC3B,cACKH,OAAOC,UADZ,WAC0B,OAAOX,QADjC,uBAGQ,IAAMc,EAAUD,EAAG,6CAEnB,MAAO,CAAER,MAAOS,EAASV,MADTU,EAAUD,EAAG,qDAAkDE,MAJvF,EAgDG,IAAMC,EAAb,WACI,WAAYC,GAAS,UACjBjB,KAAKiB,QAAUA,EACfjB,KAAKkB,gBAAiB,EAH9B,6BAKI,WAKI,OAJKlB,KAAKkB,iBACNlB,KAAKmB,aAAenB,KAAKiB,UACzBjB,KAAKkB,gBAAiB,GAEnBlB,KAAKmB,eAVpB,0BAYI,WACI,OAAOnB,KAAKkB,mBAbpB,KAmBO,SAASE,EAAaC,EAAGC,GAE5B,IADA,IAAIC,EAAMF,EAAEG,SAAS,IACdD,EAAID,OAASA,GAChBC,EAAM,IAAMA,EAEhB,OAAOA,EAYJ,SAASE,EAAWC,GACvB,IAAMC,EAAQD,EACd,MAA+B,iBAAjBC,EAAMC,OACdD,EAAMC,OACS,IAAdF,EAAKG,KACF,GAAgC,IAA5BH,EAAKI,oBAMhB,SAASC,EAAcV,EAAGW,GAE7B,OADAX,EAAIA,EAAI,GAAc,MAATW,GAA2B,KAAVA,EAAe,WAAaX,EAAI,EAAIA,GACzDG,SAASQ,GAEf,IAAMC,EAAb,mEACI,SAAUzB,GAIN,OAHKyB,EAAUC,MAAMC,IAAI3B,IACrByB,EAAUC,MAAME,IAAI5B,IAAKyB,EAAUI,OAEhCJ,EAAUC,MAAMI,IAAI9B,OALnC,KAUO,SAAS+B,EAAWC,GAIvB,IAHA,IAAInB,EAAI,EACJoB,EAAI,KACFC,EAAMF,EAAElB,OACPD,EAAIqB,GACPD,EAAS,GAAJA,EAAUD,EAAEG,WAAWtB,KAEhC,OAAOoB,EAEJ,SAASG,EAAWxD,GACvB,OAAW,WAAJA,EAAiB,EAGrB,SAASyD,EAAiBC,GAC7B,OAAsB,IAAlBA,EAAOxB,OACA,EAEJwB,EAAOC,QAAO,SAACC,EAAIC,GACtB,OAASD,GAAM,GAAKA,EAAMC,KAwC3B,SAASC,EAAe9D,GAC3B,GAAS,MAALA,EACA,OAAO,EAEX,SAAeA,IACX,IAAK,UACD,OAAOA,EAAI,EAAI,EACnB,IAAK,SACD,OAAOwD,EAAWxD,GACtB,IAAK,SACD,OAAOmD,EAAWnD,GACtB,QACI,OAxNZ,SAAoBA,GAChB,MAAgC,mBAAlBA,EAAE+D,YAuNJC,CAAWhE,GACJA,EAAE+D,cAEJhE,EAAYC,GAvB1B,SAAmBA,GAGtB,IAFA,IAAMsD,EAAMtD,EAAEkC,OACRwB,EAAS,IAAIzD,MAAMqD,GAChBrB,EAAI,EAAGA,EAAIqB,EAAKrB,IACrByB,EAAOzB,GAAK6B,EAAe9D,EAAEiC,IAEjC,OAAOwB,EAAiBC,GAkBLO,CAAUjE,GAEZA,aAAakE,KA7B3B,SAAkBlE,GACrB,OAAOA,EAAEmE,UA6BUC,CAASpE,GAEXO,OAAOC,eAAeR,GAAGS,cAAgBF,OAGvCkD,EADQlD,OAAO8D,OAAOrE,GAAGsE,KAAI,SAACC,GAAD,OAAOT,EAAeS,OAKnDf,EAAWX,EAAU2B,GAAGxE,KAcxC,SAASyE,EAAgBzE,EAAGM,EAAGoE,GAClC,GAAS,MAAL1E,EACA,OAAY,MAALM,EAEX,GAAS,MAALA,EACA,OAAO,EAEX,GAAIN,EAAEkC,SAAW5B,EAAE4B,OACf,OAAO,EAEX,IAAK,IAAID,EAAI,EAAGA,EAAIjC,EAAEkC,OAAQD,IAC1B,IAAKyC,EAAG1E,EAAEiC,GAAI3B,EAAE2B,IACZ,OAAO,EAGf,OAAO,EAEJ,SAAS0C,EAAY3E,EAAGM,GAC3B,OAAOmE,EAAgBzE,EAAGM,EAAGsE,GAiB1B,SAASA,EAAO5E,EAAGM,GACtB,OAAIN,IAAMM,IAGI,MAALN,EACO,MAALM,EAEG,MAALA,GAGa,WAAb,EAAON,KAtSpB,SAAqBA,GACjB,MAA2B,mBAAbA,EAAE6E,OAwSPC,CAAY9E,GACVA,EAAE6E,OAAOvE,GAEXP,EAAYC,GACVD,EAAYO,IAAMqE,EAAY3E,EAAGM,GAEnCN,aAAakE,KACV5D,aAAa4D,MAAgC,IAAvBa,EAAa/E,EAAGM,GAGvCC,OAAOC,eAAeR,GAAGS,cAAgBF,QAtCxD,SAAsBP,EAAGM,GACrB,IAAM0E,EAAQzE,OAAO0E,KAAKjF,GACpBkF,EAAQ3E,OAAO0E,KAAK3E,GAC1B,GAAI0E,EAAM9C,SAAWgD,EAAMhD,OACvB,OAAO,EAEX8C,EAAMG,OACND,EAAMC,OACN,IAAK,IAAIlD,EAAI,EAAGA,EAAI+C,EAAM9C,OAAQD,IAC9B,GAAI+C,EAAM/C,KAAOiD,EAAMjD,KAAO2C,EAAO5E,EAAEgF,EAAM/C,IAAK3B,EAAE4E,EAAMjD,KACtD,OAAO,EAGf,OAAO,EAyBuDmD,CAAapF,EAAGM,KAG3E,SAASyE,EAAa/E,EAAGM,GAC5B,IAAI+E,EACAC,EAUJ,MARI,WAAYtF,GAAK,WAAYM,GAC7B+E,EAAQrF,EAAEmE,UACVmB,EAAQhF,EAAE6D,YAGVkB,EAAQrF,EAAEmE,UAAY9B,EAAWrC,GACjCsF,EAAQhF,EAAE6D,UAAY9B,EAAW/B,IAE9B+E,IAAUC,EAAQ,EAAKD,EAAQC,GAAS,EAAI,EAEhD,SAASC,EAAkBvF,EAAGM,GACjC,OAAON,IAAMM,EAAI,EAAKN,EAAIM,GAAK,EAAI,EAoBhC,SAASkF,EAAcxF,EAAGM,GAC7B,OAnBG,SAA2BN,EAAGM,EAAGmF,GACpC,GAAS,MAALzF,EACA,OAAY,MAALM,EAAY,EAAI,EAE3B,GAAS,MAALA,EACA,OAAQ,EAEZ,GAAIN,EAAEkC,SAAW5B,EAAE4B,OACf,OAAOlC,EAAEkC,OAAS5B,EAAE4B,QAAU,EAAI,EAEtC,IAAK,IAAID,EAAI,EAAGyD,EAAI,EAAGzD,EAAIjC,EAAEkC,OAAQD,IAEjC,GAAU,KADVyD,EAAID,EAAKzF,EAAEiC,GAAI3B,EAAE2B,KAEb,OAAOyD,EAGf,OAAO,EAGAC,CAAkB3F,EAAGM,EAAGsF,GAwB5B,SAASA,EAAQ5F,EAAGM,GACvB,OAAIN,IAAMM,EACC,EAEG,MAALN,EACO,MAALM,EAAY,GAAK,EAEd,MAALA,EACE,EAEW,WAAb,EAAON,GACLA,EAAIM,GAAK,EAAI,EAhY5B,SAAsBN,GAClB,MAA8B,mBAAhBA,EAAE6F,UAiYPC,CAAa9F,GACXA,EAAE6F,UAAUvF,GAEdP,EAAYC,GACVD,EAAYO,GAAKkF,EAAcxF,EAAGM,IAAM,EAE1CN,aAAakE,KACX5D,aAAa4D,KAAOa,EAAa/E,EAAGM,IAAM,EAG1CC,OAAOC,eAAeR,GAAGS,cAAgBF,OA7CxD,SAAwBP,EAAGM,GACvB,IAAM0E,EAAQzE,OAAO0E,KAAKjF,GACpBkF,EAAQ3E,OAAO0E,KAAK3E,GAC1B,GAAI0E,EAAM9C,SAAWgD,EAAMhD,OACvB,OAAO8C,EAAM9C,OAASgD,EAAMhD,QAAU,EAAI,EAE9C8C,EAAMG,OACND,EAAMC,OACN,IAAK,IAAIlD,EAAI,EAAGyD,EAAI,EAAGzD,EAAI+C,EAAM9C,OAAQD,IAAK,CAC1C,IAAM8D,EAAMf,EAAM/C,GAClB,GAAI8D,IAAQb,EAAMjD,GACd,OAAO8D,EAAMb,EAAMjD,IAAM,EAAI,EAI7B,GAAU,KADVyD,EAAIE,EAAQ5F,EAAE+F,GAAMzF,EAAEyF,KAElB,OAAOL,EAInB,OAAO,EAyBsDM,CAAehG,EAAGM,IAAM,EAGlF,SAAS2F,EAAIC,EAAUlG,EAAGM,GAC7B,OAAO4F,EAASlG,EAAGM,GAAK,EAAIN,EAAIM,EAQ7B,SAAS6F,EAAWnF,GACvB,IAAIoF,EAAOpF,EACX,OAAO,SAACA,EAAOqF,GACX,OAAKA,OAIDD,EAAOpF,GAHAoF,GAQZ,SAASE,EAAUC,GACtB,IAD8B,EACxBC,EAAM,GADkB,IAEbD,GAFa,IAE9B,2BAAyB,KAAdE,EAAc,QACrBD,EAAIC,EAAG,IAAMA,EAAG,IAHU,8BAK9B,OAAOD,EAnRX3D,EAAUC,MAAQ,IAAI4D,QACtB7D,EAAUI,MAAQ,EA6VlB,IAAM0D,EAAUrF,OAAO,W,uhDC7fhB,SAASsF,EAAYC,GACxB,IAD8B,EAC1B5D,EAAQ,EACRd,EAAM,IAFoB,E,+lBAAA,CAGd0E,GAHc,IAG9B,2BAAsB,KAAX7G,EAAW,QAClB,GAAc,IAAViD,EACAd,GAAOC,EAASpC,OAEf,IAAc,MAAViD,EAAe,CACpBd,GAAO,QACP,MAGAA,GAAO,KAAOC,EAASpC,GAE3BiD,KAd0B,8BAgB9B,OAAOd,EAAM,IAEV,SAASC,EAASpC,GAAkB,IAAf8G,EAAe,uDAAH,EACpC,GAAS,MAAL9G,GAA0B,WAAb,EAAOA,GAAgB,CACpC,GAA0B,mBAAfA,EAAEoC,SACT,OAAOpC,EAAEoC,WAER,GAAId,OAAOC,YAAYvB,EACxB,OAAO4G,EAAY5G,GAGnB,IAAM+G,EAAOxG,OAAOC,eAAeR,GAAGS,YACtC,OAAOsG,IAASxG,QAAUuG,EAAY,GAEhC,KAAOvG,OAAOyG,QAAQhH,GAAGsE,KAAI,qCAAgB,MAAQlC,EAAxB,KAAoC0E,EAAY,MAAIG,KAAK,QAAU,KAChGF,EAAKG,KAGnB,OAAOC,OAAOnH,GAmBX,IAAMoH,EAAb,8DACI,WACI,OAAOxG,KAAKyG,QAAQzG,KAAK0G,OAFjC,oBAII,WACI,OAA8B,IAAvB1G,KAAK2F,OAAOrE,OAAetB,KAAKsG,KAAO,CAACtG,KAAKsG,MAAMK,OAAO3G,KAAK2F,UAL9E,sBAOI,WACI,OAzBD,SAAuBW,EAAMX,GAChC,GAAsB,IAAlBA,EAAOrE,OACP,OAAOgF,EAGP,IAAIM,EAAW,GACXC,GAAa,EAQjB,OAPsB,IAAlBlB,EAAOrE,OAEPuF,GADAD,EAAWpF,EAASmE,EAAO,KACLmB,QAAQ,MAAQ,EAGtCF,EAAWjB,EAAOjC,KAAI,SAACtE,GAAD,OAAOoC,EAASpC,MAAIiH,KAAK,MAE5CC,GAAQO,EAAa,KAAO,KAAOD,GAAYC,EAAa,IAAM,IAWlEE,CAAc/G,KAAKsG,KAAMtG,KAAK2F,UAR7C,yBAUI,WACI,IAAM7C,EAAS9C,KAAK2F,OAAOjC,KAAI,SAACtE,GAAD,OAAO8D,EAAe9D,MAErD,OADA0D,EAAOkE,OAAO,EAAG,EAAGpE,EAAW5C,KAAK0G,MAC7B7D,EAAiBC,KAbhC,oBAeI,SAAOmE,GACH,OAAIjH,OAASiH,KAGHxH,EAAgBO,KAAMiH,IAGvBjH,KAAK0G,MAAQO,EAAMP,KACjB3C,EAAY/D,KAAK2F,OAAQsB,EAAMtB,UAvBlD,uBA6BI,SAAUsB,GACN,OAAIjH,OAASiH,EACF,EAEDxH,EAAgBO,KAAMiH,GAGvBjH,KAAK0G,MAAQO,EAAMP,IACjB9B,EAAc5E,KAAK2F,OAAQsB,EAAMtB,QAGjC3F,KAAK0G,IAAMO,EAAMP,KAAO,EAAI,GAN3B,MAlCpB,KA8FO,IAAMQ,EAAb,kEACI,WAAW,OAnDf,SAAsBjB,GAGlB,IAFA,IAAMzF,EAAI,GACJ6D,EAAO1E,OAAO0E,KAAK4B,GAChB5E,EAAI,EAAGA,EAAIgD,EAAK/C,OAAQD,IAC7Bb,EAAE6D,EAAKhD,IAAM4E,EAAK5B,EAAKhD,IAE3B,OAAOb,EA6CW2G,CAAanH,QADnC,sBAEI,WAAa,OA5CjB,SAAwBiG,GACpB,MAAO,KAAOtG,OAAOyG,QAAQH,GAAMvC,KAAI,qCAAgB,MAAQlC,EAAxB,SAAqC6E,KAAK,QAAU,KA2CvEe,CAAepH,QAFvC,yBAGI,WAAgB,OA1CpB,SAA2BiG,GAEvB,OAAOpD,EADQlD,OAAO8D,OAAOwC,GAAMvC,KAAI,SAACC,GAAD,OAAOT,EAAeS,OAyCtC0D,CAAkBrH,QAH7C,oBAII,SAAOiH,GAAS,OAvCpB,SAAsBhB,EAAMgB,GACxB,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKxH,EAAgBwG,EAAMgB,GAG3B,CAED,IADA,IAAMK,EAAY3H,OAAO0E,KAAK4B,GACrB5E,EAAI,EAAGA,EAAIiG,EAAUhG,OAAQD,IAClC,IAAK2C,EAAOiC,EAAKqB,EAAUjG,IAAK4F,EAAMK,EAAUjG,KAC5C,OAAO,EAGf,OAAO,EATP,OAAO,EAkCYkG,CAAavH,KAAMiH,KAJ9C,uBAKI,SAAUA,GAAS,OAvBvB,SAAyBhB,EAAMgB,GAC3B,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKxH,EAAgBwG,EAAMgB,GAG3B,CAED,IADA,IAAMK,EAAY3H,OAAO0E,KAAK4B,GACrB5E,EAAI,EAAGA,EAAIiG,EAAUhG,OAAQD,IAAK,CACvC,IAAMmG,EAASxC,EAAQiB,EAAKqB,EAAUjG,IAAK4F,EAAMK,EAAUjG,KAC3D,GAAe,IAAXmG,EACA,OAAOA,EAGf,OAAO,EAVP,OAAQ,EAkBcC,CAAgBzH,KAAMiH,OALpD,KAOaS,EAAb,WACI,WAAYC,EAAkBC,GAAQ,UACZ,mBAAXA,GACP5H,KAAK6H,OAASF,EACd3H,KAAK4H,OAASA,IAGd5H,KAAK6H,OAAS,kBAAMF,GACpB3H,KAAK4H,OAAS,SAACjE,GAAQgE,EAAmBhE,IARtD,gCAWI,WACI,OAAO3D,KAAK6H,UAZpB,IAcI,SAAalE,GACT3D,KAAK4H,OAAOjE,OAfpB,K,sKCzJO,I,IAAMmE,EAAb,WACI,WAAY1H,I,4FAAO,SACfJ,KAAKI,MAAQA,E,QAFrB,O,EAAA,G,EAAA,qBAII,WACI,OAAOJ,KAAKI,QALpB,sBAQI,WACI,OAAOmG,OAAOvG,KAAKI,SAT3B,yBAWI,WACI,OAAO8C,EAAelD,KAAKI,SAZnC,oBAcI,SAAO6G,GACH,OAAa,MAATA,GAIOjD,EAAOhE,KAAKI,MAAO6G,aAAiBa,EAAOb,EAAM7G,MAAQ6G,KAnB5E,uBAsBI,SAAUA,GACN,OAAa,MAATA,EACO,EAGAjC,EAAQhF,KAAKI,MAAO6G,aAAiBa,EAAOb,EAAM7G,MAAQ6G,Q,oEA3B7E,KA+BO,SAASc,GAAK3I,GACjB,OAAY,MAALA,GAAaA,aAAa0I,EAAO,IAAIA,EAAK1I,GAAKA,EAEnD,SAASgB,GAAMhB,GAClB,GAAS,MAALA,EACA,MAAM,IAAIkB,MAAM,uBAGhB,OAAOlB,aAAa0I,EAAO1I,EAAEgB,MAAQhB,EAiBtC,SAAS4I,GAAWC,EAAKC,GAC5B,OAAe,MAAPD,EAAe7H,GAAM6H,GAAOC,EAQjC,SAASxE,GAAIyE,EAASF,GACzB,OAAe,MAAPA,EAAeF,GAAKI,EAAQ/H,GAAM6H,UAASlH,E,yHC9ChD,SAASqH,KACZ,OCF4C9C,EASL,SAAC+C,EAAIC,GAAL,OAAYtD,EAAQqD,EAAIC,IARxD,CACHC,QADG,SACKnJ,EAAGM,GACP,OAAO4F,EAASlG,EAAGM,KAKxB,IARyC4F,ECjBzC,SAASkD,GAA8BrC,EAAMzD,GAChD,MAAsB,mBAAVyD,EACD,IAAIA,EAAKzD,GAGT,IAAIrD,MAAMqD,GA6BlB,SAAS+F,GAAKC,EAAQC,EAAatG,EAAOjC,GAC7C,IAAMwI,EAAsB,EAAdD,EACd,OAAOD,EAAOD,KAAKrI,EAAOwI,EAAQA,EAAQvG,GAwBvC,SAASwG,GAAWC,EAAGC,EAAQ5C,GAGlC,IAFA,IAAMzD,EAAsB,EAAhBqG,EAAOzH,OACboH,EAASF,GAA8BrC,EAAMzD,GAC1CrB,EAAI,EAAGA,GAAMqB,EAAM,EAAIrB,IAC5BqH,EAAOrH,GAAKyH,EAAEzH,EAAG0H,EAAO1H,IAE5B,OAAOqH,EAGJ,SAAShF,GAAIoF,EAAGC,EAAQ5C,GAG3B,IAFA,IAAMzD,EAAsB,EAAhBqG,EAAOzH,OACboH,EAASF,GAA8BrC,EAAMzD,GAC1CrB,EAAI,EAAGA,GAAMqB,EAAM,EAAIrB,IAC5BqH,EAAOrH,GAAKyH,EAAEC,EAAO1H,IAEzB,OAAOqH,EAqKJ,SAASM,GAAW3G,EAAO4G,EAAa9C,GAC3C,GAAI9D,EAAQ,EACR,MAAO,IAAI/B,MAAM,0DAGrB,IADA,IAAMkH,EAASgB,GAA8BrC,EAAM9D,GAC1ChB,EAAI,EAAGA,GAAMgB,EAAQ,EAAIhB,IAC9BmG,EAAOnG,GAAK4H,EAAY5H,GAE5B,OAAOmG,EA2fJ,SAAS0B,GAAOC,EAAYC,EAAI9D,GACnC,IAAM+D,EAAOD,EAAGE,QAEhB,OADAD,EAAK9E,MAAK,SAACnF,EAAGM,GAAJ,OAAU4F,EAASiD,QAAQY,EAAW/J,GAAI+J,EAAWzJ,OACxD2J,EFtvB4C,QAClD,uDADkD,SACKjK,EAAGM,GACvD,OAAOsE,EAAO5E,EAAGM,MAF8B,KAIlD,4DAJkD,SAIU6J,GACzD,OAAOrG,EAAeqG,MAI2B,QACpD,uDADoD,SACGnK,EAAGM,GACvD,OAAOsE,EAAO5E,EAAGM,MAFgC,KAIpD,4DAJoD,SAIQ6J,GACzD,OAAOrG,EAAeqG,MGlBvB,IAAMC,GAAS9I,OAAO,WACtB,SAAS+I,GAAUrK,GACtB,MAAoB,iBAANA,IAAmBA,MAAAA,OAA6B,EAASA,EAAEoK,KAUtE,SAASE,GAAStK,EAAGM,GACxB,MAAiB,iBAANN,EACAA,EAAIM,EAGJN,EAAEoK,MAAUE,SAAShK,GAG7B,SAASiK,GAAQvK,EAAGwK,GACvB,MAAiB,iBAANxK,EACAA,EAAEuK,QAAQC,GAGVxK,EAAEoK,MAAUG,QAAQC,GAG5B,SAASC,GAAYzK,EAAG0K,GAC3B,MAAiB,iBAAN1K,EACAA,EAAEyK,YAAYC,GAGd1K,EAAEoK,MAAUK,YAAYC,GAGhC,SAASC,GAAc3K,EAAGwK,GAC7B,MAAiB,iBAANxK,EACAA,EAAE2K,cAAcH,GAGhBxK,EAAEoK,MAAUO,cAAcH,GAGlC,SAASI,GAAM5K,GAClB,MAAiB,iBAANA,GACC6K,OAAO7K,KAAO,GAAGoC,SAAS,IAG3BpC,EAAEoK,MAAUQ,QC1C3B,IAAIE,GAAO,KACX,IACIA,GAAO,IAAIC,YAAYC,SAAS,IAAID,YAAYE,OAAO,IAAIC,WAAW,CAClE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACznC,IAAIC,QAEb,MAAOC,IAaA,SAASC,GAAKC,EAAKC,EAAMC,GAK5B5K,KAAK0K,IAAY,EAANA,EAKX1K,KAAK2K,KAAc,EAAPA,EAKZ3K,KAAK4K,WAAaA,EAoDf,SAASC,GAAOjF,GACnB,OAAsC,KAA9BA,GAAOA,EAAG,YAnDtB6E,GAAKK,UAAU3H,YAAc,WACzB,IAAIH,EAAKhD,KAAK4K,SAAW,EAAI,EAG7B,QAFA5H,GAAOA,GAAM,GAAKA,EAAMhD,KAAK2K,OAChB,GAAK3H,EAAMhD,KAAK0K,KAGjCD,GAAKK,UAAU7G,OAAS,SAAU7E,GAAK,OAAO4E,GAAOhE,KAAMZ,IAC3DqL,GAAKK,UAAU7F,UAAY,SAAU7F,GAAK,OAAO4F,GAAQhF,KAAMZ,IAC/DqL,GAAKK,UAAUtJ,SAAW,SAAUQ,GAAS,OAAOR,GAASxB,KAAMgC,IACnEyI,GAAKK,UAAUC,OAAS,WAAc,OAAOvJ,GAASxB,OACtDyK,GAAKK,UAAUtB,IAAU,WACrB,IAAMpK,EAAIY,KACV,MAAO,CACH0J,SAAU,SAAAhK,GAAC,OAAIgK,GAAStK,EAAGM,IAC3BmK,YAAa,SAAAC,GAAE,OAAIvD,OAAOnH,IAAM,GAAGyK,YAAYC,GAAIkB,OAAO,IAC1DjB,cAAe,SAAAH,GAAE,OAAIrD,OAAOnH,IAAM,GAAG2K,cAAcH,GAAIoB,OAAO,IAC9DrB,QAAS,SAAAC,GAAE,OAAIrD,OAAOnH,IAAM,GAAGuK,QAAQC,GAAIoB,OAAO,IAClDhB,MAAO,kBAAMxI,GAASpC,EAAEwL,SAAWxL,EAgtCpC,SAAmB6L,EAAOL,EAAUM,GACvC,OAAOA,EASJ,SAAqBD,EAAOL,GAC/B,OAAO,IAAIH,GAAKQ,EAAM,GAClBA,EAAM,IAAM,EACZA,EAAM,IAAM,GACZA,EAAM,IAAM,GAAIA,EAAM,GACtBA,EAAM,IAAM,EACZA,EAAM,IAAM,GACZA,EAAM,IAAM,GAAIL,GAhBRO,CAAYF,EAAOL,GAyB5B,SAAqBK,EAAOL,GAC/B,OAAO,IAAIH,GAAKQ,EAAM,IAAM,GACxBA,EAAM,IAAM,GACZA,EAAM,IAAM,EACZA,EAAM,GAAIA,EAAM,IAAM,GACtBA,EAAM,IAAM,GACZA,EAAM,IAAM,EACZA,EAAM,GAAIL,GAhC6BQ,CAAYH,EAAOL,GAjtCnBS,EA+pCvBC,EA/pCyClM,EAgqCtD8L,EAQJ,SAAmBI,GACtB,IAAIC,EAAKD,EAAMX,KAAMa,EAAKF,EAAMZ,IAChC,MAAO,CACE,IAALc,EACAA,IAAO,EAAI,IACXA,IAAO,GAAK,IACZA,IAAO,GACF,IAALD,EACAA,IAAO,EAAI,IACXA,IAAO,GAAK,IACZA,IAAO,IAlBCE,CAAUH,GA2BnB,SAAmBA,GACtB,IAAIC,EAAKD,EAAMX,KAAMa,EAAKF,EAAMZ,IAChC,MAAO,CACHa,IAAO,GACPA,IAAO,GAAK,IACZA,IAAO,EAAI,IACN,IAALA,EACAC,IAAO,GACPA,IAAO,GAAK,IACZA,IAAO,EAAI,IACN,IAALA,GArC2BE,CAAUJ,KAhqCwB,GAAO,IA+pCrE,IAAiBA,EAAOJ,KAtoC/BT,GAAKK,UAAUa,WACfhM,OAAOiM,eAAenB,GAAKK,UAAW,aAAc,CAAE1K,OAAO,IAsB7D,IAAIyL,GAAY,GAMZC,GAAa,GAOV,SAASC,GAAQ3L,EAAOwK,GAC3B,IAAIhF,EAAKoG,EAAWC,EACpB,OAAIrB,GAEIqB,EAAS,IADb7L,KAAW,IACgBA,EAAQ,OAC/B4L,EAAYF,GAAW1L,IAEZ4L,GAEfpG,EAAMsG,GAAS9L,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5C6L,IACAH,GAAW1L,GAASwF,GACjBA,IAIHqG,GAAU,MADd7L,GAAS,IACqBA,EAAQ,OAClC4L,EAAYH,GAAUzL,IAEX4L,GAEfpG,EAAMsG,GAAS9L,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC6L,IACAJ,GAAUzL,GAASwF,GAChBA,GAiBR,SAASuG,GAAW/L,EAAOwK,GAC9B,GAAIwB,MAAMhM,GACN,OAAOwK,EAAWyB,GAAQC,GAC9B,GAAI1B,EAAU,CACV,GAAIxK,EAAQ,EACR,OAAOiM,GACX,GAAIjM,GAASmM,GACT,OAAOC,OAEV,CACD,GAAIpM,IAAUqM,GACV,OAAOC,GACX,GAAItM,EAAQ,GAAKqM,GACb,OAAOE,GAEf,OAAIvM,EAAQ,EACDwM,GAAOT,IAAY/L,EAAOwK,IAC9BsB,GAAU9L,EAAQyM,GAAkB,EAAIzM,EAAQyM,GAAkB,EAAGjC,GAiBzE,SAASsB,GAASY,EAASC,EAAUnC,GACxC,OAAO,IAAIH,GAAKqC,EAASC,EAAUnC,GAmBvC,IAAIoC,GAAUC,KAAKC,IAQZ,SAASC,GAAW5L,EAAKqJ,EAAU5I,GACtC,GAAmB,IAAfT,EAAID,OACJ,MAAMhB,MAAM,gBAChB,GAAY,QAARiB,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAO+K,GAUX,GATwB,iBAAb1B,GAEP5I,EAAQ4I,EACJA,GAAW,GAGfA,IAAaA,GAEjB5I,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMoL,WAAW,SACrB,IAAIC,EAAI9L,EAAIuF,QAAQ,KACpB,GAAIuG,EAAI,EACJ,MAAM/M,MAAM,mBACX,GAAU,IAAN+M,EACL,OAAOT,GAAOO,GAAW5L,EAAI+L,UAAU,GAAI1C,EAAU5I,IAMzD,IAFA,IAAIuL,EAAepB,GAAWa,GAAQhL,EAAO,IACzCwF,EAAS8E,GACJjL,EAAI,EAAGA,EAAIE,EAAID,OAAQD,GAAK,EAAG,CACpC,IAAImM,EAAOP,KAAK5H,IAAI,EAAG9D,EAAID,OAASD,GAAIjB,EAAQqN,SAASlM,EAAI+L,UAAUjM,EAAGA,EAAImM,GAAOxL,GAGjFwF,EAASkG,GAFTF,EAAO,EAEM9D,GAASlC,EADV2E,GAAWa,GAAQhL,EAAOwL,KAItChG,EAASkC,GAASlC,EAAQ+F,GAHYpB,GAAW/L,IAQzD,OADAoH,EAAOoD,SAAWA,EACXpD,EAkBJ,SAASmG,GAAUC,EAAKhD,GAC3B,MAAmB,iBAARgD,EACAzB,GAAWyB,EAAKhD,GACR,iBAARgD,EACAT,GAAWS,EAAKhD,GAEpBsB,GAAS0B,EAAIlD,IAAKkD,EAAIjD,KAA0B,kBAAbC,EAAyBA,EAAWgD,EAAIhD,UAiBtF,IAYIiC,GAAiBgB,WAMjBtB,GAAiBM,GAAiBA,GAMlCJ,GAAiBF,GAAiB,EAMlCuB,GAAa/B,GAxBI,GAAK,IA6BfO,GAAOP,GAAQ,GAUfM,GAAQN,GAAQ,GAAG,GAUnBgC,GAAMhC,GAAQ,GAUdiC,GAAOjC,GAAQ,GAAG,GAUlBkC,GAAUlC,IAAS,GAUnBY,GAAYT,IAAS,EAAgB,YAAgB,GAUrDM,GAAqBN,IAAS,GAAgB,GAAgB,GAU9DQ,GAAYR,GAAS,GAAG,YAAgB,GAgB5C,SAASgC,GAAM5C,GAClB,OAAOA,EAAMV,SAAWU,EAAMZ,MAAQ,EAAIY,EAAMZ,IAQ7C,SAASyD,GAAS7C,GACrB,OAAIA,EAAMV,UACGU,EAAMX,OAAS,GAAKkC,IAAmBvB,EAAMZ,MAAQ,GAC3DY,EAAMX,KAAOkC,IAAkBvB,EAAMZ,MAAQ,GAWjD,SAASlJ,GAAS8J,EAAOtJ,GAE5B,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMoL,WAAW,SACrB,GAAIgB,GAAO9C,GACP,MAAO,IACX,GAAI+C,GAAW/C,GAAQ,CACnB,GAAItH,GAAOsH,EAAOoB,IAAY,CAG1B,IAAI4B,EAAYnC,GAAWnK,GAAQuM,EAAMC,GAAOlD,EAAOgD,GAAYG,EAAOC,GAAShF,GAAS6E,EAAKD,GAAYhD,GAC7G,OAAO9J,GAAS+M,EAAKvM,GAASkM,GAAMO,GAAMjN,SAASQ,GAGnD,MAAO,IAAMR,GAASoL,GAAOtB,GAAQtJ,GAM7C,IAFA,IAAIuL,EAAepB,GAAWa,GAAQhL,EAAO,GAAIsJ,EAAMV,UAAW+D,EAAMrD,EACpE9D,EAAS,KACA,CACT,IAAIoH,EAASJ,GAAOG,EAAKpB,GAAoFsB,GAA5DX,GAAMQ,GAASC,EAAKjF,GAASkF,EAAQrB,OAAoB,GAAmB/L,SAASQ,GAEtI,GAAIoM,GADJO,EAAMC,GAEF,OAAOC,EAASrH,EAEhB,KAAOqH,EAAOvN,OAAS,GACnBuN,EAAS,IAAMA,EACnBrH,EAAS,GAAKqH,EAASrH,GA6D5B,SAAS4G,GAAO9C,GACnB,OAAsB,IAAfA,EAAMX,MAA4B,IAAdW,EAAMZ,IAa9B,SAAS2D,GAAW/C,GACvB,OAAQA,EAAMV,UAAYU,EAAMX,KAAO,EAiBpC,SAASmE,GAAMxD,GAClB,OAA2B,IAAP,EAAZA,EAAMZ,KAkBX,SAAS1G,GAAOsH,EAAOrE,GAG1B,OAFK4D,GAAO5D,KACRA,EAAQ0G,GAAU1G,KAClBqE,EAAMV,WAAa3D,EAAM2D,UAAaU,EAAMX,OAAS,IAAQ,GAAM1D,EAAM0D,OAAS,IAAQ,IAEvFW,EAAMX,OAAS1D,EAAM0D,MAAQW,EAAMZ,MAAQzD,EAAMyD,IAwCrD,SAASqE,GAASzD,EAAOrE,GAC5B,OAAOjC,GAAQsG,EAAuBrE,GAAS,EAwC5C,SAAS+H,GAAY1D,EAAOrE,GAC/B,OAAOjC,GAAQsG,EAAuBrE,GAAS,EAgB5C,SAASgI,GAAmB3D,EAAOrE,GACtC,OAAOjC,GAAQsG,EAAuBrE,IAAU,EAwB7C,SAASjC,GAAQsG,EAAOrE,GAG3B,GAFK4D,GAAO5D,KACRA,EAAQ0G,GAAU1G,IAClBjD,GAAOsH,EAAOrE,GACd,OAAO,EACX,IAAIiI,EAAUb,GAAW/C,GAAQ6D,EAAWd,GAAWpH,GACvD,OAAIiI,IAAYC,GACJ,GACPD,GAAWC,EACL,EAEN7D,EAAMV,SAGH3D,EAAM0D,OAAS,EAAMW,EAAMX,OAAS,GAAO1D,EAAM0D,OAASW,EAAMX,MAAS1D,EAAMyD,MAAQ,EAAMY,EAAMZ,MAAQ,GAAO,EAAI,EAFnH2D,GAAWK,GAASpD,EAAOrE,KAAW,EAAI,EAkBlD,SAAS2F,GAAOtB,GACnB,OAAKA,EAAMV,UAAY5G,GAAOsH,EAAOoB,IAC1BA,GACJgB,GA0RJ,SAAapC,GAChB,OAAOY,IAAUZ,EAAMZ,KAAMY,EAAMX,KAAMW,EAAMV,UA3RpCwE,CAAI9D,GAAQyC,IAepB,SAASL,GAAIpC,EAAO+D,GAClBxE,GAAOwE,KACRA,EAAS1B,GAAU0B,IAEvB,IAAIC,EAAMhE,EAAMX,OAAS,GACrB4E,EAAmB,MAAbjE,EAAMX,KACZ6E,EAAMlE,EAAMZ,MAAQ,GACpB+E,EAAkB,MAAZnE,EAAMZ,IACZgF,EAAML,EAAO1E,OAAS,GACtBgF,EAAoB,MAAdN,EAAO1E,KACbiF,EAAMP,EAAO3E,MAAQ,GAErBmF,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAFgB,MAAbJ,EAAO3E,QAGF,GAGfoF,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAENxD,IANP6D,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CxE,EAAMV,UASzD,SAAS8D,GAASpD,EAAO2E,GAG5B,OAFKpF,GAAOoF,KACRA,EAAatC,GAAUsC,IACpBvC,GAAIpC,EAAOsB,GAAOqD,IAgBtB,SAASvG,GAAS4B,EAAO4E,GAC5B,GAAI9B,GAAO9C,GACP,OAAOA,EAAMV,SAAWyB,GAAQC,GAIpC,GAHKzB,GAAOqF,KACRA,EAAavC,GAAUuC,IAEvBhG,GAEA,OAAOgC,GADGhC,GAAKiG,IAAI7E,EAAMZ,IAAKY,EAAMX,KAAMuF,EAAWxF,IAAKwF,EAAWvF,MAChDT,GAAKkG,WAAY9E,EAAMV,UAEhD,GAAIwD,GAAO8B,GACP,OAAO5E,EAAMV,SAAWyB,GAAQC,GACpC,GAAItI,GAAOsH,EAAOoB,IACd,OAAOoC,GAAMoB,GAAcxD,GAAYJ,GAC3C,GAAItI,GAAOkM,EAAYxD,IACnB,OAAOoC,GAAMxD,GAASoB,GAAYJ,GACtC,GAAI+B,GAAW/C,GACX,OAAI+C,GAAW6B,GACJxG,GAASkD,GAAOtB,GAAQsB,GAAOsD,IAE/BtD,GAAOlD,GAASkD,GAAOtB,GAAQ4E,IAEzC,GAAI7B,GAAW6B,GAChB,OAAOtD,GAAOlD,GAAS4B,EAAOsB,GAAOsD,KAEzC,GAAInB,GAASzD,EAAOwC,KAAeiB,GAASmB,EAAYpC,IACpD,OAAO3B,GAAWgC,GAAS7C,GAAS6C,GAAS+B,GAAa5E,EAAMV,UAGpE,IAAI0E,EAAMhE,EAAMX,OAAS,GACrB4E,EAAmB,MAAbjE,EAAMX,KACZ6E,EAAMlE,EAAMZ,MAAQ,GACpB+E,EAAkB,MAAZnE,EAAMZ,IACZgF,EAAMQ,EAAWvF,OAAS,GAC1BgF,EAAwB,MAAlBO,EAAWvF,KACjBiF,EAAMM,EAAWxF,MAAQ,GACzB2F,EAAuB,MAAjBH,EAAWxF,IACjBmF,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMY,KACE,GAGfP,IADAC,GAAOP,EAAMa,KACE,GACfN,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMe,EAAMd,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1CxD,IAZP6D,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CxE,EAAMV,UAiBzD,SAAS4D,GAAOlD,EAAOgF,GAG1B,GAFKzF,GAAOyF,KACRA,EAAU3C,GAAU2C,IACpBlC,GAAOkC,GACP,MAAMhQ,MAAM,oBAYZ,IAKAiQ,EAAQ5B,EAAK6B,EAfjB,GAAItG,GAIA,OAAKoB,EAAMV,WACS,aAAhBU,EAAMX,OACW,IAAjB2F,EAAQ5F,MAAgC,IAAlB4F,EAAQ3F,KAK3BuB,IADIZ,EAAMV,SAAWV,GAAKuG,MAAQvG,GAAKwG,OAAOpF,EAAMZ,IAAKY,EAAMX,KAAM2F,EAAQ5F,IAAK4F,EAAQ3F,MAC5ET,GAAKkG,WAAY9E,EAAMV,UAHjCU,EAKf,GAAI8C,GAAO9C,GACP,OAAOA,EAAMV,SAAWyB,GAAQC,GAEpC,GAAKhB,EAAMV,SAiCN,CAKD,GAFK0F,EAAQ1F,WACT0F,EA0RL,SAAoBhF,GACvB,OAAIA,EAAMV,SACCU,EACJY,GAASZ,EAAMZ,IAAKY,EAAMX,MAAM,GA7RrBgG,CAAWL,IACrBtB,GAAYsB,EAAShF,GACrB,OAAOe,GACX,GAAI2C,GAAYsB,EA4KjB,SAA4BhF,EAAOsF,GAItC,GAHI/F,GAAO+F,KACPA,EAAU1C,GAAM0C,IAEJ,IADhBA,GAAW,IAEP,OAAOtF,EAEP,IAAIX,EAAOW,EAAMX,KACjB,OAAIiG,EAAU,GAEH1E,GADGZ,EAAMZ,MACSkG,EAAYjG,GAAS,GAAKiG,EAAWjG,IAASiG,EAAStF,EAAMV,UAG/EsB,GADU,KAAZ0E,EACWjG,EAEAA,IAAUiG,EAAU,GAFd,EAAGtF,EAAMV,UAzLViG,CAAmBvF,EAAO,IAC/C,OAAO0C,GACXwC,EAAMnE,OA1CW,CAGjB,GAAIrI,GAAOsH,EAAOoB,IACd,OAAI1I,GAAOsM,EAASvC,KAAQ/J,GAAOsM,EAASrC,IACjCvB,GACF1I,GAAOsM,EAAS5D,IACdqB,GAKH/J,GADJuM,EAyJT,SAAmBjF,EAAOsF,GAG7B,OAFI/F,GAAO+F,KACPA,EAAU1C,GAAM0C,IACI,IAAnBA,GAAW,IACLtF,EACFsF,EAAU,GACR1E,GAASZ,EAAMZ,KAAOkG,EAAUtF,EAAMX,MAAQiG,EAAYtF,EAAMZ,MAAS,GAAKkG,EAAWtF,EAAMV,UAE/FsB,GAAS,EAAGZ,EAAMZ,KAAQkG,EAAU,GAAKtF,EAAMV,UAjKrCkG,CAAUtC,GAiL5B,SAAoBlD,EAAOsF,GAG9B,OAFI/F,GAAO+F,KACPA,EAAU1C,GAAM0C,IACI,IAAnBA,GAAW,IACLtF,EACFsF,EAAU,GACR1E,GAAUZ,EAAMZ,MAAQkG,EAAYtF,EAAMX,MAAS,GAAKiG,EAAWtF,EAAMX,MAAQiG,EAAStF,EAAMV,UAEhGsB,GAASZ,EAAMX,MAASiG,EAAU,GAAKtF,EAAMX,MAAQ,EAAI,GAAK,EAAGW,EAAMV,UA1LvDmG,CAAWzF,EAAO,GACGgF,GAAU,GAC3BhE,IACR+B,GAAWiC,GAAWvC,GAAME,GAInCuC,EAAM9C,GAAI6C,EAAQ/B,GADlBG,EAAMD,GAASpD,EAAO5B,GAAS4G,EAASC,IACVD,IAKrC,GAAItM,GAAOsM,EAAS5D,IACrB,OAAOpB,EAAMV,SAAWyB,GAAQC,GACpC,GAAI+B,GAAW/C,GACX,OAAI+C,GAAWiC,GACJ9B,GAAO5B,GAAOtB,GAAQsB,GAAO0D,IACjC1D,GAAO4B,GAAO5B,GAAOtB,GAAQgF,IAEnC,GAAIjC,GAAWiC,GAChB,OAAO1D,GAAO4B,GAAOlD,EAAOsB,GAAO0D,KACvCE,EAAMlE,GAmBV,IADAqC,EAAMrD,EACC2D,GAAmBN,EAAK2B,IAAU,CAGrCC,EAAStD,KAAK+D,IAAI,EAAG/D,KAAKgE,MAAM9C,GAASQ,GAAOR,GAASmC,KAOzD,IAJA,IAAIY,EAAOjE,KAAKkE,KAAKlE,KAAKmE,IAAIb,GAAUtD,KAAKoE,KAAMC,EAASJ,GAAQ,GAAM,EAAIlE,GAAQ,EAAGkE,EAAO,IAGhGK,EAAYpF,GAAWoE,GAASiB,EAAY9H,GAAS6H,EAAWjB,GACzDjC,GAAWmD,IAAcxC,GAAYwC,EAAW7C,IAGnD6C,EAAY9H,GADZ6H,EAAYpF,GADZoE,GAAUe,EACqBhG,EAAMV,UACL0F,GAIhClC,GAAOmD,KACPA,EAAYxD,IAChByC,EAAM9C,GAAI8C,EAAKe,GACf5C,EAAMD,GAASC,EAAK6C,GAExB,OAAOhB,ECr9BJ,IAEMiB,GAAcC,GAEdC,GAAcD,GACdE,GAAcF,GAEdG,GAAmBH,GAInBI,GDkgCN,SAAaxG,EAAOrE,GAGvB,OAFK4D,GAAO5D,KACRA,EAAQ0G,GAAU1G,IACfiF,GAASZ,EAAMZ,IAAMzD,EAAMyD,IAAKY,EAAMX,KAAO1D,EAAM0D,KAAMW,EAAMV,WC1/B7D5F,GAAU0M,GAEVxF,GAAWwF,GAEXvF,GAAauF,GAGbxD,GAAQwD,GAGRlQ,GAAWkQ,GA+BjB,SAASK,GAAY3R,EAAOwK,EAAU/I,GACzC,IAAIzC,EAAIgB,EACJ4R,EAAK,EACT,OAAQnQ,GACJ,KAAK,EAEDmQ,EADA5S,EAAIgB,GAAS,IAAM,GAEnB,MACJ,KAAK,EACDhB,EAAIgB,GAAS,KAAO,GACpB,MACJ,KAAK,EAED4R,EADA5S,EAAIgB,GAAS,IAAM,GAEnB,MACJ,KAAK,EACDhB,EAAIgB,GAAS,KAAO,GACpB,MACJ,KAAK,EAED4R,EADA5S,EAAIgB,GAAS,EAEb,MACJ,KAAK,EACDhB,EAAIgB,IAAU,EAGtB,OAAOsR,GAAiBtS,EAAG4S,GAAM,GAAIpH,G,k8BCjFlC,SAASqH,GAAmBrQ,GAC/B,IAAMsQ,EAAUtQ,EAAS,EAGnBuQ,GAFNvQ,EAASqL,KAAKmF,IAAIxQ,IAEQ,KAAW,IACrC,OAAQsQ,EAAU,IAAM,KACpB9Q,KAHaQ,EAAS,MAGF,GAAK,IACzBR,EAAa+Q,EAAS,GAEvB,SAASE,GAAoB3Q,EAAM4Q,GACtC,IAAM/Q,EAAMG,EAAK6Q,cACjB,MAAgB,UAATD,EACD/Q,EAAI+L,UAAU,EAAG/L,EAAIuF,QAAQ,MAC7BvF,EAAI+L,UAAU/L,EAAIuF,QAAQ,KAAO,EAAGvF,EAAID,OAAS,GAuB3D,SAASkR,GAA6B9Q,EAAM+Q,EAAQC,GAChD,OAAOD,EAAOE,QAAQ,YAAY,SAACC,GAC/B,IAAIC,EAAM5I,OAAO6I,IACjB,OAAQF,EAAMtF,UAAU,EAAG,IACvB,IAAK,IACD,IAAM5N,EAAIgT,EAAMhR,EAAKqR,iBAAmBrR,EAAKsR,cAC7CH,EAAMD,EAAMtR,OAAS,EAAI5B,EAAI,IAAMA,EACnC,MACJ,IAAK,IACDmT,GAAOH,EAAMhR,EAAKuR,cAAgBvR,EAAKwR,YAAc,EACrD,MACJ,IAAK,IACDL,EAAMH,EAAMhR,EAAKyR,aAAezR,EAAK0R,UACrC,MACJ,IAAK,IACDP,EAAMH,EAAMhR,EAAK2R,cAAgB3R,EAAK4R,WACtC,MACJ,IAAK,IACD,IAAM7Q,EAAIiQ,EAAMhR,EAAK2R,cAAgB3R,EAAK4R,WAC1CT,EAAMpQ,EAAI,GAAKA,EAAI,GAAKA,EACxB,MACJ,IAAK,IACDoQ,EAAMH,EAAMhR,EAAK6R,gBAAkB7R,EAAK8R,aACxC,MACJ,IAAK,IACDX,EAAMH,EAAMhR,EAAK+R,gBAAkB/R,EAAKgS,aACxC,MACJ,IAAK,IACDb,EAAMH,EAAMhR,EAAKiS,qBAAuBjS,EAAKkS,kBAGrD,OAAI3J,OAAOmC,MAAMyG,GACND,EAGCC,EAAM,IAAMD,EAAMtR,OAAS,EAAK,IAAMuR,EAAM,GAAKA,KAiD9D,SAASrR,GAASE,EAAM+Q,EAAQoB,GACnC,OAAsB,MAAfnS,EAAKE,OA9ChB,SAAgCF,EAAM+Q,GAClC,IAAIqB,EAAIC,EAAIC,EA5CmBC,EAAgBrS,EACzCL,EA4CA2S,EAAI,IAAI5Q,KAAK5B,EAAK6B,WAAoC,QAAtBuQ,EAAKpS,EAAKE,cAA2B,IAAPkS,EAAgBA,EAAK,IACzF,GAAsB,iBAAXrB,EACP,OAAOyB,EAAE3B,cAAcI,QAAQ,QAAS,IAAIA,QAAQ,eAAgB,KAAOV,GAA2C,QAAtB8B,EAAKrS,EAAKE,cAA2B,IAAPmS,EAAgBA,EAAK,GAElJ,GAAsB,IAAlBtB,EAAOnR,OAYZ,OAAOkR,GAA6B0B,EAAGzB,GAAQ,GAX/C,OAAQA,GACJ,IAAK,IACL,IAAK,IAAK,OAAOJ,GAAoB6B,EAAG,SACxC,IAAK,IACL,IAAK,IAAK,OAAO7B,GAAoB6B,EAAG,UACxC,IAAK,IACL,IAAK,IAAK,OAxDaD,EAwDoBC,EAxDJtS,EAwD+B,QAAtBoS,EAAKtS,EAAKE,cAA2B,IAAPoS,EAAgBA,EAAK,GAvDrGzS,EAAM0S,EAAe1B,eAChBjF,UAAU,EAAG/L,EAAID,OAAS,GAAK2Q,GAAmBrQ,GAuDrD,QAAS,MAAM,IAAItB,MAAM,mCAiC3B6T,CAAuBzS,EAAM+Q,GA1BvC,SAA8B/Q,EAAM+Q,GAChC,IAAMC,EAAoB,IAAdhR,EAAKG,KACjB,GAAsB,iBAAX4Q,EACP,OAAOC,EAAMhR,EAAK0S,cAAgB1S,EAAK2S,iBAEtC,GAAsB,IAAlB5B,EAAOnR,OAgBZ,OAAOkR,GAA6B9Q,EAAM+Q,EAAQC,GAflD,OAAQD,GACJ,IAAK,IACL,IAAK,IACD,OAAOC,EAAML,GAAoB3Q,EAAM,SAAWA,EAAK4S,qBAC3D,IAAK,IACL,IAAK,IACD,OAAO5B,EAAML,GAAoB3Q,EAAM,UAAYA,EAAK6S,qBAC5D,IAAK,IACL,IAAK,IACD,OAhGhB,SAAyBL,EAAGxB,GACxB,GAAIA,EACA,OAAOwB,EAAE3B,cAIT,IAAMiC,EAAwB,MAAVN,EAAErS,MAAiC,IAAXqS,EAAErS,KAC9C,OAAOT,EAAa8S,EAAElB,cAAe,GAAK,IACtC5R,EAAa8S,EAAEhB,WAAa,EAAG,GAAK,IACpC9R,EAAa8S,EAAEd,UAAW,GAAK,IAC/BhS,EAAa8S,EAAEZ,WAAY,GAAK,IAChClS,EAAa8S,EAAEV,aAAc,GAAK,IAClCpS,EAAa8S,EAAER,aAAc,GAAK,IAClCtS,EAAa8S,EAAEN,kBAAmB,IACjCY,EAAcvC,IAA4C,IAAzBiC,EAAEpS,qBAAgC,IAkFzD2S,CAAgB/S,EAAMgR,GACjC,QACI,MAAM,IAAIpS,MAAM,mCAUtBoU,CAAqBhT,EAAM+Q,GAE9B,SAASkC,GAASvU,EAAOyB,GAC5B,IAAMqS,EAAI,IAAI5Q,KAAKlD,GAEnB,OADA8T,EAAErS,KAAqD,GAArC,MAARA,EAAe,EAAsBA,GACxCqS,EAwBJ,SAASU,GAASlT,GACrB,OD7CyCmT,EC6CLnT,EAAK6B,UD7CI3B,EC6COH,EAAWC,GD5CxDiQ,GAAYF,GAAYA,GAAYC,GAAmBmD,GAAK,aAAiBjT,GAAS,KAD1F,IAAsCiT,EAAIjT,ECuD1C,SAASkT,GAASC,GACrB,SAASC,IACL,MAAM,IAAI1U,MAAJ,0CAA6CyU,IAEzC,OAAVA,GAAmC,KAAjBA,EAAME,QACxBD,IAGiB,KAAjBD,EAAMzT,QAA8B,MAAbyT,EAAM,IAA2B,MAAbA,EAAM,KACjDA,GAAS,aAEb,IAAIrT,EAAO,IAAI4B,KAAKyR,GAChBnT,EAAS,KACb,GAAIwK,MAAM1K,EAAK6B,WAAY,CAGvB,IAAM2R,EAAI,yHAAyHC,KAAKJ,GACxI,GAAS,MAALG,EAAW,CACX,IAAIE,EACAC,EAAgB,EACpB,GAAY,MAARH,EAAE,GAAY,CACd,IAAMI,EAAYJ,EAAE,GAAGK,MAAM,KAC7BF,EACiC,KAA7B5H,SAAS6H,EAAU,GAAI,IACiB,GAApC7H,SAAS6H,EAAU,IAAM,IAAK,IAC9BE,WAAWF,EAAU,IAAM,KACvB,MAARJ,EAAE,IAAqC,OAAvBA,EAAE,GAAGO,gBACrBJ,GAAiB,KAGzB,GAAY,MAARH,EAAE,GAAY,CACd,GAAY,MAARA,EAAE,GACFE,EAAW,IAAI9R,KAAK4R,EAAE,GAAK,YAE1B,CACD,IAAMhB,EAAI,IAAI5Q,KACd8R,EAAW,IAAI9R,KAAK4Q,EAAEnB,iBAAmB,KAAOmB,EAAEjB,cAAgB,GAAK,IAAMiB,EAAEf,cAEnF,GAAa,MAAT+B,EAAE,GACFtT,EAAS,QAER,CACD,IAAI8T,EAAuC,GAArBjI,SAASyH,EAAE,GAAI,IAAWzH,SAASyH,EAAE,IAAM,IAAK,IACtD,MAAZA,EAAE,GAAG,KACLQ,IAAoB,GAExB9T,EAAS8T,EACTL,GAAmC,GAAlBK,QAIrB,GAAY,MAARR,EAAE,GACFE,EAAW,IAAI9R,KAAK4R,EAAE,QAErB,CACD,IAAMhB,EAAI,IAAI5Q,KACd8R,EAAW,IAAI9R,KAAK4Q,EAAElB,cAAgB,KAAOkB,EAAEhB,WAAa,GAAK,IAAMgB,EAAEd,WAGjF1R,EAAO,IAAI4B,KAAK8R,EAAS7R,UAA4B,IAAhB8R,GAErC3T,EAAO,IAAI4B,KAAK5B,EAAK6B,UAAwE,KAA3D7B,EAAKI,oBAAsBsT,EAAStT,2BAGtEkT,IAGA5I,MAAM1K,EAAK6B,YACXyR,IAGR,MAAO,CAACtT,EAAME,GAoBX,SAAS+T,GAAOC,EAAMC,EAAOC,GAAwC,IAAnCrT,EAAmC,uDAA/B,EAAGyS,EAA4B,uDAAxB,EAAG1S,EAAqB,uDAAjB,EAAGqS,EAAc,uDAAT,EAAGhT,EAAM,uCAClEkU,EAAqB,IAATlU,EACZyB,KAAK0S,IAAIJ,EAAMC,EAAQ,EAAGC,EAAKrT,EAAGyS,EAAG1S,EAAGqS,GACxC,IAAIvR,KAAKsS,EAAMC,EAAQ,EAAGC,EAAKrT,EAAGyS,EAAG1S,EAAGqS,GAAItR,UAClD,GAAI6I,MAAM2J,GACN,MAAM,IAAIzV,MAAM,oDAEpB,IAAMoB,EAAOiT,GAASoB,EAAWlU,GAIjC,OAHI+T,GAAQ,IACRlU,EAAKuU,YAAYL,EAAMC,EAAQ,EAAGC,GAE/BpU,EAEJ,SAASwU,KACZ,OAAOvB,GAASrR,KAAK4S,MAAO,GA+BzB,SAASxU,GAAKwS,GACjB,OAAOyB,GAoBJ,SAAczB,GACjB,OAAkB,IAAXA,EAAErS,KAAuBqS,EAAEnB,iBAAmBmB,EAAElB,cArBzC4C,CAAK1B,GAchB,SAAeA,GAClB,OAAmB,IAAXA,EAAErS,KAAuBqS,EAAEjB,cAAgBiB,EAAEhB,YAAc,EAf5C2C,CAAM3B,GAE1B,SAAaA,GAChB,OAAkB,IAAXA,EAAErS,KAAuBqS,EAAEf,aAAee,EAAEd,UAHlB0C,CAAI5B,GAAI,EAAG,EAAG,EAAG,EAAGA,EAAErS,MAmCpD,SAAS6L,GAAIwG,EAAGiC,GACnB,IAAMC,EAAUzB,GAAST,EAAE3Q,UAAY4S,EAAIjC,EAAErS,MAC7C,GAAe,IAAXqS,EAAErS,KAAwB,CAC1B,IAAMwU,EAAcnC,EAAEpS,oBAChBwU,EAAcF,EAAQtU,oBAC5B,OAAOuU,IAAgBC,EACjB3B,GAASyB,EAAQ7S,UAA0C,KAA7B+S,EAAcD,GAAsBnC,EAAErS,MACpEuU,EAGN,OAAOA,EAGR,SAASG,GAAQrC,EAAGvQ,GACvB,OAAO+J,GAAIwG,EAAO,MAAJvQ,GAgDX,SAAS6S,GAAkBtC,GAC9B,OAAOA,EAAEI,qBAWN,IAAMtP,GAAUb,ECpahB,SAASwR,GAAOc,GAAsB,IAAbC,EAAa,uDAAH,EAMtC,GAAwC,KAAzB,IAAVA,GACD,MAAM,IAAIpW,MAAM,gFAEpB,IAAIqW,EAAQ,IAIZ,OAHAA,GAAmB,EAAVD,EAAc,IAAM,GAC7BC,GAAmB,EAAVD,EAAc,IAAM,GAC7BC,GAAmB,GAAVD,EAAe,IAAM,GACvB,IAAIE,OAAOH,EAASE,GAGxB,SAASE,GAAOtV,GACnB,OAAOA,EAAIoR,QAAQ,sCAAuC,QASvD,SAASC,GAAMkE,EAAK/B,GAAoB,IAAbgC,EAAa,uDAAH,EAExC,OADAD,EAAIE,UAAYD,EACTD,EAAI3B,KAAKJ,G,2qCCxBpB,IAAMkC,GAAiB,gDAEjBC,GAAe,wDACrB,SAASC,GAAW/X,EAAGM,GACnB,OLJG,SAAiBN,EAAGM,GACvB,MAAiB,iBAANN,EACAA,EAAIM,GAAK,EAAKN,EAAIM,EAAI,EAAI,EAG1BN,EAAE6F,UAAUvF,GKDhB0X,CAAehY,EAAGM,GAAK,EAiF3B,SAAS2X,GAAOtC,GACnB,MAAO,CACHA,MAAAA,EACAuC,MAiJiB/V,EAjJFwT,EAkJZ,SAACuC,GACJL,GAAeD,UAAY,EAK3B,IAJA,IAAMO,EAAW,GACXC,EAAU,GACZC,EAAS,EACT7E,EAAQqE,GAAe9B,KAAK5T,GACzBqR,GAAO,CAGV,IAAM8E,EAAa9E,EAAM+E,OAAS/E,EAAM,IAAM,IAAItR,OAClDiW,EAASK,KAAKrW,EAAI+L,UAAUmK,EAAQC,GAAY/E,QAAQ,MAAO,MAC/D6E,EAAQI,KAAKhF,GACb6E,EAASR,GAAeD,UAExBC,GAAeD,WAAa,EAC5BpE,EAAQqE,GAAe9B,KAAK5T,GAEhC,OAAwB,IAApBgW,EAASjW,OACFgW,EAAK/V,EAAIoR,QAAQ,MAAO,OAG/B4E,EAASK,KAAKrW,EAAI+L,UAAUmK,GAAQ9E,QAAQ,MAAO,MAC5CkF,GAAcP,EAAMC,EAAUC,OAvB1C,IAAkBjW,EAzHzB,SAASuW,GAAcR,EAAMS,GACzB,MAAsB,iBAARA,EAAmBT,EAAKS,GAAOA,EAAIT,KAAKA,GAEnD,SAASU,GAAUD,GAEtB,OAAOD,IAAc,SAAC1Y,GAAD,OAAO6Y,QAAQ7G,IAAIhS,KAAI2Y,GAEzC,SAASG,GAAeH,GAC3B,OAAOD,IAAc,SAAC1Y,GAAD,OAAO6Y,QAAQE,MAAM/Y,KAAI2Y,GAE3C,SAASK,GAAOL,GACnB,OAAOD,IAAc,SAAC1Y,GAAD,OAAOA,IAAG2Y,GAE5B,SAASM,GAAON,GACnB,OAAOD,IAAc,SAAC1Y,GAClB,MAAM,IAAIkB,MAAMlB,KACjB2Y,GAEP,SAASO,GAAkBzF,EAAK8D,EAAO4B,EAAWC,EAAW/F,GACzD,IAAIgG,EAAO,GAGX,GAFA9B,EAAQA,GAAS,GACjBlE,EAASA,GAAU,GACfhJ,GAAUoJ,GAgBV,OAf6B,MAAzBJ,EAAOiG,gBACHvB,GAAWtE,EAAK,IAChBA,EAAMnJ,GAASmJ,GAAM,GACrB4F,EAAO,KAGH9B,EAAM7P,QAAQ,MAAQ,EACtB2R,EAAO,IAEF9B,EAAM7P,QAAQ,MAAQ,IAC3B2R,EAAO,MAInBD,EAAyB,MAAbA,EAAoB,KAAO/K,SAAS+K,EAAW,IACnD/F,GACJ,IAAK,IACL,IAAK,IAEDI,EAAMlJ,GAAQkJ,EADd2F,EAAyB,MAAbA,EAAoBA,EAAY,GAE5C,MACJ,IAAK,IACL,IAAK,IACD3F,EAAmB,MAAb2F,EAAoB3O,GAAYgJ,EAAK2F,GAAa3O,GAAYgJ,GACpE,MACJ,IAAK,IACL,IAAK,IACDA,EAAmB,MAAb2F,EAAoBzO,GAAc8I,EAAK2F,GAAazO,GAAc8I,GACxE,MACJ,IAAK,IACDA,EAAM7I,GAAM6I,GACZ,MACJ,IAAK,IACDA,EAAM7I,GAAM6I,GAAK4C,cACjB,MACJ,QACI5C,EAAMtM,OAAOsM,QAKrBA,EADKA,aAAevP,KACdqV,GAAa9F,GAGbrR,EAASqR,GAGnB,GADA0F,EAAiC,iBAAdA,EAAyBA,EAAY9K,SAAS8K,EAAW,IACvEnM,MAAMmM,GAaP1F,EAAM4F,EAAO5F,MAbM,CACnB,IAAM+F,EAAWjC,EAAM7P,QAAQ,MAAQ,EACjC+R,EAAYlC,EAAM7P,QAAQ,MAAQ,EAClCgS,EAAKD,IAAcD,EAAW,IAAM,IAGtC/F,EAFO,MAAPiG,EAEML,GADN5F,EAAMkG,GAAQlG,EAAK0F,EAAYE,EAAKnX,OAAQwX,EAAID,IAI1CE,GAAQN,EAAO5F,EAAK0F,EAAWO,EAAID,GAMjD,OAAOhG,EAEX,SAASgF,GAAcP,EAAM0B,EAAWC,GAAqC,IAA3BC,EAA2B,uDAAjB,GAAIC,EAAa,wDAAH,EACtE,OAAO,WAAa,IAEhB,IAAI3R,EAAS0R,EACP3B,EAAWyB,EAAU1P,QACrBkO,EAAUyB,EAAS3P,QAJT,mBAAT8P,EAAS,yBAATA,EAAS,gBAKhB,cAAkBA,EAAlB,eAAwB,CAAnB,IAAMrB,EAAG,KACV,KAAmDP,EAAQ,GAA3D,GAAWb,EAAX,KAAkB0C,EAAlB,KAA8Bb,EAA9B,KAAyC/F,EAAzC,KACI8F,EAAYc,EAChB,GAAIF,GAAU,EACVZ,EAAYY,EACZA,GAAU,OAET,GAAkB,MAAdZ,EAAmB,CACxB,GAAIR,EAAM,EACN,MAAM,IAAIzX,MAAM,gCAEpB6Y,EAASpB,EACT,SAEJvQ,GAAU+P,EAAS,GACnB/P,GAAU8Q,GAAkBP,EAAKpB,EAAO4B,EAAWC,EAAW/F,GAC9D8E,EAASvQ,OAAO,EAAG,GACnBwQ,EAAQxQ,OAAO,EAAG,GAEtB,OAAuB,IAAnBwQ,EAAQlW,QACRkG,GAAU+P,EAAS,GACZD,EAAK9P,IAGLqQ,GAAcP,EAAMC,EAAUC,EAAShQ,EAAQ2R,IA+B3D,SAAS1G,GAAOlR,GAAc,2BAAN6X,EAAM,iCAANA,EAAM,kBAMjC,MALmB,WAAf,GAAO7X,IAAoB6X,EAAK9X,OAAS,IAEzCC,EAAM6X,EAAK,GACXA,EAAKE,SAEF/X,EAAIoR,QAAQuE,IAAc,SAACqC,EAAGC,EAAKjB,EAAW9F,EAAQ+F,EAAW/B,GACpE,IAAI5D,EAAMuG,EAAKI,GACf,GAAI/P,GAAUoJ,GAEV,OADA2F,EAAyB,MAAbA,EAAoB,KAAO/K,SAAS+K,EAAW,IACnD/F,GACJ,IAAK,IACL,IAAK,IAEDI,EAAMlJ,GAAQkJ,EADd2F,EAAyB,MAAbA,EAAoBA,EAAY,GAE5C,MACJ,IAAK,IACL,IAAK,IACD3F,EAAmB,MAAb2F,EAAoB3O,GAAYgJ,EAAK2F,GAAa3O,GAAYgJ,GACpE,MACJ,IAAK,IACL,IAAK,IACDA,EAAmB,MAAb2F,EAAoBzO,GAAc8I,EAAK2F,GAAazO,GAAc8I,GACxE,MACJ,IAAK,IACL,IAAK,IACD2F,EAAyB,MAAbA,EAAoBA,EAAY,EAC5C3F,EAAMlJ,GAAQD,GAASmJ,EAAK,KAAM2F,GAAa,KAC/C,MACJ,IAAK,IACL,IAAK,IACD3F,EAAmB,MAAb2F,EAAoBO,GAAQxS,OAAOsM,GAAM2F,EAAW,KAAOjS,OAAOsM,GACxE,MACJ,IAAK,IACL,IAAK,IACDA,EAAmB,MAAb2F,EAAoBO,GAAQ/O,GAAM6I,GAAM2F,EAAW,KAAOxO,GAAM6I,GACvD,MAAXJ,IACAI,EAAMA,EAAI4C,eAEd,MACJ,QACI,GAAIgB,EAAS,CACT,IAAIgC,EAAO,GACX5F,EAAM4D,EAAQ9D,QAAQ,sBAAsB,SAAC4G,EAAGE,EAASC,GACjDvC,GAAWtE,EAAK,KAChBA,EAAMnJ,GAASmJ,GAAM,GACrB4F,EAAO,KAEX,IAAMkB,EAAmC,MAAfD,EAAsBA,EAAYpY,OAAS,EAGrE,GAFAuR,EAAMlJ,GAAQkJ,EAAK5F,KAAK+D,IAAI2I,EAAoB,EAAG,IAE/CF,EAAQ3S,QAAQ,KAAO,EAAG,CAK1B,IAJA,SAA+B+L,EAAI0C,MAAM,KAAzC,GAAOkE,EAAP,KAAgBC,EAAhB,KACMrY,EAAIoY,EAAQnY,OAAS,EACrBsY,EAAiB3M,KAAKgE,MAAMwI,EAAQnY,OAAS,GAC/CuY,EAAYxY,EAAI,EAAIoY,EAAQzO,OAAO,EAAG3J,IAAMuY,EAAiB,EAAI,IAAM,IAAM,GACxE9U,EAAI,EAAGA,EAAI8U,EAAgB9U,IAChC+U,GAAaJ,EAAQzO,OAAO3J,EAAQ,EAAJyD,EAAO,IAAMA,EAAI8U,EAAiB,EAAI,IAAM,IAEhF/G,EAAM6G,EAAcG,EAAY,IAAMH,EAAcG,EAIxD,IAAMC,GADNL,EAAUA,EAAQ9G,QAAQ,KAAM,KACFrR,OAAS,GAAoB,MAAfmY,EAAQ,GAAaA,EAAQnY,OAAS,EAClF,OAAOyX,GAAQlG,EAAKiH,EAAgBrB,EAAKnX,OAASqY,EAAmB,QAEzE9G,EAAM4F,EAAO5F,QAKzBA,EADKA,aAAevP,KACdqV,GAAa9F,EAAK4D,GAAWhE,GAG7BjR,EAASqR,GAMnB,OAJA0F,EAAY9K,UAAU8K,GAAa,KAAKjL,UAAU,GAAI,IACjDlB,MAAMmM,KACP1F,EAAMkG,GAAQxS,OAAOsM,GAAM5F,KAAKmF,IAAImG,GAAY,IAAKA,EAAY,IAE9D1F,KAGR,SAASkH,GAASxY,EAAKyY,GAC1B,IAAMR,EAAMjY,EAAI0Y,YAAYD,GAC5B,OAAOR,GAAO,GAAKA,IAAQjY,EAAID,OAAS0Y,EAAO1Y,OAkB5C,SAAS4Y,GAAc3Y,GAC1B,MAAsB,iBAARA,GAAmC,IAAfA,EAAID,OAEnC,SAAS6Y,GAAmB5Y,GAC/B,MAAsB,iBAARA,GAAoB,QAAQ6Y,KAAK7Y,GAK5C,SAAS8E,GAAKgU,EAAWjR,GAC5B,OAAI/J,MAAMC,QAAQ8J,GACPA,EAAG/C,KAAKgU,GAGRhb,MAAMib,KAAKlR,GAAI/C,KAAKgU,GA4B5B,SAAStB,GAAQxX,EAAKmB,EAAKoW,EAAIyB,GAClCzB,EAAKA,GAAM,IACXpW,GAAYnB,EAAID,OAChB,IAAK,IAAID,EAAI,EAAGA,EAAIqB,EAAKrB,IACrBE,EAAMgZ,EAAUhZ,EAAMuX,EAAKA,EAAKvX,EAEpC,OAAOA,EAcJ,SAASoR,GAAQpR,EAAKyY,EAAQrH,GACjC,OAAOpR,EAAIoR,QAAQ,IAAIiE,OAAOC,GAAOmD,GAAS,KAAMrH,GAEjD,SAAS6H,GAAUC,EAAGrb,GACzB,OAlFG,SAAoBqb,EAAG3R,GAC1B,GAAI2R,EAAI,EACJ,MAAM,IAAIna,MAAM,sCAGpB,IADA,IAAM8I,EAAK,IAAI/J,MAAMob,GACZpZ,EAAI,EAAGA,EAAIoZ,EAAGpZ,IACnB+H,EAAG/H,GA4EoBjC,EA1E3B,OAAOgK,EAAG/C,KAAK,IA0ER2C,CAAWyR,GAEf,SAASC,GAAe3F,EAAO4C,GAClC,GAAIA,EAAQ,GAAKA,GAAS5C,EAAMzT,OAC5B,MAAM,IAAIhB,MAAM,8CAEpB,OAAOyU,EAAM4C,GAEV,SAASpC,GAAMhU,EAAKoZ,EAAWtY,EAAOqU,GAGzC,GADAA,EAA6B,iBAAZA,EAAuBA,EAAU,GADlDrU,EAAyB,iBAAVA,EAAqBA,OAAQtB,IAE/BsB,EAAQ,EACjB,MAAM,IAAI/B,MAAM,kCAEpB,GAAc,IAAV+B,EACA,MAAO,GAEX,IAAMuY,EAAgC,IAAP,EAAVlE,GACfzB,EAAyB,IAAP,EAAVyB,GAGdiE,GADAA,GADAA,EAAYA,GAAa,IACHE,QAAO,SAAAzb,GAAC,OAAIA,KAAGsE,IAAImT,KACnBvV,OAAS,EAAIqZ,EAAY,CAAC,OAChD,IAAMG,EAAS,GACThE,EAAM,IAAIF,OAAO+D,EAAUtU,KAAK,KAAM,KACxC0U,GAAa,EACb1Z,EAAI,EACR,EAAG,CACC,IAAMuR,EAAQkE,EAAI3B,KAAK5T,GACvB,GAAc,OAAVqR,EAAgB,CAChB,IAAMoI,EAAY/F,EAAO1T,EAAI+L,UAAUjM,GAAG4T,OAAS1T,EAAI+L,UAAUjM,KAC5DuZ,GAAeI,EAAU1Z,OAAS,IACnCwZ,EAAOlD,KAAKoD,GAEhBD,GAAa,MAEZ,CACD,IAAMC,EAAY/F,EAAO1T,EAAI+L,UAAUjM,EAAGuR,EAAM+E,OAAO1C,OAAS1T,EAAI+L,UAAUjM,EAAGuR,EAAM+E,SAClFiD,GAAeI,EAAU1Z,OAAS,KACtB,MAATe,GAAiByY,EAAOxZ,OAAS,IAAMe,GACvCyY,EAAOlD,KAAK3C,EAAO1T,EAAI+L,UAAUjM,GAAG4T,OAAS1T,EAAI+L,UAAUjM,IAC3D0Z,GAAa,GAGbD,EAAOlD,KAAKoD,IAGpB3Z,EAAIyV,EAAIE,iBAEP+D,GACT,OAAOD,EASJ,SAASG,GAAU1Z,GAAe,2BAAP2Z,EAAO,iCAAPA,EAAO,kBACrC,OAAwB,IAAjBA,EAAM5Z,OACPC,EAAI0Z,YACJ1Z,EAAIoR,QAAQ,IAAIiE,OAAO,KAAOC,GAAOqE,EAAM7U,KAAK,KAAO,MAAO,IAEjE,SAAS8U,GAAQ5Z,GAAe,2BAAP2Z,EAAO,iCAAPA,EAAO,kBACnC,OAAwB,IAAjBA,EAAM5Z,OACPC,EAAI4Z,UACJ5Z,EAAIoR,QAAQ,IAAIiE,OAAO,IAAMC,GAAOqE,EAAM7U,KAAK,KAAO,OAAQ,IAKjE,SAASiH,GAAU/L,EAAK6Z,EAAY9Z,GACvC,GAAK8Z,GAAc9Z,GAAU,GAAKC,EAAID,OAClC,MAAM,IAAIhB,MAAM,oCAEpB,OAAiB,MAAVgB,EAAiBC,EAAIyJ,OAAOoQ,EAAY9Z,GAAUC,EAAIyJ,OAAOoQ,GC3fjE,IAIMC,GAA4B,kCAU5BC,GAAuB,6D,8mCCN7B,IAAMC,GAAb,e,sRAAA,U,IAAA,G,EAAA,E,kZACI,WAAYC,EAAMC,GAAM,yBACpB,gBACKD,KAAOA,EACZ,EAAKC,KAAOA,EAHQ,EAD5B,mCAMI,WAEI,MAAQ,IAAMpV,GAAK,KADRrG,MACqB,MARxC,oBAUI,SAAOiH,GAEH,OADWjH,OACAiH,GAIM,SAACyU,EAAUC,GACpBC,EACA,OAAa,CACT,IAAMvS,EAAOqS,EAAUG,EAAOF,EACxBG,EAAa,CAACzS,EAAKoS,KAAMI,EAAKJ,MACpC,GAAqB,MAAjBK,EAAW,GAAY,CACvB,GAAqB,MAAjBA,EAAW,GAAY,CACvB,IAAMC,EAAKD,EAAW,GAChBE,EAAKF,EAAW,GACtB,GAAI9X,EAAOqF,EAAKmS,KAAMK,EAAKL,MAAO,CAC9BE,EAAWK,EACXJ,EAAWK,EACX,SAASJ,EAGT,OAAO,EAIX,OAAO,EAGV,OAAqB,MAAjBE,EAAW,IASrBF,CApCA5b,KAoCSiH,KA/C5B,yBAkDI,WAyBI,OAAwB,EAvBX,SAACgV,EAAOC,EAAOR,GAExB,OAAa,CACT,IAAMra,EAAI4a,EAAOxZ,EAAIyZ,EAAO7S,EAAOqS,EAC7BI,EAAazS,EAAKoS,KACxB,GAAkB,MAAdK,EAaA,OAAW,EAAJrZ,EAZP,IAAM0Z,EAAIL,EACV,GAAIza,EAAI,GACJ,OAAW,EAAJoB,EAGPwZ,EAAS5a,EAAI,EACb6a,GAAWzZ,GAAK,GAAKS,EAAemG,EAAKmS,MAAU,IAAMna,EACzDqa,EAAWS,GAUpBP,CAAK,EAAG,EAxBJ5b,QAnDnB,oBA6EI,SAAOoc,GAEH,OAAO/c,MAAMib,KADCta,QA9EtB,uBAiFI,SAAUiH,GAkCN,OAAyB,EAhCZ,SAACyU,EAAUC,GACpBC,EACA,OAAa,CACT,IAAMvS,EAAOqS,EAAUG,EAAOF,EACxBG,EAAa,CAACzS,EAAKoS,KAAMI,EAAKJ,MACpC,GAAqB,MAAjBK,EAAW,GAAY,CACvB,GAAqB,MAAjBA,EAAW,GAAY,CACvB,IAAMC,EAAKD,EAAW,GAChBE,EAAKF,EAAW,GAChBO,EAAoC,EAAhCrX,EAAQqE,EAAKmS,KAAMK,EAAKL,MAClC,GAAU,IAANa,EAAS,CACTX,EAAWK,EACXJ,EAAWK,EACX,SAASJ,EAGT,OAAW,EAAJS,EAIX,OAAO,EAGV,OAAqB,MAAjBP,EAAW,IACR,EAGD,GAKZF,CAjCI5b,KAiCKiH,KAnHxB,2BAqHI,WAEI,OAwDG,IAAIqV,GAzDItc,QAtHnB,aAyHI,WACI,OAAOY,EAAWZ,KAAKS,mBA1H/B,KA4HK,+CA5HL,MA4HI,WAEI,OAAOF,EADIP,UA7HnB,GAAgCkH,EAyH3BxG,OAAOC,UAaC2b,GAAb,WACI,WAAYlT,GAAI,WACZpJ,KAAKoJ,GAAKA,EACVpJ,KAAKuc,GAAKvc,KAAKoJ,GACfpJ,KAAKC,QAAU,KAJvB,kBAMK,uDANL,MAMI,WAEI,OADWD,KACDC,UARlB,KAUK,6CAVL,MAUI,WAEI,OADWD,KACDC,UAZlB,KAcK,0CAdL,MAcI,WACI,IAAMuc,EAAKxc,KACL8b,EAAaU,EAAGD,GAAGd,KACzB,GAAkB,MAAdK,EAAoB,CACpB,IAAMK,EAAIL,EAGV,OAFAU,EAAGvc,QAAUuc,EAAGD,GAAGf,KACnBgB,EAAGD,GAAKJ,GACD,EAGP,OAAO,IAxBnB,KA2BK,uCA3BL,MA2BI,WACI,IAAMK,EAAKxc,KACXwc,EAAGD,GAAKC,EAAGpT,GACXoT,EAAGvc,QAAU,OA9BrB,qBAgCI,gBAhCJ,KA4CO,SAASwc,KACZ,OAAO,IAAIlB,GAAW,UAAM,GAGzB,SAASmB,GAAyBtd,EAAGgK,GACxC,OAAO,IAAImS,GAAWnc,EAAGgK,GAGtB,SAASuT,GAAwBvT,GACpC,OAAkB,MAAXA,EAAGqS,KAGP,SAASmB,GAAuBxT,GAiBnC,OAAqB,EAhBR,SAAC6S,EAAOP,GAEjB,OAAa,CACT,IAAMra,EAAI4a,EACJH,EADkBJ,EACAD,KACxB,GAAkB,MAAdK,EAMA,OAAW,EAAJza,EALP4a,EAAS5a,EAAI,EACbqa,EAAWI,GAShBF,CAAK,EAAGxS,GAGZ,SAASyT,GAAqBzT,GAEjC,GAAkB,MADCA,EAAGqS,KAElB,OAAOrS,EAAGoS,KAGV,MAAO,IAAIlb,MAAOwc,gDAInB,SAASC,GAAqB3T,GACjC,IAAM0S,EAAa1S,EAAGqS,KACtB,GAAkB,MAAdK,EACA,OAAOA,EAGP,MAAO,IAAIxb,MAAOwc,gDA6BnB,SAASE,KACZ,OAAOP,KAGJ,SAAStW,GAAK/G,EAAGgK,GACpB,OAAOsT,GAAyBtd,EAAGgK,GAGhC,SAAS6T,GAAU7d,GACtB,OAAOsd,GAAyBtd,EAAGqd,MAGhC,SAASS,GAAQ9T,GACpB,OAAOuT,GAAwBvT,GAG5B,SAAS9H,GAAO8H,GACnB,OAAOwT,GAAuBxT,GAG3B,SAASoS,GAAKpS,GACjB,OAAOyT,GAAqBzT,GAYzB,SAASqS,GAAKrS,GACjB,OAAO2T,GAAqB3T,GAoEzB,SAAS+T,GAAQ/T,GACpB,IAAM1G,EAAmC,EAA7Bka,GAAuBxT,GAC7BoH,EAAM/H,GAAK,IAAIpJ,MAAMqD,GAAM,EAAGA,EAAK,MAezC,OAda,SAACuZ,EAAOP,GAEjB,OAAa,CACT,IAAMra,EAAI4a,EAAO5S,EAAOqS,EACxB,GAAKiB,GAAwBtT,GAM7B,MALImH,EAAInP,GAAKwb,GAAqBxT,GAC9B4S,EAAS5a,EAAI,EACbqa,EAAWqB,GAAqB1T,IAM5CuS,CAAK,EAAGxS,GACDoH,EAGJ,SAAS4M,GAAKC,EAAQC,EAAOlU,GAGhC,IAFA,IAAImU,EAAMD,EACNjU,EAAOD,GACHuT,GAAwBtT,IAC5BkU,EAAMF,EAAOE,EAAKV,GAAqBxT,IACvCA,EAAO0T,GAAqB1T,GAEhC,OAAOkU,EAGJ,SAASC,GAAQpU,GACpB,OAAOgU,IAAK,SAACG,EAAKne,GAAN,OAAYsd,GAAyBtd,EAAGme,KAAMd,KAAwBrT,GAkG/E,SAASqU,GAAgBrU,EAAIsU,GAEhC,IADA,IAAIlN,EAAMkN,EACDrc,EAAI+H,EAAG9H,OAAS,EAAGD,GAAK,EAAGA,IAChCmP,EAAMkM,GAAyBtT,EAAG/H,GAAImP,GAE1C,OAAOA,EAGJ,SAASmN,GAAQvU,GACpB,OAAOqU,GAAgBrU,EAAIqT,MAGxB,SAASmB,GAAMxU,GAClB,IAAIyU,EAAM1B,EACV,GAAIhd,EAAYiK,GACZ,OAAOuU,GAAQvU,GAEd,GAAIA,aAAcmS,GACnB,OAAOnS,EAGP,IAAM0U,EAAOrB,KACTsB,EAAOD,EACLE,EAAazd,EAAc6I,GACjC,IACI,KAAO4U,EAAW,8CAA8C,CAC5D,IAAM5e,EAAI4e,EAAW,0DACZH,EAAOE,EAAO5B,EAAK,IAAIZ,GAAWnc,OAAG,GAAWye,EAAKpC,KAAOU,EAArE4B,EAAwE5B,GAHhF,QAOI6B,EAAWC,UAEf,IAAMC,EAAOH,EACPI,EAAM1B,KAEZ,OADAyB,EAAKzC,KAAO0C,EACLpB,GAAqBe,GA6D7B,SAASM,GAAOhV,EAAIiV,GACvB,OAAOjB,IAAK,SAACG,EAAKne,GAAN,OAAYsd,GAAyBtd,EAAGme,KAAMc,EAAIb,GAAQpU,IAGnE,SAASkV,GAAQnW,EAASiB,GAK7B,IAJA,IAAIC,EAAM8S,EACJ2B,EAAOrB,KACTsB,EAAOD,EACPO,EAAKjV,GACDuT,GAAwB0B,IAAK,CAEjC,IADA,IAAIE,EAAKpW,EAAQ0U,GAAqBwB,KAC9B1B,GAAwB4B,IACnBlV,EAAO0U,EAAO5B,EAAK,IAAIZ,GAAWsB,GAAqB0B,QAAK,GAAWlV,EAAKoS,KAAOU,EAA5F4B,EAA+F5B,EAC/FoC,EAAKxB,GAAqBwB,GAE9BF,EAAKtB,GAAqBsB,GAE9B,IAAMR,EAAOE,EACPI,EAAM1B,KAEZ,OADAoB,EAAKpC,KAAO0C,EACLpB,GAAqBe,GAGzB,SAASjV,GAAWV,EAASiB,GAChC,IAAM0U,EAAOrB,KACPsB,EArNH,SAAqBV,EAAQC,EAAOlU,GAiBvC,OAhBa,SAAC6S,EAAOuC,EAAS9C,GAE1B,OAAa,CACT,IAAMra,EAAI4a,EAAOsB,EAAMiB,EAASnV,EAAOqS,EACvC,GAAIiB,GAAwBtT,GACxB,OAAOkU,EAGPtB,EAAS5a,EAAI,EACbmd,EAAUnB,EAAOhc,EAAGkc,EAAKV,GAAqBxT,IAC9CqS,EAAWqB,GAAqB1T,IAMrCuS,CAAK,EAAG0B,EAAOlU,GAoMTqV,EAAY,SAACpd,EAAGkc,EAAKne,GAC9B,IAAM+c,EAAI,IAAIZ,GAAWpT,EAAQ9G,EAAGjC,QAAI,GAExC,OADAme,EAAI9B,KAAOU,EACJA,IACR2B,EAAM1U,GACH+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GAGzB,SAASpa,GAAIyE,EAASiB,GACzB,IAAM0U,EAAOrB,KACPsB,EAAOX,IAAK,SAACG,EAAKne,GACpB,IAAM+c,EAAI,IAAIZ,GAAWpT,EAAQ/I,QAAI,GAErC,OADAme,EAAI9B,KAAOU,EACJA,IACR2B,EAAM1U,GACH+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GA6HzB,SAASY,GAAK5V,EAAGM,GACpB,IAAM0S,EALH,SAAiBhT,EAAGM,GACvB,OAnCG,SAAiBN,EAAGM,GAqBvB,OApBa,SAACsS,GAEV,OAAa,CACT,IAAMrS,EAAOqS,EACb,GAAIiB,GAAwBtT,GACxB,OAGA,IAAMyS,EAAahT,EAAE+T,GAAqBxT,IAC1C,GAAkB,MAAdyS,EAKA,OAAOA,EAJPJ,EAAWqB,GAAqB1T,IAUzCuS,CAAKxS,GAcLuV,EAAQ,SAACvf,GAAD,OAAQ0J,EAAE1J,GAAK2I,GAAK3I,QAAM,IAAUgK,GAIhCwV,CAAQ9V,EAAGM,GAC9B,GAAkB,MAAd0S,EACA,MAAO,IAAIxb,MDjvBc,sECovBzB,OAAOue,GAAQ/C,GAsFhB,SAASgD,GAAKrE,EAAGrR,GACpB,OAvmBG,SAAwCA,EAAIuO,GAsB/C,OArBa,SAACsE,EAAOP,GAEjB,OAAa,CACT,IAAMra,EAAI4a,EAAO5S,EAAOqS,EAClBI,EAAazS,EAAKoS,KACxB,GAAkB,MAAdK,EAWA,MAAO,IAAIxb,MAAOye,0FAVlB,GAAI1d,IAAMsW,EACN,OAAOtO,EAAKmS,KAGZS,EAAS5a,EAAI,EACbqa,EAAWI,GAUpBF,CAAK,EAAGxS,GAilBR4V,CAA+B5V,EAAIqR,GAGvC,SAASI,GAAO/R,EAAGM,GACtB,IAAM0U,EAAOrB,KACPsB,EAAOX,IAAK,SAACG,EAAKne,GACpB,GAAI0J,EAAE1J,GAAI,CACN,IAAM+c,EAAI,IAAIZ,GAAWnc,OAAG,GAE5B,OADAme,EAAI9B,KAAOU,EACJA,EAGP,OAAOoB,IAEZO,EAAM1U,GACH+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GAsBzB,SAASmB,GAAOnW,EAAGM,GACtB,IAAM0U,EAAOrB,KACPsB,EAAOX,IAAK,SAACG,EAAKne,GACpB,IAAM0c,EAAahT,EAAE1J,GACrB,GAAkB,MAAd0c,EACA,OAAOyB,EAGP,IAAMpB,EAAI,IAAIZ,GAAWsD,GAAQ/C,QAAa,GAE9C,OADAyB,EAAI9B,KAAOU,EACJA,IAEZ2B,EAAM1U,GACH+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GAOzB,SAAS9U,GAAWyR,EAAG3R,GAI1B,IAHA,IAAIM,EAAI+S,EACF2B,EAAOrB,KACTsB,EAAOD,EACFzc,EAAI,EAAGA,GAAMoZ,EAAI,EAAIpZ,IACjB+H,EAAK2U,EAAO5B,EAAK,IAAIZ,GAAWzS,EAAEzH,QAAI,GAAW+H,EAAGqS,KAAOU,EAApE4B,EAAuE5B,EAE3E,IAAM+C,EAAOnB,EACPI,EAAM1B,KAEZ,OADAyC,EAAKzD,KAAO0C,EACLpB,GAAqBe,GAOzB,SAAS/a,GAAO+F,EAAGM,GACtB,GAAIuT,GAAwBvT,GACxB,MAAO,IAAI9I,MDn6Ba,yBCs6BxB,OAAO8c,GAAKtU,EAAG0S,GAAKpS,GAAKqS,GAAKrS,IA4E/B,SAAS+V,GAAI/V,EAAIiV,GACpB,OAnXG,SAAclW,EAASiB,EAAIiV,GAC9B,IAAMP,EAAOrB,KACPsB,EA7NH,SAAeV,EAAQC,EAAOlU,EAAIiV,GAIrC,IAHA,IAAId,EAAMD,EACNjU,EAAOD,EACPyS,EAAOwC,GACF1B,GAAwBtT,KAAYsT,GAAwBd,IACjE0B,EAAMF,EAAOE,EAAKV,GAAqBxT,GAAOwT,GAAqBhB,IACnExS,EAAO0T,GAAqB1T,GAC5BwS,EAAOkB,GAAqBlB,GAEhC,OAAO0B,EAoNM6B,EAAM,SAAC7B,EAAKne,EAAGM,GACxB,IAAMyc,EAAI,IAAIZ,GAgXN,SAACnc,EAAGM,GAAJ,MAAU,CAACN,EAAGM,GAhXGyI,CAAQ/I,EAAGM,QAAI,GAExC,OADA6d,EAAI9B,KAAOU,EACJA,IACR2B,EAAM1U,EAAIiV,GACPF,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GA0WrBuB,CAAK,EAAkBjW,EAAIiV,GAO/B,SAASiB,GAASha,EAAU8D,GAC/B,IAAMmW,EAAMpC,GAAQ/T,GAEpB,OADAmW,EAAIhb,KAAKe,GACFqY,GAAQ4B,GAuBZ,SAASC,GAAM1W,EAAGM,EAAIqW,GACzB,OAAOrC,IAAK,SAACG,EAAKne,GAAN,OAAYqgB,EAAMC,IAAInC,EAAKzU,EAAE1J,MAAKqgB,EAAME,UAAWvW,GA0D5D,SAASwW,GAAKC,EAAWC,GAE5B,OAAa,CACT,IAAMzd,EAAQwd,EAAWzW,EAAK0W,EAC9B,GAAIzd,GAAS,EACT,OAAO+G,EAEN,GAAIuT,GAAwBvT,GAC7B,MAAO,IAAI9I,MAAOgb,GAAAA,2BAGlBuE,EAAaxd,EAAQ,EACrByd,EAAS/C,GAAqB3T,IAOnC,SAAS2W,GAAUC,EAAeF,GAErC,OAAa,CACT,IAAMG,EAAYD,EAAe5W,EAAK0W,EACtC,GAAInD,GAAwBvT,GACxB,OAAOA,EAEN,IAAK6W,EAAUpD,GAAqBzT,IACrC,OAAOA,EAGP4W,EAAgBC,EAChBH,EAAS/C,GAAqB3T,IAOnC,SAAS8W,GAAK7d,EAAO+G,GACxB,GAAI/G,EAAQ,EACR,MAAO,IAAI/B,MAAO+a,GAAAA,4BAEtB,IAoBMyC,EAAOrB,KACPsB,EArBO,SAAC9B,EAAOuC,EAAS9C,GAG1B,IAFA,IAAIS,IAES,CACT,IAAM9a,EAAI4a,EAAOsB,EAAMiB,EAASnV,EAAOqS,EACvC,GAAIra,GAAK,EACL,OAAOkc,EAEN,GAAIZ,GAAwBtT,GAC7B,MAAO,IAAI/I,MAAOgb,GAAAA,2BAGlBW,EAAS5a,EAAI,EACD8a,EAAK,IAAIZ,GAAWsB,GAAqBxT,QAAO,GAAWkU,EAAI9B,KAAOU,EAAlFqC,EAAqFrC,EACrFT,EAAWqB,GAAqB1T,IAO/BuS,CAAKvZ,EAAOyb,EAAM1U,GACzB+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GAGzB,SAASqC,GAAUF,EAAW7W,GACjC,IAmBM0U,EAAOrB,KACPsB,EApBO,SAACS,EAAS9C,GAGnB,IAFA,IAAIS,IAES,CACT,IAAMoB,EAAMiB,EAASnV,EAAOqS,EAC5B,GAAIiB,GAAwBtT,GACxB,OAAOkU,EAEN,IAAK0C,EAAUpD,GAAqBxT,IACrC,OAAOkU,EAGKpB,EAAK,IAAIZ,GAAWsB,GAAqBxT,QAAO,GAAWkU,EAAI9B,KAAOU,EAAlFqC,EAAqFrC,EACrFT,EAAWqB,GAAqB1T,IAO/BuS,CAAKkC,EAAM1U,GAClB+U,EAAM1B,KAEZ,OADAsB,EAAKtC,KAAO0C,EACLpB,GAAqBe,GAiDzB,SAASsC,GAAQzI,EAAOvO,GAC3B,GAAIuO,EAAQ,EACR,MAAO,IAAIrX,MAAO+a,GAAAA,4BAEtB,GAAI1D,EAAQiF,GAAuBxT,GAC/B,MAAO,IAAI9I,MAAOgb,GAAAA,4BAEtB,MAAO,CAAC4E,GAAKvI,EAAOvO,GAAKwW,GAAKjI,EAAOvO,I,qXC5sClC,SAASiX,KACZ,MAAO,IAAI/f,MAjByB,+CAoBjC,SAASggB,KACZ,MAAO,IAAIhgB,MAvB8B,iCA0BtC,IAAMigB,GAAb,YACI,WAAYzX,GAAG,WACX9I,KAAK8I,EAAIA,EAFjB,mCAII,WACI,IAEIzH,EAAI,EACJE,EAAM,QACJiJ,EAAIjK,EAJCP,MAKX,IACI,KAAQqB,EALK,GAKYmJ,EAAE,8CACnBnJ,EAAI,IACJE,GAAa,MAEjBA,GAAaC,EAASgJ,EAAE,2DACxBnJ,EAAMA,EAAI,EAAK,EAKnB,OAfa,IAYTA,IACAE,GAAa,SAEVA,EAAM,IAXjB,QAcIiJ,EAAEyT,aAxBd,2BA2BI,WAEI,OADUje,KACD8I,MA7BjB,KA+BKpI,OAAOC,SA/BZ,MA+BI,WACI,OAAOC,EAAWZ,KAAKS,mBAhC/B,KAkCK,+CAlCL,MAkCI,WAEI,OADUT,KACD8I,QApCjB,KAgDa0X,GAAb,WACI,WAAYvgB,EAASE,EAAMsgB,GAAS,WAChCzgB,KAAKC,QAAUA,EACfD,KAAKG,KAAOA,EACZH,KAAKygB,QAAUA,EAJvB,kBAMK,uDANL,MAMI,WAEI,OADWzgB,KACDC,YARlB,KAUK,6CAVL,MAUI,WAEI,OADWD,KACDC,YAZlB,KAcK,0CAdL,MAcI,WAEI,OADWD,KACDG,SAhBlB,KAkBK,uCAlBL,MAkBI,YA9EG,WACH,MAAO,IAAIG,MAHqB,8CAiF5BogB,KAnBR,qBAqBI,WACe1gB,KACRygB,cAvBX,KA+BO,SAASE,GAA0C1gB,EAASE,EAAMsgB,GACrE,OAAO,IAAID,GAA2BvgB,EAASE,EAAMsgB,GAmHlD,SAASG,GAA6BC,EAAOC,EAASC,GACzD,IAAIC,GAAU,EACVC,OAAO,EACP3D,EAAQvV,GAAK8Y,KACXJ,EAAU,WACZ,GAAa,MAATnD,EAAe,CACf,IAAM/T,EAAMsV,GAAQvB,GACpB,IACIyD,EAAOxX,GADX,QAII+T,OAAS,KAIf4D,EAAS,WACX,IACIT,IADJ,QAIIQ,OAAQ,IAGhB,OAAON,IAA0C,WAI7C,OAHKK,GACDX,KAEQ,MAARY,EACOpC,GAAQoC,GAGRX,QAEZ,WAIC,GAHKU,IACDA,GAAU,GAED,MAAT1D,EAAe,CACf,IACI6D,EADE3e,EAAIqc,GAAQvB,GAElB,IACI6D,EAAeL,EAAQte,GAE3B,MAAOsZ,GAEH,MADAoF,IACMpF,EAEV,OAAoB,MAAhBqF,GACAF,EAAOE,GACA,IAGPD,KACO,GAIX,OAAO,IAEZT,GAwCA,SAASW,GAAMtY,GAClB,OA3PG,SAAuCA,GAC1C,OAAO,IAAIyX,GAAezX,GA0PnBuY,CAA8BvY,GAGlC,SAAS8U,GAAMxU,GAElB,OAZyBkY,EAWZ,SAVF,MAUYlY,GXhSpB,SAA2BhK,GAC9B,MAAO,IAAIkB,MAAMlB,GWsRbmiB,CAAkBD,GAUf/gB,EAAc6I,GAZlB,IAAsBkY,EAetB,SAASE,GAAMC,GAClB,OAAOL,IAAM,kBAAM7gB,EAAckhB,QAG9B,SAAS9a,GAAO+a,GACnB,OAAON,IAAM,kBAzNV,SAA2BM,GAC9B,IAAIC,OAAW,EACXC,OAAW,EACXZ,GAAU,EACVa,GAAW,EACXZ,OAAO,EACLC,EAAS,WAEX,GADAW,GAAW,EACK,MAAZD,EAAkB,CAClB,IAAME,EAAQF,EACd,IACIE,EAAM7D,UADV,QAII2D,OAAY,GAGpB,GAAgB,MAAZD,EAAkB,CAClB,IAAMI,EAAQJ,EACd,IACII,EAAM9D,UADV,QAII0D,OAAY,KAIxB,OAAOhB,IAA0C,WAO7C,OANKK,EAGIa,GACLvB,KAHAD,KAKQ,MAARY,EACOpC,GAAQoC,GAGRX,QAEZ,WAKC,GAHKU,IACDA,GAAU,GAEVa,EACA,OAAO,EAIP,IADA,IAAIrR,OAAM,EACI,MAAPA,GAAa,CAChB,IAAMsL,EAAa,CAAC6F,EAAUC,GAC9B,GAAqB,MAAjB9F,EAAW,GACX,GAAqB,MAAjBA,EAAW,GAAY,CACvB,IAAMkG,EAAUlG,EAAW,GAC3B,GAAIkG,EAAQ,6CACRf,EAAOlZ,GAAKia,EAAQ,2DACpBxR,GAAM,OAGN,IACIwR,EAAQ/D,UADZ,QAII2D,OAAY,OAInB,CACD,IAAMK,EAAUnG,EAAW,GAC3B,GAAImG,EAAQ,6CAA8C,CACtD,IAAMC,EAAKD,EAAQ,0DACnBL,EAAgCrhB,EAAJ2hB,QAG5BhB,IACA1Q,GAAM,OAKdmR,EAAWphB,EAAcmhB,GAGjC,OAAO7C,GAAQrO,MAEpB,WACMqR,GACDX,OAiIWiB,CAAkBT,MAGlC,SAASU,GAAOX,EAAWnE,GAC9B,OAAO8D,IAAM,kBAvDV,SAA2BtY,EAAGwU,GACjC,IAAI2D,OAAO,EACP1D,EAAMD,EACV,OAAOqD,IAA0C,WAC7C,GAAY,MAARM,EAAc,CACd,IAAM7hB,EAAI6hB,EAAK,GAEf,OADWA,EAAK,GACT7hB,EAGP,OAAOihB,QAEZ,WAEC,GAAY,OADZY,EAAOnY,EAAEyU,IACS,CACF0D,EAAK,GAAjB,IACMoB,EAAOpB,EAAK,GAElB,OADA1D,EAAM8E,GACC,EAGP,OAAO,KAEZ,eAgCgBC,CAAkBb,EAAWnE,MAG7C,SAASN,KACZ,OAAOwE,IAAM,kBAAO,IAAIniB,MAAM,MAG3B,SAAS4d,GAAU7d,GACtB,OAAOoiB,IAAM,kBTrHV,SAAmBphB,EAAO+F,GAC7B,IAAMoc,EAAK/Z,QSoHQga,ETpH4B,GAE/C,OADAD,EAAG,GAAKniB,EACDmiB,ESkHYC,CAAYpjB,MAO5B,SAAS+d,GAAQ/T,GACpB,OAAIA,aAAcmS,GACPkH,GAAUrZ,GAGV/J,MAAMib,KAAKlR,GAQnB,SAASsZ,GAAOtZ,GACnB,OAAIjK,EAAYiK,GACLuZ,GAAUvZ,GAEZA,aAAcmS,GACZnS,EAGAwZ,GAAQxZ,GAIhB,SAASyZ,GAASlN,EAAQmL,EAASL,GACtC,OAAOW,IAAM,kBAAMR,GAA6BjL,EAAQmL,EAASL,MAG9D,SAASqC,GAAgBnN,EAAQmL,EAASL,GAC7C,OAAOW,IAAM,WACT,IAAI/f,GAAK,EACT,OAAOuf,GAA6BjL,GAAQ,SAACvW,GAEzC,OAAO0hB,EADPzf,EAAMA,EAAI,EAAK,EACGjC,KACnBqhB,MAIJ,SAASrC,GAAOhV,EAAIiV,GACvB,OAAO1X,GAAO,CAACyC,EAAIiV,IAuHhB,SAAS0E,GAAO9C,EAAW7W,GAC9B,IAAMoB,EAAIoT,GAAMxU,GAChB,IAEI,IADA,IAAI4Z,GAAQ,GACHA,GAAUxY,EAAE,8CACjBwY,EAAQ/C,EAAUzV,EAAE,2DAExB,OAAOwY,EALX,QAQIxY,EAAEyT,WA2JH,SAASb,GAAKC,EAAQC,EAAOlU,GAChC,IAAMoB,EAAIoT,GAAMxU,GAChB,IAEI,IADA,IAAImU,EAAMD,EACH9S,EAAE,8CACL+S,EAAMF,EAAOE,EAAK/S,EAAE,2DAExB,OAAO+S,EALX,QAQI/S,EAAEyT,WA2IH,SAASgF,GAAQC,EAAQ9Z,GAC5BgU,IAAK,SAAC+F,EAAU/jB,GACZ8jB,EAAO9jB,UACR,EAAQgK,GA+ER,SAAS1F,GAAIyE,EAASiB,GACzB,OAAOyZ,IAAS,kBAAMjF,GAAMxU,MAAK,SAACoB,GAAD,OAAQA,EAAE,6CAA+CzC,GAAKI,EAAQqC,EAAE,iEAA+D,KAAU,SAAC4Y,GAC/KA,EAAInF,aAkLL,SAASU,GAAQ0E,EAASja,GAC7B,IAAMoB,EAAIoT,GAAMxU,GAChB,IAEI,IADA,IAAIoH,OAAM,EACK,MAAPA,GAAgBhG,EAAE,8CACtBgG,EAAM6S,EAAQ7Y,EAAE,2DAEpB,OAAOgG,EALX,QAQIhG,EAAEyT,WA8GH,SAASiC,GAAK7d,EAAO+G,GACxB,OAAO0Z,IAAgB,kBAAMlF,GAAMxU,MAAK,SAAC/H,EAAGmJ,GACxC,GAAInJ,EAAIgB,EAAO,CACX,GAAImI,EAAE,6CACF,OAAOzC,GAAKyC,EAAE,2DAGd,MAAO,IAAIlK,MAAOgb,2FAM3B,SAAC8H,GACAA,EAAInF,aAgBL,SAASkB,GAAI/V,EAAIiV,GACpB,OA3TG,SAAclW,EAASiB,EAAIiV,GAC9B,OAAOwE,IAAS,iBAAM,CAACjF,GAAMxU,GAAKwU,GAAMS,OAAM,SAACiF,GAC3C,IAyTSlkB,EAAGM,EAzTN2I,EAAKib,EAAU,GACfhb,EAAKgb,EAAU,GACrB,OAAQjb,EAAG,8CAAgDC,EAAG,6CAAgDP,IAuTrG3I,EAvTkHiJ,EAAG,0DAuTlH3I,EAvT6K4I,EAAG,0DAuT1K,CAAClJ,EAAGM,UAvTqO,KAC5P,SAAC6jB,GACA,IACIA,EAAY,GAAGtF,UADnB,QAIIsF,EAAY,GAAGtF,cAiThBoB,CAAK,EAAkBjW,EAAIiV,GAO/B,SAASC,GAAQnW,EAASiB,GAC7B,OAAOoY,IAAM,kBAAM7a,GAAOjD,GAAIyE,EAASiB,OCxtCpC,SAASoa,GAAuBC,EAAIra,GACvC,IAAMka,EAZH,SAAgCla,GACnC,OAAOgU,GfyfJ,SAAiBsG,EAAO5a,GAE3B,GAAS,MAALA,GAAaA,EAAExH,OAAS,EACxB,OAAOwH,EAEX,IAAM6a,EAAY,WAEd,IADA,IAAInT,EAAM1H,EACDzH,EAAI,EAAGA,EAAIqiB,EAAOriB,IACvBmP,EAAMA,EAASnP,EAAN,qBAAMA,OAAN,YAAMA,IAEnB,OAAOmP,GAGX,OADAmT,EAAU5d,GAAW+C,EACd6a,EetgBKC,CAAQ,GAAG,SAACN,GACpB,IAAMO,EAAUP,EAAU,GACpBQ,EAAQR,EAAU,GACxB,OAAO,SAAClkB,GACJ,IAAM0c,EAAa1c,EACnB,MAA0B,cAAlB0c,EAAW,GAAsB,CAAC3V,GAAK3E,EAASsa,EAAW,IAAK+H,GAAUC,GAAS,CAACD,EAAS1d,GAAK/G,EAAG0kB,QAEjH,CAAC9G,KAASA,MAAUQ,GAAQpU,IAId2a,CAAuB3a,GACzC,OAAOjD,GAAK,CAAC,YAAaE,GAAK,IAAKF,GAAKsd,EAAIH,EAAU,MAAOA,EAAU,I,+/BCErE,SAASU,GAA6BC,GACzC,IAAMC,EAAWD,EAAuCC,SAClDC,EAAQF,EAAuCE,MAC/CC,EAAUzG,GAAQ,CAAC,CAAC,UAAWsG,EAAuCf,QAAS,CAAC,QAAS,CAC3FmB,gBAAiB,cACjBC,YAAa,OACbC,SAAU,SACV,CAAC,WAAYtlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKoI,GAAOlB,IAAM,kBAAMpD,GAAiB,MAAT+F,EAAiBlH,IAAUuH,EAAAA,EAAAA,eAAc,OAAQ,CACtIC,UAAW,cACXC,SAAUC,GAASR,MACjBnH,KAASwE,IAAM,WACjB,IAAIoD,EACJ,OAAoB,MAAZV,EAAoBjH,IAAUuH,EAAAA,EAAAA,eAAc,MAAO,CACvDC,WAAYG,EAAQD,GAAST,GAAW9L,GAAOf,GAAO,WAAde,CAA0BwM,OAChE5H,kBAEV,OAAOwH,EAAAA,EAAAA,eAAc,IAAK9e,EAAU8d,GAAuB,SAAUY,KAGlE,IAAMS,GAAb,a,sRAAA,U,UAAA,G,EAAA,E,kZACI,WAAYne,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,O,EAAA,G,EAAA,oBAMI,WACI,MAAO,CAAC,WAAY,UAAW,WAAY,SAAU,WAAY,WAAY,UAAW,aAAc,cAP9G,sBASI,WAEI,OADU3F,KACA0G,KACN,KAAK,EACD,MAAO,WAEX,KAAK,EACD,OAAO0R,GAAOf,GAAO,gBAAde,CANLpY,KAMsC2F,OAAO,IAEnD,KAAK,EACD,MAAO,sBAEX,KAAK,EACD,MAAO,aAEX,KAAK,EACD,MAAO,wBAEX,KAAK,EACD,MAAO,WAEX,KAAK,EACD,MAAO,UAEX,KAAK,EACD,MAAO,oBAEX,QACI,MAAO,iB,gFArCvB,GAAgCa,GA+CzB,SAASse,GAAyB1lB,GACrC,OAAQA,EAAEsH,KACN,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,GAEX,KAAK,EACD,MAAO,SAEX,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,YAEX,KAAK,EACD,MAAO,WAEX,KAAK,EACD,MAAO,UAEX,KAAK,EACD,MAAO,OAEX,QACI,MAAO,QChGZ,SAASqe,GAA4BC,GACxC,IAAIC,EAAQC,EAAQC,EAAMC,EAAQC,EAC5BC,EAAW3H,GAAQ,CAAC,CAAC,QAAS,CAChC4H,UAAW,OACXlB,gBAAiB,YACjB,CAAC,WAAYplB,EAAAA,SAAAA,QAAkC,EAAEgmB,EAAStH,GAAQ,EAAEuH,EAASjI,IAAWkI,EAAOlI,IAAUuH,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,YAAa,+BAA+BuH,EAAAA,EAAAA,eAAc,MAAO,CACvPC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SACrDX,EAAAA,EAAAA,eAAc,UAAW,CAC3BC,UAAW,QACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,QACrDE,EAASzH,GAAQ,EAAC6G,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,WAAY+H,EAAKQ,WAAYH,EAAU1H,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAYvF,GAAOf,GAAO,kBAAde,CAAiC4M,EAAKS,iBAAiBjB,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,WAAY6B,SAAeb,EAAAA,EAAAA,eAAc,MAAO,CAClVC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK8K,UACpDZ,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,YAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ8B,KAGlE,SAASI,KACZ,IAAIC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAClGlB,EAAOxH,GAAQ,EAAC6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUvG,GAAU,CAAC,YAAa,aAAc0I,EAAWhI,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAE2mB,EAAWjI,GAAQ,CAAC,CAAC,YAAa,2BAA4B,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAE4mB,EAAWlI,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAY1e,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK5W,IAAI,SAAC4f,GAClb,IAAMc,EAAUzG,GAAQ,CAAC,CAAC,YAAa,YAAa,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CACrHC,UAAWrM,GAAOf,GAAO,qBAAde,CAAoCkL,EAAU,OACzDkB,EAAAA,EAAAA,eAAc,MAAO,CACrBC,UAAW,YACXC,SAAUpB,EAAU,UAExB,OAAOkB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQY,OACtEzG,GAAQ,CAAC,CAAC,YAAa,WAAY,CAAC,MAAO,QAAS,CAAC,QAAS,cAAe,CAAC,YAAa,WAAY,CAAC,uBAAwB,aAAc,CAAC,cAAe,SAAU,CAAC,QAAS,SAAU,CAAC,gBAAiB,0BAA0B6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQqC,YAAmBrB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQoC,OAAeE,EAAWnI,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAE8mB,EAAWpI,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAE+mB,EAAWrI,GAAQ,CAAC,CAAC,YAAa,uBAAwB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CACxsBC,UAAW,oBACXD,EAAAA,EAAAA,eAAc,MAAO,CACrBC,UAAW,iBACXC,SAAUzlB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,WAAY7F,GAAQ,CAAC,CAAC,YAAa,UAAW,CAAC,WAAY,8BAA8B6G,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAAS7F,GAAQ,CAAC,CAAC,YAAa,UAAW,CAAC,WAAY,2EACnS6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQwC,YAAmBxB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQuC,YAAmBvB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQsC,OAAeG,EAAWtI,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAEinB,EAAWvI,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAY1e,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK5W,IAAI,SAAC6f,GACtc,IAAM+C,EAAU3I,GAAQ,CAAC,CAAC,YAAa,4BAA6B,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CACrIC,UAAWrM,GAAOf,GAAO,8BAAde,CAA6CmL,EAAY,OACpEiB,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAAS7F,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY4F,EAAY,UAAUiB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAW7F,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY4F,EAAY,cAC7Q,OAAOiB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ8C,OACtE3I,GAAQ,CAAC,CAAC,YAAa,8CAA+C,wIAAyI,CAAC,YAAa,6BAA8B,2IAAiJ,CAAC,QAAS,0CAA2C,mIAAmI6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ0C,YAAmB1B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQyC,OAAeE,EAAWxI,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAEmnB,EAAWzI,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAEonB,EAAW1I,GAAQ,CAAC,CAAC,YAAa,2BAA4B,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,SAAU7F,GAAQ,CAAC,CAAC,YAAa,kBAAmB,CAAC,WAAY,gDAAgD6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ6C,YAAmB7B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ4C,YAAmB5B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQ2C,YAAmB3B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUmC,OAAcnB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUvG,GAAU,CAAC,YAAa,cAC1lD,OAAOuH,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,M,gwBCxDxD,IAAMoB,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,kZACI,WAAYC,EAAWC,EAAaC,EAASC,GAAW,a,4FAAA,UACpD,gBACKH,UAAyB,EAAZA,EAClB,EAAKC,YAA6B,EAAdA,EACpB,EAAKC,QAAqB,EAAVA,EAChB,EAAKC,UAAyB,EAAZA,EALkC,EAD5D,O,EAAA,E,qDAAA,CAAmCzf,GActB0f,GAA2B,IAAIL,GAAc,EAAG,EAAG,EAAG,GAE5D,SAASM,GAAgCC,GAC5C,IL6gCkB3d,EAAgB7D,EK7gC5ByhB,GL6gCY5d,EK7gCO,SAAC6d,GAAD,MAAO,CAACA,EAAER,UAAWQ,EAAEP,cL6gCdnhB,EK7gCoC,CAClEiD,QAAS,SAACnJ,EAAGM,GAAJ,OAAUkF,EAAcxF,EAAGM,KL6gCjCqD,IAAO,SAAC3D,EAAGM,GAAJ,OAAY4F,EAASiD,QAAQY,EAAWzJ,GAAIyJ,EAAW/J,IAAM,EAAKA,EAAIM,IK9gCtBonB,IAGxDG,ELkgCH,SAAe9d,EAAYC,EAAI9D,GAClC,OAAOvC,IAAO,SAAC3D,EAAGM,GAAJ,OAAY4F,EAASiD,QAAQY,EAAWzJ,GAAIyJ,EAAW/J,IAAM,EAAKM,EAAIN,IAAIgK,GKngCvE8d,EAAM,SAACC,GAAD,MAAS,CAACA,EAAIT,QAASS,EAAIR,aAAYG,EAAQ,CAClEve,QAAS,SAACgB,EAAK6d,GAAN,OAAcxiB,EAAc2E,EAAK6d,MAE9C,OAAO,IAAIb,GAAcQ,EAAWP,UAAWO,EAAWN,YAAaQ,EAASP,QAASO,EAASN,W,+/BCtB/F,SAASU,GAAoBha,EAAG0H,GAgCnC,OA/Ba,SAACyJ,EAAS8I,GACnB1L,EACA,OAAa,CACT,IAAM2B,EAAMiB,EAAS+I,EAAQD,EACzBE,OAAuB,EAAEC,OAAI,EAAEC,OAAI,EAcvC,OAbKxK,GAAQqK,GAWTC,EAA0B,EAVtBna,EAAEmO,GAAK+L,KACPC,EAA0B,EAC1BC,EAAOjM,GAAK+L,GACZG,EAAOC,GAAOJ,IAGdC,EAA0B,EAM1BA,GACJ,KAAK,EACDhJ,EAAUrY,GAAKshB,EAAMlK,GACrB+J,EAAYI,EACZ,SAAS9L,EAEb,KAAK,EACD,MAAO,CAAC4B,GAAQD,GAAMgK,GAG9B,OAGD3L,CAAKoB,KAASjI,GAGlB,SAAS6S,GAA6Bva,EAAG0H,GAgC5C,OA/Ba,SAACyJ,EAAS8I,GACnB1L,EACA,OAAa,CACT,IAAM2B,EAAMiB,EAAS+I,EAAQD,EACzBE,OAAuB,EAAEC,OAAI,EAAEC,OAAI,EAcvC,OAbKxK,GAAQqK,GAWTC,EAA0B,EAVtBna,EAAElH,GAAKqV,GAAK+L,GAAQI,GAAOJ,MAC3BC,EAA0B,EAC1BC,EAAOjM,GAAK+L,GACZG,EAAOC,GAAOJ,IAGdC,EAA0B,EAM1BA,GACJ,KAAK,EACDhJ,EAAUrY,GAAKshB,EAAMlK,GACrB+J,EAAYI,EACZ,SAAS9L,EAEb,KAAK,EACD,MAAO,CAAC4B,GAAQD,GAAMgK,GAG9B,OAGD3L,CAAKoB,KAASjI,GAGlB,SAAS8S,GAAoBxa,EAAG0H,GACnC,OAAOsS,IAAoB,SAACtP,GAAD,OAAW1K,EAAE0K,KAAOhD,GAG5C,SAAS+S,GAA6Bza,EAAG0H,GAC5C,OAAO6S,IAA6B,SAAC7P,GAAD,OAAW1K,EAAE0K,KAAOhD,GAwBrD,SAASgT,GAA0BC,EAAMjT,GA+D5C,OA9Da,SAACyJ,EAAS8I,GAGnB,OAAa,CACT,IAAM/J,EAAMiB,EAAS+I,EAAQD,EAC7B,GAAe,SAACW,EAAaC,GACzBC,EACA,OAAa,CACT,IACMrM,EAAa,CADHmM,EAAsBC,GAElCV,OAAuB,EAAOne,OAAI,EAAOwS,OAAI,EAqBjD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxB0L,EAA0B,EAhBlBxjB,EAAOwX,GAAKM,EAAW,IAAKN,GAAKM,EAAW,MAC5C0L,EAA0B,EACpBhM,GAAKM,EAAW,IACtBzS,EAAOse,GAAO7L,EAAW,IACnBN,GAAKM,EAAW,IACtBD,EAAO8L,GAAO7L,EAAW,KAGzB0L,EAA0B,EAU9BA,GACJ,KAAK,EACDS,EAAc5e,EACd6e,EAAarM,EACb,SAASsM,EAEb,KAAK,EACD,QAAIjL,GAAQpB,EAAW,IAQ/B,OAEJqM,CAAOH,EAAMT,GACb,MAAO,CAAC/J,GAAQD,GAAMgK,GAErB,GAAIrK,GAAQqK,GACb,OAGA/I,EAAUrY,GAAKqV,GAAK+L,GAAQhK,GAC5B+J,EAAYK,GAAOJ,IAMxB3L,CAAKoB,KAASjI,GA2BlB,IAAMqT,GAAb,a,sRAAA,U,QAAA,G,EAAA,E,kZACI,WAAY1hB,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,O,EAAA,G,EAAA,oBAMI,WACI,MAAO,CAAC,a,qEAPhB,GAA4Ba,GAe5B,SAAS6hB,GAAiBC,EAAQ7M,GAC9B,IAAI+L,EAAyBe,EAAKC,EAAQ3J,EAe1C,OAdK3B,GAAQzB,GAYT+L,EAA0B,EAXtBxiB,EAAQwW,GAAKC,GAAM,GAAI6M,IAAW,GAClCd,EAA0B,EAC1Be,EAAM/M,GAAKC,GAAM,GACjB+M,EAASb,GAAOlM,GAChBoD,EAAUrD,GAAKC,GAAM,IAGrB+L,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAAMiB,EAAeC,GAAoBH,EAAKC,GACxCG,EAAiBN,GAAiBC,EAAQG,EAAa,IAC7D,MAAO,CAACtiB,GAAK,IAAIiiB,GAAO,EAAGvJ,EAAS4J,EAAa,IAAKE,EAAe,IAAKA,EAAe,IAE7F,KAAK,EACD,MAAO,CAAC3L,KAASvB,IAK7B,SAASiN,GAAoBJ,EAAQ7M,GACjC,IAAI+L,EAAyBe,EAAKC,EAAQ3J,EAe1C,OAdK3B,GAAQzB,GAYT+L,EAA0B,EAXtBxiB,EAAQwW,GAAKC,GAAM,GAAI6M,GAAU,GACjCd,EAA0B,EAC1Be,EAAM/M,GAAKC,GAAM,GACjB+M,EAASb,GAAOlM,GAChBoD,EAAUrD,GAAKC,GAAM,IAGrB+L,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAAMiB,EAAeC,GAAoBH,EAAKC,GACxCG,EAAiBN,GAAiBE,EAAKE,EAAa,IAC1D,MAAO,CAACtiB,GAAK,IAAIiiB,GAAO,EAAGvJ,EAAS4J,EAAa,IAAKE,EAAe,IAAKA,EAAe,IAE7F,KAAK,EACD,MAAO,CAAC3L,KAASvB,IClItB,SAASmN,GAA0CpmB,EAAGqmB,GACzD,OAAI1O,GAAmB3X,GACZuF,QAAK,QAGZ,EAID,SAAS+gB,GAA0CtmB,EAAGqmB,GACzD,OAAM1O,GAAmB3X,IAAQA,EAAEyY,cAAgBzY,OAI/C,EAHOuF,QAAK,GAOb,SAASghB,GAAkCC,EAAMvO,GACpD,IAAIwO,EACEC,EAAeF,EAAK/N,YACpBkO,EAAUD,EAAa/N,UAC7B,MAAO,CAACgO,GAAUF,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAY/L,EAAEgM,YAAcuC,EAAK1nB,OAAU4nB,EAAa5nB,OAAQ2nB,EAAYG,SAAS1C,QAAUjM,EAAEkM,UAAYuC,EAAa5nB,OAAU6nB,EAAQ7nB,UAGpO,SAAS+nB,GAAiCL,EAAMvO,GACnD,IAAIwO,EACEE,EAAUH,EAAK7N,UACrB,MAAO,CAACgO,GAAUF,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAWyC,EAAYG,SAAS3C,YAAawC,EAAYG,SAAS1C,QAAUjM,EAAEkM,UAAYqC,EAAK1nB,OAAU6nB,EAAQ7nB,UAezM,SAASgoB,GAA2CN,EAAMvO,GAC7D,IAAIwO,EACEE,EAAUlO,GAAU+N,EAAM,IAAK,MAC/BtmB,EAAOsmB,EAAK1nB,OAAS6nB,EAAQ7nB,OAAU,EAC7C,MAAO,CAACoB,EAAKiQ,GAAQrF,GAAU0b,EAAM,EAAGtmB,GAAM,KAAM,QAAQpB,OAAQ,CAAC6nB,GAAUF,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAY/L,EAAEgM,YAAcuC,EAAK1nB,OAAU6nB,EAAQ7nB,OAAQ2nB,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,cAgCnQ,SAAS4C,GAAyE3gB,EAAOogB,EAAMH,GAClG,GAAIG,EAAKliB,QAAQ8B,IAAU,EAA3B,CACI,IAAM4gB,EAAclc,GAAU0b,EAAM,EAAGA,EAAKliB,QAAQ8B,IACpD,GAAIuR,GAAmBqP,GAAc,CACjC,IAAMC,EAA8J,ENyqBzK,SAAgBrgB,GACnB,GAAIjK,EAAYiK,GACZ,OAAmB,EAAZA,EAAG9H,OAET,GAAI8H,aAAcmS,GACnB,OAAsB,EAAfmO,GAAStgB,GAGhB,IAAMoB,EAAIoT,GAAMxU,GAChB,IAEI,IADA,IAAI/G,EAAQ,EACLmI,EAAE,8CACLnI,EAAUA,EAAQ,EAAK,EAE3B,OAAe,EAARA,EALX,QAQImI,EAAEyT,WM1rBe3c,EN6/BH2e,EM7/BoB,SAACvgB,GAAD,OAAQkJ,IAAUlJ,GN6/B3B0J,EM7/B+B1F,IAAI,SAACwX,GAAD,OAAYA,EAAM7U,KAAK,MNiiCxF,SAAkBsjB,EAAYvgB,GACjC,OAAOoY,IAAM,kBAAcoI,IAAM,SAACrK,GAAD,OAAiBA,IT5F/C,SAAkBoK,EAAY5gB,GACjC,GAAI4gB,GAAc,EACd,MAAO,IAAIrpB,MAAM,+BAErB,IAAIkQ,ELpwBYlL,EAAa5F,EKqwBvBgD,EAAgF,GLrwBtE4C,EKqwBE,SAAClG,EAAGM,GAAJ,OAAUiF,EAAkBvF,EAAGM,ILpwB1C4F,EKowB8C,ELrwBxB5F,EKqwB2BqJ,EAAOzH,OAASqoB,GLpwBhD,EKowB6B,ELpwBrBjqB,GKqwBhC8Q,EAAO,IAAInR,MAAMqD,GACjB,IAAK,IAAIrB,EAAIsoB,EAAYtoB,GAAK0H,EAAOzH,OAAQD,IACzCmP,EAAInP,EAAIsoB,GAAc5gB,EAAOO,MAAMjI,EAAIsoB,EAAatoB,EAAI,EAAK,GAEjE,OAAOmP,ESkFiDqZ,CAAWF,EAAYxM,GAAQ/T,QMliCU0gB,CAASlhB,EAAMtH,OAAQgM,GAAU0b,EAAMQ,EAAYloB,QAAQiU,MAAM,MN8/B3JsN,IAAS,kBAAMjF,GAAMxU,MAAK,SAACoB,GAAD,OAASA,EAAE,8CAAgDyV,EAAUzV,EAAE,2DAA8DzC,GAAKyC,EAAE,gEAA8D,KAAU,SAAC4Y,GAClPA,EAAInF,eM9/BA,MAAO,CAACwL,EAAUD,EAAYloB,OAAQgM,GAAU0b,EAAMQ,EAAYloB,OAAUsH,EAAMtH,OAASmoB,GAAWxU,cN4/B3G,IAAmBgL,EAAW7W,EMj/B9B,SAAS2gB,GAAiDC,EAAQC,EAAMznB,EAAGiY,GAC9E,IAAIwO,EACJ,OAA4B,IAAtBzmB,EAAEsE,QAAQkjB,IAAkBjQ,GAASvX,EAAGynB,IAAWznB,EAAElB,QAAW0oB,EAAO1oB,OAAS2oB,EAAK3oB,OAChF,CAACgM,GAAU9K,EAAGwnB,EAAO1oB,OAASkB,EAAElB,OAAS0oB,EAAO1oB,OAAU2oB,EAAK3oB,SAAU2nB,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAY/L,EAAEgM,YAAcjkB,EAAElB,OAAU0oB,EAAO1oB,OAAQ2nB,EAAYG,SAAS1C,QAAUjM,EAAEkM,UAAYnkB,EAAElB,OAAU2oB,EAAK3oB,eAG9Q,EAmBD,SAAS4oB,GAAkDC,EAAUnB,EAAMoB,GAC9E,IAAInB,EAkBExO,EAAc,EAjBP,SAACwB,GAEV,OAAa,CACT,IAAM5a,EAAI4a,EACV,GAAI5a,IAAM2nB,EAAK1nB,OACX,OAAW,EAAJD,EAEN,GAAI2nB,EAAK3nB,KAAO8oB,EAAS9oB,EAAI8oB,EAAS7oB,QACvC,OAAW,EAAJD,EAGP4a,EAAS5a,EAAI,GAMfua,CAAK,GACf,OAAW,IAANnB,GAAoBA,EAAI0P,EAAS7oB,QAAY,OAC9C,EAGO,IAAKmZ,EAAI0P,EAAS7oB,QAAU,CAACgM,GAAU0b,EAAMvO,EAAGuO,EAAK1nB,OAASmZ,IAAKwO,EAAe,IAAIvhB,EAAU0iB,GAAM,IAAI7D,GAAc0C,EAAYG,SAAS5C,UAAW/L,EAAGwO,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,cAItN,SAAS0D,GAAiDL,EAAQC,EAAMjB,EAAMvO,GACjF,IAAIwO,EACJ,GAA6B,IAAzBD,EAAKliB,QAAQkjB,GAAe,CAC5B,IAAMpmB,EAAyC,EAApColB,EAAKliB,QAAQmjB,EAAMD,EAAO1oB,QACrC,OAAIsC,GAAM,EACC,CAAC0J,GAAU0b,EAAMgB,EAAO1oB,OAAQsC,EAAKomB,EAAO1oB,QAAS,CAACgM,GAAU0b,EAAMplB,EAAKqmB,EAAK3oB,OAAS0nB,EAAK1nB,OAASsC,EAAMqmB,EAAK3oB,SAAU2nB,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAW5iB,EAAKqmB,EAAK3oB,OAAQ2nB,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,mBAG5R,GAQL,SAAS2D,GAA8CH,EAAUtB,EAAI0B,EAASC,GACjF,IAAMjD,EAAQ,CAACgD,EAASC,GAElBC,EAA0BP,GAAkDC,EAAU5C,EAAM,GAAIA,EAAM,IAY5G,OAX+B,MAA3BkD,GACsC,KAAlCA,EAAwB,GAAG,GACD,EAOJ,GAG1B,KAAK,EACD,OAAO1iB,QAAK,GAEhB,KAAK,EACD,QAKL,SAAS2iB,GAAsCC,EAAQC,EAAM7V,GAChE,IAuHI8V,EAAiCC,EAcrC,OAbK5N,GAAQnI,GAWT8V,EAA4B,EAVxBrP,GAAKzG,KAAW4V,GAChBE,EAA4B,EACrBrP,GAAKzG,GACZ+V,EAAQrP,GAAK1G,IAGb8V,EAA4B,EAM5BA,GACJ,KAAK,EACD,OAvIK,SAACrM,EAASqB,EAAWyH,GAC9B1L,EACA,OAAa,CACT,IAAM2B,EAAMiB,EAASnc,EAAQwd,EAAW0H,EAAQD,EAC5CE,OAAuB,EAAEje,OAAG,EAAEF,OAAI,EAwBtC,OAvBK6T,GAAQqK,GAqBTC,EAA0B,EApBN,OAAhBhM,GAAK+L,GACArK,GAAQzB,GAAK8L,IAWdC,EAA0B,EAVtBhM,GAAKC,GAAK8L,MAAYqD,GACtBpD,EAA0B,EAC1Bje,EAAMiS,GAAKC,GAAK8L,IAChBle,EAAOoS,GAAKA,GAAK8L,KAGjBC,EAA0B,EAQlCA,EAA0B,EAM1BA,GACJ,KAAK,EACDhJ,EAAUrY,GAAKoD,EAAKgU,GACpBsC,EAAYxd,EACZilB,EAAYje,EACZ,SAASuS,EAEb,KAAK,EACD,IAAImP,OAAyB,EAAOlN,OAAI,EAcxC,OAbKX,GAAQqK,GAWTwD,EAA4B,EAVvBvP,GAAK+L,KAAWqD,GAAoB,IAAVvoB,GAC3B0oB,EAA4B,EACtBvP,GAAK+L,GACX1J,EAAOpC,GAAK8L,IAGZwD,EAA4B,EAM5BA,GACJ,KAAK,EACD,MAAO,CAACvN,GAAQD,GAAMM,GAE1B,KAAK,EACD,IAAImN,OAAyB,EAAEC,OAAG,EAAE/M,OAAI,EAcxC,OAbKhB,GAAQqK,GAWTyD,EAA4B,EAVxBxP,GAAK+L,KAAWqD,GAChBI,EAA4B,EAC5BC,EAAMzP,GAAK+L,GACXrJ,EAAOzC,GAAK8L,IAGZyD,EAA4B,EAM5BA,GACJ,KAAK,EACDxM,EAAUrY,GAAK8kB,EAAK1N,GACpBsC,EAAaxd,EAAQ,EACrBilB,EAAYpJ,EACZ,SAAStC,EAEb,KAAK,EACD,IAAIsP,OAAyB,EAAEC,OAAG,EAAEC,OAAI,EAcxC,OAbKlO,GAAQqK,GAWT2D,EAA4B,EAVxB1P,GAAK+L,KAAWoD,GAChBO,EAA4B,EAC5BC,EAAM3P,GAAK+L,GACX6D,EAAO3P,GAAK8L,IAGZ2D,EAA4B,EAM5BA,GACJ,KAAK,EACD1M,EAAUrY,GAAKglB,EAAK5N,GACpBsC,EAAaxd,EAAQ,EACrBilB,EAAY8D,EACZ,SAASxP,EAEb,KAAK,EACD,GAAIsB,GAAQqK,GACR,OAGA/I,EAAUrY,GAAKqV,GAAK+L,GAAQhK,GAC5BsC,EAAYxd,EACZilB,EAAY7L,GAAK8L,GACjB,SAAS3L,KAU7C,OAmBOA,CAAKoB,KAAS,EAAG8N,GAE5B,KAAK,EACD,QAKL,SAASO,GAAwBnQ,GACpC,OAAOiC,GAAQjC,GAAO7U,KAAK,IA4CxB,SAASilB,GAA+BC,GAC3C,MAAO,CAACC,IAAY,SAAClI,GAAD,OAAenJ,GAAmBmJ,EAAU,MAAKiI,GAAQxL,IAAU,SAACwD,GAAD,OAAiBpJ,GAAmBoJ,EAAY,MAAKgI,IAczI,SAASE,GAAcC,EAAGC,GAC7B,MAAO,CAACD,EAAGC,G,kzDCvgBR,IAAMC,GAAb,gCACI,WAAYllB,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,UAAW,iBAP3B,GAAsCa,GAezBqlB,GAAb,gCACI,WAAYnlB,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,YAAa,aAAc,cAAe,oBAP1D,GAA6Ca,GAehCslB,GAAb,gCACI,WAAYplB,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,UAAW,aAAc,SAAU,WAAY,aAAc,aAAc,eAAgB,cAAe,gBAAiB,gBAAiB,kBAAmB,mBAAoB,kBAPnM,GAAkCa,GAerBulB,GAAb,gCACI,WAAYrlB,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,UAAW,YAAa,YAAa,kBAAmB,YAAa,cAAe,OAAQ,aAAc,iBAAkB,aAAc,aAAc,kBAAmB,kBAAmB,mBAP9M,GAAuCa,G,qvBCnBvC,IAoCMwlB,GAnEN,WAOI,IALA,IACMC,EAAK,GCFY,6yHDEavoB,KAAI,SAACoV,GAAS,IAAIhF,EAAI,OAAqC,QAA5BA,EAAKgF,EAAGoT,YAAY,UAAuB,IAAPpY,EAAgBA,EAAK,GAD7G,MAETqY,EAAK,GCFW,wyHDEazoB,KAAI,SAACoV,GAAS,IAAIhF,EAAI,OAAqC,QAA5BA,EAAKgF,EAAGoT,YAAY,UAAuB,IAAPpY,EAAgBA,EAAK,GAF5G,MAGTsY,EAAa,IAAIC,YAAYJ,GAC7BK,EAAa,IAAIhiB,WAAW6hB,GACzB9qB,EAAI,EAAGA,EAAI+qB,EAAW9qB,SAAUD,EACrC+qB,EAAW/qB,IAAM+qB,EAAW/qB,EAAI,GAGpC,OAAO,SAACkrB,GAGJ,IAFA,IAAIhhB,EAAK6gB,EAAW9qB,OAChBkK,EAAK,EACFD,EAAKC,EAAK,GAAG,CAChB,IAAMghB,EAAMvf,KAAKgE,OAAO1F,EAAKC,GAAM,GAC7B4O,EAAOgS,EAAWI,GACxB,GAAID,EAAKnS,EACL7O,EAAKihB,MAEJ,IAAID,IAAOnS,EAAM,CAClB7O,EAAKC,EAAKghB,EACV,MAEKpS,EAAOmS,IACZ/gB,EAAKghB,IAGb,OAAOF,EAAW9gB,IAuCEihB,GAC5B,SAAS9pB,GAAWH,EAAGmV,GACnB,GAAIA,GAAS,GAAKA,EAAQnV,EAAElB,OACxB,OAAOkB,EAAEG,WAAWgV,GAGpB,MAAM,IAAIrX,MAAM,uBAGjB,IAEMosB,GAAU,SAAClqB,GAAD,OAqBhB,SAAkBA,EAAGmV,GAExB,OAAgC,IADnB,GAAKgV,GAAoBnqB,EAtBA,GA9CtB,KA8CUoqB,CAASpqB,IAS1BqqB,GAAe,SAACrqB,GAAD,OAgDrB,SAAuBA,EAAGmV,GAE7B,GAAkC,IADrB,GAAKgV,GAAoBnqB,EAjDU,GAxB3B,OA2EjB,OAAO,EAEX,IAAM+pB,EAAK5pB,GAAWH,EArD0B,GAsDhD,OAAQ,GAAQ+pB,GAAMA,GAAM,IAAgB,MAAPA,GAAsB,MAAPA,EAtDrBO,CAActqB,IAI1C,SAASmqB,GAAoBnqB,EAAGmV,GACnC,IAAM4U,EAAK5pB,GAAWH,EAAGmV,GACzB,OAAOqU,GAAoBO,GE/DxB,SAASQ,GAAYnkB,EAAOokB,EAAMC,GACrC,OAdG,SAA2BrkB,EAAOokB,EAAMC,EAAMC,EAAMxf,GACvD,IAAMyf,EAbH,SAA+BH,EAAMC,EAAMC,EAAMxf,GACpD,IAAM0f,EAA6C,EAAtBpoB,EAAQgoB,EAAME,GAC3C,GAA6B,IAAzBE,EACA,MAAO,IAAI9sB,MAAM,sCAErB,IAAM+sB,EAAsBD,EAAuB,EACnD,OAAO,SAAChuB,GACJ,IAAMkuB,EAAsC,EAAnBtoB,EAAQ5F,EAAG6tB,GACpC,OAASI,GAAwBC,GAAoB,IAAgBD,GAAyBC,GAAoB,EAAO,CAACluB,EAAGsO,EAAItO,EAAG4tB,SAAU,GAKnIO,CAAsBP,EAAMC,EAAMC,EAAMxf,GACvD,OAAO8T,IAAM,kBAAMY,GAAO+K,EAAQvkB,MAY3B4kB,CAAkB5kB,EAAOokB,EAAMC,EAAM,GAAG,SAAC7tB,EAAGM,GAAJ,OAAWN,EAAIM,KCoD3D,SAAS+tB,GAAY/pB,EAAKyB,EAAK+C,GAClC,QAAIxE,EAAIvB,IAAIgD,KACR+C,EAAakhB,SAAW1lB,EAAIpB,IAAI6C,IACzB,GAiBR,SAASuoB,GAAgBhqB,EAAKyB,GACjC,GAAIzB,EAAIvB,IAAIgD,GACR,OAAOzB,EAAIpB,IAAI6C,GAGf,MAAM,IAAI7E,MAAJ,yBAA4B6E,EAA5B,yC,yvBC5FP,SAASwoB,GAAgBpD,EAASC,GACrC,IAEI/B,EAFElB,EAAQ,CAACgD,EAASC,GAClBzV,EAAQgU,GAAkCxB,EAAM,GAAIA,EAAM,IAAI,GAEpE,GAAqB,IAAjBxS,EAAMzT,OACNmnB,EAAe,CAAC,QAAI,OAEnB,CACD,IAAMpM,EAAItH,EAAMA,EAAMzT,OAAS,GAC/B,GAAW,MAAN+a,GAAgC,MAANA,EAAa,CACxC,IAAMzT,EAA2B,EAAnBmM,EAAMjO,QAAQuV,GAC5BoM,EAAe,CAACnb,GAAUyH,EAAO,EAAGnM,GAAOqM,OAAQ3H,GAAUyH,EAAOnM,EAAQ,EAAImM,EAAMzT,OAAS,EAAKsH,GAAOqM,aAG3GwT,EAAe,CAAC1T,OAAO,GAG/B,MAAO,CAACoG,GAAQF,GAAUwN,EAAa,GAAI,KAAW,KAAWA,EAAa,IAG3E,SAASmF,GAAkCC,EAAS9Y,GA2LvD,GAAe,SAAC+Y,EAAaC,GACzBC,EACA,OAAa,CACT,IACM7M,EAAe,CADL2M,EAAsBC,GAElC/C,OAAyB,EAAO9M,OAAI,EAAO+P,OAAI,EAqBnD,OApBK/Q,GAAQiE,EAAa,KACjBjE,GAAQiE,EAAa,IAiB1B6J,EAA4B,EAhBpBxP,GAAK2F,EAAa,MAAQ3F,GAAK2F,EAAa,KAC5C6J,EAA4B,EACtBxP,GAAK2F,EAAa,IACxBjD,EAAOzC,GAAK0F,EAAa,IACnB3F,GAAK2F,EAAa,IACxB8M,EAAOxS,GAAK0F,EAAa,KAGzB6J,EAA4B,EAUhCA,GACJ,KAAK,EACD8C,EAAc5P,EACd6P,EAAaE,EACb,SAASD,EAEb,KAAK,EACD,QAAI9Q,GAAQiE,EAAa,IAQjC,OAEJ6M,CAAOH,EAAS9Y,GAAS,CACzB,IAAMmZ,EArOG,SAAC1P,EAAS8I,GAGnB,OAAa,CACT,IAAM/J,EAAMiB,EAAS+I,EAAQD,EACzB6G,OAAuB,EACrBC,EAAU7G,EACZC,OAAuB,EAAEnL,OAAC,EAAEgS,OAAI,EAwGpC,OAvGKnR,GAAQkR,GAqGT5G,EAA0B,EApGJ,OAAlBhM,GAAK4S,GACAlR,GAAQzB,GAAK2S,IA2Fd5G,EAA0B,EA1FE,MAAxBhM,GAAKC,GAAK2S,KAKmB,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,OAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KA/Ef5G,EAA0B,EAC1BnL,EAAIb,GAAKC,GAAK2S,IACdC,EAAO5S,GAAKA,GAAK2S,KAmFjB5G,EAA0B,EAQlCA,EAA0B,EAM1BA,GACJ,KAAK,EACD2G,EAA0B,CAAC9R,EAAGgS,GAC9B,MAEJ,KAAK,EACDF,OAA2B,EAInC,GAA+B,MAA3BA,EAAJ,CAOK,GAAe,SAAClG,EAAaC,GAC9BC,EACA,OAAa,CACT,IACMrM,EAAa,CADHmM,EAAsBC,GAElC6C,OAAyB,EAAO7L,OAAI,EAAOrD,OAAI,EAqBnD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxBiP,EAA4B,EAhBpBvP,GAAKM,EAAW,MAAQN,GAAKM,EAAW,KACxCiP,EAA4B,EACtBvP,GAAKM,EAAW,IACtBoD,EAAOzD,GAAKK,EAAW,IACjBN,GAAKM,EAAW,IACtBD,EAAOJ,GAAKK,EAAW,KAGvBiP,EAA4B,EAUhCA,GACJ,KAAK,EACD9C,EAAc/I,EACdgJ,EAAarM,EACb,SAASsM,EAEb,KAAK,EACD,QAAIjL,GAAQpB,EAAW,IAQ/B,OAEJqM,CAAO0F,EAAStG,GAChB,MAAO,CAAC/J,GAAQD,GAAMgK,GAErB,GAAIrK,GAAQqK,GACb,OAGA/I,EAAUrY,GAAKqV,GAAK+L,GAAQhK,GAC5B+J,EAAY7L,GAAK8L,OA1DrB,CACI,IAAMnoB,EAAI+uB,EAAwB,GAC5B/kB,EAAK+kB,EAAwB,GACnC3P,EAAUf,GAAgB,CAACre,EAAG,MAAOme,GACrC+J,EAAYle,IAwGCwS,CAAKoB,KAAS4C,GAAKte,GAAOusB,GAAU9Y,IACzD,GAAoB,MAAhBmZ,EACA,OAGA,IAAMI,EAAOJ,EAAa,GAC1B,MAAO,CAACA,EAAa,GAAItO,GAAKte,GAAOusB,GAAUS,KAQpD,SAASC,GAA0CV,EAAS9Y,GA2G/D,GAAe,SAAC+Y,EAAaC,GACzBC,EACA,OAAa,CACT,IACM7M,EAAe,CADL2M,EAAsBC,GAElC/C,OAAyB,EAAO9M,OAAI,EAAO+P,OAAI,EAqBnD,OApBK/Q,GAAQiE,EAAa,KACjBjE,GAAQiE,EAAa,IAiB1B6J,EAA4B,EAhBpBxP,GAAK2F,EAAa,MAAQ3F,GAAK2F,EAAa,KAC5C6J,EAA4B,EACtBxP,GAAK2F,EAAa,IACxBjD,EAAOzC,GAAK0F,EAAa,IACnB3F,GAAK2F,EAAa,IACxB8M,EAAOxS,GAAK0F,EAAa,KAGzB6J,EAA4B,EAUhCA,GACJ,KAAK,EACD8C,EAAc5P,EACd6P,EAAaE,EACb,SAASD,EAEb,KAAK,EACD,QAAI9Q,GAAQiE,EAAa,IAQjC,OAEJ6M,CAAOH,EAAS9Y,GAAS,CACzB,IAAMmZ,EArJG,SAAC1P,EAAS8I,GAGnB,OAAa,CACT,IAAM/J,EAAMiB,EAAS+I,EAAQD,EACzBkH,OAAuB,EACrBJ,EAAU7G,EACZC,OAAuB,EAAEnL,OAAC,EAAEgS,OAAI,EAwBpC,OAvBKnR,GAAQkR,GAqBT5G,EAA0B,EApBJ,OAAlBhM,GAAK4S,GACAlR,GAAQzB,GAAK2S,IAWd5G,EAA0B,EAVE,MAAxBhM,GAAKC,GAAK2S,KACV5G,EAA0B,EAC1BnL,EAAIb,GAAKC,GAAK2S,IACdC,EAAO5S,GAAKA,GAAK2S,KAGjB5G,EAA0B,EAQlCA,EAA0B,EAM1BA,GACJ,KAAK,EACDgH,EAA0B,CAACnS,EAAGgS,GAC9B,MAEJ,KAAK,EACDG,OAA2B,EAInC,GAA+B,MAA3BA,EAAJ,CAOK,GAAe,SAACvG,EAAaC,GAC9BC,EACA,OAAa,CACT,IACMrM,EAAa,CADHmM,EAAsBC,GAElC6C,OAAyB,EAAO7L,OAAI,EAAOrD,OAAI,EAqBnD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxBiP,EAA4B,EAhBpBvP,GAAKM,EAAW,MAAQN,GAAKM,EAAW,KACxCiP,EAA4B,EACtBvP,GAAKM,EAAW,IACtBoD,EAAOzD,GAAKK,EAAW,IACjBN,GAAKM,EAAW,IACtBD,EAAOJ,GAAKK,EAAW,KAGvBiP,EAA4B,EAUhCA,GACJ,KAAK,EACD9C,EAAc/I,EACdgJ,EAAarM,EACb,SAASsM,EAEb,KAAK,EACD,QAAIjL,GAAQpB,EAAW,IAQ/B,OAEJqM,CAAO0F,EAAStG,GAChB,MAAO,CAAC/J,GAAQD,GAAMgK,GAErB,GAAIrK,GAAQqK,GACb,OAGA/I,EAAUrY,GAAKqV,GAAK+L,GAAQhK,GAC5B+J,EAAY7L,GAAK8L,OA1DrB,CACI,IAAMnoB,EAAIovB,EAAwB,GAC5BplB,EAAKolB,EAAwB,GACnChQ,EAAUf,GAAgB,CAACre,EAAG,MAAOme,GACrC+J,EAAYle,IAwGCwS,CAAKoB,KAAS4C,GAAKte,GAAOusB,GAAU9Y,IACzD,GAAoB,MAAhBmZ,EACA,OAGA,IAAMI,EAAOJ,EAAa,GAC1B,MAAO,CAACA,EAAa,GAAItO,GAAKte,GAAOusB,GAAUS,KAQpD,SAASG,GAAyCZ,EAAS9Y,GA2G9D,GAAe,SAAC+Y,EAAaC,GACzBC,EACA,OAAa,CACT,IACM7M,EAAe,CADL2M,EAAsBC,GAElC/C,OAAyB,EAAO9M,OAAI,EAAO+P,OAAI,EAqBnD,OApBK/Q,GAAQiE,EAAa,KACjBjE,GAAQiE,EAAa,IAiB1B6J,EAA4B,EAhBpBxP,GAAK2F,EAAa,MAAQ3F,GAAK2F,EAAa,KAC5C6J,EAA4B,EACtBxP,GAAK2F,EAAa,IACxBjD,EAAOzC,GAAK0F,EAAa,IACnB3F,GAAK2F,EAAa,IACxB8M,EAAOxS,GAAK0F,EAAa,KAGzB6J,EAA4B,EAUhCA,GACJ,KAAK,EACD8C,EAAc5P,EACd6P,EAAaE,EACb,SAASD,EAEb,KAAK,EACD,QAAI9Q,GAAQiE,EAAa,IAQjC,OAEJ6M,CAAOH,EAAS9Y,GAAS,CACzB,IAAMmZ,EArJG,SAAC1P,EAAS8I,GAGnB,OAAa,CACT,IAAM/J,EAAMiB,EAAS+I,EAAQD,EACzBoH,OAAuB,EACrBN,EAAU7G,EACZC,OAAuB,EAAEnL,OAAC,EAAEgS,OAAI,EAwBpC,OAvBKnR,GAAQkR,GAqBT5G,EAA0B,EApBJ,OAAlBhM,GAAK4S,GACAlR,GAAQzB,GAAK2S,IAWd5G,EAA0B,EAVE,MAAxBhM,GAAKC,GAAK2S,KACV5G,EAA0B,EAC1BnL,EAAIb,GAAKC,GAAK2S,IACdC,EAAO5S,GAAKA,GAAK2S,KAGjB5G,EAA0B,EAQlCA,EAA0B,EAM1BA,GACJ,KAAK,EACDkH,EAA0B,CAACrS,EAAGgS,GAC9B,MAEJ,KAAK,EACDK,OAA2B,EAInC,GAA+B,MAA3BA,EAAJ,CAOK,GAAe,SAACzG,EAAaC,GAC9BC,EACA,OAAa,CACT,IACMrM,EAAa,CADHmM,EAAsBC,GAElC6C,OAAyB,EAAO7L,OAAI,EAAOrD,OAAI,EAqBnD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxBiP,EAA4B,EAhBpBvP,GAAKM,EAAW,MAAQN,GAAKM,EAAW,KACxCiP,EAA4B,EACtBvP,GAAKM,EAAW,IACtBoD,EAAOzD,GAAKK,EAAW,IACjBN,GAAKM,EAAW,IACtBD,EAAOJ,GAAKK,EAAW,KAGvBiP,EAA4B,EAUhCA,GACJ,KAAK,EACD9C,EAAc/I,EACdgJ,EAAarM,EACb,SAASsM,EAEb,KAAK,EACD,QAAIjL,GAAQpB,EAAW,IAQ/B,OAEJqM,CAAO0F,EAAStG,GAChB,MAAO,CAAC/J,GAAQD,GAAMgK,GAErB,GAAIrK,GAAQqK,GACb,OAGA/I,EAAUrY,GAAKqV,GAAK+L,GAAQhK,GAC5B+J,EAAY7L,GAAK8L,OA1DrB,CACI,IAAMnoB,EAAIsvB,EAAwB,GAC5BtlB,EAAKslB,EAAwB,GACnClQ,EAAUf,GAAgB,CAACre,EAAG,MAAOme,GACrC+J,EAAYle,IAwGCwS,CAAKoB,KAAS4C,GAAKte,GAAOusB,GAAU9Y,IACzD,GAAoB,MAAhBmZ,EACA,OAGA,IAAMI,EAAOJ,EAAa,GAC1B,MAAO,CAACA,EAAa,GAAItO,GAAKte,GAAOusB,GAAUS,KAQpD,SAASK,GAA6BpH,GACzC,IAAIC,EAAyBoH,EAAMC,EAAMR,EACnCS,EAA0BpE,GAAsC,IAAK,IAAKnD,GAChF,GAA+B,MAA3BuH,EACA,GAAK5R,GAAQ4R,EAAwB,IA6BjCtH,EAA0B,OA5B1B,GAAyC,OAArChM,GAAKsT,EAAwB,IAC7B,GAAK5R,GAAQzB,GAAKqT,EAAwB,KAmBtCtH,EAA0B,OAlB1B,GAA+C,OAA3ChM,GAAKC,GAAKqT,EAAwB,KAAe,CACjD,IAAMC,EAA0BrE,GAAsC,IAAK,IAAKjP,GAAKA,GAAKqT,EAAwB,MAClH,GAA+B,MAA3BC,EAAiC,CACjC,IAAMC,EAA0B3D,GAAwB0D,EAAwB,IAChFvH,EAA0B,EAC1BoH,EAAOE,EAAwB,GAC/BD,EAAOG,EACPX,EAAOU,EAAwB,QAG/BvH,EAA0B,OAI9BA,EAA0B,OAQlCA,EAA0B,OAQlCA,EAA0B,EAE9B,OAAQA,GACJ,KAAK,EACD,MAAO,CAACoH,EAAMC,EAAO,QAAUA,EAAQ,IAAKR,GAEhD,KAAK,EACD,IAAItD,EAA2BkE,EAAQ5S,EAAG6S,EAAQC,EAC5CC,EAA0B1E,GAAsC,IAAK,IAAKnD,GAChF,GAA+B,MAA3B6H,EACA,GAAKlS,GAAQkS,EAAwB,IAkCjCrE,EAA4B,OAjC5B,GAAyC,OAArCvP,GAAK4T,EAAwB,IAAc,CAC3C,IAAMC,EAA0B3E,GAAsC,IAAK,IAAKjP,GAAK2T,EAAwB,KAC7G,GAA+B,MAA3BC,EAAiC,CACjC,IAAMC,EAA0BjE,GAAwBgE,EAAwB,IAChFtE,EAA4B,EAC5BkE,EAASG,EAAwB,GACjC/S,EAAIb,GAAK4T,EAAwB,IACjCF,EAASI,EACTH,EAASE,EAAwB,QAGjCtE,EAA4B,OAG/B,GAAyC,MAArCvP,GAAK4T,EAAwB,IAAa,CAC/C,IAAMG,EAA0B7E,GAAsC,IAAK,IAAKjP,GAAK2T,EAAwB,KAC7G,GAA+B,MAA3BG,EAAiC,CACjC,IAAMC,EAA0BnE,GAAwBkE,EAAwB,IAChFxE,EAA4B,EAC5BkE,EAASG,EAAwB,GACjC/S,EAAIb,GAAK4T,EAAwB,IACjCF,EAASM,EACTL,EAASI,EAAwB,QAGjCxE,EAA4B,OAIhCA,EAA4B,OAQpCA,EAA4B,EAEhC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACkE,EAAQC,EAAU7S,EAAI,IAAO6S,EAAU,IAAKC,GAExD,KAAK,EACD,IAAInE,EAA2ByE,EAAQC,EAAQC,EACzCC,EAA0BlF,GAAsC,IAAK,IAAKnD,GAChF,GAA+B,MAA3BqI,EAAiC,CACjC,IAAMC,EAA0BnF,GAAsC,IAAK,IAAKkF,EAAwB,IACxG,GAA+B,MAA3BC,EAAiC,CACjC,IAAMC,EAA0BzE,GAAwBwE,EAAwB,IAChF7E,EAA4B,EAC5ByE,EAASG,EAAwB,GACjCF,EAASI,EACTH,EAASE,EAAwB,QAGjC7E,EAA4B,OAIhCA,EAA4B,EAEhC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACyE,EAAQC,EAAS,IAAMA,EAAU,IAAKC,GAElD,KAAK,EACD,IAAMI,EAA0BrF,GAAsC,IAAK,IAAKnD,GAChF,OAA+B,MAA3BwI,EAGO,CAFQA,EAAwB,GAEvB,GAAI,GADLA,EAAwB,SAIvC,KAUzB,SAASC,GAA2BzI,GACvC,IAAIC,EAAyBoH,EAAMC,EAAMR,EACnC4B,EAA0BvF,GAAsC,IAAK,IAAKnD,GAChF,GAA+B,MAA3B0I,EAAiC,CACjC,IAAMC,EAA0BxF,GAAsC,IAAK,IAAKuF,EAAwB,IACzE,MAA3BC,GACA1I,EAA0B,EAC1BoH,EAAOqB,EAAwB,GAC/BpB,EAAOqB,EAAwB,GAC/B7B,EAAO6B,EAAwB,IAG/B1I,EAA0B,OAI9BA,EAA0B,EAE9B,OAAQA,GACJ,KAAK,EACD,MAAO,CAACoH,EAAMC,EAAMR,GAExB,KAAK,EACD,QAkPL,SAAS8B,GAA2Bpb,GAcvC,OAXKmI,GAAQnI,GASiB,EARN,MAAhByG,GAAKzG,GACqB,EAGA,GAO9B,KAAK,EACD,IAAMqb,EAAaxd,GAAM+C,GAAO,0DAAyEwH,GAAQpI,GAAc1O,KAAK,KACpI,GAAkB,MAAd+pB,EAAoB,CACpB,IAAMC,EAASD,EAAW,GAC1B,MAAO,CAACC,EAAQjQ,GAAQiQ,EAAO/uB,OAAQyT,GAAO,IAG9C,OAGR,KAAK,EACD,QAKL,IAAMub,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,kZACI,WAAYC,EAAOC,EAASC,EAASC,EAAcC,GAAc,a,4FAAA,UAC7D,gBACKJ,MAAQA,EACb,EAAKC,QAAUA,EACf,EAAKC,QAAUA,EACf,EAAKC,aAAeA,EACpB,EAAKC,aAA+B,EAAfA,EANwC,EADrE,O,EAAA,E,qDAAA,CAAoCzpB,GAmB7B,SAAS0pB,GAAwCxxB,GACpD,OAAgC,IAAP,EAAjBA,EAAEuxB,cAOP,SAASE,GAAWtT,EAAKxI,EAAO+b,GACnC,OAAOtP,IAAM,WACT,IAAIuP,EAAcC,EAAKC,EAAuCpC,EAoB1DrH,EAAyB6G,EAAMgC,EAAQlB,EZzW5BlP,EYsVTiR,EAAc,IAAIlwB,GAAK,WACzB,IAAIioB,EAAa9H,EAAcgQ,EAAKC,EACpC,GAAIlU,GAAQK,GACR,MAAO,CAACP,KAAS8T,GAGjB,IAAIO,EACEvV,EAAagV,EAAIJ,aACvB,GAAkB,MAAd5U,EACAuV,OAAS,MAER,CACD,IAAM5W,EAAIqB,EACAmN,EAAe,IAAIvhB,EAAU+S,GAAvC4W,EAA4C,IAAI9K,GAAc0C,EAAYG,SAAS5C,UAAWyC,EAAYG,SAAS3C,YAAawC,EAAYG,SAAS1C,QAASjM,EAAEgM,YAAcnlB,GAAOic,IAEzL,IAAM+T,EAAQ,IAAIhB,GAAeQ,EAAIP,MAAOO,EAAIN,QAASM,EAAIL,QAA4D,OAAlDtP,EAAe2P,EAAIJ,mBAAwC,GAAiCU,EAAiB,IAAI1pB,EAA1CypB,EAAMhQ,GAAqD,IAAIoF,GAAc6K,EAAchI,SAAS5C,UAAW2K,EAAI1K,YAAcnlB,GAAOic,GAAM6T,EAAchI,SAAS1C,QAAS0K,EAAchI,SAASzC,YAAgBmK,EAAIH,cACvW,MAAO,CAAC1T,GAAU,IAAI6O,GAAa,EAAG3O,GAAQK,GAAQD,IAAMlX,KAAK,IAAKgrB,IAASC,MAIvF,GAAKpU,GAAQnI,GAqFR,CACD,IAAMwc,EAA0BpB,GAA2Bpb,GAC5B,MAA3Bwc,GACA/J,EAA0B,EAC1B6I,EAASkB,EAAwB,GACjCpC,EAASoC,EAAwB,IAGjC/J,EAA0B,OA5F9B,GAAoB,MAAhBhM,GAAKzG,GACL,GAAKmI,GAAQzB,GAAK1G,IA2Db,CACD,IAAMyc,EAA0BrB,GAA2Bpb,GAC5B,MAA3Byc,GACAhK,EAA0B,EAC1B6I,EAASmB,EAAwB,GACjCrC,EAASqC,EAAwB,IAGjChK,EAA0B,OAlE9B,GAA0B,MAAtBhM,GAAKC,GAAK1G,IACV,GAAKmI,GAAQzB,GAAKA,GAAK1G,KAiClB,CACD,IAAM0c,EAA0BtB,GAA2Bpb,GAC5B,MAA3B0c,GACAjK,EAA0B,EAC1B6I,EAASoB,EAAwB,GACjCtC,EAASsC,EAAwB,IAGjCjK,EAA0B,OAxC9B,GAAgC,OAA5BhM,GAAKC,GAAKA,GAAK1G,KACfyS,EAA0B,EAC1B6G,EAAO5S,GAAKA,GAAKA,GAAK1G,UAErB,GAAgC,OAA5ByG,GAAKC,GAAKA,GAAK1G,KACfmI,GAAQzB,GAAKA,GAAKA,GAAK1G,OAWxByS,EAA0B,EAC1B6G,EAAO5S,GAAKA,GAAKA,GAAK1G,MAXgB,OAAlCyG,GAAKC,GAAKA,GAAKA,GAAK1G,OACpByS,EAA0B,EAC1B6G,EAAO5S,GAAKA,GAAKA,GAAKA,GAAK1G,QAG3ByS,EAA0B,EAC1B6G,EAAO5S,GAAKA,GAAKA,GAAK1G,UAQ7B,CACD,IAAM2c,EAA0BvB,GAA2Bpb,GAC5B,MAA3B2c,GACAlK,EAA0B,EAC1B6I,EAASqB,EAAwB,GACjCvC,EAASuC,EAAwB,IAGjClK,EAA0B,MAgBrC,CACD,IAAMmK,EAA0BxB,GAA2Bpb,GAC5B,MAA3B4c,GACAnK,EAA0B,EAC1B6I,EAASsB,EAAwB,GACjCxC,EAASwC,EAAwB,IAGjCnK,EAA0B,MAgBrC,CACD,IAAMoK,EAA0BzB,GAA2Bpb,GAC5B,MAA3B6c,GACApK,EAA0B,EAC1B6I,EAASuB,EAAwB,GACjCzC,EAASyC,EAAwB,IAGjCpK,EAA0B,EAetC,OAAQA,GACJ,KAAK,EACD,IAAMiB,EAAeyI,EAAYW,MAC3BC,EAAQrJ,EAAa,GAC3B,OAAOrK,GAAOqK,EAAa,GAAIjH,IAAM,kBAAMpD,GAAOoE,GAAY,IAAIsJ,GAAa,EAAGgG,EAAMpB,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASqR,EAAMyD,WAElJ,KAAK,EACD,IAAMnJ,EAAiBuI,EAAYW,MAC7BE,EAAQpJ,EAAe,GAC7B,OAAOvK,GAAOuK,EAAe,GAAInH,IAAM,kBAAMpD,GAAOoE,GAAY,IAAIsJ,GAAa,EAAGuE,EAAQ0B,EAAMrB,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASmS,EAAQ4C,WAE9J,KAAK,EACD,IAAIhH,EAA2BiH,EAAQC,EAAKC,EAC5C,GAAKhV,GAAQnI,GAoIR,CACD,IAAIod,EAEAC,EAA4BC,EAAKC,EAD/BC,EAAUxd,EAyGhB,OAvGKmI,GAAQqV,GAqGTH,EAA6B,EApGP,OAAlB5W,GAAK+W,GACArV,GAAQzB,GAAK8W,IA2FdH,EAA6B,EA1FD,MAAxB5W,GAAKC,GAAK8W,KAKmB,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,OAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KAKc,MAAxB/W,GAAKC,GAAK8W,KA/EfH,EAA6B,EAC7BC,EAAM7W,GAAKC,GAAK8W,IAChBD,EAAS7W,GAAKA,GAAK8W,KAmFnBH,EAA6B,EAQrCA,EAA6B,EAM7BA,GACJ,KAAK,EACDD,EAA0B,CAACE,EAAKC,GAChC,MAEJ,KAAK,EACDH,OAA2B,EAIJ,MAA3BA,GACApH,EAA4B,EAC5BkH,EAAME,EAAwB,GAC9BD,EAASC,EAAwB,IAGjCpH,EAA4B,OA9PhC,GAAoB,MAAhBvP,GAAKzG,GACLgW,EAA4B,EAC5BiH,EAASvW,GAAK1G,OAEb,CACD,IAAIyd,EAEAC,EAA4BpW,EAAGsT,EAD7BvB,EAAUrZ,EAyGhB,OAvGKmI,GAAQkR,GAqGTqE,EAA6B,EApGP,OAAlBjX,GAAK4S,GACAlR,GAAQzB,GAAK2S,IA2FdqE,EAA6B,EA1FD,MAAxBjX,GAAKC,GAAK2S,KAKmB,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,OAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KAKc,MAAxB5S,GAAKC,GAAK2S,KA/EfqE,EAA6B,EAC7BpW,EAAIb,GAAKC,GAAK2S,IACduB,EAASlU,GAAKA,GAAK2S,KAmFnBqE,EAA6B,EAQrCA,EAA6B,EAM7BA,GACJ,KAAK,EACDD,EAA0B,CAACnW,EAAGsT,GAC9B,MAEJ,KAAK,EACD6C,OAA2B,EAIJ,MAA3BA,GACAzH,EAA4B,EAC5BkH,EAAMO,EAAwB,GAC9BN,EAASM,EAAwB,IAGjCzH,EAA4B,EAkIxC,OAAQA,GACJ,KAAK,EACD,OAAO8F,GAAWpT,GAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAWF,GAAMyU,EAAQlB,GAEpF,KAAK,EACD,OAAOD,GAAW1qB,GAAK8rB,EAAK1U,GAAM2U,EAAQpB,GAE9C,KAAK,EACD,IAAI9F,EAA2B4D,EAAMpkB,EAAGkoB,EAAQlwB,EAC5CmwB,EACEC,EAASjV,GAAQ,CAAC,IAAK,MACvBqK,EAAOrK,GAAQ,CAAC,IAAK,MACrBkV,EAAU9d,EAChB,GAAa,SAACkT,EAAa6K,GACvBlX,EACA,OAAa,CACT,IACMsS,EAAe,CADLjG,EAAsB6K,GAElCC,OAAyB,EAAO1pB,OAAI,EAAOwS,OAAI,EAqBnD,OApBKqB,GAAQgR,EAAa,KACjBhR,GAAQgR,EAAa,IAiB1B6E,EAA4B,EAhBpBvX,GAAK0S,EAAa,MAAQ1S,GAAK0S,EAAa,KAC5C6E,EAA4B,EACtBvX,GAAK0S,EAAa,IACxB7kB,EAAOoS,GAAKyS,EAAa,IACnB1S,GAAK0S,EAAa,IACxBrS,EAAOJ,GAAKyS,EAAa,KAGzB6E,EAA4B,EAUhCA,GACJ,KAAK,EACD9K,EAAc5e,EACdypB,EAAajX,EACb,SAASD,EAEb,KAAK,EACD,QAAIsB,GAAQgR,EAAa,IAQjC,OAEJtS,CAAKgX,EAAQC,GAAW,CACxB,IAAMG,EAAejL,GAA0BC,EAAMpI,GAAKte,GAAOsxB,GAASC,IAC1E,GAAoB,MAAhBG,EACAL,OAA2B,MAE1B,CACD,IAAMrE,EAAO0E,EAAa,GAC1BL,EAA0B,CAACK,EAAa,GAAIpT,GAAKte,GAAO0mB,GAAOsG,GAAOhtB,GAAOsxB,GAAStxB,GAAO0mB,UAIjG2K,OAA2B,EAE/B,GAA+B,MAA3BA,EACA3H,EAA4B,EAC5B4D,EAAO+D,EAAwB,GAC/BnoB,EAAImoB,EAAwB,GAC5BD,EAASC,EAAwB,GACjCnwB,EAAImwB,EAAwB,OAE3B,CACD,IAAIM,EAEEC,EAAUne,EACVoe,EAAO9L,IAAoB,SAAChmB,GAAD,MAFrB,MAE6BA,IAAY6xB,GAAS,GAC9D,GAAKhW,GAAQiW,GA+DTF,OAA2B,MA/DX,CAChB,IAAMG,EAAQpqB,GAAW1H,GAAO6xB,IAAO,SAAC5L,GAAD,MAJ/B,OAKF8L,GAAWD,EACXE,GAASF,EACTG,GAAUL,EAChB,GAAe,SAACpF,EAAa0F,GACzBrL,EACA,OAAa,CACT,IACMsL,EAAe,CADL3F,EAAsB0F,GAElCE,OAAyB,EAAO7V,OAAI,EAAOoQ,OAAI,EAqBnD,OApBK/Q,GAAQuW,EAAa,KACjBvW,GAAQuW,EAAa,IAiB1BC,EAA4B,EAhBpBlY,GAAKiY,EAAa,MAAQjY,GAAKiY,EAAa,KAC5CC,EAA4B,EACtBlY,GAAKiY,EAAa,IACxB5V,EAAOpC,GAAKgY,EAAa,IACnBjY,GAAKiY,EAAa,IACxBxF,EAAOxS,GAAKgY,EAAa,KAGzBC,EAA4B,EAUhCA,GACJ,KAAK,EACD5F,EAAcjQ,EACd2V,EAAavF,EACb,SAAS9F,EAEb,KAAK,EACD,QAAIjL,GAAQuW,EAAa,IAQjC,OAEJtL,CAAOkL,GAAUE,IAAW,CAC5B,IAAMI,GAAe5L,GAA0BuL,GAAQ1T,GAAKte,GAAO+xB,IAAWE,KAC9E,GAAoB,MAAhBI,GACAV,OAA2B,MAE1B,CACD,IAAMW,GAASD,GAAa,GAC5BV,EAA0B,CAACU,GAAa,GAAI/T,GAAKte,GAAOgyB,IAASM,IAAStyB,GAAO+xB,IAAW/xB,GAAOgyB,WAIvGL,OAA2B,EAMJ,MAA3BA,GACAjI,EAA4B,EAC5B4D,EAAOqE,EAAwB,GAC/BzoB,EAAIyoB,EAAwB,GAC5BP,EAASO,EAAwB,GACjCzwB,EAAIywB,EAAwB,IAG5BjI,EAA4B,EAGpC,OAAQA,GACJ,KAAK,EACD,IAAM6I,GAAiB3C,EAAYW,MAC7BiC,GAAQD,GAAe,GAC7B,OAAOzV,GAAOyV,GAAe,GAAIrS,IAAM,WACnC,IAAIuS,EACAC,EACEC,EAAeH,GAAMpD,aAC3B,GAAoB,MAAhBuD,EACAD,OAAO,MAEN,CACD,IAAME,EAAMD,EACJF,EAAiB,IAAIrsB,EAAUwsB,GAAvCF,EAA8C,IAAIzN,GAAcwN,EAAc3K,SAAS5C,UAAW0N,EAAIzN,YAAcjkB,EAAGuxB,EAAc3K,SAAS1C,QAASwN,EAAIvN,UAAYnc,GAE3K,OAAO4T,GAAOoE,GAAY,IAAIsJ,GAAa,EAAI3O,GAAQyR,GAAMvoB,KAAK,IAAK4O,OAAQ+e,IAAOxS,IAAM,kBAAMqP,GAAW7T,KAAS0V,EAAQoB,YAGtI,KAAK,EACD,IAAMK,GAA0B5F,GAA0C5Q,GAAQ,CAAC,IAAK,MAAO5I,GAC/F,GAA+B,MAA3Bof,GAAiC,CACjC,IAAMlF,GAASkF,GAAwB,GACjCC,GAASD,GAAwB,GACjCE,GAAiBnD,EAAYW,MAC7ByC,GAAQD,GAAe,GAC7B,OAAOjW,GAAOiW,GAAe,GAAI7S,IAAM,kBAAMpD,GAAOoE,GAAY,IAAIsJ,GAAa,GAAK3O,GAAQ8R,IAAQ5oB,KAAK,IAAK4O,OAAQqf,GAAM5D,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASoX,GAAQE,YAGtL,IAAMC,GAA0B9F,GAAyCxR,GAAU,KAAMlI,GACzF,GAA+B,MAA3Bwf,GAAiC,CACjC,IAAM9E,GAAS8E,GAAwB,GACjCC,GAASD,GAAwB,GACjCE,GAAiBvD,EAAYW,MAC7B6C,GAAQD,GAAe,GACvBE,GAAQ,IAAIrE,GAAeoE,GAAMnE,MAAOmE,GAAMlE,QAASkE,GAAMjE,QAA8D,OAApDM,EAAe2D,GAAMhE,mBAAwC,GAAiCO,EAAiB,IAAIvpB,EAA1CspB,EAAMD,GAAqD,IAAIxK,GAAc0K,EAAc7H,SAAS5C,UAAWwK,EAAIvK,YAAc,EAAGwK,EAAc7H,SAAS1C,QAASuK,EAAc7H,SAASzC,YAAgB+N,GAAM/D,cACvW,OAAOvS,GAAOqW,GAAe,GAAIjT,IAAM,WACnC,IAAIoT,EAAcC,EAAKC,EACjBC,EAAQ5X,GAAQsS,IAAQppB,KAAK,IAAK4O,OACxC,OAAOmJ,GAAOoE,GAAY,IAAIsJ,GAAa,GAAIiJ,EAA2D,OAApDH,EAAeD,GAAMjE,mBAAwC,GAAiCoE,EAAiB,IAAIptB,EAA1CmtB,EAAMD,GAAqD,IAAIrO,GAAcuO,EAAc1L,SAAS5C,UAAWsO,EAAc1L,SAAS3C,YAAaqO,EAAc1L,SAAS1C,QAASmO,EAAIpO,YAAcsO,EAAKzzB,WAAekgB,IAAM,kBAAMqP,GAAW7T,KAASwX,GAAQG,YAIpY,IAAIzJ,GAAuCgE,GAAQ8F,GAC/CC,GACEC,GAAWjY,GAAU,KACrBkY,GAASlY,GAAU,KACnBmY,GAAUrgB,EAChB,GAAe,SAACsgB,EAAaC,GACzBtH,EACA,OAAa,CACT,IACMuH,EAAe,CADLF,EAAsBC,GAElCE,OAAyB,EAAOtX,OAAI,EAAOuX,OAAI,EAqBnD,OApBKvY,GAAQqY,EAAa,KACjBrY,GAAQqY,EAAa,IAiB1BC,EAA4B,EAhBpBha,GAAK+Z,EAAa,MAAQ/Z,GAAK+Z,EAAa,KAC5CC,EAA4B,EACtBha,GAAK+Z,EAAa,IACxBrX,EAAOzC,GAAK8Z,EAAa,IACnB/Z,GAAK+Z,EAAa,IACxBE,EAAOha,GAAK8Z,EAAa,KAGzBC,EAA4B,EAUhCA,GACJ,KAAK,EACDH,EAAcnX,EACdoX,EAAaG,EACb,SAASzH,EAEb,KAAK,EACD,QAAI9Q,GAAQqY,EAAa,IAQjC,OAEJvH,CAAOkH,GAAUE,IAAW,CAC5B,IAAMM,GAAgB3N,GAA0BoN,GAAQvV,GAAKte,GAAO4zB,IAAWE,KAC/E,GAAqB,MAAjBM,GACAT,QAA2B,MAE1B,CACD,IAAMU,GAASD,GAAc,GAC7BT,GAA0B,CAACS,GAAc,GAAI9V,GAAKte,GAAO6zB,IAASQ,IAASr0B,GAAO4zB,IAAW5zB,GAAO6zB,WAIxGF,QAA2B,EAE/B,GAA+B,MAA3BA,GAAiC,CACjC,IAAMW,GAA0BvK,GAAwB4J,GAAwB,IAClEA,GAAwB,GAAKpG,EAAO+G,GAAgCX,GAAwB,GAAgBA,GAAwB,GZ/9BvKhV,EY+9BuL,SAAClI,GAAD,OAAW8U,GAAa9U,KZ99B1NgL,IAAO,SAAC3jB,GAAD,OAAS6gB,EAAU7gB,KY89BuMyvB,EAAKtZ,MAAM,OAAUsZ,EAAK/nB,QAAQ,MAAQ,GAAa+nB,EAAK/nB,QAAQ,QAAU,IAC3QokB,GAA4B,EACrB+J,GAAwB,GACxBA,GAAwB,GAC/B/F,GAAS0G,GACTZ,GAAUC,GAAwB,IAGlC/J,GAA4B,OAIhCA,GAA4B,EAEhC,OAAQA,IACJ,KAAK,EACD,IAAM2K,GAAiB3E,EAAYW,MAC7BiE,GAAQD,GAAe,GAC7B,OAAOzX,GAAOyX,GAAe,GAAIrU,IAAM,kBAAMpD,GAAOoE,GAAY,IAAIsJ,GAAa,EAAG7O,GAAU,IAAI6O,GAAa,EAAGoD,GAAQ4G,GAAMpF,eAAgBxB,QAAQ,EAAQ4G,GAAMpF,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASgY,GAASc,YAEnO,KAAK,EACD,IAAIC,GACEC,GAAW/Y,GAAU,KACrBgZ,GAAShZ,GAAU,KACnBiZ,GAAUnhB,EAChB,GAAe,SAACohB,EAAaC,GACzBC,EACA,OAAa,CACT,IACMC,EAAgB,CADNH,EAAsBC,GAElCvL,OAAyB,EAAOO,OAAI,EAAOmL,OAAI,EAqBnD,OApBKrZ,GAAQoZ,EAAc,KAClBpZ,GAAQoZ,EAAc,IAiB3BzL,EAA4B,EAhBpBrP,GAAK8a,EAAc,MAAQ9a,GAAK8a,EAAc,KAC9CzL,EAA4B,EACtBrP,GAAK8a,EAAc,IACzBlL,EAAO3P,GAAK6a,EAAc,IACpB9a,GAAK8a,EAAc,IACzBC,EAAO9a,GAAK6a,EAAc,KAG1BzL,EAA4B,EAUhCA,GACJ,KAAK,EACDsL,EAAc/K,EACdgL,EAAaG,EACb,SAASF,EAEb,KAAK,EACD,QAAInZ,GAAQoZ,EAAc,IAQlC,OAEJD,CAAOL,GAAUE,IAAW,CAC5B,IAAMM,GAAgBzO,GAA0BkO,GAAQrW,GAAKte,GAAO00B,IAAWE,KAC/E,GAAqB,MAAjBM,GACAT,QAA2B,MAE1B,CACD,IAAMU,GAASD,GAAc,GAC7BT,GAA0B,CAACS,GAAc,GAAI5W,GAAKte,GAAO20B,IAASQ,IAASn1B,GAAO00B,IAAW10B,GAAO20B,WAIxGF,QAA2B,EAE/B,GAA+B,MAA3BA,GAAiC,CACpBA,GAAwB,GACxBA,GAAwB,GADrC,IAEMW,GAAUX,GAAwB,GAExC,OAAOlF,GAAW8F,GAASxwB,GAAK,IAAUqX,GAD9BuY,GAAwB,KACqB5vB,GAAK,IAAUoX,IAAOmZ,GAAS5F,GAGxF,IAAM8F,GAA0B5G,GAA2Bjb,GAC3D,GAA+B,MAA3B6hB,GAAiC,CACjC,IAAMC,GAASD,GAAwB,GACjClH,GAASkH,GAAwB,GACjCE,GAAUF,GAAwB,GAClCG,GAAiB7F,EAAYW,MAC7BmF,GAAQD,GAAe,GAC7B,OAAO3Y,GAAO2Y,GAAe,GAAIvV,IAAM,WACnC,IAAMyV,EAAiBtJ,GAAgBxQ,GAAQuS,IAAQrpB,KAAK,IAAKugB,IACjE,OAAOxI,GAAOoE,GAAY,IAAIsJ,GAAa,EAAGlO,GAAMiT,GAAW7T,KAAS6Z,GAAQG,KAASC,EAAe,GAAIA,EAAe,GAAID,GAAMtG,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAAS8Z,GAASE,YAIlM,IAAME,GAA0BvI,GAA6B5Z,GAC7D,GAA+B,MAA3BmiB,GAAiC,CACjC,IAAMC,GAASD,GAAwB,GACjCE,GAASF,GAAwB,GACjCG,GAAWH,GAAwB,GACnCI,GAAUJ,GAAwB,GAClCK,GAAiBrG,EAAYW,MAC7B2F,GAASD,GAAe,GAC9B,OAAOnZ,GAAOmZ,GAAe,GAAI/V,IAAM,WACnC,IAAMrc,EAAM+U,GAAckd,IAAW/3B,MAAMib,KAAK6c,IAAQ9wB,KAAK,IAAO+wB,GACpE,OAAOhZ,GAAOoE,GAAY,IAAIsJ,GAAa,EAAGlO,GAAMiT,GAAW7T,KAASma,GAAQK,KAAUH,GAAUlyB,EAAKqyB,GAAO9G,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASsa,GAASE,YAI7K,IASQC,GAA2BC,GAAQC,GAAQC,GAT7CC,GAviC3D,SAAkC9iB,GACrC,OAAO4J,IAAQ,SAACmZ,GACZ,IAEIC,EADEC,EAASra,GAAQma,EAAOviB,MAAM,KAE9Bqd,EAASoF,EACThQ,EAAO/K,GAAU,KACjBmR,EAAUrZ,EAChB,GAAa,SAACkT,EAAaC,GACvBtM,EACA,OAAa,CACT,IACME,EAAa,CADHmM,EAAsBC,GAElCV,OAAuB,EAAOne,OAAI,EAAOwS,OAAI,EAqBjD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxB0L,EAA0B,EAhBlBhM,GAAKM,EAAW,MAAQN,GAAKM,EAAW,KACxC0L,EAA0B,EACpBhM,GAAKM,EAAW,IACtBzS,EAAOoS,GAAKK,EAAW,IACjBN,GAAKM,EAAW,IACtBD,EAAOJ,GAAKK,EAAW,KAGvB0L,EAA0B,EAU9BA,GACJ,KAAK,EACDS,EAAc5e,EACd6e,EAAarM,EACb,SAASD,EAEb,KAAK,EACD,QAAIsB,GAAQpB,EAAW,IAQ/B,OAEJF,CAAKgX,EAAQxE,GAAW,CACxB,IAAMjN,EAAe4G,GAA0BC,EAAMpI,GAAKte,GAAOsxB,GAASxE,IAC1E,GAAoB,MAAhBjN,EACA4W,OAA2B,MAE1B,CACD,IAAMzJ,EAAOnN,EAAa,GAC1B4W,EAA0B,CAAC5W,EAAa,GAAIvB,GAAKte,GAAO0mB,GAAOsG,GAAOhtB,GAAOsxB,GAAStxB,GAAO0mB,UAIjG+P,OAA2B,EAE/B,GAA+B,MAA3BA,EAAiC,CACjC,IAAME,EAA0B5M,GAAwB0M,EAAwB,IAIhF,OAHWA,EAAwB,GACxBA,EAAwB,GAE5B,CAACD,EAASG,EAAyB9xB,GAAK,IADlC4xB,EAAwB,KAIrC,IAAIG,EACE3F,EAAUxd,EA6ChB,OAA+B,OA5C/BmjB,EAAuC,SAACpK,EAAaC,GACjD5F,EACA,OAAa,CACT,IACM+F,EAAe,CADLJ,EAAsBC,GAElChD,OAAyB,EAAOlN,OAAI,EAAOoQ,OAAI,EAqBnD,OApBK/Q,GAAQgR,EAAa,KACjBhR,GAAQgR,EAAa,IAiB1BnD,EAA4B,EAhBpBvP,GAAK0S,EAAa,MAAQ1S,GAAK0S,EAAa,KAC5CnD,EAA4B,EACtBvP,GAAK0S,EAAa,IACxBrQ,EAAOpC,GAAKyS,EAAa,IACnB1S,GAAK0S,EAAa,IACxBD,EAAOxS,GAAKyS,EAAa,KAGzBnD,EAA4B,EAUhCA,GACJ,KAAK,EACD+C,EAAcjQ,EACdkQ,EAAaE,EACb,SAAS9F,EAEb,KAAK,EACD,QAAIjL,GAAQgR,EAAa,IAQjC,OAEJ/F,CAAO6P,EAAQzF,GAAaA,OAAW,GAGhC,CADyBlH,GAAwB6M,GACvBlb,WAGjC,IAGT,CAAC,UAAW,aAy6ByEmb,CAAyBpjB,GACzD,GAA+B,MAA3B8iB,GAAiC,CACjC,IAAMO,GAASP,GAAwB,GACjCQ,GAAUR,GAAwB,GAClCS,GAAkBpH,EAAYW,MAC9B0G,GAASD,GAAgB,GAC/B,OAAOla,GAAOka,GAAgB,GAAI9W,IAAM,kBAAMpD,GAAOoE,GAAY,IAAIsJ,GAAa,EAAG7O,GAAU,IAAI6O,GAAa,EAAGsM,GAAQG,GAAO7H,eAAgB0H,QAAQ,EAAQG,GAAO7H,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASqb,GAASE,YAIlO,GAAKrb,GAAQnI,GAkBT0iB,GAA4B,OAjB5B,GAAoB,MAAhBjc,GAAKzG,GAAgB,CACrB,IAAMyjB,GAA0BxI,GAA2BvU,GAAK1G,IACjC,MAA3ByjB,IACAf,GAA4B,EAC5BC,GAASc,GAAwB,GACjCb,GAASa,GAAwB,GACjCZ,GAAUY,GAAwB,IAGlCf,GAA4B,OAIhCA,GAA4B,EAMpC,OAAQA,IACJ,KAAK,EACD,IAAMgB,GAAkBvH,EAAYW,MAC9B6G,GAASD,GAAgB,GAC/B,OAAOra,GAAOqa,GAAgB,GAAIjX,IAAM,WACpC,IAAMmX,EAAkBhL,GAAgBxQ,GAAQwa,IAAQtxB,KAAK,IAAKugB,IAClE,OAAOxI,GAAOoE,GAAY,IAAIsJ,GAAa,EAAG3O,GAAQua,IAAQrxB,KAAK,IAAKsyB,EAAgB,GAAIA,EAAgB,GAAID,GAAOhI,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAAS4a,GAASc,YAGxL,KAAK,EACD,IAAIE,GAA2BC,GAAQC,GAAQC,GAAYC,GAC3D,GAAK9b,GAAQnI,GAmBT6jB,GAA4B,OAlB5B,GAAoB,MAAhBpd,GAAKzG,GAAgB,CACrB,IAAMkkB,GAA0BtK,GAA6BlT,GAAK1G,IACnC,MAA3BkkB,IACAL,GAA4B,EAC5BC,GAASI,GAAwB,GACjCH,GAASG,GAAwB,GACjCF,GAAaE,GAAwB,GACrCD,GAAUC,GAAwB,IAGlCL,GAA4B,OAIhCA,GAA4B,EAMpC,OAAQA,IACJ,KAAK,EACD,IAAMM,GAAkBhI,EAAYW,MAC9BsH,GAASD,GAAgB,GAC/B,OAAO9a,GAAO8a,GAAgB,GAAI1X,IAAM,WACpC,IAAM4X,EAAQlf,GAAc4e,IAAWz5B,MAAMib,KAAKue,IAAQxyB,KAAK,IAAOyyB,GACtE,OAAO1a,GAAOoE,GAAY,IAAIsJ,GAAa,EAAG3O,GAAQ0b,IAAQxyB,KAAK,IAAK0yB,GAAYK,EAAOD,GAAOzI,eAAgBlP,IAAM,kBAAMqP,GAAW7T,KAASgc,GAASG,YAGnK,KAAK,EACD,IAAME,GA9+B/E,SAAoC9R,GACvC,IAAIC,EAAgCzS,EAmBpC,OAlBKmI,GAAQqK,GAgBTC,EAA0B,EAfN,MAAhBhM,GAAK+L,IAKgB,MAAhB/L,GAAK+L,IAJVC,EAA0B,EAClB/L,GAAK8L,GACbxS,EAAQwS,GAQRC,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAAIuD,EAA2B6D,EAAMP,EAC/BiL,EAA0B1L,GAAkCjQ,GAAQ,CAAC,IAAK,IAAK,MAAO5I,GAC5F,GAA+B,MAA3BukB,EACAvO,EAA4B,EAC5B6D,EAAO0K,EAAwB,GAC/BjL,EAAOiL,EAAwB,OAE9B,CACD,IAAMC,EAA0B3L,GAAkCjQ,GAAQ,CAAC,IAAK,IAAK,MAAO5I,GAC7D,MAA3BwkB,GACAxO,EAA4B,EAC5B6D,EAAO2K,EAAwB,GAC/BlL,EAAOkL,EAAwB,IAG/BxO,EAA4B,EAGpC,OAAQA,GACJ,KAAK,EACD,MAAO,CAAC6D,EAAM,SAAC4K,GACX,IAAIlW,EACJ,OAAO,IAAIwI,GAAa,EAAG7O,GAA8B,IAAI6O,GAAa,GAApCxI,EAAYkW,GAAqC,GAAIlW,EAAU,UAAO,IAC7G+K,GAEP,KAAK,EACD,IAAIrD,EAA2BiE,EAAQE,EACjCsK,EAA0B7L,GAAkCjQ,GAAQ,CAAC,IAAK,MAAO5I,GACvF,GAA+B,MAA3B0kB,EACAzO,EAA4B,EAC5BiE,EAASwK,EAAwB,GACjCtK,EAASsK,EAAwB,OAEhC,CACD,IAAMC,EAA0B9L,GAAkCjQ,GAAQ,CAAC,IAAK,MAAO5I,GACxD,MAA3B2kB,GACA1O,EAA4B,EAC5BiE,EAASyK,EAAwB,GACjCvK,EAASuK,EAAwB,IAGjC1O,EAA4B,EAGpC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACiE,EAAQ,SAAC1L,GAAD,OAAkB,IAAIuI,GAAa,EAAGvI,EAAY,GAAIA,EAAY,KAAM4L,GAE5F,KAAK,EACD,IAAIjE,EAA2BuE,EAAQE,EACjCgK,EAA0B/L,GAAkC3Q,GAAU,KAAMlI,GAClF,GAA+B,MAA3B4kB,EACAzO,EAA4B,EAC5BuE,EAASkK,EAAwB,GACjChK,EAASgK,EAAwB,OAEhC,CACD,IAAMC,EAA0BhM,GAAkC3Q,GAAU,KAAMlI,GACnD,MAA3B6kB,GACA1O,EAA4B,EAC5BuE,EAASmK,EAAwB,GACjCjK,EAASiK,EAAwB,IAGjC1O,EAA4B,EAGpC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACuE,EAAQ,SAACoK,GAAD,OAAkB,IAAI/N,GAAa,EAAG+N,EAAY,GAAIA,EAAY,KAAMlK,GAE5F,KAAK,EACD,SAQ5B,KAAK,EACD,QAu4BoGmK,CAA2B/kB,GAC3D,GAA+B,MAA3BskB,GAAiC,CACjC,IAAMU,GAASV,GAAwB,GACjCvwB,GAAIuwB,GAAwB,GAC5BW,GAAUX,GAAwB,GAClCY,GAAkB/I,EAAYW,MAC9BqI,GAASD,GAAgB,GAC/B,OAAO7b,GAAO6b,GAAgB,GAAIzY,IAAM,kBAAMpD,GAAOoE,GAAY1Z,GAAE,CAAC8U,GAAMiT,GAAW7T,KAAS+c,GAAQG,KAAUA,GAAOxJ,gBAAiBlP,IAAM,kBAAMqP,GAAW7T,KAASgd,GAASE,YAGjL,OAAOhd,GAAQnI,GAASmc,EAAYW,MAAM,GAAuB,MAAhBrW,GAAKzG,GAAuB8b,GAAWpT,GAAgB,CAAC,IAAK,IAAK,IAAK,KAAWF,GAAM9B,GAAK1G,GAAQ+b,GAAyB,MAAhBtV,GAAKzG,GAAuB8b,GAAWpT,GAAgB,CAAC,IAAK,IAAK,IAAK,KAAWF,GAAM9B,GAAK1G,GAAQ+b,GAAOD,GAAW1qB,GAAKqV,GAAKzG,GAAQwI,GAAM9B,GAAK1G,GAAQ+b,YAuBxY,SAASqJ,GAAW5P,EAASC,EAASsG,GACzC,IAAMvJ,EAAQ,CAACgD,EAASC,GAClB4P,EAA0BrR,GAAkCxB,EAAM,GAAIA,EAAM,IAC5E+J,EAAQ,IAAIhB,GAAeQ,EAAIP,MAAOO,EAAIN,QAASM,EAAIL,QAAS2J,EAAwB,GAAItJ,EAAIH,cACtG,OAAO/S,GAAMiT,GAAW7T,KAASW,GAAQyc,EAAwB,GAAG7kB,MAAM,KAAM+b,IAG7E,SAAS+I,GAAWC,EAAeC,GAEtC,OAAa,CACT,IAAMC,EAAYF,EAAe93B,EAAI+3B,EACrC,GAAIC,GAAa,EACb,OAAOh4B,EAEN,GAAuB,IAAnBA,EAAEsE,QAAQ,KAAd,CAKA,GAAwB,IAApBtE,EAAEsE,QAAQ,MAMf,OAAOtE,EALP83B,EAAiBE,EAAY,EAC7BD,EAAQjtB,GAAU9K,EAAG,QANrB83B,EAAiBE,EAAY,EAC7BD,EAAQjtB,GAAU9K,EAAG,IAe1B,SAASi4B,GAAwBlP,GACpC,IAAImP,EACAlT,EAAyBmT,EAAQC,EAAOC,EAAOxM,EACnD,GAAKnR,GAAQqO,GAwBT/D,EAA0B,MAxBT,CACjB,IAAIsT,EACExX,EAAY9H,GAAK+P,GAEvB,GADAuP,EAA0B/R,GAAkCzF,EAAU,GAAIA,EAAU,IAC/EpG,GAAQzB,GAAK8P,IAgBd/D,EAA0B,MAhBH,CACvB,IAAIuT,EACExX,EAAc/H,GAAKC,GAAK8P,IAE8G,MAAxIjB,GAA8C,IAAK1D,GADvDmU,EAA0B1R,GAAiC9F,EAAY,GAAIA,EAAY,KACkB,GAAIwX,EAAwB,KACjIvT,EAA0B,EAC1BmT,EAASG,EACTF,EAAQpf,GAAK+P,GACbsP,EAAQrf,GAAKC,GAAK8P,IAClB8C,EAAO5S,GAAKA,GAAK8P,KAGjB/D,EAA0B,GAUtC,OAAQA,GACJ,KAAK,EACD,MAAO,CAAC,EAAGmT,EAAQhd,GAAQ,CAACid,EAAOC,IAASxM,GAEhD,KAAK,EACD,IAAItD,EAA2BiQ,EAAUC,EAASC,EAAS/L,EAC3D,GAAKjS,GAAQqO,GAwBTR,EAA4B,MAxBX,CACjB,IAAIoQ,EACEtB,EAAcre,GAAK+P,GAEzB,GADA4P,EAA0BpS,GAAkC8Q,EAAY,GAAIA,EAAY,IACnF3c,GAAQzB,GAAK8P,IAgBdR,EAA4B,MAhBL,CACvB,IAAIqQ,EACEC,EAAc7f,GAAKC,GAAK8P,IAE8G,MAAxIjB,GAA8C,IAAK1D,GADvDwU,EAA0B/R,GAAiCgS,EAAY,GAAIA,EAAY,KACkB,GAAID,EAAwB,KACjIrQ,EAA4B,EAC5BiQ,EAAWG,EACXF,EAAUzf,GAAK+P,GACf2P,EAAU1f,GAAKC,GAAK8P,IACpB4D,EAAS1T,GAAKA,GAAK8P,KAGnBR,EAA4B,GAUxC,OAAQA,GACJ,KAAK,EACD,MAAO,CAAC,EAAGiQ,EAAUrd,GAAQ,CAACsd,EAASC,IAAW/L,GAEtD,KAAK,EACD,IAAInE,EAA2BsQ,EAAUC,EAASC,EAAMC,EAAK9L,EAC7D,GAAKzS,GAAQqO,GAoBTP,EAA4B,MApBX,CACjB,IAAI0Q,EACEC,EAAcngB,GAAK+P,GAEzB,GAA+B,OAD/BmQ,EAA0BxR,GAAkD,IAAKyR,EAAY,GAAIA,EAAY,KACxE,CACjC,IAAIC,EACEC,EAAcH,EAAwB,GAE5C1Q,EAA4B,EAC5BsQ,GAFAM,EAA0B7S,GAAkC8S,EAAY,GAAIA,EAAY,KAErD,GACnCN,EAAU/f,GAAK+P,GACfiQ,EAAOI,EAAwB,GAC/BH,EAAMC,EAAwB,GAC9B/L,EAASlU,GAAK8P,QAGdP,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACyQ,EAAK,CAAC1hB,GAASuhB,EAAU,MAASZ,EAASvf,GAAQmgB,EAAU,KAAQZ,EAAOp5B,OAAS,GAAMurB,GAAanS,GAAeggB,EAAQA,EAAOp5B,OAAS,IAAOo5B,EAASY,GAAaA,EAAUE,GAAOve,GAAUse,GAAU5L,GAE7N,KAAK,EACD,UA+DrB,SAASmM,GAA+BC,EAAMlT,GAyCjD,OAxCa,SAACmT,EAAS/f,GAEnB,OAAa,CACT,IAAqB5a,EAAI4a,EACnBud,EADMwC,EAENC,EAAe,EAAXzC,EAAM,GACV/2B,EAAe,EAAX+2B,EAAM,GACV9N,EAAe,EAAX8N,EAAM,GAChB,IAAO/2B,GAAK,GAAaipB,GAAK,GAAcuQ,GAAK,IAAQ56B,IAAM06B,EAAKz6B,OAChE,OAAOy6B,EAAK,GAEX,GAAI16B,IAAM06B,EAAKz6B,OAChB,OAEC,GAAIurB,GAAakP,EAAK16B,IACvB26B,EAAUxC,EACVvd,EAAS5a,EAAI,OAGZ,GAAkB,MAAZ06B,EAAK16B,IAAsB,IAANqqB,GAAoB,IAANuQ,EAKzC,GAAkB,MAAZF,EAAK16B,IAAsB,IAANoB,GAAoB,IAANw5B,EAAzC,CAKA,GAAkB,MAAZF,EAAK16B,IAAsB,IAANqqB,GAAoB,IAANjpB,EAM1C,OALAu5B,EAAU,CAACv5B,EAAGipB,EAAGuQ,EAAI,GACrBhgB,EAAS5a,EAAI,OANb26B,EAAU,CAACv5B,EAAGipB,EAAI,EAAGuQ,GACrBhgB,EAAS5a,EAAI,OANb26B,EAAU,CAACv5B,EAAI,EAAGipB,EAAGuQ,GACrBhgB,EAAS5a,EAAI,GAmBlBua,CAAK,CAAC,EAAG,EAAG,GAAI,GAoCpB,SAASsgB,GAAgC3Q,GAC5C,IACI/D,EAAyB2U,EAAUC,EAAUC,EAASC,EAAOC,EAASC,EAC1E,GAAKtf,GAAQqO,GAgET/D,EAA0B,MAhET,CACjB,IAAIiV,EACEnZ,EAAY9H,GAAK+P,GAEvB,GAA+B,OAD/BkR,EAA0BlT,GAAyE,IAAKjG,EAAU,GAAIA,EAAU,KAC3F,CACjC,IAAMoZ,EAA0BjR,GAAc,IAAKgR,EAAwB,IAC3E,GAAeA,EAAwB,GAAmBA,EAAwB,GAAIC,EAAwB,GAAK,EAC/GlV,EAA0B,EAC1B2U,EAAWM,EAAwB,GACnCL,EAAWK,EAAwB,GACnCJ,EAAU5gB,GAAK8P,GACf+Q,EAAQI,EAAwB,GAChCH,EAAUG,EAAwB,GAClCF,EAAchhB,GAAK+P,OAElB,CACD,IAAIoR,EACEpZ,EAAc/H,GAAK+P,GAEzB,GAA+B,OAD/BoR,EAA0BpT,GAAyE,IAAKhG,EAAY,GAAIA,EAAY,KAC/F,CACjC,IAAMqZ,EAA0BnR,GAAc,IAAKkR,EAAwB,IAC1DA,EAAwB,GAAqBA,EAAwB,GAAIC,EAAwB,GAAK,GACnHpV,EAA0B,EAC1B2U,EAAWQ,EAAwB,GACnCP,EAAWO,EAAwB,GACnCN,EAAU5gB,GAAK8P,GACf+Q,EAAQM,EAAwB,GAChCL,EAAUK,EAAwB,GAClCJ,EAAchhB,GAAK+P,IAGnB/D,EAA0B,OAI9BA,EAA0B,OAIjC,CACD,IAAIqV,EACEhD,EAAcre,GAAK+P,GAEzB,GAA+B,OAD/BsR,EAA0BtT,GAAyE,IAAKsQ,EAAY,GAAIA,EAAY,KAC/F,CACjC,IAAMiD,EAA0BrR,GAAc,IAAKoR,EAAwB,IAC1DA,EAAwB,GAAqBA,EAAwB,GAAIC,EAAwB,GAAK,GACnHtV,EAA0B,EAC1B2U,EAAWU,EAAwB,GACnCT,EAAWS,EAAwB,GACnCR,EAAU5gB,GAAK8P,GACf+Q,EAAQQ,EAAwB,GAChCP,EAAUO,EAAwB,GAClCN,EAAchhB,GAAK+P,IAGnB/D,EAA0B,OAI9BA,EAA0B,GAOtC,OAAQA,GACJ,KAAK,EACD,IAAIuV,EAASviB,GAAU8hB,EAAOC,GAC9B,GAAIJ,EAASr1B,QAAQy1B,IAAY,EAC7B,OAGA,IAyCI5T,EAeAqU,EAxDEvU,EAAeZ,IAAoB,SAACkU,GACtC,IACIhR,EAAqCoG,EADnCrV,EAAamB,GAAU8e,GAE7B,GAAK7e,GAAQpB,GAoBTiP,EAA4B,MApBN,CACtB,IAAIkS,EACE5B,EAAc7f,GAAKM,GAEM,OAD/BmhB,EAA0B1T,GAAyEgT,EAASlB,EAAY,GAAIA,EAAY,MAE9H4B,EAAwB,IAAMX,GAAWW,EAAwB,GAAK,GAAO9iB,GAAmB8iB,EAAwB,KAC1HlS,EAA4B,EACtBkS,EAAwB,GACxBA,EAAwB,GAC9B9L,EAAM8L,EAAwB,IAOlClS,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EAED,OADAgS,EAASviB,GAAU2W,EAAKoL,IACjB,EAEX,KAAK,EACD,OAAO,KAGhBF,GACGhO,EAAO5F,EAAa,GACpByU,EAAYzU,EAAa,GACzB0U,EAAoBza,GAAOlB,IAAM,kBAAMlD,IAAQ,SAAC6C,GAClD,IAAIic,EACJ,OAAO5a,IAAa4a,EAAIjc,EAAa,IAAQ7f,QAAU86B,GAAajiB,GAAmBijB,GAAM,GAAQA,EAAE97B,OAAS86B,GAAajiB,GAAmB7M,GAAU8vB,EAAG,EAAGhB,IAAc9uB,GAAU8vB,EAAGhB,EAAUgB,EAAE97B,OAAS86B,GAAYgB,EAAEniB,eAC/NiiB,OAEH,GAAI/iB,GAAmBgiB,GACnBxT,EAAiB,CAAC,GAAI,QAErB,CACD,IAAMuF,EZvsDnB,SAAiBjO,EAAW7W,GAC/B,IAAMoB,EAAIoT,GAAMxU,GAChB,IAEI,IADA,IAAIoH,OAAM,EACK,MAAPA,GAAgBhG,EAAE,8CAA8C,CACpE,IAAM6R,EAAI7R,EAAE,0DACRyV,EAAU5D,KACV7L,EAAMzI,GAAKsU,IAGnB,OAAO7L,EARX,QAWIhG,EAAEyT,WY0rD+BW,EAAQ,SAAC2I,GAAD,OAAW,IAAMhS,GAAM4mB,EAAU,CAAC,KAAM,KAAM,IAC3E,GAAoB,MAAhBjO,EAAsB,CACtB,IAAMmP,EAAanP,EACboP,EAAgBhwB,GAAU6uB,EAAUA,EAASr1B,QAAQu2B,GAAcA,EAAW/7B,QACpFqnB,EAAiB,CAAC0U,EAAYljB,GAAmBmjB,GAAiB,GAAKA,QAGvE3U,EAAiB,CAAC,GAAI,IAI9B,GAAKzL,GAAQmR,GAeT2O,EAAiB,CAAChgB,KAASmgB,EAAmB9O,OAf9B,CAChB,IAAMkP,EAAK9hB,GAAK4S,GACVmP,EAAahiB,GAAK6S,GAClBoP,EAAKjiB,GAAK6S,GAAM,GAChB7U,EAA2B,EAArBikB,EAAG32B,QAAQi2B,GACvB,GAAKvjB,GAAO,GAAQA,EAAMujB,EAAOz7B,QAAWm8B,EAAGn8B,OAAS,CACvCgM,GAAUmwB,EAAI,EAAGjkB,GAA9B,IACMkkB,EAAQpwB,GAAUmwB,EAAIjkB,EAAMujB,EAAOz7B,QACzC07B,EAAiB,CAAC/f,GAAUugB,GAAa7G,GAASwG,EAAmBlgB,GAAU,KAAM9C,GAAmBujB,GAASH,EAAKp3B,GAAK,CAACu3B,EAAOliB,GAAK6S,GAAM,IAAKkP,SAGnJP,EAAiB,CAAC/f,GAAUugB,GAAa7G,GAASwG,EAAmBlgB,GAAU,KAAMsgB,GAM7F,MAAO,CAACP,EAAe,GAAIrG,GAASxwB,GAAKq2B,EAAaU,GAAYF,EAAe,IAAKA,EAAe,GAAIrU,EAAe,GAAIA,EAAe,IAGnJ,KAAK,EACD,QAgCL,SAASgV,GAA0BpT,EAASC,GAC/C,IAAIlH,EAAW2F,EACT1B,EAAQ,CAACgD,EAASC,GAClBoT,EAA0BtU,GAA2C/B,EAAM,GAAIA,EAAM,IAC3F,GAAgJ,OAA1IjE,EAAYsa,EAAwB,GNtqEe5T,EMsqEkC,CAAC,KAAM,KAAM,MNtqEvChB,EMsqE8C1F,EAAU,GAAIA,EAAU,GNrqEnIP,IAAO,SAAC8a,GAAD,OAAoC,IAAxB7U,EAAKliB,QAAQ+2B,KAAe7T,GACxCjiB,QAAK,QAGZ,GMiqEkJ,CAClJ,IAAMspB,EAAQuM,EAAwB,GAAG,GACnCE,EAAK,CAACxwB,GAAUswB,EAAwB,GAAG,GAAI,IAAK3U,EAAe,IAAIvhB,EAAU2pB,GAAS,IAAI9K,GAAc0C,EAAYG,SAAS5C,UAAW6K,EAAM5K,YAAc,EAAGwC,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,aACtNoX,EAA6E,EAA9DzU,GAA2CwU,EAAG,GAAIA,EAAG,IAAI,GAC9E,MAAO,CAAC,IAAIlS,GAAiB,GAAIgS,EAAwB,GAAKA,EAAwB,GAAK,GAAOG,GAAgB,EAAK,EAAIA,GAAeD,GAG1I,IAAItW,EAAoCwW,EAAQC,EAAcC,EAE1DC,EN/qEiDnU,EAAQhB,EM8qEvDoV,EAA0B9U,GAA2C/B,EAAM,GAAIA,EAAM,IAErFhE,EAAc6a,EAAwB,GAE5C,GADAD,EA1CD,SAAyCppB,EAAO8T,GACnD,IACIrB,EAA8Bne,EAD5ByS,EAAa8B,GAAM7I,EAAMQ,MAAM,KAerC,OAbK2H,GAAQpB,GAWT0L,EAA0B,EAVtBkF,GAAQlR,GAAKM,KACb0L,EAA0B,EACpBhM,GAAKM,GACXzS,EAAOoS,GAAKK,IAGZ0L,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAAM6G,EAAOxG,IAAoB,SAAC9P,GAAD,OAAW2U,GAAQ3U,KAAO1O,GAAM,GACjE,MAAO,CAAC0L,EAAMzT,OAASA,GAAO+sB,GAAOA,GAEzC,KAAK,EACD,QAoBsBgQ,CAAgC9a,EAAY,GAAIA,EAAY,IACvD,MAA3B4a,EACA,GAAKjhB,GAAQihB,EAAwB,IAwBjC3W,EAA0B,OAvB1B,GAAyC,MAArChM,GAAK2iB,EAAwB,IAC7B,GAAKjhB,GAAQzB,GAAK0iB,EAAwB,KActC3W,EAA0B,OAb1B,GAA+C,MAA3ChM,GAAKC,GAAK0iB,EAAwB,KAAc,CAChD,IAAMG,EAA0BjT,GAAwB5P,GAAKA,GAAK0iB,EAAwB,MAC1F3W,EAA0B,EACd4W,EAAwB,GACpCJ,EAASM,EACTL,EAAeE,EAAwB,GACvCD,EAAgBE,EAAwB,QAGxC5W,EAA0B,OAQlCA,EAA0B,OAQlCA,EAA0B,EAE9B,OAAQA,GACJ,KAAK,EACD,IAAMiB,EAAe,CAACuV,EAAQpX,IACxB2X,EAAmG,EAAlFjV,GAA2Cb,EAAa,GAAIA,EAAa,IAAI,GACpG,MAAO,CAAC,IAAImD,GAAiB,GAAIsS,EAAiBA,EAAgB,EAAKD,GAAkBM,GAAkB,EAAK,EAAIA,GAAiB,CAACP,EAAQpX,KAElJ,KAAK,EACD,QAmHT,SAAS4X,GAA0BC,EAAYlT,GAClD,IAAIjI,EACEob,EA9CH,SAAkCD,EAAYlT,GACjD,IAAIoT,EAAyB7iB,EAAYyH,EAAasW,EAAawB,EAAaM,EAAaE,EAAa+C,EAAaC,EACnHrX,EAAyBsX,EAAWC,EAAWjgB,EAAMjd,EAAMm9B,EAAM7+B,EAAMkuB,EAAM4Q,EAAaC,EAC9F,GAAKhiB,GAAQqO,GAuBT/D,EAA0B,MAvBT,CACjB,IAAI2X,EACE7b,EAAY9H,GAAK+P,GAEvB,GAA+B,OAD/B4T,EAA0BxB,GAA0Bra,EAAU,GAAIA,EAAU,KACvC,CACjC,IAAM8b,EAzEX,SAAyC7T,GAC5C,OAAO1D,IAAoB,SAACN,GAWxB,OATqD,MAAjDoW,GAA0BpW,EAAM,GAAIA,EAAM,KAG4B,MAAjEqB,GAA0CrB,EAAM,GAAIA,EAAM,IAFrC,EAMA,GAG1B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,KAGhBgE,GAqDqC8T,CAAgC5jB,GAAK8P,IAC/D+T,EAnDX,SAA8C/T,GACjD,OAAOzD,IAA6B,SAACP,GACjC,IAAIjE,EAAWC,EAAasW,EAAawB,EA6BzC,OA3BKne,GAAQqK,GAyBiB,EAxBgE,MAA3DoW,IAAzBra,EAAY9H,GAAK+L,IAA4C,GAAIjE,EAAU,KAGoC,MAA/EwF,IAA3BvF,EAAc/H,GAAK+L,IAA8D,GAAIhE,EAAY,IAF9E,EAKuF,MAA/EqF,IAA3BiR,EAAcre,GAAK+L,IAA8D,GAAIsS,EAAY,IACnG3c,GAAQzB,GAAK8L,IASY,EAR4F,MAA/EqB,IAAjCyS,EAAc7f,GAAKC,GAAK8L,KAA+D,GAAI8T,EAAY,IAC/E,EAGA,EAQR,GAO9B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,KAGhB9P,GAYqCgU,CAAqCH,EAAwB,IAC7F5X,EAA0B,EAC1BsX,EAAYM,EAAwB,GACpCL,EAAYI,EAAwB,GACpCrgB,EAAOqgB,EAAwB,GAC/Bt9B,EAAOs9B,EAAwB,GAC/BH,EAAOM,EAAwB,GAC/Bn/B,EAAOi/B,EAAwB,GAC/B/Q,EAAOiR,EAAwB,GAC/BL,EAAcE,EAAwB,GACtCD,EAAY1jB,GAAK+P,QAGjB/D,EAA0B,EAMlC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACyX,EAAa,EAAEN,EAA0BrV,GAA2CxK,EAAK,GAAIA,EAAK,MAAM6f,EAAwB,IAAM,KAAe7iB,EAAa,CAAC3b,EAAMkuB,GAASnR,GAAQpB,EAAW,IAA83boB,GAAQpB,EAAW,MAAs0EoB,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAttI,OAAlGpD,EAAc7f,GAAKM,EAAW,IAAK6hB,GAA0BtC,EAAY,GAAIA,EAAY,QAA2Bne,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAh5f,OAAlHlb,EAAc/H,GAAKM,EAAW,IAAK8M,GAA0CrF,EAAY,GAAIA,EAAY,MAAoBrG,GAAQpB,EAAW,KAA6G,OAAlG+d,EAAcre,GAAKM,EAAW,IAAK6hB,GAA0B9D,EAAY,GAAIA,EAAY,QAA6jJ3c,GAAQpB,EAAW,MAAs0EoB,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAttI,OAAlGpD,EAAc7f,GAAKM,EAAW,IAAK6hB,GAA0BtC,EAAY,GAAIA,EAAY,QAA2Bne,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,IAAk5EvhB,GAAQpB,EAAW,MAAs0EoB,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAttI,OAAlGpD,EAAc7f,GAAKM,EAAW,IAAK6hB,GAA0BtC,EAAY,GAAIA,EAAY,QAA2Bne,GAAQpB,EAAW,KAA6H,OAAlH6f,EAAcngB,GAAKM,EAAW,IAAK8M,GAA0C+S,EAAY,GAAIA,EAAY,QAAkBze,GAAQzB,GAAKK,EAAW,OAA+gCoB,GAAQpB,EAAW,KAA6zBoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAA11B,OAAlH5C,EAAcrgB,GAAKM,EAAW,IAAK8M,GAA0CiT,EAAY,GAAIA,EAAY,KAAoB3e,GAAQzB,GAAKK,EAAW,MAAmUoB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,EAAzV,OAAxHG,EAAcpjB,GAAKC,GAAKK,EAAW,KAAM8M,GAA0CgW,EAAY,GAAIA,EAAY,OAA2B1hB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,GAAgMvhB,GAAQpB,EAAW,KAA8H,OAAlH+iB,EAAcrjB,GAAKM,EAAW,IAAKgN,GAA0C+V,EAAY,GAAIA,EAAY,MAAkBJ,KAAi7N58B,EAAM6gB,GAAOlB,IAAM,kBAAMpD,GAAOoE,GAAY1D,GAAO0C,IAAM,kBAAMpD,GAAOE,IAAQ,SAAC6C,GAAD,OAAkBqB,GAAY,CAACrB,EAAa,GAAGlM,OAAQkM,EAAa,OAAM2d,GAAYtd,IAAM,kBAAMlD,IAAQ,SAAC4P,GAC/xlB,IAAIjF,EACEiL,EAAMhG,EAAa,GACnBsR,EAAStR,EAAa,GACtB/E,EAAUkR,GAAW0E,EAAWS,GACtC,OAAOhd,GAAY,CAAC2G,GAAUF,EAAe,IAAIvhB,EAAUwsB,GAAO,IAAI3N,GAAc0C,EAAYG,SAAS5C,UAAY0N,EAAIzN,YAAc+Y,EAAOl+B,OAAU6nB,EAAQ7nB,OAAQ2nB,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,gBAC5NqY,gBAAcrI,GAASxwB,GAAK+4B,EAAWJ,GAAYE,GAAO3Q,GAEjE,KAAK,EACD,QAOwBoR,CAAyBhB,EAAYlT,GACrE,GAA+B,MAA3BmT,EAAJ,CACI,IAKIlX,EAAyBgW,EALvBlV,EAAsC,EAA7BoW,EAAwB,GACjCgB,EAAOhB,EAAwB,GAC/BiB,EAAajB,EAAwB,GAAG,GACxCrQ,EAAOqQ,EAAwB,GAC/BkB,EAAalB,EAAwB,GAc3C,OAZKxhB,GAAQmR,GAUT7G,EAA0B,EAToE,MAAhEsU,IAAxBxY,EAAY9H,GAAK6S,IAAgD,GAAI/K,EAAU,KACjFkE,EAA0B,EAC1BgW,EAAahiB,GAAK6S,IAGlB7G,EAA0B,EAM1BA,GACJ,KAAK,EACD,MAAO,CAACvK,GAAU,CAACqL,EAAQoX,IAAQ/I,GAASiJ,EAAY3iB,GAAUugB,IAAcnP,GAEpF,KAAK,EACD,IAAMwR,EAA0BrB,GAA0BmB,EAAYtR,GACtE,GAA+B,MAA3BwR,EAAiC,CACjC,IAAMC,EAAQD,EAAwB,GAChC1Q,EAAS0Q,EAAwB,GACjCE,EAAcF,EAAwB,GAC5C,MAAO,CAAC15B,GAAK,CAACmiB,EAAQoX,GAAOI,GAAQnJ,GAASiJ,EAAYG,GAAc5Q,GAGxE,MAAO,CAAClS,GAAU,CAACqL,EAAQoX,IAAQE,EAAYvR,KAU5D,SAAS2R,GAAoBC,EAAOlE,GACvC,IACMmE,EAAY,SAAC9gC,GAAD,OAAOiH,GAAK,GAAI8W,GAAQ/d,KAqOpCg1B,EApOO,SAAC+L,EAAaC,GAGvB,IAFA,IADsC,aAIlC,IAAMC,EAAUF,EAAaX,EAASY,EAChCE,EAA0B/R,GAA0C5Q,GAAQ,CAAC,IAAK,MAAO6hB,GAC/F,GAA+B,MAA3Bc,EAAiC,CACnBA,EAAwB,GAAtC,IACMjS,EAAOiS,EAAwB,GAGrC,OAFAH,EAAcE,EACdD,EAAa/R,EACb,gBAGA,IAAMkS,EAA0B9R,GAAyCxR,GAAU,KAAMuiB,GACzF,GAA+B,MAA3Be,EAAiC,CACjBA,EAAwB,GAAxC,IACMpR,EAASoR,EAAwB,GAGvC,OAFAJ,EAAcE,EACdD,EAAajR,EACb,gBAGA,IAAIqR,EACE5N,EAASjV,GAAQ,CAAC,IAAK,MACvBqK,EAAOrK,GAAQ,CAAC,IAAK,MACrB5I,EAAQyqB,EACd,GAAa,SAACvX,EAAa6K,GACvBlX,EACA,OAAa,CACT,IACME,EAAa,CADHmM,EAAsB6K,GAElCtL,OAAuB,EAAOne,OAAI,EAAOwS,OAAI,EAqBjD,OApBKqB,GAAQpB,EAAW,KACfoB,GAAQpB,EAAW,IAiBxB0L,EAA0B,EAhBlBhM,GAAKM,EAAW,MAAQN,GAAKM,EAAW,KACxC0L,EAA0B,EACpBhM,GAAKM,EAAW,IACtBzS,EAAOoS,GAAKK,EAAW,IACjBN,GAAKM,EAAW,IACtBD,EAAOJ,GAAKK,EAAW,KAGvB0L,EAA0B,EAU9BA,GACJ,KAAK,EACDS,EAAc5e,EACdypB,EAAajX,EACb,SAASD,EAEb,KAAK,EACD,QAAIsB,GAAQpB,EAAW,IAQ/B,OAEJF,CAAKgX,EAAQ7d,GAAS,CACtB,IAAMoM,EAAe4G,GAA0BC,EAAMpI,GAAKte,GAAOsxB,GAAS7d,IAC1E,GAAoB,MAAhBoM,EACAqf,OAA2B,MAE1B,CACD,IAAMlS,EAAOnN,EAAa,GAC1Bqf,EAA0B,CAACrf,EAAa,GAAIvB,GAAKte,GAAO0mB,GAAOsG,GAAOhtB,GAAOsxB,GAAStxB,GAAO0mB,UAIjGwY,OAA2B,EAE/B,GAA+B,MAA3BA,EAAiC,CACjBA,EAAwB,GAC7BA,EAAwB,GACxBA,EAAwB,GAFnC,IAGM7Q,EAAS6Q,EAAwB,GAGvC,OAFAL,EAAcE,EACdD,EAAazQ,EACb,gBAGA,IAAI8Q,EA+EIzV,EAA2BkH,EA7E7B9D,EAAUoR,EACVrM,EAAO9L,IAAoB,SAAChmB,GAAD,MAFrB,MAE6BA,IAAY+sB,GAAS,GAC9D,GAAKlR,GAAQiW,GA+DTsN,OAA2B,MA/DX,CAChB,IAAMrN,EAAQpqB,GAAW1H,GAAO6xB,IAAO,SAAC5L,GAAD,MAJ/B,OAKF8L,EAAWD,EACXE,EAASF,EACTP,EAAUzE,EAChB,GAAe,SAACN,EAAa0F,GACzBrL,EACA,OAAa,CACT,IACM+F,EAAe,CADLJ,EAAsB0F,GAElCzI,OAAyB,EAAOlN,OAAI,EAAOoQ,OAAI,EAqBnD,OApBK/Q,GAAQgR,EAAa,KACjBhR,GAAQgR,EAAa,IAiB1BnD,EAA4B,EAhBpBvP,GAAK0S,EAAa,MAAQ1S,GAAK0S,EAAa,KAC5CnD,EAA4B,EACtBvP,GAAK0S,EAAa,IACxBrQ,EAAOpC,GAAKyS,EAAa,IACnB1S,GAAK0S,EAAa,IACxBD,EAAOxS,GAAKyS,EAAa,KAGzBnD,EAA4B,EAUhCA,GACJ,KAAK,EACD+C,EAAcjQ,EACd2V,EAAavF,EACb,SAAS9F,EAEb,KAAK,EACD,QAAIjL,GAAQgR,EAAa,IAQjC,OAEJ/F,CAAOkL,EAAUR,GAAW,CAC5B,IAAMG,EAAejL,GAA0BuL,EAAQ1T,GAAKte,GAAO+xB,GAAWR,IAC9E,GAAoB,MAAhBG,EACAyN,OAA2B,MAE1B,CACD,IAAM7M,EAASZ,EAAa,GAC5ByN,EAA0B,CAACzN,EAAa,GAAIpT,GAAKte,GAAOgyB,GAASM,GAAStyB,GAAO+xB,GAAW/xB,GAAOgyB,UAIvGmN,OAA2B,EAMnC,GAA+B,MAA3BA,EAAiC,CACjBA,EAAwB,GAC3BA,EAAwB,GACxBA,EAAwB,GAFrC,IAGMnO,EAASmO,EAAwB,GAGvC,OAFAN,EAAcE,EACdD,EAAa9N,EACb,gBAiBA,OAbKpV,GAAQsiB,GAWTxU,EAA4B,EAVxBqV,EAAQt4B,MAAK,SAAC24B,GAAD,OAAUllB,GAAKgkB,KAAYkB,MACxC1V,EAA4B,EAC5BkH,EAASzW,GAAK+jB,GACRhkB,GAAKgkB,IAGXxU,EAA4B,EAM5BA,GACJ,KAAK,EACD,SAAOkH,GAEX,KAAK,EACD,IAAIhH,EAA2BwH,EAkB/B,OAjBIxV,GAAQsiB,GACRtU,EAA4B,EAEN,OAAjB1P,GAAKgkB,GACLtiB,GAAQzB,GAAK+jB,KAKdtU,EAA4B,EAC5BwH,EAASjX,GAAK+jB,KALdtU,EAA4B,EAC5BwH,EAASjX,GAAKA,GAAK+jB,MAQvBtU,EAA4B,EAC5BwH,EAASjX,GAAK+jB,IAEVtU,GACJ,KAAK,EAGD,OAFAiV,EAAcE,EACdD,EAAa1N,EACb,gBAEJ,KAAK,EACD,cAAO,IASvC,iBA9NS,kDA8NT,MA9NS,iCAiOFiO,CAAKV,EAAOlE,GAC3B,GAAc,MAAV3H,EAAgB,CAChB,GAAkBpwB,EAAO+3B,EAAM/e,MAE3B,OAAOC,GAAU,IAEhB,GAAc,MAAVmX,EAAgB,CACrB,IAAMjJ,EAAMiJ,EACZ,OAAOjuB,GAAK+5B,EAAUxd,GAAOxC,GAAM5e,GAAOy6B,GAAQz6B,GAAO6pB,GAAQ,EAAG4Q,KAASiE,GAAoBC,EAAO9U,IAGxG,MAAO,IAAI7qB,MAAM,iBAIrB,OAAO2c,GAAUijB,EAAUnE,IAI5B,SAAS6E,GAAmCrW,EAASC,GACxD,IAAIqP,EAAatW,EAAaD,EN1mF+B0F,EAAMvO,EAC/DwO,EM0mFE1B,EAAQ,CAACgD,EAASC,GAElBqW,EAA0B9W,GAAiD,IAAK,IAAKxC,EAAM,GAAIA,EAAM,IAY3G,OAX+B,MAA3BsZ,GACyJ,MAA9GvW,GAA8C,IAAK1D,GAAxFtD,EAAYud,GAAgH,GAAIvd,EAAU,IAClH,EAOJ,GAG1B,KAAK,EACD,OAAO,IAAIuI,GAAwB,GAEvC,KAAK,EACD,IACMiV,GN/nFqDrmB,EM+nF8B8M,EAAM,GN7nF3E,KAFiCyB,EM+nF0BzB,EAAM,IN7nFpFzgB,QM6nFyE,KN5nFvE,CAACwG,GAAU0b,EM4nF4D,IN5nFhD1nB,SAAU2nB,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAY/L,EAAEgM,YAAcuC,EAAK1nB,OM4nFpE,IN5nFoFA,OAAQ2nB,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,kBAG7N,GMqoFI,OAX+B,MAA3Bma,GAC+J,MAAlHxW,GAA8C,IAAK1D,GAA1FrD,EAAcud,GAAkH,GAAIvd,EAAY,IACtH,EAOJ,GAG5B,KAAK,EACD,OAAO,IAAIsI,GAAwB,GAEvC,KAAK,EACD,IACMkV,EAA0BhX,GAAiD,GAAI,IAAKxC,EAAM,GAAIA,EAAM,IAY1G,OAX+B,MAA3BwZ,GAC+J,MAAlHzW,GAA8C,IAAK1D,GAA1FiT,EAAckH,GAAkH,GAAIlH,EAAY,IACtH,EAOJ,GAG5B,KAAK,EACD,OAAO,IAAIhO,GAAwB,GAEvC,KAAK,EACD,OAAwG,MAApGvB,GAA8C,IAAK1D,EAA0BW,EAAM,GAAIA,EAAM,IACtF,IAAIsE,GAAwB,QAGnC,KAUzB,SAASmV,GAA6BxzB,EAAMyzB,EAAYlF,EAAMthB,GACjE,IAAMymB,EAAQtX,IAAM,SAACpnB,GAAD,MAAO,CAACA,EAAEyS,OAAQwF,KAAI0C,GAAQ6iB,GAAoBiB,EAAYtjB,GAAQoe,EAAKxmB,MAAM,QAC/F4b,EAAqB,EAAf+P,EAAM5/B,OACZ4T,EAA4C,GAA9B,MAAR1H,EAAgB,EAAI2zB,GAAS3zB,IACnCpO,EAA0D,GAApD8a,GAAcgnB,EAAM,GAAG,KAAQ/P,EAAMjc,EAAM,EAAI,GACrDxV,EAAsF,GAAhFwa,GAAcgnB,EAAM/P,EAAM,GAAG,KAASA,EAAM/xB,EAAK8V,EAAOic,EAAM,EAAMA,EAAM,GACtF,OAAa,IAARA,GAA8B,MAAR3jB,GAAoB9N,EAAIN,EAAK,IAAO8V,OAC3D,EAGOyI,GAAQujB,EAAM53B,MAAMlK,EAAGM,EAAI,IAInC,SAAS0hC,GAAiC5zB,EAAM+c,EAASC,GAC5D,IAAMjD,EAAQ,CAACgD,EAASC,GAClB6W,EAA0BL,GAA6BxzB,EAAM,CAAC,IAAK,KAAM+Z,EAAM,GAAIA,EAAM,IAC/F,GAA+B,MAA3B8Z,EAAiC,CACjC,IAAMH,EAAQG,EACRC,EAAariB,IAAO,SAACqE,GAAD,OAAesd,GAAmCtd,EAAU,GAAIA,EAAU,MAAK4d,GACzG,OAAI5/B,GAAO4/B,KAAW5/B,GAAOggC,QACzB,EAGOA,GA8HZ,SAASC,GAA+BC,EAAMnlB,EAAGolB,EAAO1F,EAAMlT,GACjE,IAAMxb,EAAa,MAARm0B,EAAgBL,GAASK,GAAQ/e,GAAUsK,GAAY,EAAG,EAAGgP,EAAKz6B,OAAS,IAAIuZ,QAAO,SAACxZ,GAAD,OAAQ06B,EAAK16B,KAAOgb,KAC/G5B,EAAKpN,EAAE/L,OAAS,EAAK,EAC3B,KAAMmZ,EAAI,GAAashB,EAAKz6B,QAAU+L,EAAEoN,IAAcpN,EAAEtF,MAAK,SAACwgB,GAAD,OAAUwT,EAAKxT,KAASlM,MAArF,CAII,IbrlEevT,EaqlETo4B,EAAQx9B,IAAI,SAACg+B,GACf,IAAM1N,EAAM,IAAIzN,GAAc9L,EAAG,EAAGA,EAAIpN,EAAEq0B,GAAOr0B,EAAEq0B,EAAM,GAAM,GAC/D,MAAO,CAACp0B,GAAUyuB,EAAM1uB,EAAEq0B,EAAM,GAAK,EAAIr0B,EAAEq0B,GAAOr0B,EAAEq0B,EAAM,GAAM,GAAI1N,KACrEtR,GAAOqK,GAAY,EAAG,EAAGtS,KAC5B,ObzlEe3R,EaylEF24B,EbxlEVrkB,IAAK,SAACG,EAAKne,GAAN,OAAame,GAAOzU,EAAE1J,MAAK,EawlEf8hC,GACT,CAAC7zB,EAAG6zB,QAGX,GAyJL,SAASS,GAAgC5F,EAAMthB,GAClD,IAAIwO,EACEmH,EAAaxd,GAAM+C,GAAO,wBAA8BomB,GAC9D,GAAkB,MAAd3L,EAAoB,CACpB,IAAMwR,EAAQxR,EAAW,GACnBzY,EAASyY,EAAW,GAAG9uB,OAAS8uB,EAAW,GAAG9uB,OAAU,EAC9D,MAAO,CAACsgC,GAAS,IAAK3Y,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAW/L,EAAEgM,YAAc9O,EAAOsR,EAAYG,SAAS1C,QAAUjM,EAAEgM,YAAc9O,EAASiqB,EAAMtgC,WAOhM,SAASugC,GAAmC9sB,GAC/C,IAAM+G,EAAa8L,IAA6B,SAACL,GAC7C,IAAIjE,EAAWC,EACf,OAA0C,MAAlCkX,GAAwBlT,IAAsE,MAA1C2U,GAAgC3U,KAA6BrK,GAAQqK,IAAwG,MAAjEoa,IAAzBre,EAAY9H,GAAK+L,IAAkD,GAAIjE,EAAU,SAAkLpG,GAAQqK,MAAyH,OAA1GhE,EAAc/H,GAAK+L,GAAQqB,GAA0CrF,EAAY,GAAIA,EAAY,SAC3gBxO,GACH,OAAK/Q,EAAO8X,EAAW,GAAIkB,WAIvB,EAHO,CAAClB,EAAW,GAAIA,EAAW,IA4FnC,SAASgmB,GAA2BvW,GACvC,IAAIwW,EAAyBC,EAASrS,EAQ9BnI,EAAyBsX,EAAWmD,EAAW9S,EAAQ+P,EAAWgD,EAPpEC,EAyCH,SAAyC5W,GAC5C,IAAI8P,EAAa9X,EACbiE,EACJ,GAAKtK,GAAQqO,GAsBT/D,EAA0B,MAtBT,CACjB,IAAI4a,EACE9e,EAAY9H,GAAK+P,GAKX/D,EAHmB,OAD/B4a,EAA0BT,GAAgCre,EAAU,GAAIA,EAAU,MAE8C,MAA/EsF,IAAvCrF,EAAc6e,GAA+E,GAAI7e,EAAY,KAChE,MAA3Cue,GAA2BrmB,GAAK8P,IACN,EAWR,EAMlC,OAAQ/D,GACJ,KAAK,EACD,OAEJ,KAAK,EACD,IAAIuD,EAA2BsD,EAAM6Q,EACrC,GAAKhiB,GAAQqO,GAmBTR,EAA4B,MAnBX,CACjB,IAAIsX,EACExI,EAAcre,GAAK+P,GAEM,OAD/B8W,EAA0BV,GAAgC9H,EAAY,GAAIA,EAAY,MAE0C,MAA/EjR,IAAvCyS,EAAcgH,GAA+E,GAAIhH,EAAY,KAC/GtQ,EAA4B,EAC5BsD,EAAO5S,GAAK8P,GACZ2T,EAAY1jB,GAAK+P,IAOrBR,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,MAAO,CAAC9N,GAAUiiB,GAAY7Q,GAElC,KAAK,EACD,SApGgBiU,CAAgC/W,GAChE,GAA+B,MAA3B4W,EAAiC,CACjC,IAAMI,EAA0BjX,GAA+B6W,EAAwB,IACjFvC,EAAauC,EAAwB,GAC3C,MAAO,CAACllB,GAAU,CAAC,GAAI2J,KAA4B+P,GAASiJ,EAAY2C,EAAwB,IAAKA,EAAwB,IAI7H,GAAKrlB,GAAQqO,GAmBT/D,EAA0B,MAnBT,CACjB,IAAIgb,EACElf,EAAY9H,GAAK+P,GAEvB,GAA+B,OAD/BiX,EAA0Bb,GAAgCre,EAAU,GAAIA,EAAU,KAC7C,CACjC,IAAMmf,EAhEX3a,IAA6B,SAAC3nB,GACjC,IAAIojB,EAAaD,EAajB,OAXKpG,GAAQ/c,GASiB,EARqE,MAAjEwhC,IAAxBre,EAAY9H,GAAKrb,IAAiD,GAAImjB,EAAU,IACxD,EAGA,GAO9B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,GAAqC,MAAjCmX,GAAwBt6B,GACxB,OAAO,EAeP,OAXK+c,GAAQ/c,GASmB,EARmF,MAA/EyoB,IAA1BrF,EAAc/H,GAAKrb,IAA6D,GAAIojB,EAAY,IACtE,EAGA,GAOhC,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,MAwBgD9H,GAAK8P,IAClEmX,EAA0BpX,GAA+BmX,EAAwB,IACvFjb,EAA0B,EAC1BsX,EAAY2D,EAAwB,GACpCR,EAAYO,EACZrT,EAASuT,EAAwB,GACjCxD,EAAY1jB,GAAK+P,GACjB2W,EAAgBQ,EAAwB,QAGxClb,EAA0B,EAMlC,OAAQA,GACJ,KAAK,EACD,IAAMiB,EAA0G,OAA1FsZ,EAA0BD,GAA2B3S,KAA+C6S,EAAUD,EAAwB,GAAKpS,EAASoS,EAAwB,GAAgD,CAACC,EAA7BD,EAAwB,GAA4BpS,IAAc,CAAC3S,KAASA,KAASmS,GAC3S,MAAO,CAACwH,GAASxwB,GAAK87B,EAAWnD,GAAYrW,EAAa,IAAKkO,GAASxwB,GAAK+4B,EAAWJ,GAAYnI,GAASuL,EAAezZ,EAAa,KAAMA,EAAa,IAEhK,KAAK,EACD,QA8QT,SAASka,GAAmBpX,GAC/B,OAAKrO,GAAQqO,QAIT,EAHOxjB,GAAKyT,GAAK+P,GAAO,IAOzB,SAASqX,GAAgB9R,EAAKvF,GACjC,OAAO/J,IAAM,WACT,IAAIqhB,EAAyBC,EAAKzU,EAAM0U,EAClCzR,EAAQ,IAAIhB,GAAeQ,EAAIP,MAAOO,EAAIN,QAASM,EAAIL,QAASkS,GAAmBpX,GAAQuF,EAAIH,cAC/FlI,EAAgB6I,EAAMb,SAnjFA,IAAP,EAmjF2Da,EAnjF1EX,eAmjFsFkS,EAjkD7F,SAAyCtX,GAC5C,IAAI/D,EAAyBna,EAAGghB,EAchC,OAbKnR,GAAQqO,GAWT/D,EAA0B,EAVH,QAAnBhM,GAAK+P,GAAO,IACZ/D,EAA0B,EAC1Bna,EAAImO,GAAK+P,GAAO,GAChB8C,EAAO5S,GAAK8P,IAGZ/D,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAEI2H,EAEApE,EAA2B5O,EAAG6mB,EAJ5BD,EAAO5iB,IAAU,SAACmD,GAAD,MAAiC,QAAjBA,EAAU,KAAe+K,GAC1D4U,EAAgBv/B,IAAI,SAACw/B,GAAD,OAAWA,EAAM,KAAIH,GAEzCvY,EAAUzK,IAAU,SAACwD,GAAD,MAAqC,QAAnBA,EAAY,KAAe8K,GAgBvE,OAdKnR,GAAQsN,IAWTO,EAA4B,EAC5BiY,EAAMxY,GAXmB,QAArBhP,GAAKgP,GAAS,IACdO,EAA4B,EAC5B5O,EAAIV,GAAK+O,KAGTO,EAA4B,EAC5BiY,EAAMxY,GAONO,GACJ,KAAK,EACDoE,EAAShT,EACT,MAEJ,KAAK,EACDgT,EAAS6T,EAIjB,MAAO,CAACC,EAAepc,GAAgC1gB,GAAKkH,EAAG3J,IAAI,SAACy/B,GAAD,OAAaA,EAAQ,KAAIJ,KAAS5T,GAEzG,KAAK,EACD,QAghDkHiU,CAAgC7X,GAAoC,MAA3BsX,GAAqCC,EAAMD,EAAwB,GAAKxU,EAAOwU,EAAwB,GAAKE,EAAOF,EAAwB,GAAI,CAAC,IAAI9W,GAAkB,GAAIgX,EAAMD,GAAMzU,IAAY,MAAC,EAAQ9C,IAAW,MAAC,EAAQA,GACxX8X,EAAY/X,GAA+B7C,EAAa,IAAI,GAC5D6a,EAAc7a,EAAa,GACjC,OAAOrK,GAAuB,MAAfklB,EAAuB9gB,GAAY8gB,GAAiBC,KAAa/hB,IAAM,WAClF,IAAIgiB,EAAMC,EAAqBC,EAAYC,EAAmCC,EACxE9R,EAAQ,IAAIxB,GAAegB,EAAMf,MAAOe,EAAMd,QAASc,EAAMb,QAASkS,GAAmBU,GAAY/R,EAAMX,cAC3GoB,EAAQ,IAAIzB,GAAewB,EAAMvB,MAAOuB,EAAMtB,SAAS,EAAOsB,EAAMpB,aAAcoB,EAAMnB,cACxFkT,EAlGX,SAAwCrhC,GAC3C,IAAIglB,EAAyBuU,EAAMlN,EAAMR,EAAMyV,EAC/C,GAAK5mB,GAAQ1a,GAgETglB,EAA0B,MAhEb,CACb,IAAIuc,EACEzgB,EAAY9H,GAAKhZ,GAEvB,GAA+B,OAD/BuhC,EAA0B1Z,GAAiD,IAAK,KAAM/G,EAAU,GAAIA,EAAU,KACzE,CACjC,IAAI0gB,EACEzgB,EAAcwgB,EAAwB,GAC5CC,EAA0Bjb,GAAkCxF,EAAY,GAAIA,EAAY,IACxFiE,EAA0B,EAC1BuU,EAAOvgB,GAAKhZ,GACZqsB,EAAOmV,EACP3V,EAAO5S,GAAKjZ,GACZshC,EAAUC,EAAwB,OAEjC,CACD,IAAIE,EACEpK,EAAcre,GAAKhZ,GAEzB,GAA+B,OAD/ByhC,EAA0B5Z,GAAiD,KAAM,KAAMwP,EAAY,GAAIA,EAAY,KAC9E,CACjC,IAAIqK,EACE7I,EAAc4I,EAAwB,GAC5CC,EAA0Bnb,GAAkCsS,EAAY,GAAIA,EAAY,IACxF7T,EAA0B,EAC1BuU,EAAOvgB,GAAKhZ,GACZqsB,EAAOqV,EACP7V,EAAO5S,GAAKjZ,GACZshC,EAAUG,EAAwB,OAEjC,CACD,IAAIE,EACExI,EAAcngB,GAAKhZ,GAEzB,GAA+B,OAD/B2hC,EAA0B9Z,GAAiD,MAAO,KAAMsR,EAAY,GAAIA,EAAY,KAC/E,CACjC,IAAIyI,EACEvI,EAAcsI,EAAwB,GAC5CC,EAA0Brb,GAAkC8S,EAAY,GAAIA,EAAY,IACxFrU,EAA0B,EAC1BuU,EAAOvgB,GAAKhZ,GACZqsB,EAAOuV,EACP/V,EAAO5S,GAAKjZ,GACZshC,EAAUK,EAAwB,OAEjC,CACD,IAAIE,EACEzF,EAAcpjB,GAAKhZ,GAEzB,GAA+B,OAD/B6hC,EAA0Bha,GAAiD,OAAQ,KAAMuU,EAAY,GAAIA,EAAY,KAChF,CACjC,IAAI0F,EACEzF,EAAcwF,EAAwB,GAC5CC,EAA0Bvb,GAAkC8V,EAAY,GAAIA,EAAY,IACxFrX,EAA0B,EAC1BuU,EAAOvgB,GAAKhZ,GACZqsB,EAAOyV,EACPjW,EAAO5S,GAAKjZ,GACZshC,EAAUO,EAAwB,QAGlC7c,EAA0B,KAS9C,OAAQA,GACJ,KAAK,EACD,MAAO,CAAC,CAACsc,EAASjV,GAAO5R,GAAU8e,GAAO1N,GAE9C,KAAK,EACD,QAyBgCkW,CAA+BlB,GAC/D,GAA+B,MAA3BQ,EAAiC,CACjC,IAAMW,EAA0BlZ,GAA+BuY,EAAwB,IACjF1+B,EAAM0+B,EAAwB,GAAG,GACjChV,EAAOgV,EAAwB,GAAG,GAClCjE,EAAaiE,EAAwB,GAC3C,OAAOzlB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASiJ,EAAY4E,EAAwB,IAAKzS,EAAMrB,eAAiBtS,GAAO2T,EAAMxB,MAAMpuB,IAAIgD,IAASkT,GAAOhB,GAAO,mDAAdgB,CAAkElT,GAAMo+B,MAAcA,KAAW/hB,IAAM,WAEjT,ODxgHb,SAAmBijB,EAAMC,EAAG/gC,GAC/B,GAAI8gC,EAAKtiC,IAAIuiC,GACT,MAAM,IAAIpkC,MAAM,0DAA4DokC,GAEhFD,EAAKriC,IAAIsiC,EAAG/gC,GCmgHIghC,CAAU5S,EAAMxB,MAAOprB,EAAKwoB,GAAgBkB,EAAK,GAAIA,EAAK,KACnD0U,SACN/hB,IAAM,kBAAMohB,GAAgB7Q,EAAOyS,EAAwB,QAGhE,IAAIhd,EAAyBuN,EAAM6P,EAAavH,EAAYwH,EAASC,EAAc5C,EAC7E6C,EAn/Cf,SAAyCxZ,GAC5C,IACI/D,EAAuCqd,EAAS1V,EAAQ2V,ENnpDtDhpB,EMopDAkpB,EN1oDAhhC,GAVA8X,EAAauL,IAAoB,SAAC/D,GACpC,IAAM2hB,EAAM3hB,EAAU,GACtB,GAAInJ,GAAmB8qB,GACnB,OAAO,EAGP,IAAMC,EAAavyB,GAAQsyB,EAAK,KAAM,QACtC,OAAQC,EAAW5jC,QARV,GAQkCgM,GAAU43B,EAAY,EARxD,KAQ0E7lC,MAAM8lC,GAAc9+B,KAAK,OM6oDhDklB,IN1oD5C,GAAIvO,WAIxB,EAHO,CAZM,EAYKlB,EAAW,GAAIA,EAAW,IM0oDhD,GAA+B,MAA3BkpB,EAAiC,CACjC,IAAMI,EN7qDP,SAAmC7Z,GACtC,OAAO/N,GAAQuC,IAAU,SAACwD,GAAD,OAAiBpJ,GAAmBoJ,EAAY,MAAK/F,GAAQuC,IAAU,SAACuD,GAAD,OAAenJ,GAAmBmJ,EAAU,MAAKiI,MM4qD7G8Z,CAA0BL,EAAwB,IAChEA,EAAwB,GAAYA,EAAwB,GAAmBA,EAAwB,GAAUhhC,EAAOohC,EAAyBpoB,MAQ/JwK,EAA0B,GAP1BA,EAA0B,EACXwd,EAAwB,GACvCH,EAAUO,EACVjW,EAAS6V,EAAwB,GACjCF,EAAeE,EAAwB,SAO3Cxd,EAA0B,EAE9B,OAAQA,GACJ,KAAK,EACD,MAAO,CAACmP,GAASjU,GAAOlB,IAAM,kBAAMlD,IAAQ,SAACxC,GACzC,IAAMshB,EAAIthB,EAAW,GACrB,OAAO0G,GAAYtI,GAAckjB,GAAK,GAAK/C,GAAW,EAAG+C,MAC1DyH,OAAY5nB,GAAU,KAAM6nB,EAAc3V,EAAQ,GAAI,IAE7D,KAAK,EACD,QAu9CoCmW,CAAgCjC,GAChE,GAA+B,MAA3B0B,EAAiC,CACjC,IAAMQ,EAA0Bja,GAA+ByZ,EAAwB,IACvFvd,EAA0B,EAC1BuN,EAAOgQ,EAAwB,GAC/BH,EAAcG,EAAwB,GACtC1H,EAAa0H,EAAwB,GACrCF,EAAUU,EAAwB,GAClCT,EAAeC,EAAwB,GACvC7C,EAAgBqD,EAAwB,OAEvC,CACD,IAAMC,EAA0BtJ,GAAgCmH,GAChE,GAA+B,MAA3BmC,EAAiC,CACjC,IAAMC,EAA0Bna,GAA+Bka,EAAwB,IACvFhe,EAA0B,EAC1BuN,EAAOyQ,EAAwB,GAC/BZ,EAAcY,EAAwB,GACtCnI,EAAamI,EAAwB,GACrCX,EAAUY,EAAwB,GAClCX,EAAeU,EAAwB,GACvCtD,EAAgBuD,EAAwB,QAGxCje,EAA0B,EAGlC,OAAQA,GACJ,KAAK,EACD,OAAOpJ,GA5mFK,IAAP,EA4mF8C2T,EA5mF7DpB,cA4mFsEnO,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASmO,EAAc5C,GAAgBnQ,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAG1lB,GAAK0rB,EAAMvB,QAASuE,QAAO,EAAQsI,EAAYuH,EAAa7S,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO8S,OAE9T,KAAK,EACD,IAAMa,EAA0B5D,GAA2BuB,GAC3D,GAA+B,MAA3BqC,EAAiC,CACjC,IAAMC,EAA0Bra,GAA+Boa,EAAwB,IACjF9W,EAAO8W,EAAwB,GAC/BE,EAAeF,EAAwB,GAC7C,OAAOtnB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASiP,EAAcD,EAAwB,IAAK5T,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAGnO,GAAMglB,GAAgB7Q,EAAO4E,GAAS/H,EAAM3R,GAAU,CAAC,GAAI2J,QAA+BmL,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO4T,EAAwB,QAGhY,IAAI5a,EAA2BuW,EAAYuE,EAASlW,EAAQmW,EAAMC,EAAcC,EAC1EC,EAhoB3B,SAAyC1a,GAC5C,IAAI/D,EAAyB0e,EAAQhF,EAAO7S,EAAM6Q,EbznE5BzkB,EAAGrb,Ea0nEzB,GAAK8d,GAAQqO,GAmBT/D,EAA0B,MAnBT,CACjB,IAAI2e,EACExK,EAAcngB,GAAK+P,GAKM,OAJ/B4a,EAA0B5E,QAA+B,EAAQ,KAAK,SAAC/H,GACnE,IAAIjW,EACJ,OAAsG,MAAxEqd,IAArBrd,EAAciW,GAAsD,GAAIjW,EAAY,MAC9FoY,EAAY,GAAIA,EAAY,MAE3BnU,EAA0B,EAC1B0e,EAASC,EAAwB,GACjCjF,EAAQiF,EAAwB,GAChC9X,EAAO5S,GAAK8P,GACZ2T,EAAY1jB,GAAK+P,IAGjB/D,EAA0B,EAMlC,OAAQA,GACJ,KAAK,EACD,IAAM8Z,EAAariB,IAAO,SAAC4c,GAAD,OAAiB+E,GAAmC/E,EAAY,GAAIA,EAAY,MAAKqF,GACzGkF,GblpEQ3rB,EakpEeyrB,EAAO5kC,OAAS,EblpE5BlC,EakpE+B4d,KbjpEjDhU,GAAWyR,GAAG,SAAC8M,GAAD,OAAWnoB,MamwExB,OAjHa,SAACinC,EAAUC,EAAiBC,EAAaC,EAAcC,EAASC,GACzE,IAAIC,EAAaC,EACjBhrB,EACA,OAAa,CACT,IAAMirB,EAAOR,EAAUtG,EAAcuG,EAAiBT,EAAUU,EAAaO,EAAWN,EAActmC,EAAMumC,EAASzE,EAAU0E,EAC3H3b,OAAyB,EAAEgc,OAAM,EAAEC,OAAO,EAAExJ,OAAU,EAC1D,GAAKtgB,GAAQ8kB,GAeTjX,EAA4B,MAfT,CACnB,IAAIkc,EACErI,EAAcpjB,GAAKwmB,GAEM,OAD/BiF,EAA0B1F,GAA+B2E,EAAQ,KAAK,SAAC7K,GAAD,OAAiB,IAAMuD,EAAY,GAAIA,EAAY,MAErH7T,EAA4B,EAC5Bgc,EAAStrB,GAAKumB,GACdgF,EAAUC,EAAwB,GAClCzJ,EAAahiB,GAAKwmB,IAGlBjX,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACDsb,GAAW,EACXC,EAAkBngC,GAAKq3B,EAAYuC,GACnCwG,EAAcV,EACdW,EAAeM,EACfL,EAAU/iC,IAAI,SAACm7B,GACX,IAAMtX,EAAQsX,EAAY,GAC1B,OAAO14B,GAAK,CAACohB,EAAM,GAAGpM,UAAWoM,EAAM,IAAKsX,EAAY,MACzD1f,GAAI6nB,EAAS9mC,IAChBwmC,EAAcK,EACd,SAASnrB,EAEb,KAAK,EACD,IAAIoP,OAAyB,EAAEkc,OAAQ,EAAEC,OAAY,EAiBrD,OAhBKjqB,GAAQ8kB,GAcThX,EAA4B,EAVY,OAHlC4b,EAAcprB,GAAKwmB,GAAUT,GAA+B2E,EAAQ,KAAK,SAACnuB,GAC5E,IAAIuL,EACJ,OAAwI,MAA9GgH,GAA8C,IAAK1D,GAApEtD,EAAYvL,GAA4F,GAAIuL,EAAU,MAChIsjB,EAAY,GAAIA,EAAY,MAC3B5b,EAA4B,EAC5Bkc,EAAWzrB,GAAKumB,GAChBmF,EAAe3rB,GAAKwmB,IAGpBhX,EAA4B,EAM5BA,GACJ,KAAK,EACDqb,GAAW,EACXC,EAAkBngC,GAAKghC,EAAcpH,GACrCwG,EAAcV,EACdW,EAAergC,GAAKzC,IAAI,SAAC0jC,GAAD,OAAY5pB,GAAQ4pB,KAASlnC,GAAM4mC,GAC3DL,EAAUL,EACVM,EAAcQ,EACd,SAAStrB,EAEb,KAAK,EACD,IAAIsP,OAAyB,EAAEmc,OAAQ,EAAEC,OAAY,EAsBrD,OArBKpqB,GAAQ8kB,GAmBT9W,EAA4B,EAfY,OAHlCyb,EAAcnrB,GAAKwmB,GAAUT,GAA+B2E,EAAQ,KAAK,SAACqB,GAC5E,IAAI1N,EACJ,OAAgJ,MAAlHvP,GAA8C,IAAK1D,GAAxEiT,EAAc0N,GAAgG,GAAI1N,EAAY,MACxI8M,EAAY,GAAIA,EAAY,MACZ,MAAXd,GACA3a,EAA4B,EAC5Bmc,EAAW5rB,GAAKumB,GAChBsF,EAAe9rB,GAAKwmB,IAOxB9W,EAA4B,EAM5BA,GACJ,KAAK,EACDmb,GAAW,EACXC,EAAkBngC,GAAKmhC,EAAcvH,GACrCwG,EAAc7iC,IAAI,SAAC8jC,GAAD,OAAYhqB,GAAQgqB,KAAStnC,GAC/CsmC,EAAeM,EACfL,EAAUL,EACVM,EAAcW,EACd,SAASzrB,EAEb,KAAK,EACD,OAAIirB,EACO,CAAC,CAAChB,EAASvE,EAAY9jB,GAAQspB,IAAY3gC,GAAK+4B,EAAW1hB,GAAQuiB,IAAeiC,QAGzF,IAQ5B,OAGDpmB,EAAK,EAAMoB,UAAS,EAAQA,KAASopB,EAAU/X,GAE1D,KAAK,EACD,QAifgDoZ,CAAgCpE,GAChE,GAA+B,MAA3B4C,EAAiC,CACjC,IAAMyB,EAA0Bpc,GAA+B2a,EAAwB,IACvFlb,EAA4B,EAC5BuW,EAAa2E,EAAwB,GAAG,GACxCJ,EAAUI,EAAwB,GAAG,GACrCtW,EAAS+X,EAAwB,GACjC5B,EAAOG,EAAwB,GAAG,GAClCF,EAAeE,EAAwB,GACvCD,EAAgB0B,EAAwB,OAEvC,CACD,IAAMC,EAtxB/B,SAAwC5yB,GAC3C,IAqCIgW,EAA2BuW,EAAY3R,EAAQiY,EArC7CC,EAAe,SAACC,EAAUtpB,EAASupB,EAAmBC,GACxDH,EACA,OAAa,CACT,IAAMr6B,EAAOs6B,EAAUvqB,EAAMiB,EAASypB,EAAgBF,EAAmBxc,EAAQyc,EAC7ExgB,OAAuB,EAAE0gB,OAAO,EAAE7Z,OAAI,EAAE6Q,OAAS,EACrD,GAAKhiB,GAAQqO,GAeT/D,EAA0B,MAfT,CACjB,IAAI2gB,EACE7kB,EAAY9H,GAAK+P,GAEQ,OAD/B4c,EAA0BnH,GAA6BxzB,EAAM,CAAC,KAAM8V,EAAU,GAAIA,EAAU,MAExFkE,EAA0B,EAC1B0gB,EAAUC,EACV9Z,EAAO5S,GAAK8P,GACZ2T,EAAY1jB,GAAK+P,IAGjB/D,EAA0B,EAMlC,OAAQA,GACJ,KAAK,EACDsgB,EAAWt6B,EACXgR,EAAUrY,GAAKzC,IAAI,SAAC05B,GAAD,OAAOngB,GAAUmgB,KAAI8K,GAAU3qB,GAClDwqB,EAAoB5hC,GAAK+4B,EAAW+I,GACpCD,EAAY3Z,EACZ,SAASwZ,EAEb,KAAK,EACD,MAAO,CAACrqB,GAAQD,GAAMC,GAAQyqB,GAAgB1c,GAGtD,QAIR,GAAKrO,GAAQnI,GAeTgW,EAA4B,MAfX,CACjB,IAAIqd,EACE7kB,EAAc/H,GAAKzG,GAEM,OAD/BqzB,EAA0BhH,QAAiC,EAAQ7d,EAAY,GAAIA,EAAY,MAE3FwH,EAA4B,EAC5BuW,EAAa8G,EACbzY,EAASlU,GAAK1G,GACd6yB,EAAcpsB,GAAKzG,IAGnBgW,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,IAAMtC,EAAeof,EAAavmC,GAAOggC,GAAatkB,KAASA,KAAS2S,GACxE,MAAO,CAAC,MAAC,EAAQ2R,EAAY7Y,EAAa,IAAKtiB,GAAKyhC,EAAanf,EAAa,IAAKA,EAAa,IAEpG,KAAK,EACD,IAAIuC,EAA2B6a,EAASvT,EAAQ+V,EAChD,GAAKnrB,GAAQnI,GAeTiW,EAA4B,MAfX,CACjB,IAAIsd,EACEzO,EAAcre,GAAKzG,GAEM,OAD/BuzB,EAA0BtH,QAA6B,EAAQ,CAAC,KAAMnH,EAAY,GAAIA,EAAY,MAE9F7O,EAA4B,EAC5B6a,EAAUyC,EACVhW,EAAS7W,GAAK1G,GACdszB,EAAc7sB,GAAKzG,IAGnBiW,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,IAAIE,EAA2Bqd,EAAcvW,EAAQwL,EACrD,GAAKtgB,GAAQoV,GAeTpH,EAA4B,MAfV,CAClB,IAAIsd,EACEnN,EAAc7f,GAAK8W,GAEM,OAD/BkW,EAA0BpH,GAAiC9/B,GAAOukC,GAAUxK,EAAY,GAAIA,EAAY,MAEpGnQ,EAA4B,EAC5Bqd,EAAeC,EACfxW,EAASvW,GAAK6W,GACdkL,EAAahiB,GAAK8W,IAGlBpH,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,IAAMvC,EAAiBkf,EAAavmC,GAAOukC,GAAU7oB,KAASA,KAASgV,GACvE,MAAO,CAAC,CAACtuB,IAAI,SAAC+kC,GAAD,OAASxrB,GAAUwrB,KAAM5C,GAAU0C,EAAc5f,EAAe,IAAKlL,GAAgB,CAAC4qB,EAAa7K,GAAa7U,EAAe,IAAKA,EAAe,IAEpK,KAAK,EACD,OAIZ,KAAK,EACD,SAuqB4C+f,CAA+BrF,GAC/D,GAA+B,MAA3BsE,EAAiC,CACjC,IAAMgB,EAA0Brd,GAA+Bqc,EAAwB,IACvF5c,EAA4B,EAC5BuW,EAAaqG,EAAwB,GAAG,GACxC9B,EAAU8B,EAAwB,GAAG,GACrChY,EAASgZ,EAAwB,GACjC7C,EAAO6B,EAAwB,GAAG,GAClC5B,EAAe4B,EAAwB,GACvC3B,EAAgB2C,EAAwB,QAGxC5d,EAA4B,EAGpC,OAAQA,GACJ,KAAK,EACD,OAAO3M,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASoP,EAAcC,GAAgBjU,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAe,MAAX8Z,OAAoB,EAAUniC,IAAI,SAACrC,GAAD,OAAOuc,GAAMglB,GAAgB7Q,EAAO1wB,MAAK8/B,GAAS0E,IAAWvE,EAAY59B,IAAI,SAAC0jC,GAAD,OAAY1jC,IAAI,SAAC6kB,GAAD,OAAS3K,GAAMglB,GAAgB7Q,EAAOxJ,MAAO6e,KAAStB,GAAO/T,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAOpC,OAElc,KAAK,EACD,IAAI3E,EAA2B3O,EAAGusB,EAAS1J,EAAW2J,EACtD,GAAK3rB,GAAQmmB,GAiBTrY,EAA4B,MAjBP,CACrB,IAAI8d,EACExlB,EAAY9H,GAAK6nB,GAEvB,GAA+B,OAD/ByF,EAA0BhN,GAA+BxY,EAAU,GAAIA,EAAU,KAC5C,CACjC,IAAMylB,EAA0Bzd,GAA+B7P,GAAK4nB,IACpErY,EAA4B,EAC5B3O,EAAIysB,EACJF,EAAUG,EAAwB,GAClC7J,EAAY1jB,GAAK6nB,GACjBwF,EAAgBE,EAAwB,QAGxC/d,EAA4B,EAMpC,OAAQA,GACJ,KAAK,EACD,OAAO5M,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI5lB,GAAK+4B,EAAW2J,GAAgB9W,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAG1P,EAAG0V,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO6W,OAEjQ,KAAK,EACD,IAAMI,EAzU3C,SAAoCzd,GACvC,IAAI0d,EACAzhB,EAAiD2J,EAAKhC,EAgB1D,OAfKjS,GAAQqO,GAaT/D,EAA0B,EAZO,QAA7BhM,GAAK+P,GAAO,GAAGpQ,WACfqM,EAA0B,EACVhM,GAAK+P,GACX/P,GAAK+P,GAAO,GACtB4F,EAAM3V,GAAK+P,GAAO,GAClB4D,EAAS1T,GAAK8P,IAGd/D,EAA0B,EAM1BA,GACJ,KAAK,EACD,IAAM0hB,EAA0BrH,GAAmC1S,GACnE,GAA+B,MAA3B+Z,EAAiC,CACjC,IAAMta,EAAOsa,EAAwB,GAC/BvZ,EAASuZ,EAAwB,GACvC,MAAO,CAAC,WAAYta,EAAM+H,GAASxwB,GAAK,CAAC,oBAAqBgrB,GAAMvC,GAAO3R,GAAU,CAAC,kBAAmBkU,KAAQxB,GAGjH,OAGR,KAAK,EACD,IAAI5E,EAA2Boe,EAASnY,EAAKgB,EAAQ4V,EAgBrD,OAfK1qB,GAAQqO,GAaTR,EAA4B,EAZyC,KAAhEke,EAAUztB,GAAK+P,GAAO,IAAcpQ,UAAUrU,QAAQ,OAAgBiT,GAASkvB,EAAQ9tB,UAAW,OAAW8tB,EAAQ9tB,UAAU7Z,QAAU,GAC1IypB,EAA4B,EAC5Boe,EAAU3tB,GAAK+P,GAAO,GACtByF,EAAMxV,GAAK+P,GAAO,GAClByG,EAASvW,GAAK8P,GACdqc,EAAcpsB,GAAK+P,IAGnBR,EAA4B,EAM5BA,GACJ,KAAK,EACD,IAAM/B,EAAOmgB,EAAQhuB,UACrB,MAAO,CAAC,WAAY8B,GAAU,CAAC+L,EAAK1f,MAAM,EAAI0f,EAAK1nB,OAAS,EAAK,GAAI0vB,IAAO/T,GAAU2qB,GAAc5V,GAExG,KAAK,EACD,IAAIhH,EAA0C0H,EAAQ8J,EAgBtD,OAfKtf,GAAQqO,GAaTP,EAA4B,EAZK,sBAA7BxP,GAAK+P,GAAO,GAAGpQ,WACf6P,EAA4B,EACrBxP,GAAK+P,GAAO,GACT/P,GAAK+P,GAAO,GACtBmH,EAASjX,GAAK8P,GACdiR,EAAchhB,GAAK+P,IAGnBP,EAA4B,EAM5BA,GACJ,KAAK,EACD,IAAMiE,EAAS9O,IAAU,SAAC3d,GAAD,MAAiB,oBAATA,EAAE,KAA2BkwB,GACxDliB,EAAMuP,IAAU,SAACklB,GAAD,MAAqB,oBAAXA,EAAI,KAA2BvS,GAC/D,OAAIxV,GAAQ1M,QACR,EAGO,CAAC,WAAYye,EAAQ9oB,GAAKq2B,EAAavN,GAASxT,GAAKjL,IAGpE,KAAK,EACD,IAAI0a,EAA0Cke,EAAQC,EAgBtD,OAfKnsB,GAAQqO,GAaTL,EAA4B,EAZK,mBAA7B1P,GAAK+P,GAAO,GAAGpQ,WACf+P,EAA4B,EACrB1P,GAAK+P,GAAO,GACT/P,GAAK+P,GAAO,GACtB6d,EAAS3tB,GAAK8P,GACd8d,EAAc7tB,GAAK+P,IAGnBL,EAA4B,EAM5BA,GACJ,KAAK,EACD,IAAMuE,EAAStP,IAAU,SAACmpB,GAAD,MAAqB,iBAAXA,EAAI,KAAwBF,GACzDG,EAAQxpB,IAAU,SAACypB,GAAD,MAAqB,iBAAXA,EAAI,KAAwBJ,GAC9D,OAAIlsB,GAAQqsB,QACR,EAGO,CAAC,QAAS9Z,EAAQtpB,GAAKkjC,EAAa5Z,GAAShU,GAAK8tB,IAGjE,KAAK,EACD,WA4NwCE,CAA2BpG,GAC3D,GAA+B,MAA3B2F,EAAiC,CACjC,IAAMU,EAA0Bpe,GAA+B0d,EAAwB,IACjF/Z,EAAS+Z,EAAwB,GACjCW,EAAMX,EAAwB,GAC9BY,GAAeZ,EAAwB,GAC7C,OAAO5qB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASiT,GAAcF,EAAwB,IAAK3X,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAG4d,EAAKjmC,IAAI,SAACw/B,GAAD,OAAWA,EAAM,KAAIjU,GAAS8C,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO2X,EAAwB,QAG7U,IAAMG,GAA0BrL,IAA0B,EAAM6E,GAChE,GAA+B,MAA3BwG,GAAiC,CACjC,IAAMC,GAA0Bxe,GAA+Bue,GAAwB,IACjF/J,GAAQ+J,GAAwB,GAChCE,GAAeF,GAAwB,GAC7C,OAAOzrB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASoT,GAAcD,GAAwB,IAAK/X,EAAMrB,gBAAmB8S,EPr9G/N,SAA6BzuB,GAChC,IAAM0T,EAAeJ,GAAiB,EAAGtT,GACzC,IAAK/Q,EAAOykB,EAAa,GAAIzL,MACzB,MAAO,IAAI1c,MAAM,qBAErB,OAAOmoB,EAAa,GOg9GqNuhB,CAAoBlK,IAAS2D,EAAuB,SAACwG,GAC1O,OAAI/sB,GAAQ+sB,GACDjtB,KAGAtZ,IAAI,SAAC6f,GACR,IAAM2mB,EAAQ3mB,EAAY,GAC1B,OAAO,IAAI6E,GAAO,EAAG8hB,EAAMvkC,OAAO,GAAIgxB,GAAS8M,EAAoByG,EAAMvkC,OAAO,IAAK4d,EAAY,QP3jHtHza,EO4jH+C,SAACye,GAAD,OAAWvjB,EAAOujB,EAAM5hB,OAAO,GAAG,GAAI6V,GAAKyuB,GAAStkC,OAAO,GAAG,KPviH7IiY,GApBM,SAAPhC,EAAQwS,GAAD,OAAa5M,IAAM,WAC5B,IAAMiH,EAAeZ,GAAoB/e,EAAGslB,GACtCnnB,EAAQwhB,EAAa,GACrB3M,EAAa0B,GAAQiL,EAAa,IACxC,GAAIvL,GAAQpB,GAAa,CACrB,GAAI9X,EAAOiD,EAAO+V,MACd,OAAOumB,KAGP,MAAO,IAAIjjC,MAAM,6CAKrB,OAAO8d,GAAO1a,IAAI,SAAC2J,GAAD,MAAO,CAACA,EAAG2P,QAAUQ,GAAQmK,GAAO7L,KAAe0F,IAAM,WACvE,IAAMmH,EAAiBd,IAAoB,SAAC9P,GAAD,OAAWjP,EAAEiP,KAAO9Q,GAC/D,OAAOmX,GAAOnB,GAAU,CAACzB,GAAKM,GAAa6M,EAAe,KAAMnH,IAAM,kBAAM5F,EAAK+M,EAAe,eAI/F/M,COuiH4IquB,MP5jHtJ,IAAoCnhC,GO8jHc46B,EAAc,SAACyG,GAAD,OAAY,IAAIpe,GAAkB,EAAK7O,GAAQitB,GAAsC,IAAIve,GAAiB,GAAjDpQ,GAAK2uB,GAAOxkC,OAAO,GAAG,GAAgC+c,GAAOlB,IAAM,kBAAMlD,IAAQ,SAACxC,GAC1J,IAAMsuB,EAAWtuB,EAAWnW,OAAO,GAC7B8pB,EAAS3T,EAAWnW,OAAO,GAAG,GACpC,OAAO6c,GAAYE,GAAOlB,IAAM,WAC5B,IAAMwS,EAAMnN,GAAgCnjB,IAAI,SAACy/B,GAAD,OAAaA,EAAQ,KAAI1T,IACzE,OAAOrR,GAAStC,EAAWnW,OAAO,GAAG,GAAuC6c,GAAY,IAAIuJ,GAAkB,EAAGoO,GAAW9zB,GAAK0rB,EAAMvB,QAAS9sB,IAAI,SAAC2mC,GAAD,OAAaA,EAAQ,KAAI5a,IAAUuE,EAAKjC,GAAQA,EAAMrB,eAA/JkS,GAAgB7Q,EAAOtC,GAAwJjO,IAAM,kBAASxd,EAAOomC,EAAUptB,MAAgDumB,KAApC/gB,GAAYkhB,EAAW0G,eAElSD,OAAUpY,EAAMrB,eAcflO,GAAYkhB,GAdqBC,EAAuB,SAAC2G,GACzD,OAAIvnB,IAAO,SAACyH,GACR,OAAIA,EAAQ7kB,OAAO,GAAG,KAMvB69B,GACQ9/B,IAAI,SAAC6mC,GAAD,OAAc,IAAIniB,GAAO,EAAG,EAAC,EAAOmiB,EAAQ5kC,OAAO,GAAG,GAAI4kC,EAAQ5kC,OAAO,GAAG,IAAKg+B,EAAoB4G,EAAQ5kC,OAAO,OAAO2kC,GAG/HA,IAEgC9G,MAAchiB,IAAM,kBAAMohB,GAAgB7Q,EAAO+X,GAAwB,QAGxH,IAAMU,GAA0B/P,GAAwB4I,GACxD,GAA+B,MAA3BmH,GAAiC,CACjC,IAAMC,GAA0Bnf,GAA+Bkf,GAAwB,IACjF3T,GAAS2T,GAAwB,GACjC/vB,GAAiC,EAA7B+vB,GAAwB,GAC5BE,GAAeF,GAAwB,GAC7C,OAAOpsB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAAS+T,GAAcD,GAAwB,IAAK1Y,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAGtR,GAAG0f,GAAWtD,GAAO,GAAIA,GAAO,GAAI9E,GAAQA,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO0Y,GAAwB,QAGlV,IAAIvf,GAA2Byf,GAAQC,GAASC,GAAcC,GACxDC,GArkBvD,SAAmCxf,GACtC,IACI/D,EAAwCwjB,EAAQ7b,EAAQyY,EAC5D,GAAK1qB,GAAQqO,GAoBT/D,EAA0B,MApBT,CACjB,IAAMyjB,EAA0BpJ,GAAmCtW,GACpC,MAA3B0f,GACYA,EAAwB,GAAYA,EAAwB,GAAyC,IAArCzvB,GAAK+P,GAAO,GAAGzkB,QAAQ,MAC/F0gB,EAA0B,EACnBhM,GAAK+P,GAAO,GACT/P,GAAK+P,GAAO,GACtByf,EAASC,EAAwB,GACjC9b,EAAS8b,EAAwB,GACjCrD,EAAcpsB,GAAK+P,IAGnB/D,EAA0B,GAI9BA,EAA0B,EAMlC,OAAQA,GACJ,KAAK,EACD,MAAO,CAACwjB,EAAQ7kC,GAAKyhC,EAAaoD,GAAS7b,GAE/C,KAAK,EACD,QAuiB4E+b,CAA0B7H,GAC1D,GAA+B,MAA3B0H,GAAiC,CACjC,IAAMI,GAA0B7f,GAA+Byf,GAAwB,IACnEA,GAAwB,GAA+H,KAA1HnH,EAAMv9B,GAAK0rB,EAAMvB,QAAS9sB,IAAI,SAAC0nC,GAAD,OAAaA,EAAQ,KAAIL,GAAwB,MAAcjkC,QAAQ,aAA+D,IAAhC88B,EAAI98B,QAAQ,YAA+B88B,EAAI98B,QAAQ,MAAQ,EAQhPokB,GAA4B,GAP5BA,GAA4B,EAC5Byf,GAASI,GAAwB,GACjCH,GAAUO,GAAwB,GAClCN,GAAeE,GAAwB,GACvCD,GAAgBK,GAAwB,SAO5CjgB,GAA4B,EAEhC,OAAQA,IACJ,KAAK,EACD,OAAO9M,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASkU,GAAcC,IAAgB/Y,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAG1lB,GAAK0rB,EAAMvB,QAAS9sB,IAAI,SAAC2nC,GAAD,OAAaA,EAAQ,KAAIV,UAAU,EAAQ5Y,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO6Y,QAExU,KAAK,EACD,IAAMU,GAA0BzJ,GAAmCwB,GACnE,GAA+B,MAA3BiI,GAAiC,CACjC,IAAMC,GNlyGnE,SAA4ChgB,GAC/C,OAAO3B,IAAM,SAACrG,GACV,IAAI0F,EACEzmB,EAAI+gB,EAAY,GAChB4N,EAAM5N,EAAY,GAClBioB,EAAoBzxB,GAASvX,EAAG,MAChC2mB,EAAUhO,GAAQ3Y,EAAG,MAAQgpC,EAAoB,KAAO,IAC9D,MAAO,CAACriB,GAAUF,EAAe,IAAIvhB,EAAUypB,GAAO,IAAI5K,GAAc0C,EAAYG,SAAS5C,UAAWyC,EAAYG,SAAS3C,YAAawC,EAAYG,SAAS1C,QAAUyK,EAAIxK,UAAYnkB,EAAElB,OAAU6nB,EAAQ7nB,YAC9MsoB,IAAM,SAACtG,GAAD,OAvWsC0F,EAuWY1F,EAAU,GAvWhB7I,EAuWoB6I,EAAU,GApW5E,CADD6F,EAAUH,EAAK/N,aACHgO,EAAe,IAAIvhB,EAAU+S,GAAK,IAAI8L,GAAc0C,EAAYG,SAAS5C,UAAY/L,EAAEgM,YAAcuC,EAAK1nB,OAAU6nB,EAAQ7nB,OAAQ2nB,EAAYG,SAAS1C,QAASuC,EAAYG,SAASzC,aAHtM,IAA4CqC,EAAMvO,EACjDwO,EACEE,IAqWkFoC,IM0xGQkgB,CAAmCH,GAAwB,IACrFI,GAA0BpgB,GAA+BggB,GAAwB,IACjFK,GAAeL,GAAwB,GAC7C,OAAOltB,GAAOwS,GAAwCmB,GAASvP,GAAY,IAAIuJ,GAAkB,GAAI4K,GAASgV,GAAcD,GAAwB,IAAK3Z,EAAMrB,eAAiBlO,GAAY,IAAIuJ,GAAkB,EAAGoO,GAAW9zB,GAAK0rB,EAAMvB,QAAS9sB,IAAI,SAACkoC,GAAD,OAAaA,EAAQ,KAAIL,KAA2B1kB,GAAgCnjB,IAAI,SAACmoC,GAAD,OAAaA,EAAQ,KAAIN,KAA2BxZ,GAAQA,EAAMrB,eAAgBlP,IAAM,kBAAMohB,GAAgB7Q,EAAO2Z,GAAwB,QAI7d,OAAIxuB,GAD4BoO,GAA+B+X,GAC3B,KAIhChrB,GAAOhB,GAAO,6BAAdgB,CAA4CgrB,GAHrCE,gB,8mCChyHxE,IAAMuI,GAAb,WACI,aAAc,WACV9rC,KAAK+rC,OAAS,GAFtB,mCAII,WAEI,OADU/rC,KACD+rC,SANjB,qBAQI,gBARJ,KAgBO,SAASC,KACZ,OAAO,IAAIF,GAsBR,SAASG,GAAiC1yB,EAAG/W,GAChD+W,EAAEwyB,OAAUxyB,EAAEwyB,OAASvpC,EAGpB,IAAM0pC,GAAb,a,sRAAA,U,IAAA,G,EAAA,E,kZACI,WAAY3b,EAAOC,EAAS2b,EAAeC,EAAwBC,GAAc,yBAC7E,gBACK9b,MAAQA,EACb,EAAKC,QAAUA,EACf,EAAK2b,cAAgBA,EACrB,EAAKC,uBAAyBA,EAC9B,EAAKC,aAAeA,EANyD,EADrF,cAAqDnlC,GAqS9C,SAASolC,GAAsBxjC,EAAGye,EAAOyB,GAC5C,OAAOlgB,EAAEkgB,GAON,SAASujB,GAAuBC,EAAKC,EAAKC,GAC7C,IAAM5jC,EAAI,CAAC0jC,EAAKC,GAChB,OAAO/oC,IAAI,SAACipC,GACR,OAAQA,EAAMjmC,KACV,KAAK,EACD,OAAO,IAAIolB,GAAa,EAAGygB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAI6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,IAEjG,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGygB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAI6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,IAEjG,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGwgB,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,IAEhG,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGygB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAI6jC,EAAMhnC,OAAO,IAAK2mC,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAKinC,IAAM,SAACC,GAAD,OAAYP,GAAsBxjC,EAAE,GAAIA,EAAM+jC,KAASF,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,IAEpO,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGygB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAI6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAEnI,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGwgB,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAK2mC,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAKinC,IAAM,SAACE,GAAD,OAAYR,GAAsBxjC,EAAE,GAAIA,EAAMgkC,KAASH,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,IAEnO,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAGwgB,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAElI,KAAK,EACD,OAAO,IAAImmB,GAAa,EAAG6gB,EAAMhnC,OAAO,IAE5C,KAAK,EACD,OAjCT,SAAqCukC,EAAOphC,EAAGisB,EAAM1D,GACxD,OAAOvoB,EAAE,CAACisB,EAAM1D,IAgCG0b,CAA4BjkC,EAAMA,EAAE,GAAI6jC,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAEjF,KAAK,GACD,OAAO,IAAImmB,GAAa,GAAI6gB,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAE9D,KAAK,GACD,OAAO,IAAImmB,GAAa,GAAI6gB,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAE9D,KAAK,GACD,OAAO,IAAImmB,GAAa,GAAI6gB,EAAMhnC,OAAO,GAAIgnC,EAAMhnC,OAAO,IAE9D,QACI,OAAO,IAAImmB,GAAa,EAAGwgB,GAAsBxjC,EAAE,GAAIA,EAAM6jC,EAAMhnC,OAAO,IAAKgnC,EAAMhnC,OAAO,OAGrG+mC,GAGA,SAASM,GAA4BR,EAAKC,EAAKC,GAClD,IAAM5jC,EAAI,CAAC0jC,EAAKC,GAChB,OAAO/oC,IAAI,SAACupC,GACR,OAAQA,EAAMvmC,KACV,KAAK,EACD,OAAO,IAAIqlB,GAAkB,EAAGwgB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAImkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAEtG,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGugB,GAAsBxjC,EAAE,GAAIA,EAAMmkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,IAExJ,KAAK,GACD,OAAO,IAAIomB,GAAkB,GAAIkhB,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,IAEpF,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGkhB,EAAMtnC,OAAO,GAAIjC,IAAI,SAACwpC,GAAD,OAAUF,GAA4BlkC,EAAE,GAAIA,EAAE,GAAIokC,KAAOD,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAEjJ,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGihB,GAA4BlkC,EAAE,GAAIA,EAAE,GAAImkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAE3G,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGwgB,GAAuBzjC,EAAE,GAAIA,EAAE,GAAImkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAEtG,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGkhB,EAAMtnC,OAAO,GAAIjC,IAAI,SAACslB,GAAD,OAAUsjB,GAAsBxjC,EAAE,GAAIA,EAAMkgB,KAAOikB,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAE3I,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGkhB,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,IAElE,KAAK,GACD,OAAO,IAAIomB,GAAkB,GAAIroB,IAAI,SAACmpC,GAAD,OAAYP,GAAsBxjC,EAAE,GAAIA,EAAM+jC,KAASI,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAE/H,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAG6gB,IAAM,SAACO,GAAD,OAAUzpC,IAAI,SAAC0pC,GAAD,OAAUJ,GAA4BlkC,EAAE,GAAIA,EAAE,GAAIskC,KAAOD,KAAOF,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,GAAIjC,IAAI,SAAC0jC,GAAD,OAAY1jC,IAAI,SAAC2pC,GAAD,OAAUL,GAA4BlkC,EAAE,GAAIA,EAAE,GAAIukC,KAAOjG,KAAS6F,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAEhR,KAAK,GACD,OAAO,IAAIomB,GAAkB,GAAIroB,IAAI,SAAC4f,GAAD,MAAe,CAACgpB,GAAsBxjC,EAAE,GAAIA,EAAMwa,EAAU,IAAKA,EAAU,MAAK2pB,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,IAExJ,KAAK,EACD,OAAO,IAAIomB,GAAkB,EAAGugB,GAAsBxjC,EAAE,GAAIA,EAAMmkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,IAEtH,KAAK,GACD,OAAO,IAAIomB,GAAkB,GAAIkhB,EAAMtnC,OAAO,GAAIsnC,EAAMtnC,OAAO,IAEnE,QACI,OAAO,IAAIomB,GAAkB,EAAGkhB,EAAMtnC,OAAO,GAAI4mC,GAAuBzjC,EAAE,GAAIA,EAAE,GAAImkC,EAAMtnC,OAAO,IAAKsnC,EAAMtnC,OAAO,OAG5H+mC,GAGA,SAASY,GAA2Cxc,EAAK4b,GAC5D,OAAOM,IAA4B,SAAChkB,GAAD,OAxHhC,SAAgD8H,EAAK9H,GACxD,OAAOA,EAuHsCukB,CAAuCzc,EAAK9H,MAAO,SAAC1F,GAAD,OApH7F,SAAkDwN,EAAKiE,EAAM1D,GAChE,IAAMvV,EAAagV,EAAIsb,uBAAuBrX,GAC9C,OAAkB,MAAdjZ,EACO,IAAIgQ,GAAa,EAAGtJ,GAAY,IAAIsJ,GAAa,EAAGhQ,EAAW,GAAIuV,IAASvV,EAAW,QAAI,EAAQuV,GAGnG,IAAIvF,GAAa,EAAGiJ,EAAM1D,GA8G0Emc,CAAyC1c,EAAKxN,EAAU,GAAIA,EAAU,MAAKopB,G,8mCCxbvL,SAASe,GAAW1Y,GACvB,OAAOpiB,GAAQA,GAAQA,GAAQoiB,EAAM,IAAU,SAAe,IAAU,QAAc,IAAU,QAG7F,SAAS2Y,GAAiB3Y,GAC7B,OAAOpiB,GAAQ86B,GAAW1Y,GAAO,IAAM,UAGpC,SAAS4Y,GAA0BlJ,EAAMt/B,GAC5C,OAAOwZ,IAAQ,SAACya,GACZ,IAAItd,EACA8xB,EAAS,KAIb,OAHA9xB,EAAa,CAAC2R,GAAYgX,EAAMrL,EAAO,IAAI1xB,GAAU,kBAAMkmC,KAAQ,SAACjqC,GAChEiqC,EAASjqC,MACRiqC,IACU,GACJ7lC,GAAK+T,EAAW,SAGvB,IAEL,CAAC3W,EAAKwN,GAAQxN,EAAK,OAAQ,IAAKwN,GAAQxN,EAAK,OAAQ,KAAMwN,GAAQxN,EAAK,KAAM,IAAKwN,GAAQxN,EAAK,KAAM,OAGtG,IAAM0oC,GAAb,IACI,aAAc,WACV7tC,KAAK8tC,UAAa,IAAIC,IAAI,OA6BrBC,GAAb,a,sRAAA,U,IAAA,G,EAAA,E,kZACI,WAAYC,EAAWzd,EAAS0d,EAAQ3d,EAAO4d,EAAkBC,EAAuBP,EAAqBQ,GAAiB,yBAC1H,gBACKJ,UAAYA,EACjB,EAAKzd,QAAUA,EACf,EAAK0d,OAASA,EACd,EAAK3d,MAAQA,EACb,EAAK4d,iBAAmBA,EACxB,EAAKC,sBAAwBA,EAC7B,EAAKP,oBAAsBA,EAC3B,EAAKQ,gBAAkBA,EATmG,EADlI,cAAuCnnC,GA6BhC,SAASonC,GAAWxd,EAAKyd,GAC5B,IAAI/mB,EAAyBoH,EAAMK,EAAQrrB,EAAI4qC,EAAKjtC,EAAKkuB,EAAQZ,EAAM4f,EACvE,GAAiB,KAAbF,EAAK7nC,IACL8gB,EAA0B,EAC1BoH,EAAO2f,EAAK5oC,OAAO,QAElB,GAAiB,KAAb4oC,EAAK7nC,IACV8gB,EAA0B,EAC1ByH,EAASsf,EAAK5oC,OAAO,QAEpB,GAAiB,IAAb4oC,EAAK7nC,IACV8gB,EAA0B,EAC1B5jB,EAAK2qC,EAAK5oC,OAAO,QAEhB,GAAiB,KAAb4oC,EAAK7nC,IACV8gB,EAA0B,EAC1BgnB,EAAMD,EAAK5oC,OAAO,QAEjB,GAAiB,IAAb4oC,EAAK7nC,IACV8gB,EAA0B,EAC1BjmB,EAAMgtC,EAAK5oC,OAAO,QAEjB,GAAiB,IAAb4oC,EAAK7nC,IACV8gB,EAA0B,OAEzB,GAAiB,IAAb+mB,EAAK7nC,IAAW,CACrB,IAAMgoC,EAA0Bf,GAA0B7c,EAAIP,MAAOge,EAAK5oC,OAAO,IAClD,MAA3B+oC,GACAlnB,EAA0B,EAC1BiI,EAAS8e,EAAK5oC,OAAO,GACrBkpB,EAAO6f,EAAwB,GAC/BD,EAAQC,EAAwB,IAGhClnB,EAA0B,OAGZ,IAAb+mB,EAAK7nC,KACV8gB,EAA0B,EAC1BiI,EAAS8e,EAAK5oC,OAAO,GACrBkpB,EAAO0f,EAAK5oC,OAAO,GACnB8oC,EAAQF,EAAK5oC,OAAO,IAGpB6hB,EAA0B,EAE9B,OAAQA,GACJ,KAAK,EACDykB,GAAiCnb,EAAIod,OAAS,yBAAuCT,GAAW7e,GAAS,cACzG,MAEJ,KAAK,EACDqd,GAAiCnb,EAAIod,OAAS,yBAAuCT,GAAWxe,GAAW,cAC3G,MAEJ,KAAK,EACDgd,GAAiCnb,EAAIod,OAAS,YAAoBtqC,EAAM,gBACxE,MAEJ,KAAK,EACD+qC,GAAY7d,EAAZ6d,CAAiBH,EAAII,UACrB,MAEJ,KAAK,EACD3C,GAAiCnb,EAAIod,OAAQ3sC,GAC7C,MAEJ,KAAK,EACD0qC,GAAiCnb,EAAIod,OAAQ,SAAqBpd,EAAIN,SACtE,MAEJ,KAAK,EAGD,GAFAyb,GAAiCnb,EAAIod,OAAQ,aAC7CjC,GAAiCnb,EAAIod,OAAQT,GAAW5e,IAC3C,MAAT4f,EAAe,CACf,IAAMI,EAAUJ,EAChBxC,GAAiCnb,EAAIod,OAAQ,aAC7CjC,GAAiCnb,EAAIod,OAAQR,GAAiBmB,IAElE5C,GAAiCnb,EAAIod,OAAQ,MAC7CS,GAAY7d,EAAZ6d,CAAiBlf,GACjBwc,GAAiCnb,EAAIod,OAAQ,QAC7C,MAEJ,KAAK,EACD,IAAInjB,EAA2B8L,EAAQQ,EAAUF,EAAQjI,EAAQ4f,EACjE,GAAiB,IAAbP,EAAK7nC,IACLqkB,EAA4B,EAC5B8L,EAAS0X,EAAK5oC,OAAO,GACrB0xB,EAAWkX,EAAK5oC,OAAO,QAEtB,GAAiB,IAAb4oC,EAAK7nC,IAAW,CACrB,IAAMqoC,EAA0BpB,GAA0B7c,EAAIP,MAAOge,EAAK5oC,OAAO,IAClD,MAA3BopC,GACAhkB,EAA4B,EAC5BoM,EAASoX,EAAK5oC,OAAO,GACrBupB,EAAS6f,EAAwB,GACjCD,EAAUC,EAAwB,IAGlChkB,EAA4B,OAGd,IAAbwjB,EAAK7nC,KACVqkB,EAA4B,EAC5BoM,EAASoX,EAAK5oC,OAAO,GACrBupB,EAASqf,EAAK5oC,OAAO,GACrBmpC,EAAUP,EAAK5oC,OAAO,IAGtBolB,EAA4B,EAEhC,OAAQA,GACJ,KAAK,EACDkhB,GAAiCnb,EAAIod,OAAQ,KAC7CS,GAAY7d,EAAZ6d,CAAiB9X,GACjBoV,GAAiCnb,EAAIod,OAAQ,KAC7CjC,GAAiCnb,EAAIod,OAAQ7W,GAC7C,MAEJ,KAAK,EAKD,GAJA4U,GAAiCnb,EAAIod,OAAQ,cAC7CjC,GAAiCnb,EAAIod,OAAQR,GAAiBxe,IAC9D+c,GAAiCnb,EAAIod,OAAQ,WAC7CjC,GAAiCnb,EAAIod,OAAQR,GAAiBvW,IAC/C,MAAX2X,EAAiB,CACjB,IAAME,EAAUF,EAChB7C,GAAiCnb,EAAIod,OAAQ,aAC7CjC,GAAiCnb,EAAIod,OAAQR,GAAiBsB,IAElE/C,GAAiCnb,EAAIod,OAAQ,QAC7C,MAEJ,KAAK,EACD,OAAQK,EAAK7nC,KACT,KAAK,EACDulC,GAAiCnb,EAAIod,OAAQ,KAC7CjC,GAAiCnb,EAAIod,OAAQK,EAAK5oC,OAAO,IACzDsmC,GAAiCnb,EAAIod,OAAQ,KAC7CjC,GAAiCnb,EAAIod,OAAQK,EAAK5oC,OAAO,IACzD,MAEJ,KAAK,EACDsmC,GAAiCnb,EAAIod,OAAQ,YAC7CS,GAAY7d,EAAZ6d,CAAiBJ,EAAK5oC,OAAO,IAC7BsmC,GAAiCnb,EAAIod,OAAQ,aAC7C,MAEJ,KAAK,EACDjC,GAAiCnb,EAAIod,OAAQ,UAC7CjC,GAAiCnb,EAAIod,OAAQT,GAAWc,EAAK5oC,OAAO,KACpEsmC,GAAiCnb,EAAIod,OAAQ,WAC7C,MAEJ,KAAK,EACDjC,GAAiCnb,EAAIod,OAAQ,QAC7CS,GAAY7d,EAAZ6d,CAAiBJ,EAAK5oC,OAAO,IAC7BsmC,GAAiCnb,EAAIod,OAAQ,SAC7C,MAEJ,QACI,MAAO,IAAI5tC,MAAM,4DAWtC,SAASquC,GAAY7d,GACxB,OAAO,SAACqc,GfmML,IAAiBjqB,EAAAA,EelMR,SAACqrB,GACLD,GAAWxd,EAAKyd,IfkMxBnxB,IAAK,SAAC+F,EAAU/jB,GACZ8jB,EAAO9jB,UACR,EenMI+tC,IAIJ,SAAS8B,GAAane,EAAKoe,GAC9B,IAAI5oC,EACE6oC,EAAS,SAACZ,GAAD,OAAU/sB,IAAM,WAC3B,OAAQ+sB,EAAK7nC,KACT,KAAK,EACD,OAAOhD,IAAI,SAACwR,GAAD,OAAOA,EAAE,KlB5P7B,SAAiB4B,EAAK/B,GAAoB,IAAbgC,EAAa,uDAAH,EAE1C,GADAD,EAAIE,UAAYD,GACXD,EAAIs4B,OACL,MAAM,IAAI9uC,MAAM,qBAIpB,IAFA,IAAI4U,EAAI4B,EAAI3B,KAAKJ,GACXyC,EAAU,GACH,OAANtC,GACHsC,EAAQI,KAAK1C,GACbA,EAAI4B,EAAI3B,KAAKJ,GAEjB,OAAOyC,EkBiP6BA,CAAQ,OAAQ+2B,EAAK5oC,OAAO,KAExD,KAAK,EAGL,KAAK,EAGL,KAAK,EACD,OAAO0pC,EAAQd,EAAK5oC,OAAO,IAE/B,QACI,OAAOqX,UAIbqyB,EAAU,SAACC,GAAD,OAAahxB,GAAQ6wB,EAAQG,IAC7C,OAxPG,SAAgD9yB,EAAIlW,GACvD,IAAImiB,EACAmlB,EAAS,EAIPvsC,EAAsB,GAH5BonB,EAAe,CAACgF,GAAYjR,EAAGsxB,UAAWxnC,EAAM,IAAIoB,GAAU,kBAAMkmC,KAAQ,SAACjqC,GACzEiqC,EAAc,EAAJjqC,MACTiqC,IACkB,GACvB,OAAInlB,EAAa,IACbjM,EAAGsxB,UAAU1rC,IAAIkE,EAAMjF,EAAI,GACpB+W,GAAOf,GAAO,SAAde,CAAwB9R,EAAxB8R,CAA8B/W,KAGrCmb,EAAGsxB,UAAU1rC,IAAIkE,EAAM,GAChBA,GA2OJipC,CAAuCze,EAAI+c,oBAAwD1zB,GAAlC7T,EAAOD,GAAK,IAAKgpC,EAAQH,KAAoC,SAAW5oC,GAc7I,SAASkpC,GAAgB1e,EAAK2e,GACjC,GAAsB,KAAlBA,EAAU/oC,IACVgpC,GAAiB5e,EAAK2e,EAAU9pC,OAAO,GAAGipC,eAEzC,GAAsB,IAAlBa,EAAU/oC,IAAW,CAE1B,GADAulC,GAAiCnb,EAAIod,OAAS,KAAYnsC,EAAc0tC,EAAU9pC,OAAO,IAAO,KAC5FmrB,EAAIsd,sBAAuB,CAC3B,IAAMuB,EAAaV,GAAane,EAAK2e,EAAU9pC,OAAO,IACtDsmC,GAAiCnb,EAAIod,OAAQ91B,GAAOf,GAAO,2CAAde,CAA0Eu3B,EAA1Ev3B,CAAsFu3B,IACnIhB,GAAY7d,EAAZ6d,CAAiBc,EAAU9pC,OAAO,IAClCsmC,GAAiCnb,EAAIod,OAAQ,aAG7CS,GAAY7d,EAAZ6d,CAAiBc,EAAU9pC,OAAO,IAEtCsmC,GAAiCnb,EAAIod,OAAS,MAAansC,EAAc0tC,EAAU9pC,OAAO,IAAO,UAEhG,GAAsB,IAAlB8pC,EAAU/oC,IAAW,CAC1BoqB,EAAIud,kBACJpC,GAAiCnb,EAAIod,OAAQ,OAC7C,IAAMlwB,EAAazd,EAAckvC,EAAU9pC,OAAO,IAClD,IACI,KAAOqY,EAAW,8CACdswB,GAAWxd,EAAK9S,EAAW,2DAFnC,QAMIA,EAAWC,UAEfguB,GAAiCnb,EAAIod,OAAQ,aAE5C,GAAsB,IAAlBuB,EAAU/oC,IACfulC,GAAiCnb,EAAIod,OAAQ,eAE5C,GAAsB,IAAlBuB,EAAU/oC,IAAW,CAI1B,GAHIoqB,EAAIqd,kBACJlC,GAAiCnb,EAAIod,OAAQ,+BAE7C/zB,GAAmBs1B,EAAU9pC,OAAO,IACpCsmC,GAAiCnb,EAAIod,OAAQ91B,GAAOf,GAAO,qBAE1D,CACD,IAAMu4B,EAAWx3B,GAAOf,GAAO,eAAde,CAA8Bq3B,EAAU9pC,OAAO,IAChEsmC,GAAiCnb,EAAIod,OAAQ91B,GAAOf,GAAO,0BAAde,CAA+Dw3B,IAEhH3D,GAAiCnb,EAAIod,OAAQT,GAAWgC,EAAU9pC,OAAO,KACzEsmC,GAAiCnb,EAAIod,OAAQ,iBACzCpd,EAAIqd,kBACJlC,GAAiCnb,EAAIod,OAAQ,2BAGhD,GAAsB,KAAlBuB,EAAU/oC,IACa,cAAxB+oC,EAAU9pC,OAAO,GACjBsmC,GAAiCnb,EAAIod,OAAQuB,EAAU9pC,OAAO,KAG1DmrB,EAAIqd,kBACJlC,GAAiCnb,EAAIod,OAAQ,+BAEjDjC,GAAiCnb,EAAIod,OAAQ91B,GAAOf,GAAO,iBAC3D40B,GAAiCnb,EAAIod,OAAQT,GAAWgC,EAAU9pC,OAAO,KACzEsmC,GAAiCnb,EAAIod,OAAQ,iBACzCpd,EAAIqd,kBACJlC,GAAiCnb,EAAIod,OAAQ,4BAIpD,GAAsB,IAAlBuB,EAAU/oC,IAAW,CAC1B,IAAMmpC,EAASjmB,IAAM,SAACrC,GAClB,OAAQA,EAAM7gB,KACV,KAAK,EACD,MAAO,iBAEX,KAAK,EACD,MAAO,kBAEX,KAAK,EACD,MAAO,GAEX,QACI,MAAO,mBAGhB+oC,EAAU9pC,OAAO,IAGpB,GAFAsmC,GAAiCnb,EAAIod,OAAQ,WAC7CjC,GAAiCnb,EAAIod,OAAQpd,EAAIN,SACtB,MAAvBif,EAAU9pC,OAAO,GAAY,CAC7BsmC,GAAiCnb,EAAIod,OAAU,UAAsBpd,EAAIN,QAAW,sBAAqCM,EAAIN,SAC7H,IAAMsf,EAAevvC,EAAc4e,GAAI4wB,GAAQN,EAAU9pC,OAAO,IAAKkqC,IACrE,IACI,KAAOC,EAAa,8CAA8C,CAC9D,IAAME,EAAaF,EAAa,0DAChC7D,GAAiCnb,EAAIod,OAAS,MAAa8B,EAAW,GAAM,KAC5E,IAAMC,EAAe1vC,EAAcyvC,EAAW,IAC9C,IACI,KAAOC,EAAa,8CAChBT,GAAgB,IAAIxB,IAAkB,cAEnCld,EAAIN,QAASM,EAAIod,OAAQpd,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,oBAAqB/c,EAAIud,iBAAkB4B,EAAa,2DAJ5J,QAQIA,EAAahyB,UAEjBguB,GAAiCnb,EAAIod,OAAQ,QAAoBpd,EAAIN,UAf7E,QAmBIsf,EAAa7xB,UAEjBguB,GAAiCnb,EAAIod,OAAU,QAAoBpd,EAAIN,QAAW,WAAwBM,EAAIN,SAElHyb,GAAiCnb,EAAIod,OAAQ,UAAsBpd,EAAIN,SACvE,IAAM0f,EAAe3vC,EAAcsI,IAAW,SAACxH,EAAG2lB,GAAJ,MAAU,CAAC3lB,EAAI,EAAG2lB,KAAIyoB,EAAU9pC,OAAO,KACrF,IACI,KAAOuqC,EAAa,8CAA8C,CAC9D,IAAMC,EAAeD,EAAa,0DAClCjE,GAAiCnb,EAAIod,OAAU,eAAyBiC,EAAa,GAAK,GAAO,EAAK,MAAQ,QAAW,KAAcrf,EAAIN,SAC3I,IAAM4f,EAAe7vC,EAAc4e,GAAIgxB,EAAa,GAAIN,IACxD,IACI,KAAOO,EAAa,8CAA8C,CAC9D,IAAMC,EAAeD,EAAa,0DAClCnE,GAAiCnb,EAAIod,OAAS,MAAamC,EAAa,GAAM,KAC9E,IAAMC,EAAe/vC,EAAc8vC,EAAa,IAChD,IACI,KAAOC,EAAa,8CAChBd,GAAgB,IAAIxB,IAAkB,cAEnCld,EAAIN,QAASM,EAAIod,OAAQpd,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,oBAAqB/c,EAAIud,iBAAkBiC,EAAa,2DAJ5J,QAQIA,EAAaryB,UAEjBguB,GAAiCnb,EAAIod,OAAQ,QAAoBpd,EAAIN,UAf7E,QAmBI4f,EAAanyB,UAEjBguB,GAAiCnb,EAAIod,OAAQ,QAAoBpd,EAAIN,UA1B7E,QA8BI0f,EAAajyB,UAEjBguB,GAAiCnb,EAAIod,OAAQ,WAAuBpd,EAAIN,SACxEyb,GAAiCnb,EAAIod,OAAQ,YAC7CjC,GAAiCnb,EAAIod,OAAQpd,EAAIN,cAEhD,GAAsB,IAAlBif,EAAU/oC,IAAW,CAC1B,IAAMA,EAAM1C,EAAOyrC,EAAU9pC,OAAO,GAAI,IAAIimB,GAAiB,IAAM,KAAO,KAC1EqgB,GAAiCnb,EAAIod,OAAU,IAAWxnC,EAAO,IAAYoqB,EAAIN,SACjF,IAAM+f,EAAehwC,EAAckvC,EAAU9pC,OAAO,IACpD,IACI,IADA,iBAEI,IAAMspB,EAASshB,EAAa,0DAC5BtE,GAAiCnb,EAAIod,OAAQ,QAC7C,IAAI1mB,OAAuB,EAAEyd,OAAG,EAsChC,OArCK/nB,GAAQ+R,GAmCTzH,EAA0B,EAlCD,IAArBhM,GAAKyT,GAAQvoB,IACRwW,GAAQ1B,GAAKyT,GAAQtpB,OAAO,IAyB7B6hB,EAA0B,EAxBe,IAArChM,GAAKA,GAAKyT,GAAQtpB,OAAO,IAAIe,KACzBwW,GAAQzB,GAAKD,GAAKyT,GAAQtpB,OAAO,MAC7BuX,GAAQzB,GAAKwT,IACPzT,GAAKA,GAAKyT,GAAQtpB,OAAO,IAAIA,OAAO,GAAGmB,QAAQgqB,EAAIN,UAAY,EAKjEhJ,EAA0B,GAJ1BA,EAA0B,EAC1Byd,EAAMzpB,GAAKA,GAAKyT,GAAQtpB,OAAO,IAAIA,OAAO,IAetD6hB,EAA0B,EAQlCA,EAA0B,EAM1BA,GACJ,KAAK,EACDykB,GAAiCnb,EAAIod,OAAQjJ,GAC7C,MAEJ,KAAK,EACD,IAAMnjB,EArNvB,SAAmBgP,EAAKhoB,GAC3B,IAoNkDwoB,EACtBQ,EArNtB0e,EAAKxE,KACX,IAEI,OAiN8C1a,EAlN5C,IAAI0c,GAAkBld,EAAImd,UAAWnd,EAAIN,QAASggB,EAAI1f,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,oBAAqB/c,EAAIud,iBT7NlJ,SAA8BoC,EAAOC,EAAOC,GAC/CC,EACA,OAAa,CACT,IAAM9nC,EAAI2nC,EAAOI,EAAIH,EAAO37B,EAAQ47B,EACpC,GAAIzzB,GAAQnI,QAEP,KAAImI,GAAQyK,GAAO5S,IAGnB,CACDjM,EAAE0S,GAAKzG,IACP87B,IACAJ,EAAQ3nC,EACR4nC,EAAQG,EACRF,EAAYxqC,GAAKqV,GAAKmM,GAAO5S,IAAS4S,GAAOA,GAAO5S,KACpD,SAAS67B,EART9nC,EAAE0S,GAAKzG,IAUX,OSgaoB67B,EAAsB9e,EAAS,IAAIkc,IAAkB,cAElD1c,EAAMd,QAASc,EAAM4c,OAAQ5c,EAAMf,MAAOe,EAAM6c,iBAAkB7c,EAAM8c,sBAAuB9c,EAAMuc,oBAAqBvc,EAAM+c,iBAAmB,SAACyC,GACnJtB,GAAgB1d,EAAOgf,MACvB,WACA7E,GAAiC3a,EAAM4c,OAAQ5c,EAAMd,WACtDvB,GAzNhBztB,EAASgvC,GAFpB,QAKIA,EAAGvyB,WA8M2B8yB,CAAUjgB,GAUxBmb,GAAiCnb,EAAIod,OAASpsB,EAAMhb,QAAQgqB,EAAIN,UAAY,EAAOM,EAAIN,QAAU1O,EAASgP,EAAIN,QAAW1O,GAIjImqB,GAAiCnb,EAAIod,OAAQ,QAAoBpd,EAAIN,UA7DlE+f,EAAa,8CAA8C,IADtE,QAkEIA,EAAatyB,UAEjBguB,GAAiCnb,EAAIod,OAAS,KAAYxnC,EAAO,UAEhE,GAAsB,IAAlB+oC,EAAU/oC,IACfoqB,EAAIud,kBACJpC,GAAiCnb,EAAIod,OAAQ,eAA2Bpd,EAAIN,SAC5Ekf,GAAiB,IAAI1B,GAAkBld,EAAImd,UAAWnd,EAAIN,QAASM,EAAIod,OAAQpd,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,qBAAqB,WAChK/c,EAAIud,qBACJoB,EAAU9pC,OAAO,IACrBmrB,EAAIud,kBACJpC,GAAiCnb,EAAIod,OAAQ,sBAE5C,GAAsB,IAAlBuB,EAAU/oC,IACfioC,GAAY7d,EAAZ6d,CAAiBc,EAAU9pC,OAAO,SAEjC,GAAsB,IAAlB8pC,EAAU/oC,IACfulC,GAAiCnb,EAAIod,OAAQuB,EAAU9pC,OAAO,SAE7D,GAAsB,KAAlB8pC,EAAU/oC,IAAY,CACvBoqB,EAAIqd,kBACJlC,GAAiCnb,EAAIod,OAAQ,+BAEjDjC,GAAiCnb,EAAIod,OAAQ91B,GAAOf,GAAO,iBAC3D,IAAM25B,EAAezwC,EAAckvC,EAAU9pC,OAAO,IACpD,IACI,KAAOqrC,EAAa,8CAChB/E,GAAiCnb,EAAIod,OAAQT,GAAWuD,EAAa,0DAA0D,KAFvI,QAMIA,EAAa/yB,UAEjBguB,GAAiCnb,EAAIod,OAAQ,sBAEtB,KAAlBuB,EAAU/oC,KAGfulC,GAAiCnb,EAAIod,OAAS,4BAAoDT,GAAWpnC,GAAKyqB,EAAIN,QAASif,EAAU9pC,OAAO,KAAQ,kBAE5JmrB,EAAImd,YAGD,SAASyB,GAAiB5e,EAAKmgB,GAClC,Id0VuB9oC,EAASiB,Ec1V1B9H,EAAgC,EAAvBooB,GAASunB,GAClBC,EAAW,IAAIlD,IAAkB,YAxepC,SAAoBld,EAAKqgB,GAC5BlF,GAAiCnb,EAAIod,OAAQpd,EAAIN,SAwe7C4gB,CAAWtgB,KACZA,EAAIN,QAASM,EAAIod,OAAQpd,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,oBAAqB/c,EAAIud,iBAC/GgD,EAAS,IAAIrD,IAAkB,YA/elC,SAAkBld,EAAKqgB,GAC1BlF,GAAiCnb,EAAIod,OAAQpd,EAAIN,SA+e7C8gB,CAASxgB,KACVA,EAAIN,QAASM,EAAIod,OAAQpd,EAAIP,MAAOO,EAAIqd,iBAAkBrd,EAAIsd,sBAAuBtd,EAAI+c,oBAAqB/c,EAAIud,iBAC/GrwB,EAAazd,GdmVI4H,EcnVuB,SAAC9G,EAAGsC,GAAJ,MAAU,CAACtC,IAAOC,EAAS,EAAIqC,IdmV7CyF,EcnViD6nC,EdoV1EnuB,IAAgB,kBAAMlF,GAAMxU,MAAK,SAAC/H,EAAGmJ,GAAJ,OAAWA,EAAE,6CAA+CzC,GAAKI,EAAQ9G,EAAGmJ,EAAE,iEAA+D,KAAU,SAAC4Y,GAC5LA,EAAInF,ecpVR,IACI,KAAOD,EAAW,8CAA8C,CAC5D,IAAMgyB,EAAahyB,EAAW,0DAC9BwxB,GAAgBQ,EAAW,GAAKkB,EAAWG,EAAQrB,EAAW,KAHtE,QAOIhyB,EAAWC,W,sRCnkBZ,IAAMszB,GAAb,IACI,WAAYN,EAAYO,I,6FAAO,SAC3BxxC,KAAKixC,WAAaA,EAClBjxC,KAAKwxC,MAAQA,KAyCd,SAASC,GAA4BC,EAAKC,EAAQC,EAASC,EAAeC,GAC7E,IA1B+C1yC,EA0BzC2yC,EAAY/pC,GAAW4pC,EAAS,MAChCI,EAAkBhqC,GAAW6pC,EAAe70B,MAC5Ci1B,EAAiBjqC,GAAW8pC,GAAc,SAACvqB,QDwhB9C,SAAwBoqB,EAAQO,EAAiBC,EAAMX,EAAOK,EAAeD,EAASE,EAAcb,GACvG,IAAMmB,EAAe9E,GAA2C,IAAIpB,GAAgCsF,EAAOI,EAASC,EAAeC,EAAc,QAASb,GAC1JvB,GAAiB,IAAI1B,IAAkB,cACpC4D,EAASD,EAAQH,EAAOW,EAAMD,EAviB1B,IAAIrE,IAuiBoE,eAC3EuE,GC3hBJC,CAAeV,GAAQ,GAAO,GA7BiBvyC,EA6ByBsyC,EA5BjEtyC,EAAEoyC,OA4BqEQ,EAAiBD,EAAWE,EAjCvG,SAA0C7yC,GAC7C,OAAOA,EAAE6xC,WAgCiHqB,CAAiCZ,IAkBxJ,SAASa,GAA0BC,EAAcZ,EAASC,EAAeC,GAC5E,OAZG,SAAmCJ,EAAKE,EAASC,EAAeC,GACnE,IAAMW,EAAKzG,KACX,IAEI,OADAyF,GAA4BC,EAAKe,EAAIb,EAASC,EAAeC,GACtDtwC,EAASixC,GAFpB,QAKIA,EAAGx0B,WAKAy0B,CA/BJ,SAAkC1pB,EAAM4oB,EAASe,GACpD,IAAMZ,EAAY/pC,GAAW4pC,EAAS,MAChCgB,EAA+C,EAA9B5qC,GAAW2qC,EAAc,GAC1CpnB,EAAQ7I,GAAO7Z,IAAW,SAACxH,EAAGmB,GAAJ,MAAU,CAACA,EAAG,IAAI+jB,GAAcllB,EAAI,EAAG,EAAGA,EAAI,EAAGmB,EAAElB,WAAUiU,GAAM5C,GAAQqW,EAAM,OAAQ,MAAO,CAAC,KAAM,SACjIwoB,EAAQ,IAAIzD,IAAI,IACtB,OA9BG,SAA0CkD,EAAYO,GACzD,OAAO,IAAID,GAAiBN,EAAYO,GA6BjCqB,CAAiCj1B,GAAMglB,GAAgB,IAAItS,GAAekhB,EAAOO,GAAW,EAAMnrB,GAA0BgsB,GAAiB7yB,IAAU,SAACuD,GAAD,OAAenJ,GAAmBmJ,EAAU,MAAKiI,KAAUimB,GA0BxLsB,CAAyBN,EAAcZ,GAAUA,EAASC,EAAeC,GC3E9G,I,SAAIiB,I,GAAC,WAKG,IAAMC,EAAQhzC,KACd,MAAO,CACH0J,SAAU,SAAAhK,GAAC,OAAIszC,EAAM7iC,IAAIzQ,IACzBmK,YAAa,SAAAC,GAAE,OAAIkpC,EAAMnpC,YAAYC,IACrCC,cAAe,SAAAH,GAAE,OAAIopC,EAAMjpC,cAAcH,IACzCD,QAAS,SAAAC,GAAE,OAAIopC,EAAMrpC,QAAQC,IAC7BI,MAAO,kBAAOC,OAAO+oC,KAAW,GAAGxxC,SAAS,Q,GAPnDgI,M,GAJG,CACJrG,YADC,WACe,OAAON,EAAiB,CAAC7C,KAAKwC,EAAGxC,KAAKwK,GAAG7D,OAAO3G,KAAKqc,KACrEpY,OAFC,SAEM7E,GAAK,OAAQY,KAAKizC,IAAI7zC,IAC7B6F,UAHC,SAGS7F,GAAK,OAAOY,KAAKizC,IAAI7zC,M,gGAmCnC8zC,GAAS,IAuBTC,GAAO,YAAaC,GAAUD,GAAO,WAAYE,GAAaD,GAAU,iBAA0DE,GAAcH,GAAO,mBAAoBI,QAAY,EAAQC,GAAU,uCA2DzM,SAASC,GAAMr0C,EAAGqb,GACd,IAAIjQ,EAAGnJ,EAAGqyC,EACV,IAAKF,GAAQp5B,KAAKK,GACd,MAAMna,MAAM8yC,GAAU,UAqB1B,IAlBAh0C,EAAEoD,EAAmB,KAAfiY,EAAEk5B,OAAO,IAAal5B,EAAIA,EAAEnR,MAAM,IAAK,GAAK,GAE7CkB,EAAIiQ,EAAE3T,QAAQ,OAAS,IACxB2T,EAAIA,EAAE9H,QAAQ,IAAK,MAElBtR,EAAIoZ,EAAET,OAAO,OAAS,GAEnBxP,EAAI,IACJA,EAAInJ,GACRmJ,IAAMiQ,EAAEnR,MAAMjI,EAAI,GAClBoZ,EAAIA,EAAEnN,UAAU,EAAGjM,IAEdmJ,EAAI,IAETA,EAAIiQ,EAAEnZ,QAEVoyC,EAAKj5B,EAAEnZ,OAEFD,EAAI,EAAGA,EAAImJ,GAAKnJ,EAAIqyC,GAAqB,KAAfj5B,EAAEk5B,OAAOtyC,MAClCA,EAIN,GAAIA,GAAKqyC,EAELt0C,EAAEid,EAAI,CAACjd,EAAEoL,EAAI,QAMb,IAHApL,EAAEoL,EAAIA,EAAInJ,EAAI,EACdjC,EAAEid,EAAI,GAED7R,EAAI,EAAGnJ,EAAIqyC,GACZt0C,EAAEid,EAAE7R,MAAQiQ,EAAEk5B,OAAOtyC,KAQ7B,OADIuyC,GAAMx0C,EAAGy0C,GAAIC,GAAK,EAAGD,GAAIE,IAWjC,SAASH,GAAMx0C,EAAG0K,EAAIkqC,EAAIhV,GACtB,IAAIiV,EAAK70C,EAAEid,EAGX,GAFI23B,IAAOT,KACPS,EAAKH,GAAIE,IACF,IAAPC,GAAmB,IAAPA,GAAmB,IAAPA,GAAmB,IAAPA,EACpC,MAAM1zC,MAxHyF8yC,kCA0HnG,GAAItpC,EAAK,EACLk1B,EACW,IAAPgV,IAAahV,KAAUiV,EAAG,KAAc,IAAPnqC,IAAoB,IAAPkqC,GAAYC,EAAG,IAAM,GACxD,IAAPD,IAAaC,EAAG,GAAK,GAAe,IAAVA,EAAG,KAAajV,GAAQiV,EAAG,KAAOV,MACpEU,EAAG3yC,OAAS,EACR09B,GAEA5/B,EAAEoL,EAAIpL,EAAEoL,EAAIV,EAAK,EACjBmqC,EAAG,GAAK,GAIRA,EAAG,GAAK70C,EAAEoL,EAAI,OAGjB,GAAIV,EAAKmqC,EAAG3yC,OAAQ,CAErB,IAAM8M,EAAS6lC,EAAGC,WAAU,SAACC,EAAK36B,GAAN,OAAcA,GAAO1P,GAAMqqC,EAAM,KAAK,EASlE,GARAnV,EACW,IAAPgV,GAAYC,EAAGnqC,IAAO,GACX,IAAPkqC,IAAaC,EAAGnqC,GAAM,GAAgB,IAAXmqC,EAAGnqC,KACzBk1B,GAAQiV,EAAGnqC,EAAK,KAAOypC,IAA0B,EAAbU,EAAGnqC,EAAK,MAC1C,IAAPkqC,IAAahV,IAAS5wB,GAE9B6lC,EAAG3yC,OAASwI,IAERk1B,EAEA,OAASiV,EAAGnqC,GAAM,GACdmqC,EAAGnqC,GAAM,EACJA,QACC1K,EAAEoL,EACJypC,EAAGG,QAAQ,IAKvB,IAAKtqC,EAAKmqC,EAAG3yC,QAAS2yC,IAAKnqC,IACvBmqC,EAAGI,MAEX,OAAOj1C,EAMX,SAASk1C,GAAUl1C,EAAGm1C,EAAeC,GACjC,IAAIhqC,EAAIpL,EAAEoL,EAAGhI,EAAIpD,EAAEid,EAAEhW,KAAK,IAAKoU,EAAIjY,EAAElB,OAErC,GAAIizC,EACA/xC,EAAIA,EAAEmxC,OAAO,IAAMl5B,EAAI,EAAI,IAAMjY,EAAE8G,MAAM,GAAK,KAAOkB,EAAI,EAAI,IAAM,MAAQA,OAG1E,GAAIA,EAAI,EAAG,CACZ,OAASA,GACLhI,EAAI,IAAMA,EACdA,EAAI,KAAOA,OAEV,GAAIgI,EAAI,EACT,KAAMA,EAAIiQ,EACN,IAAKjQ,GAAKiQ,EAAGjQ,KACThI,GAAK,SAEJgI,EAAIiQ,IACTjY,EAAIA,EAAE8G,MAAM,EAAGkB,GAAK,IAAMhI,EAAE8G,MAAMkB,SAGjCiQ,EAAI,IACTjY,EAAIA,EAAEmxC,OAAO,GAAK,IAAMnxC,EAAE8G,MAAM,IAEpC,OAAOlK,EAAEoD,EAAI,GAAKgyC,EAAY,IAAMhyC,EAAIA,EAM5CuwC,GAAE3gC,IAAM,WACJ,IAAIhT,EAAI,IAAIY,KAAKH,YAAYG,MAE7B,OADAZ,EAAEoD,EAAI,EACCpD,GAOX2zC,GAAEE,IAAM,SAAUvzC,GACd,IAAI+0C,EAAOZ,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAuBi0C,GAAhBv0C,EAAI,IAAIm0C,EAAIn0C,GAASN,EAAEid,GAAGq4B,EAAKh1C,EAAE2c,EAAGhb,EAAIjC,EAAEoD,EAAGsC,EAAIpF,EAAE8C,EAAGkiC,EAAItlC,EAAEoL,EAAG4yB,EAAI19B,EAAE8K,EAE3H,IAAKypC,EAAG,KAAOS,EAAG,GACd,OAAQT,EAAG,GAAuB5yC,EAAjBqzC,EAAG,IAAU5vC,EAAL,EAE7B,GAAIzD,GAAKyD,EACL,OAAOzD,EAGX,GAFAozC,EAAQpzC,EAAI,EAERqjC,GAAKtH,EACL,OAAOsH,EAAItH,EAAIqX,EAAQ,GAAK,EAGhC,IADA3vC,EAAImI,KAAK+D,IAAIijC,EAAG3yC,OAAQozC,EAAGpzC,QACtBD,EAAI,EAAGA,EAAIyD,EAAGzD,IAGf,IAFAqjC,EAAIrjC,EAAI4yC,EAAG3yC,OAAS2yC,EAAG5yC,GAAK,KAC5B+7B,EAAI/7B,EAAIqzC,EAAGpzC,OAASozC,EAAGrzC,GAAK,GAExB,OAAOqjC,EAAItH,EAAIqX,EAAQ,GAAK,EAEpC,OAAO,GAcX1B,GAAExkC,IAAM,SAAU7O,GACd,IAAIm0C,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAuB0rB,GAAhBhsB,EAAI,IAAIm0C,EAAIn0C,GAAQN,EAAEid,GACrEsP,EAAIjsB,EAAE2c,EACNqoB,EAAItlC,EAAEoD,GAAK9C,EAAE8C,EAAI,GAAK,EAAGoH,EAAKiqC,EAAIC,GAClC,GAAIlqC,MAASA,GAAMA,EAAK,GAAKA,EAAKspC,GAC9B,MAAM5yC,MAAM+yC,IAGhB,IAAK1nB,EAAE,GACH,MAAMrrB,MAAMgzC,IAGhB,IAAK5nB,EAAE,GAGH,OAFAhsB,EAAE8C,EAAIkiC,EACNhlC,EAAE2c,EAAI,CAAC3c,EAAE8K,EAAI,GACN9K,EAEX,IAAIi1C,EAAIC,EAAIn6B,EAAGw4B,EAAK4B,EAAIC,EAAKnpB,EAAEriB,QAASyrC,EAAKJ,EAAKhpB,EAAErqB,OAAQ0zC,EAAKtpB,EAAEpqB,OAAQ0lB,EAAI0E,EAAEpiB,MAAM,EAAGqrC,GAC1FM,EAAKjuB,EAAE1lB,OAAQ4zC,EAAIx1C,EACnBy1C,EAAKD,EAAE74B,EAAI,GAAI+4B,EAAK,EAAG/nC,EAAIzD,GAAMsrC,EAAE1qC,EAAIpL,EAAEoL,EAAI9K,EAAE8K,GAAK,EAMpD,IALA0qC,EAAE1yC,EAAIkiC,EACNA,EAAIr3B,EAAI,EAAI,EAAIA,EAEhBynC,EAAGV,QAAQ,GAEJa,IAAON,GACV3tB,EAAEpP,KAAK,GACX,EAAG,CAEC,IAAK6C,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAErB,GAAIk6B,IAAOM,EAAKjuB,EAAE1lB,QACd2xC,EAAM0B,EAAKM,EAAK,GAAK,OAGrB,IAAKJ,GAAM,EAAG5B,EAAM,IAAK4B,EAAKF,GAC1B,GAAIhpB,EAAEkpB,IAAO7tB,EAAE6tB,GAAK,CAChB5B,EAAMtnB,EAAEkpB,GAAM7tB,EAAE6tB,GAAM,GAAK,EAC3B,MAKZ,KAAI5B,EAAM,GAiBN,MAdA,IAAK2B,EAAKK,GAAMN,EAAKhpB,EAAImpB,EAAIG,GAAK,CAC9B,GAAIjuB,IAAIiuB,GAAML,EAAGK,GAAK,CAElB,IADAJ,EAAKI,EACEJ,IAAO7tB,IAAI6tB,IACd7tB,EAAE6tB,GAAM,IACV7tB,EAAE6tB,GACJ7tB,EAAEiuB,IAAO,GAEbjuB,EAAEiuB,IAAOL,EAAGK,GAEhB,MAAQjuB,EAAE,IACNA,EAAE1N,QAOd67B,EAAGC,KAAQnC,EAAMx4B,IAAMA,EAEnBuM,EAAE,IAAMisB,EACRjsB,EAAEiuB,GAAMvpB,EAAEqpB,IAAO,EAEjB/tB,EAAI,CAAC0E,EAAEqpB,WACLA,IAAOC,GAAMhuB,EAAE,KAAOusB,KAAc7O,KAW9C,OATKyQ,EAAG,IAAY,GAANC,IAEVD,EAAG77B,QACH47B,EAAE1qC,IACF6C,KAGA+nC,EAAK/nC,GACLumC,GAAMsB,EAAG7nC,EAAGwmC,EAAIE,GAAI/sB,EAAE,KAAOusB,IAC1B2B,GAKXnC,GAAEjvC,GAAK,SAAUpE,GACb,OAAuB,IAAhBM,KAAKizC,IAAIvzC,IAMpBqzC,GAAEsC,GAAK,SAAU31C,GACb,OAAOM,KAAKizC,IAAIvzC,GAAK,GAMzBqzC,GAAEuC,IAAM,SAAU51C,GACd,OAAOM,KAAKizC,IAAIvzC,IAAM,GAK1BqzC,GAAEwC,GAAK,SAAU71C,GACb,OAAOM,KAAKizC,IAAIvzC,GAAK,GAMzBqzC,GAAEyC,IAAM,SAAU91C,GACd,OAAOM,KAAKizC,IAAIvzC,GAAK,GAKzBqzC,GAAE0C,MAAQ1C,GAAE2C,IAAM,SAAUh2C,GACxB,IAAI2B,EAAGyD,EAAGqX,EAAGw5B,EAAM9B,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAuB0rB,GAAhBhsB,EAAI,IAAIm0C,EAAIn0C,GAAQN,EAAEoD,GAAGmpB,EAAIjsB,EAAE8C,EAE7F,GAAIkpB,GAAKC,EAEL,OADAjsB,EAAE8C,GAAKmpB,EACAvsB,EAAEw2C,KAAKl2C,GAElB,IAAIu0C,EAAK70C,EAAEid,EAAE/S,QAASusC,EAAKz2C,EAAEoL,EAAGkqC,EAAKh1C,EAAE2c,EAAGy5B,EAAKp2C,EAAE8K,EAEjD,IAAKypC,EAAG,KAAOS,EAAG,GAUd,OATIA,EAAG,GACHh1C,EAAE8C,GAAKmpB,EAEFsoB,EAAG,GACRv0C,EAAI,IAAIm0C,EAAIz0C,GAGZM,EAAE8C,EAAI,EAEH9C,EAGX,GAAIgsB,EAAImqB,EAAKC,EAAI,CAUb,KATIH,EAAOjqB,EAAI,IACXA,GAAKA,EACLvP,EAAI83B,IAGJ6B,EAAKD,EACL15B,EAAIu4B,GAERv4B,EAAEqB,UACGmO,EAAID,EAAGC,KACRxP,EAAEvE,KAAK,GACXuE,EAAEqB,eAKF,IADA1Y,IAAM6wC,EAAO1B,EAAG3yC,OAASozC,EAAGpzC,QAAU2yC,EAAKS,GAAIpzC,OAC1CoqB,EAAIC,EAAI,EAAGA,EAAI7mB,EAAG6mB,IACnB,GAAIsoB,EAAGtoB,IAAM+oB,EAAG/oB,GAAI,CAChBgqB,EAAO1B,EAAGtoB,GAAK+oB,EAAG/oB,GAClB,MAeZ,GAVIgqB,IACAx5B,EAAI83B,EACJA,EAAKS,EACLA,EAAKv4B,EACLzc,EAAE8C,GAAK9C,EAAE8C,IAMRmpB,GAAK7mB,EAAI4vC,EAAGpzC,SAAWD,EAAI4yC,EAAG3yC,SAAW,EAC1C,KAAOqqB,KACHsoB,EAAG5yC,KAAO,EAElB,IAAKsqB,EAAItqB,EAAGyD,EAAI4mB,GAAI,CAChB,GAAIuoB,IAAKnvC,GAAK4vC,EAAG5vC,GAAI,CACjB,IAAKzD,EAAIyD,EAAGzD,IAAM4yC,IAAK5yC,IACnB4yC,EAAG5yC,GAAK,IACV4yC,EAAG5yC,GACL4yC,EAAGnvC,IAAM,GAEbmvC,EAAGnvC,IAAM4vC,EAAG5vC,GAGhB,KAAmB,IAAZmvC,IAAKtoB,IACRsoB,EAAGI,MAEP,KAAiB,IAAVJ,EAAG,IACNA,EAAG36B,UACDw8B,EAUN,OARK7B,EAAG,KAEJv0C,EAAE8C,EAAI,EAENyxC,EAAK,CAAC6B,EAAK,IAEfp2C,EAAE2c,EAAI43B,EACNv0C,EAAE8K,EAAIsrC,EACCp2C,GAKXqzC,GAAEgD,IAAM,SAAUr2C,GACd,IAAIs2C,EAAMnC,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAuB0rB,GAAhBhsB,EAAI,IAAIm0C,EAAIn0C,GAAQN,EAAEoD,GAAGmpB,EAAIjsB,EAAE8C,EACpF,IAAK9C,EAAE2c,EAAE,GACL,MAAM/b,MAAMgzC,IAMhB,OAJAl0C,EAAEoD,EAAI9C,EAAE8C,EAAI,EACZwzC,EAAmB,GAAZt2C,EAAEuzC,IAAI7zC,GACbA,EAAEoD,EAAIkpB,EACNhsB,EAAE8C,EAAImpB,EACFqqB,EACO,IAAInC,EAAIz0C,IACnBssB,EAAImoB,EAAIC,GACRnoB,EAAIkoB,EAAIE,GACRF,EAAIC,GAAKD,EAAIE,GAAK,EAClB30C,EAAIA,EAAEmP,IAAI7O,GACVm0C,EAAIC,GAAKpoB,EACTmoB,EAAIE,GAAKpoB,EACF3rB,KAAKy1C,MAAMr2C,EAAE62C,MAAMv2C,MAK9BqzC,GAAE6C,KAAO7C,GAAErlC,IAAM,SAAUhO,GACvB,IAAI8K,EAAGk6B,EAAGvoB,EAAG03B,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAEjD,GAFwDN,EAAI,IAAIm0C,EAAIn0C,GAEhEN,EAAEoD,GAAK9C,EAAE8C,EAET,OADA9C,EAAE8C,GAAK9C,EAAE8C,EACFpD,EAAEq2C,MAAM/1C,GAEnB,IAAIm2C,EAAKz2C,EAAEoL,EAAGypC,EAAK70C,EAAEid,EAAGy5B,EAAKp2C,EAAE8K,EAAGkqC,EAAKh1C,EAAE2c,EAEzC,IAAK43B,EAAG,KAAOS,EAAG,GASd,OARKA,EAAG,KACAT,EAAG,GACHv0C,EAAI,IAAIm0C,EAAIz0C,GAGZM,EAAE8C,EAAIpD,EAAEoD,GAGT9C,EAKX,GAHAu0C,EAAKA,EAAG3qC,QAGJkB,EAAIqrC,EAAKC,EAAI,CAUb,IATItrC,EAAI,GACJsrC,EAAKD,EACL15B,EAAIu4B,IAGJlqC,GAAKA,EACL2R,EAAI83B,GAER93B,EAAEqB,UACKhT,KACH2R,EAAEvE,KAAK,GACXuE,EAAEqB,UAUN,IAPIy2B,EAAG3yC,OAASozC,EAAGpzC,OAAS,IACxB6a,EAAIu4B,EACJA,EAAKT,EACLA,EAAK93B,GAET3R,EAAIkqC,EAAGpzC,OAEFojC,EAAI,EAAGl6B,EAAGypC,EAAGzpC,IAAM,GACpBk6B,GAAKuP,IAAKzpC,GAAKypC,EAAGzpC,GAAKkqC,EAAGlqC,GAAKk6B,GAAK,GAAK,EAO7C,IALIA,IACAuP,EAAGG,QAAQ1P,KACToR,GAGDtrC,EAAIypC,EAAG3yC,OAAoB,IAAZ2yC,IAAKzpC,IACrBypC,EAAGI,MAGP,OAFA30C,EAAE2c,EAAI43B,EACNv0C,EAAE8K,EAAIsrC,EACCp2C,GASXqzC,GAAE7lC,IAAM,SAAUuN,GACd,IAAIo5B,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAON,EAAI,IAAIm0C,EAAI,KAAMqC,EAAM,IAAIrC,EAAI,KAAMY,EAAQh6B,EAAI,EACjG,GAAIA,MAAQA,GAAKA,GAAI,KAAcA,EAnjB3B,IAojBJ,MAAMna,MAAM8yC,GAAU,YAI1B,IAFIqB,IACAh6B,GAAKA,GAEG,EAAJA,IACA/a,EAAIA,EAAEu2C,MAAM72C,IAChBqb,IAAM,GAGNrb,EAAIA,EAAE62C,MAAM72C,GAEhB,OAAOq1C,EAAQyB,EAAI3nC,IAAI7O,GAAKA,GAShCqzC,GAAEoD,KAAO,SAAUrsC,EAAIkqC,GACnB,GAAIlqC,MAASA,GAAMA,EAAK,GAAKA,EAAKopC,GAC9B,MAAM5yC,MAAM8yC,GAAU,aAE1B,OAAOQ,GAAM,IAAI5zC,KAAKH,YAAYG,MAAO8J,EAAIkqC,IAWjDjB,GAAEa,MAAQ,SAAUhqC,EAAIoqC,GACpB,GAAIpqC,IAAO2pC,GACP3pC,EAAK,OACJ,GAAIA,MAASA,GAAMA,GAAMspC,IAAUtpC,EAAKspC,GACzC,MAAM5yC,MAAM+yC,IAEhB,OAAOO,GAAM,IAAI5zC,KAAKH,YAAYG,MAAO4J,EAAK5J,KAAKwK,EAAI,EAAGwpC,IAM9DjB,GAAEqD,KAAO,WACL,IAAIpvB,EAAG3K,EAAGF,EAAG03B,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAOwC,EAAIpD,EAAEoD,EAAGgI,EAAIpL,EAAEoL,EAAG8H,EAAO,IAAIuhC,EAAI,OAEzF,IAAKz0C,EAAEid,EAAE,GACL,OAAO,IAAIw3B,EAAIz0C,GAEnB,GAAIoD,EAAI,EACJ,MAAMlC,MAAM6yC,GAAO,kBAMb,KAHV3wC,EAAIyK,KAAKmpC,KAAKh3C,EAAI,MAGHoD,IAAM,MACjB6Z,EAAIjd,EAAEid,EAAEhW,KAAK,KACL/E,OAASkJ,EAAI,IACjB6R,GAAK,KAET7R,IAAMA,EAAI,GAAK,EAAI,IAAMA,EAAI,GAAS,EAAJA,GAClCwc,EAAI,IAAI6sB,IAFRrxC,EAAIyK,KAAKmpC,KAAK/5B,KAEI,IAAQ,MAAQ7Z,EAAIA,EAAEuH,iBAAiBT,MAAM,EAAG9G,EAAEsE,QAAQ,KAAO,IAAM0D,IAGzFwc,EAAI,IAAI6sB,EAAIrxC,EAAI,IAEpBgI,EAAIwc,EAAExc,GAAKqpC,EAAIC,IAAM,GAErB,GACI33B,EAAI6K,EACJA,EAAI1U,EAAK2jC,MAAM95B,EAAEy5B,KAAKx2C,EAAEmP,IAAI4N,WACvBA,EAAEE,EAAE/S,MAAM,EAAGkB,GAAGnE,KAAK,MAAQ2gB,EAAE3K,EAAE/S,MAAM,EAAGkB,GAAGnE,KAAK,KAC3D,OAAOutC,GAAM5sB,GAAI6sB,EAAIC,IAAM,GAAK9sB,EAAExc,EAAI,EAAGqpC,EAAIE,KAKjDhB,GAAEkD,MAAQlD,GAAE5iC,IAAM,SAAUzQ,GACxB,IAAI2c,EAAGw3B,EAAM7zC,KAAKH,YAAaT,EAAI,IAAIy0C,EAAI7zC,MAAuBi0C,GAAhBv0C,EAAI,IAAIm0C,EAAIn0C,GAASN,EAAEid,GAAGq4B,EAAKh1C,EAAE2c,EAAGqP,EAAIuoB,EAAG3yC,OAAQqqB,EAAI+oB,EAAGpzC,OAAQD,EAAIjC,EAAEoL,EAAG1F,EAAIpF,EAAE8K,EAInI,GAFA9K,EAAE8C,EAAIpD,EAAEoD,GAAK9C,EAAE8C,EAAI,GAAK,GAEnByxC,EAAG,KAAOS,EAAG,GAEd,OADAh1C,EAAE2c,EAAI,CAAC3c,EAAE8K,EAAI,GACN9K,EAcX,IAXAA,EAAE8K,EAAInJ,EAAIyD,EAEN4mB,EAAIC,IACJtP,EAAI43B,EACJA,EAAKS,EACLA,EAAKr4B,EACLvX,EAAI4mB,EACJA,EAAIC,EACJA,EAAI7mB,GAGHuX,EAAI,IAAIhd,MAAMyF,EAAI4mB,EAAIC,GAAI7mB,KAC3BuX,EAAEvX,GAAK,EAGX,IAAKzD,EAAIsqB,EAAGtqB,KAAM,CAGd,IAFAsqB,EAAI,EAEC7mB,EAAI4mB,EAAIrqB,EAAGyD,EAAIzD,GAEhBsqB,EAAItP,EAAEvX,GAAK4vC,EAAGrzC,GAAK4yC,EAAGnvC,EAAIzD,EAAI,GAAKsqB,EACnCtP,EAAEvX,KAAO6mB,EAAI,GAEbA,EAAIA,EAAI,GAAK,EAEjBtP,EAAEvX,GAAK6mB,EAQX,IALIA,IACEjsB,EAAE8K,EAEJ6R,EAAE/C,QAEDjY,EAAIgb,EAAE/a,QAAS+a,IAAIhb,IACpBgb,EAAEg4B,MAEN,OADA30C,EAAE2c,EAAIA,EACC3c,GASXqzC,GAAEhpC,cAAgB,SAAUH,EAAIoqC,GAC5B,IAAI50C,EAAIY,KAAMya,EAAIrb,EAAEid,EAAE,GACtB,GAAIzS,IAAO2pC,GAAW,CAClB,GAAI3pC,MAASA,GAAMA,EAAK,GAAKA,EAAKspC,GAC9B,MAAM5yC,MAAM+yC,IAGhB,IADAj0C,EAAIw0C,GAAM,IAAIx0C,EAAES,YAAYT,KAAMwK,EAAIoqC,GAC/B50C,EAAEid,EAAE/a,OAASsI,GAChBxK,EAAEid,EAAEzE,KAAK,GAEjB,OAAO08B,GAAUl1C,GAAG,IAAQqb,IAYhCs4B,GAAEppC,QAAU,SAAUC,EAAIoqC,GACtB,IAAI50C,EAAIY,KAAMya,EAAIrb,EAAEid,EAAE,GACtB,GAAIzS,IAAO2pC,GAAW,CAClB,GAAI3pC,MAASA,GAAMA,EAAK,GAAKA,EAAKspC,GAC9B,MAAM5yC,MAAM+yC,IAIhB,IAAKzpC,EAAKA,GAFVxK,EAAIw0C,GAAM,IAAIx0C,EAAES,YAAYT,GAAIwK,EAAKxK,EAAEoL,EAAI,EAAGwpC,IAE7BxpC,EAAI,EAAGpL,EAAEid,EAAE/a,OAASsI,GACjCxK,EAAEid,EAAEzE,KAAK,GAEjB,OAAO08B,GAAUl1C,GAAG,IAASqb,IAQjCs4B,GAAEhoC,OAASgoC,GAAEvxC,SAAW,WACpB,IAAIpC,EAAIY,KAAM6zC,EAAMz0C,EAAES,YACtB,OAAOy0C,GAAUl1C,EAAGA,EAAEoL,GAAKqpC,EAAIwC,IAAMj3C,EAAEoL,GAAKqpC,EAAIyC,KAAMl3C,EAAEid,EAAE,KAK9D02B,GAAE5kC,SAAW,WACT,IAAIsM,EAAIxQ,OAAOqqC,GAAUt0C,MAAM,GAAM,IACrC,IAAgC,IAA5BA,KAAKH,YAAY02C,SAAoBv2C,KAAK8D,GAAG2W,EAAEjZ,YAC/C,MAAMlB,MAAM6yC,GAAO,wBAEvB,OAAO14B,GAWXs4B,GAAElpC,YAAc,SAAUC,EAAIkqC,GAC1B,IAAI50C,EAAIY,KAAM6zC,EAAMz0C,EAAES,YAAa4a,EAAIrb,EAAEid,EAAE,GAC3C,GAAIvS,IAAOypC,GAAW,CAClB,GAAIzpC,MAASA,GAAMA,EAAK,GAAKA,EAAKopC,GAC9B,MAAM5yC,MAAM8yC,GAAU,aAG1B,IADAh0C,EAAIw0C,GAAM,IAAIC,EAAIz0C,GAAI0K,EAAIkqC,GACnB50C,EAAEid,EAAE/a,OAASwI,GAChB1K,EAAEid,EAAEzE,KAAK,GAEjB,OAAO08B,GAAUl1C,EAAG0K,GAAM1K,EAAEoL,GAAKpL,EAAEoL,GAAKqpC,EAAIwC,IAAMj3C,EAAEoL,GAAKqpC,EAAIyC,KAAM77B,IAQvEs4B,GAAEyD,QAAU,WACR,IAAIp3C,EAAIY,KAAM6zC,EAAMz0C,EAAES,YACtB,IAAmB,IAAfg0C,EAAI0C,OACJ,MAAMj2C,MAAM6yC,GAAO,sBAEvB,OAAOmB,GAAUl1C,EAAGA,EAAEoL,GAAKqpC,EAAIwC,IAAMj3C,EAAEoL,GAAKqpC,EAAIyC,IAAI,IAGjD,IAAIzC,GA/vBX,SAAS4C,IAOL,SAAS5C,EAAIp5B,GACT,IAAIrb,EAAIY,KAER,KAAMZ,aAAay0C,GACf,OAAOp5B,IAAM84B,GAAYkD,IAAU,IAAI5C,EAAIp5B,GAE/C,GAAIA,aAAao5B,EACbz0C,EAAEoD,EAAIiY,EAAEjY,EACRpD,EAAEoL,EAAIiQ,EAAEjQ,EACRpL,EAAEid,EAAI5B,EAAE4B,EAAE/S,QAyBtB,SAAmBlK,GAEf,GAAIA,EAAEid,EAAE/a,OAAS,IAAMlC,EAAEid,EAAE,GAAI,CAC3B,IAAIhb,EAAIjC,EAAEid,EAAE63B,WAAU,SAAA90C,GAAC,OAAIA,KAC3BA,EAAEid,EAAIjd,EAAEid,EAAE/S,MAAMjI,GAChBjC,EAAEoL,EAAIpL,EAAEoL,EAAInJ,GA7BRq1C,CAAUt3C,OAET,CACD,GAAiB,iBAANqb,EAAgB,CACvB,IAAmB,IAAfo5B,EAAI0C,OACJ,MAAMI,UAAUvD,GAAU,UAG9B34B,EAAU,IAANA,GAAW,EAAIA,EAAI,EAAI,KAAOlU,OAAOkU,GAE7Cg5B,GAAMr0C,EAAGqb,GAIbrb,EAAES,YAAcg0C,EAQpB,OANAA,EAAI/oC,UAAYioC,GAChBc,EAAIC,GAxEC,GAyELD,EAAIE,GAhEH,EAiEDF,EAAIwC,IAvDH,GAwDDxC,EAAIyC,GAlDH,GAmDDzC,EAAI0C,QA7CC,EA8CE1C,EAwtBM4C,GAEjB,YCr0BA,MAiCO,SAAShlC,GAAYrS,EAAGM,GAC3B,OAAON,EAAEsO,IAAIhO,GAyBV,SAAS8B,GAASpC,GACrB,OAAOA,EAAEoC,WAwDb,SAASo1C,GAAaC,EAAWC,EAAMl1C,GACnC,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IACnBw1C,EAAUj1C,EAASP,GAAMy1C,GAAa,EAAJz1C,EAAU,GAkB7C,SAAS01C,GAAUrsC,EAAK8hB,EAAK7hB,EAAM0D,EAAY2oC,GAClD,IACMH,EAAY,IAAIvsC,WAAW2sC,IACjCL,GAAaC,EAAWnsC,EAAK,GAC7BksC,GAAaC,EAAWrqB,EAAK,GAC7BoqB,GAAaC,EAAWlsC,EAAM,IAC9B,IAAMusC,EA3CV,SAAsBC,EAAKF,GAGvB,IAFA,IAAMG,EAAM,IAAI9sC,WAAW2sC,IACvBI,EAAW,EACNnjC,EAAIijC,EAAI71C,OAAS,EAAG4S,GAAK,EAAGA,IAAK,CAEtC,IADA,IAAIojC,EAAQH,EAAIjjC,GACP7S,EAAI,EAAGA,EAAIg2C,EAAUh2C,IAAK,CAC/B,IAAMuM,EAAe,GAATwpC,EAAI/1C,GAAUi2C,EAAQ,EAClCF,EAAI/1C,GAAMuM,EAAM,GAAM,EACtB0pC,EAAS1pC,EAAM,GAAM,EAEzB,KAAO0pC,EAAQ,GACXF,EAAIC,KAAeC,EAAQ,GAAM,EACjCA,EAASA,EAAQ,GAAM,EAG/B,OAAOF,EAAI9tC,MAAM,EAAG+tC,GA4BFE,CAAaV,GAC/BG,GAAgB,IAChB,IAAMQ,EAAM,IAAIC,GAAQ,GAKxB,OAJAD,EAAIn7B,EAAIhd,MAAMib,KAAK48B,EAAU15B,WAC7Bg6B,EAAIhtC,EAAI0sC,EAAU51C,OAAS01C,EAAQ,EACnCQ,EAAIh1C,EAAI6L,GAAc,EAAI,EAChB,IAAIopC,GAAQD,G,kzDAnJF,IAAIC,GAAQ,GACb,IAAIA,GAAQ,GACP,IAAIA,IAAS,GACb,IAAIA,GAAQ,iCACZ,IAAIA,GAAQ,kCCAjC,IAAMC,GAAb,gCACI,WAAYC,EAAOC,EAAQC,EAASC,GAAO,yBACvC,gBACKx0C,KAAOq0C,EACZ,EAAKC,OAASA,EACd,EAAKC,QAAUA,EACf,EAAKE,KAAOD,EAL2B,EAD/C,cAAiC5wC,GAcpB8wC,GAAb,gCACI,WAAYtxC,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,QAAS,iBAPzB,GAAiCa,GAepByxC,GAAb,gCACI,WAAYC,EAAIC,EAASC,EAASC,EAAMV,EAAOW,EAAQC,GAAM,yBACzD,gBACKL,GAAKA,EACV,EAAKC,QAAUA,EACf,EAAKC,QAAUA,EACf,EAAKC,KAAOA,EACZ,EAAK/0C,KAAOq0C,EACZ,EAAKW,OAASA,EACd,EAAKC,KAAOA,EAR6C,EADjE,cAA6BrxC,GAiBhBsxC,GAAb,gCACI,WAAYhzB,EAAM4yB,EAASK,GAAW,yBAClC,gBACKjzB,KAAOA,EACZ,EAAK4yB,QAAUA,EACf,EAAKK,UAAYA,EAJiB,EAD1C,cAA+BvxC,GAalBwxC,GAAb,gCACI,WAAYlzB,EAAMmzB,GAAQ,yBACtB,gBACKnzB,KAAOA,EACZ,EAAKmzB,OAASA,EAHQ,EAD9B,cAA6BzxC,GAYtB,SAAS0xC,GAAqBx5C,GACjC,OAAOogB,IAAM,SAAC4d,GAAD,OAAOA,EAAEwa,SAAQx4C,EAAEu5C,OAAQ,CACpCh5B,QAAS,kBAAO,IAAI83B,GAAQ,IAC5B/3B,IAAK,SAACnW,EAAK7J,GAAN,OAAY+R,GAAYlI,EAAK7J,MAiBnC,IAAMm5C,GAAb,gCACI,WAAYrzB,EAAMC,EAAaqzB,EAAUC,GAAO,yBAC5C,gBACKvzB,KAAOA,EACZ,EAAKC,YAAcA,EACnB,EAAKqzB,SAAWA,EAChB,EAAKC,MAAQA,EAL+B,EADpD,cAA0B7xC,G,+/BCpEnB,IAAM8xC,GAAb,a,sRAAA,U,UAAA,G,EAAA,E,kZACI,WAAYtyC,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,O,EAAA,G,EAAA,oBAMI,WACI,MAAO,CAAC,OAAQ,e,gFAPxB,GAAgCa,GA4BzB,SAASyyC,GAA8BC,GAC1C,IACM95C,EAAI85C,EAAwC95C,EAClD,OAAOolB,EAAAA,EAAAA,eAAc,MAAO9e,EAAUuX,GAAmD,CAAC,0BAA2B,CACjHk8B,OADuD5G,GAA0BnzC,QAKlF,SAASg6C,GAAsBC,GAClC,IAAIp0B,EAAQC,EAAQC,EAAMC,EAOtBk0B,EANEC,EAAuBF,EAAgCE,qBACvDC,EAAWH,EAAgCG,SAC3CC,EAAUJ,EAAgCI,QAC1CC,EAAcL,EAAgCK,YAC9CC,EAAWN,EAAgCM,SAC3ClL,EAAQ4K,EAAgC5K,MAE9C,GAAgB,MAAZ+K,EAAkB,CAClB,IAAMI,EAAwB,EAAXJ,EACnBF,EAAOp5B,GAAK7a,GAAI,SAACjG,EAAGM,GAAJ,OAAUiF,EAAkBvF,EAAGM,KAAI4B,GAAOq4C,GAAWC,GAAaD,QAGlFL,EAAOK,EAEX,IAAME,EAAe,SAACC,EAAY52B,GAC9B,IAAMkB,EAAUzG,GAAQ,CAAiB,IAAfuF,EAAOxc,IAAa,CAAC,UAAW,SAAC6gB,GACvDrE,EAAOvd,OAAO,OACb,CAAC,OAAQud,EAAOvd,OAAO,IAAK,CAAC,YAAa,SAAU,CAAC,WAAY1G,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,OAAQ,CAC3HE,SAAU,CAACo1B,MACXt1B,EAAAA,EAAAA,eAAc,MAAO,CACrBC,UAAW,oBAEf,OAAOD,EAAAA,EAAAA,eAAc,IAAK9e,EAAU8d,GAAuB,SAAUY,MAEnE21B,EAAelxC,IAAW,SAACxH,EAAG24C,GAChC,IAAIt1B,EACAu1B,EACEn+B,EAAak+B,EAAQzB,KAE3B,OADA0B,EAA+B,IAAnBn+B,EAAWpV,IAAaiX,GAAQ,CAACk8B,EAAa,QAAS,IAAIb,GAAW,EAAGl9B,EAAWnW,OAAO,KAAMk0C,EAAa,UAAW,IAAIb,GAAW,EAAGO,EAAqBz9B,EAAWnW,OAAO,QAAUsX,GAAU48B,EAAa,SAAU,IAAIb,GAAW,EAAG5gC,GAAOf,GAAO,iDAAde,CAAqE4hC,EAAQ7B,QAA7E//B,CAAsF4hC,EAAQ5B,aAClV5zB,EAAAA,EAAAA,eAAc,UAAW,CAC5BC,UAAW,yBACXC,SAAUzlB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CAC9DC,UAAWrM,GAAOf,GAAO,wDAAde,CAAuE/W,GAClF64C,QAAS,SAAChQ,GACN,IAAMiQ,EAAgBC,SAASC,uBAAuBjiC,GAAOf,GAAO,mBAAde,CAAkC/W,IAAI,GAC5F84C,EAAcG,cAAcC,UAAUC,OAAO,aAC7C,IAAMC,EAAMN,EAAcE,uBAAuB,OAAO,GAC1C,MAAPI,GAAmBA,EAAIF,UAAUG,SAAS,SAC5BD,EAAIF,UAAU7sC,IAAI,QAEvCgsC,EAAYh2C,IAAI,SAACwR,GACb,OAAIlR,EAAOkR,EAAG8kC,GACH,IAAIW,GAAUzlC,EAAEgjC,GAAIhjC,EAAEijC,QAASjjC,EAAEkjC,QAASljC,EAAEmjC,KAAMnjC,EAAE5R,MAAM,EAAO4R,EAAEqjC,MAGnErjC,IAEZykC,KAEPj1B,SAAUzlB,EAAAA,SAAAA,QAAkC,EAAEylB,EAAW/G,GAAQ,EAAC6G,EAAAA,EAAAA,eAAc,MAAO,CACnFC,UAAW,oBACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKoI,GAAOlB,IAAM,kBAAMpD,GAAO47B,EAAQ1B,OAAS91B,IAAYgC,EAAAA,EAAAA,eAAc,MAAO,CAC/Ho2B,MAAO,CACHC,YAAa,IAEjBp2B,UAAW,cACTzH,KAASwE,IAAM,WACjB,IAAIs5B,EACJ,OAAOt4B,IAAas4B,EAAYd,EAAQ3B,KAAO,IAAO72C,GAASw4C,EAAQ12C,KAAM,eAAgBkhB,EAAAA,EAAAA,eAAc,OAAQ,CAC/GE,SAAU,CAACo2B,oBAGnBt2B,EAAAA,EAAAA,eAAc,OAAQ,CACtBC,UAAW,uBACXC,SAAUs1B,EAAQ7B,aAChB3zB,EAAAA,EAAAA,eAAc,MAAO,CACvBE,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKoK,YAE3DF,EAAAA,EAAAA,eAAc,MAAO,CACrBC,UAAW,iBACXC,SAAUzlB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CAC9DC,UAAW,iCACXC,SAAUzlB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAcy0B,GAA+B,CACtF75C,EAAG46C,EAAQ5B,eAEf5zB,EAAAA,EAAAA,eAAc,UAAW,CACzBE,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2/B,gBAIpEX,GACGyB,EAAWp9B,GAAQ,CAAC,CAAC,QAAS,CAChC4H,UAAW,OACXlB,gBAAiB,YACjB,CAAC,WAAYplB,EAAAA,SAAAA,QAAkC,EAAEgmB,EAAStH,GAAQ,EAAEuH,EAASjI,IAAWkI,EAAOlI,IAAUuH,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,YAAa,gCAAgCuH,EAAAA,EAAAA,eAAc,MAAO,CACxPC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SACrDX,EAAAA,EAAAA,eAAc,UAAW,CAC3BC,UAAW,QACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,QACrDE,EAAS1C,GAAOlB,IAAM,kBAAMpD,GAAOoE,IAAYgC,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,WAAYwxB,QAAajtB,IAAM,kBAAMpD,GAAOoE,IAAYgC,EAAAA,EAAAA,eAAc,UAAW,CAC3MC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKy/B,OACtDv4B,IAAM,kBAAQlgB,GAAOg4C,GAAQh4C,GAAOq4C,GAAan3B,IAAYgC,EAAAA,EAAAA,eAAc,IAAK,CACjF01B,QAAS,SAACc,GACNvB,EAAQ,IAAI50B,GAAW,KAE3BH,SAAU,uBACR1H,kBAAgBwH,EAAAA,EAAAA,eAAc,MAAO,CACvCC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK8K,UACpDZ,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,YAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQu3B,KCxJlE,SAASE,GAA+BC,GAC3C,IAAIj2B,EAAQC,EAAQC,EAAMg2B,EACtBxgB,EACEvW,EAAUzG,GAAQ,CAAC,CAAC,YAAa,kBAAmB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK5W,IAAI,SAAC4C,GAAD,OAAUke,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU7F,GAAQ,CAAC,CAAC,YAAarX,GAAO,CAAC,YAAa,QAAS,CAAC,WAAYA,UAAYqX,GAAQ,CAAC,OAAQ,UAAW,iBAC5Sgd,GAASnW,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAWY,KAC1E,IAAMg3B,EAAe13C,IAAI,SAAC23C,GACtB,IAAIC,EAASh2B,EACTi2B,EACEC,EAAOpjC,GAAOf,GAAO,SAC3BkkC,EAAkB,SAAC32B,GAAD,OAAW42B,EAAK52B,IAClC,IAAM62B,EAAW99B,GAAQ,CAAC,CAAC,YAAa,eAAgB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAAEq8C,EAAU39B,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,WAAYnH,GAAkB6kC,EAAY/3C,UAAUkhB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU83B,OAAa92B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUvG,GAAU,CAAC,WAAYo+B,EAAYtD,WAAYzyB,EAAW3H,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO,CAChfC,UAAW,sBACXC,SAAU62B,EAAeF,EAAYzD,WACrCpzB,EAAAA,EAAAA,eAAc,MAAO,CACrBC,UAAW,uBACXC,SAAU62B,EAAeF,EAAYxD,iBAChCrzB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU8B,WACzE,OAAOd,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAWi4B,OACzEP,EAAQvC,QACL+C,EAAW/9B,GAAQ,CAAC,CAAC,QAAS,CAChC4H,UAAW,OACXlB,gBAAiB,YACjB,CAAC,WAAYplB,EAAAA,SAAAA,QAAkC,EAAEgmB,EAAStH,GAAQ,EAAEuH,EAASjI,IAAWkI,EAAOlI,IAAUuH,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,YAAa,6BAA6BuH,EAAAA,EAAAA,eAAc,MAAO,CACrPC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SACrDX,EAAAA,EAAAA,eAAc,UAAW,CAC3BC,UAAW,QACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,QACrDi2B,EAAU19B,GAAgB,EAAC+G,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,WAAYi+B,EAAQ11B,UAAWmV,GAASygB,IAAe52B,EAAAA,EAAAA,eAAc,MAAO,CAClLC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6gC,UACpD32B,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,YAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQk4B,KAGlE,SAASC,GAAqBC,GACjC,IAAI32B,EAAQC,EAAQC,EAAM02B,EAGtBlhB,EAFEmhB,EAAcF,EAA+BE,YAC7CC,EAAWH,EAA+BG,SAE1C33B,EAAUzG,GAAQ,CAAC,CAAC,YAAa,kBAAmB,CAAC,WAAY1e,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK5W,IAAI,SAAC4C,GAAD,OAAUke,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU7F,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,WAAYrX,UAAYqX,GAAQ,CAAC,OAAQ,UAAW,8BACvRgd,GAASnW,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAWY,KAC1E,IAAM43B,EAAat4C,IAAI,SAACw3C,GACpB,IAAI71B,EAAS42B,EAASC,EFkBc98C,EnB07BX+J,EAAYC,EAAI9D,EmBz7BvCwW,EElBIwJ,EAAW3H,GAAQ,CAAC,CAAC,UAAW,SAAC4J,GACnC40B,OAAOC,SAASC,KAAOjkC,GAAOf,GAAO,OAAde,CAAsB8iC,EAAQ11B,MACrDs2B,EAAYZ,EAAQ11B,QACpB,CAAC,YAAa,WAAY,CAAC,WAAYvmB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU7F,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,WAAYu9B,EAAQ11B,YAAaH,EAAU3C,GAAOlB,IAAM,kBAAMpD,GAAOoE,GAAY,CAAC,YAAa,SAAUhB,IAAM,kBAAMpD,IH/DpRhf,EG+DoSw5C,GAAqBsC,GH/DtTx7C,EG+DgUq3C,GAAU,EAAG,EAAG,GAAG,EAAO,GH9D1W33C,EAAE6zC,IAAIvzC,GG8D0W,EAAK8iB,GAAY,CAAC,QAAS,CAC1Y85B,MAAO,aACLt/B,MAASwE,IAAM,WACjB,IAAI+6B,EACJ,OAAO/5B,GAAY,CAAC,YAAa+5B,EAAU3D,GAAqBsC,GAAU9iC,GAAOf,GAAO,QAAde,CAAuBmkC,UHnEtG,IAAiBn9C,EAAGM,WGoEV8kB,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU6B,OAAc42B,EAAUt+B,GAAQ,CAAC,CAAC,YAAa,QAAS,CAAC,YFS9Fve,EETsJ87C,ErBm8BjK/xC,EmBz7BO,SAACi0B,GAAD,OAAOA,EAAE95B,MnBy7BJ8F,EmBz7BUhK,EAAEu5C,OnBy7BRrzC,EmBz7BgB,CACzDiD,QAAS,SAACgB,EAAK7J,GAAN,OAAYsF,GAAQuE,EAAK7J,KADhCoc,EnB07BCwD,IAAS,SAAClgB,EAAGM,GAAJ,OAA6D,EAAlD4F,EAASiD,QAAQY,EAAW/J,GAAI+J,EAAWzJ,MAAW0J,GqBp8BkE8yC,EFa9Ih/B,GAAQpB,GAKFpa,GADYwU,MAHZsF,GAAKM,GAAYxY,KEd4KkT,GAAkB0lC,QAAmB13B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUy4B,WACzS,OAAOz3B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAW8B,OACzEy2B,GACGS,EAAW7+B,GAAQ,CAAC,CAAC,QAAS,CAChC4H,UAAW,OACXlB,gBAAiB,YACjB,CAAC,WAAYplB,EAAAA,SAAAA,QAAkC,EAAEgmB,EAAStH,GAAQ,EAAEuH,EAASjI,IAAWkI,EAAOlI,IAAUuH,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,YAAa,6BAA6BuH,EAAAA,EAAAA,eAAc,MAAO,CACrPC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SACrDX,EAAAA,EAAAA,eAAc,UAAW,CAC3BC,UAAW,QACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,QACrD22B,EAAUp+B,GAAgB,EAAC+G,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAASvG,GAAU,CAAC,WAAY,gBAAiB0d,GAASqhB,IAAax3B,EAAAA,EAAAA,eAAc,MAAO,CAC9KC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKuhC,UACpDr3B,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,YAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQg5B,K,y7EC/FlE,IAAMC,GAAb,WACI,aAA+B,IAAnBC,EAAmB,mEAC3B18C,KAAK28C,IAAM,EACX38C,KAAK48C,WAAaF,EAClB18C,KAAK68C,WAAa,IAAI9O,IAJ9B,oCAMI,WACI,OAAO/tC,KAAK48C,aAPpB,oBASI,WACI,IAAK58C,KAAK48C,WAAY,CAClB58C,KAAK48C,YAAa,EADA,Q,gmBAAA,CAES58C,KAAK68C,YAFd,IAElB,4BACIC,G,EADwC,Q,EAAA,E,oiBAAA,MAF1B,+B,UAV9B,yBAiBI,SAAYh0C,GACR,IAAMlF,EAAK5D,KAAK28C,IAEhB,OADA38C,KAAK68C,WAAWz6C,IAAIpC,KAAK28C,MAAO7zC,GACzBlF,IApBf,4BAsBI,SAAeA,GACX,OAAO5D,KAAK68C,WAAL,OAAuBj5C,KAvBtC,sBAyBI,SAASkF,EAAGwU,GACR,IAAMy/B,EAAI/8C,KACJ4D,EAAK5D,KAAKg9C,YAAqB,MAAT1/B,EAAgBxU,EAAI,kBAAMA,EAAEwU,KACxD,MAAO,CAAEW,QAAF,WAAc8+B,EAAEE,eAAer5C,SA5B9C,KA+Bas5C,GAAb,a,sRAAA,U,IAAA,G,EAAA,E,uJACI,aAAc,wBACV,cAAM,8BACNv9C,OAAOw9C,eAAP,MAA4BD,EAAuBpyC,WAFzC,EADlB,iBAA4CxK,QAM/B88C,GAAb,WACI,aAAc,WACVp9C,KAAKq9C,UAAY,EAFzB,4CAOI,WACI,OAAOr9C,KAAKq9C,YAAcD,EAAWE,yBAR7C,oBAUI,SAAOx0C,GACH9I,KAAKq9C,UAAY,EACjBE,WAAWz0C,EAAG,MAZtB,mCAII,WACI,OAAO,QALf,KAeO,SAAS00C,GAAc10C,GAC1B,OAAO,SAACgoB,GACJ,GAAIA,EAAI2sB,YAAYC,YAChB5sB,EAAI6sB,SAAS,IAAIT,SAEhB,GAAIpsB,EAAI8sB,WAAWC,oBACpB/sB,EAAI8sB,WAAWE,QAAO,WAClB,IACIh1C,EAAEgoB,GAEN,MAAOitB,GACHjtB,EAAIktB,QAAQD,YAKpB,IACIj1C,EAAEgoB,GAEN,MAAOitB,GACHjtB,EAAIktB,QAAQD,KA0BrB,IAAME,GAAb,kEACI,SAAKC,EAAaC,GACd,OAvBD,SAAuBD,EAAaC,GACvC,OAAOX,IAAc,SAAC1sB,GAClBotB,EAAY,CACRE,UAAW,SAACh/C,GACR,IACI++C,EAAO/+C,EAAP++C,CAAUrtB,GAEd,MAAOutB,GACHvtB,EAAIktB,QAAQK,KAGpBL,QAASltB,EAAIktB,QACbL,SAAU7sB,EAAI6sB,SACdF,YAAa3sB,EAAI2sB,YACjBG,WAAY9sB,EAAI8sB,gBASbU,CAAcJ,EAAaC,KAF1C,qBAII,SAAQI,EAAcC,GAClB,OAAOx+C,KAAKy+C,KAAKF,GAAc,kBAAMC,OAL7C,mBAOI,SAAM/8B,GACF,OAAO+7B,IAAc,SAAC1sB,GAAD,OAASrP,GAAAA,CAAYqP,QARlD,iBAUI,SAAI4tB,EAAU9vB,GACV,IAAM7uB,EAAO2+C,EAASh+C,OAAOC,YACzBT,EAAMH,EAAKI,OACf,OAAOH,KAAK2+C,OAAM,kBAAOz+C,EAAIG,OAAML,KAAK4+C,OAAM,WAC1C,IAAMpuC,EAAMoe,EAAK1uB,EAAIE,OAErB,OADAF,EAAMH,EAAKI,OACJqQ,QAhBnB,oBAmBI,SAAOpQ,GACH,OAvBD,SAAyBA,GAC5B,OAAOo9C,IAAc,SAAC1sB,GAAD,OAASA,EAAIstB,UAAUh+C,MAsBjCy+C,CAAgBz+C,KApB/B,wBAsBI,SAAW89C,GACP,OAAOA,IAvBf,wBAyBI,SAAWA,EAAaY,GACpB,OAAOtB,IAAc,SAAC1sB,GAClBotB,EAAY,CACRE,UAAW,SAACh/C,GACR0/C,IACAhuB,EAAIstB,UAAUh/C,IAElB4+C,QAAS,SAAC5+C,GACN0/C,IACAhuB,EAAIktB,QAAQ5+C,IAEhBu+C,SAAU,SAACv+C,GACP0/C,IACAhuB,EAAI6sB,SAASv+C,IAEjBq+C,YAAa3sB,EAAI2sB,YACjBG,WAAY9sB,EAAI8sB,kBAzChC,qBA6CI,SAAQM,EAAaa,GACjB,OAAOvB,IAAc,SAAC1sB,GAClBotB,EAAY,CACRE,UAAWttB,EAAIstB,UACfT,SAAU7sB,EAAI6sB,SACdF,YAAa3sB,EAAI2sB,YACjBG,WAAY9sB,EAAI8sB,WAChBI,QAAS,SAACK,GACN,IACIU,EAAaV,EAAbU,CAAiBjuB,GAErB,MAAOkuB,GACHluB,EAAIktB,QAAQgB,YAzDpC,mBA+DI,SAAMC,EAAUd,GACZ,OAAOn+C,KAAKk/C,WAAWf,EAAOc,IAAW,kBAAMA,EAAShhC,eAhEhE,mBAkEI,SAAMkhC,EAAOjB,GAAa,WACtB,OAAIiB,IACOn/C,KAAKy+C,KAAKP,GAAa,kBAAM,EAAKS,MAAMQ,EAAOjB,MAG/Cl+C,KAAKo/C,YAAO,KAvE/B,kBA0EI,WACI,OAAO5B,IAAc,SAAC1sB,GAAD,OAASA,EAAIstB,eAAU,UA3EpD,KA8EanhC,GAAY,IAAIghC,GCtK7B,SAASoB,GAAkBC,IAmEpB,SAASC,GAAalyC,GACzB,OAAOmyC,IAAkB,SAACC,GAAD,OAAWpyC,EAAEqyC,KAAKD,EAAM,IAAb,OAAuB,SAAC1B,GAAD,OAAUA,aAAeb,GAC9EuC,EAAM,GAAKA,EAAM,IAAI1B,SAKxB,IAAM4B,GAA2B,IAAIlD,GAYrC,SAAS+C,GAAkB12C,GAC9B,OAAO00C,IAAc,SAAC1sB,GAAD,OAAShoB,EAAE,CAACgoB,EAAIstB,UAAWttB,EAAIktB,QAASltB,EAAI6sB,cAK9D,SAASiC,GAASC,GACrB,OAzFWp+B,EAyFE,kBAAM89B,GAAaO,QAAQlc,IAAIvkC,MAAMib,KAAKulC,GAAc,SAACE,GAAD,OAAOC,GAAeD,SAxFpFvC,IAAc,SAAC1sB,GAAD,OAASrP,GAAAA,CAAYqP,MAD9C,IAAerP,EA2HR,SAASw+B,GAAe/B,EAAagC,GACxC,OAJG,SAAehC,EAAagC,GAC/B,OAAOC,GAAuBjC,EAAagC,GAGpCt3C,CAAMs1C,EAAagC,GAEvB,SAASC,GAAuBjC,EAAakC,EAAcC,EAAuBC,EAA0B7C,GACnF,mBAAjB2C,IACP3C,EAAc2C,EACdA,OAAer/C,GAEnB,IAAM68C,EAAa,IAAIR,GACvBc,EAAY,CACRE,UAAWgC,GAA8Bf,GACzCrB,QAASqC,GAAgDhB,GACzD1B,SAAU2C,GAAsDjB,GAChE5B,YAAaA,GAA4BkC,GACzC/B,WAAAA,IAGD,SAASoC,GAAe9B,EAAagC,GACxC,OAAO,IAAIJ,SAAQ,SAACS,EAASC,GAAV,OAAqBL,GAAuBjC,EAAaqC,EAASC,EAAQA,EAAQN,GAAwCP,OCgK1I,SAASc,GAA2CC,GACvD,OAAOzhD,EAAAA,SAA0ByhD,G,kzDCzT9B,IAAMC,GAAb,gCACI,WAAYj6C,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,MAAO,OAAQ,MAAO,QAAS,SAAU,OAAQ,eAPjE,GAAgCa,GAenBo6C,GAAb,gCACI,WAAYl6C,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,cAPhB,GAA4Ba,GAefq6C,GAAb,gCACI,WAAYn6C,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,QAAS,OAAQ,SAAU,YAP3C,GAAiCa,GA8BpBs6C,GAAb,gCACI,WAAYC,EAAKC,EAAQnb,EAASob,EAAiBC,EAAmBC,EAAuBC,GAAS,yBAClG,gBACKL,IAAMA,EACX,EAAKC,OAASA,EACd,EAAKnb,QAAUA,EACf,EAAKob,gBAAkBA,EACvB,EAAKC,kBAAoBA,EACzB,EAAKC,sBAAwBA,EAC7B,EAAKC,QAAUA,EARmF,EAD1G,cAAiCl6C,GAiBpBm6C,GAAb,gCACI,WAAY36C,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,OAAQ,OAAQ,cAAe,eAP/C,GAAqCa,GAexB86C,GAAb,gCACI,WAAYC,EAAYC,EAAcC,EAAcC,EAAiBN,GAAS,yBAC1E,gBACKG,WAA2B,EAAbA,EACnB,EAAKC,aAAeA,EACpB,EAAKC,aAAeA,EACpB,EAAKC,gBAAkBA,EACvB,EAAKN,QAAUA,EAN2D,EADlF,cAAkCl6C,G,26DCrF3B,IAAMy6C,GAAb,IACI,WAAYjd,EAAG/gC,GAAG,WACd3D,KAAK0kC,EAAIA,EACT1kC,KAAK2D,EAAIA,KAQV,SAASi+C,GAA2Bld,EAAG/gC,GAC1C,OAAO,IAAIg+C,GAAcjd,EAAG/gC,GAGzB,SAASk+C,GAAuBtoC,GACnC,OAAOA,EAAEmrB,EAGN,SAASod,GAAyBvoC,GACrC,OAAOA,EAAE5V,EAGN,IAAMo+C,GAAb,gCACI,WAAYrd,EAAG/gC,EAAGq+C,EAAMC,EAAOx/C,GAAG,yBAC9B,cAAMiiC,EAAG/gC,IACJq+C,KAAOA,EACZ,EAAKC,MAAQA,EACb,EAAKx/C,EAAS,EAAJA,EAJoB,EADtC,cAAmCk/C,IAa5B,SAASO,GAA6Bxd,EAAG/gC,EAAGq+C,EAAMC,EAAOx/C,GAC5D,OAAO,IAAIs/C,GAAcrd,EAAG/gC,EAAGq+C,EAAMC,EAAOx/C,GAGzC,SAAS0/C,GAAwB5oC,GACpC,OAAOA,EAAEyoC,KAGN,SAASI,GAAyB7oC,GACrC,OAAOA,EAAE0oC,MAGN,SAASI,GAA0B9oC,GACtC,OAAOA,EAAE9W,EAON,SAAS6/C,GAAsB9jC,EAAS+jC,GAC3CD,EACA,OAAa,CACT,IAAM/kC,EAAMiB,EACZ,GAAS,MADgB+jC,EACV,CACX,IAAMC,EAFeD,EAGrB,GAAIC,aAAcT,GAAe,CAC7BvjC,EAAU8jC,GAAsB/kC,EAAM,EAAG4kC,GAAwBK,IACjED,EAAQH,GAAyBI,GACjC,SAASF,EAGT,OAAQ/kC,EAAM,EAAK,EAIvB,OAAa,EAANA,GAMZ,SAASklC,GAAmBrjD,GAC/B,OAAOkjD,GAAsB,EAAGljD,GAG7B,SAASsjD,GAAiBtlB,EAAGsH,EAAG/gC,EAAGqjB,GACtC,IAAI27B,EASAC,EASEC,EAA8B,IAdhCF,EAFK,MADCvlB,EAAAA,aAGe2kB,GAAiBM,GAHhCjlB,GAGgE,EAGjE,IAMLwlB,EAFO,MADC57B,EAAAA,aAGe+6B,GAAiBM,GAHhCr7B,GAGkE,EAGrE,GAEgB47B,EAAKD,GAC9B,OAAY,IAARE,EACOjB,GAA2Bld,EAAG/gC,GAG9Bu+C,GAA6Bxd,EAAG/gC,EAAGy5B,EAAGpW,EAAG67B,EAAM,GAIvD,SAASC,GAAwBC,EAAIre,EAAG/gC,EAAGq/C,GAC9C,IAAIH,EAAKI,EAAMC,EAAKC,EAChBC,EASAC,EASJ,GAdID,EAFK,MADCL,EAAAA,aAGgBhB,GAAiBM,GAHjCU,GAGiE,EAGjE,GAMNM,EAFO,MADCL,EAAAA,aAGgBjB,GAAiBM,GAHjCW,GAGmE,EAGrE,GAECI,EAAM,EAAI,CACjB,IAAMtnC,EAAa+C,GAAQmkC,GAC3B,GAAIlnC,aAAsBimC,GAAe,CACrC,IAAyD,OAAnDc,EAAMV,GAAwBrmC,KAA+BmnC,EAAOJ,aAAsBd,GAAiBM,GAA0BY,GAAQ,EAAM,GAAOG,EAAM,EAAI,CACtK,IAAMjiC,EAAetC,GAAQsjC,GAAwBrmC,IACrD,GAAIqF,aAAwB4gC,GACxB,OAAOW,GAAiBA,GAAiBK,EAAIre,EAAG/gC,EAAGw+C,GAAwBhhC,IAAgB0gC,GAAuB1gC,GAAe2gC,GAAyB3gC,GAAeuhC,GAAiBN,GAAyBjhC,GAAe0gC,GAAuB/lC,GAAagmC,GAAyBhmC,GAAasmC,GAAyBtmC,KAGrU,MAAO,IAAIxb,MAAM,iCAIrB,OAAOoiD,GAAiBA,GAAiBK,EAAIre,EAAG/gC,EAAGw+C,GAAwBrmC,IAAc+lC,GAAuB/lC,GAAagmC,GAAyBhmC,GAAasmC,GAAyBtmC,IAIhM,MAAO,IAAIxb,MAAM,iCAGpB,GAAI8iD,EAAOC,EAAM,EAAI,CACtB,IAAMn1B,EAAerP,GAAQkkC,GAC7B,GAAI70B,aAAwB6zB,GAAe,CACvC,IAA4D,OAAtDmB,EAAMd,GAAyBl0B,KAAiCi1B,EAAOD,aAAsBnB,GAAiBM,GAA0Bc,GAAQ,EAAM,GAAOE,EAAM,EAAI,CACzK,IAAMrwB,EAAenU,GAAQujC,GAAyBl0B,IACtD,GAAI8E,aAAwB+uB,GACxB,OAAOW,GAAiBA,GAAiBP,GAAwBj0B,GAAe2zB,GAAuB3zB,GAAe4zB,GAAyB5zB,GAAei0B,GAAwBnvB,IAAgB6uB,GAAuB7uB,GAAe8uB,GAAyB9uB,GAAe0vB,GAAiBN,GAAyBpvB,GAAe0R,EAAG/gC,EAAGq/C,IAGnV,MAAO,IAAI1iD,MAAM,iCAIrB,OAAOoiD,GAAiBP,GAAwBj0B,GAAe2zB,GAAuB3zB,GAAe4zB,GAAyB5zB,GAAew0B,GAAiBN,GAAyBl0B,GAAewW,EAAG/gC,EAAGq/C,IAIhN,MAAO,IAAI1iD,MAAM,iCAIrB,OAAOoiD,GAAiBK,EAAIre,EAAG/gC,EAAGq/C,GAInC,SAASM,GAAkBh+C,EAAUo/B,EAAG/gC,EAAGuR,GAC9C,GAAS,MAALA,EAAW,CACX,IAAMstC,EAAKttC,EACLmH,EAAsD,EAAlD/W,EAASiD,QAAQm8B,EAAGmd,GAAuBW,IACrD,OAAIA,aAAcT,GACV1lC,EAAI,EACGymC,GAAwBQ,GAAkBh+C,EAAUo/B,EAAG/gC,EAAGw+C,GAAwBK,IAAMX,GAAuBW,GAAKV,GAAyBU,GAAKJ,GAAyBI,IAEvK,IAANnmC,EACE6lC,GAA6Bxd,EAAG/gC,EAAGw+C,GAAwBK,GAAKJ,GAAyBI,GAAKH,GAA0BG,IAGxHM,GAAwBX,GAAwBK,GAAKX,GAAuBW,GAAKV,GAAyBU,GAAKc,GAAkBh+C,EAAUo/B,EAAG/gC,EAAGy+C,GAAyBI,KAGhLnmC,EAAI,EACF6lC,GAA6Bxd,EAAG/gC,OAAG4/C,EAAuBruC,EAAG,GAEzD,IAANmH,EACEulC,GAA2Bld,EAAG/gC,GAG9Bu+C,GAA6Bxd,EAAG/gC,EAAGuR,OAAGquC,EAAuB,GAIxE,OAAO3B,GAA2Bld,EAAG/gC,GA2RtC,SAAS6/C,GAAsB/S,EAAO8R,GACzCiB,EACA,OAAa,CACT,IAAM16C,EAAI2nC,EACV,GAAS,MADY8R,EACN,CACX,IAAMC,EAFWD,EAGjB,GAAIC,aAAcT,GAAe,CAC7ByB,GAAsB16C,EAAGq5C,GAAwBK,IACjD15C,EAAE+4C,GAAuBW,GAAKV,GAAyBU,IACvD/R,EAAQ3nC,EACRy5C,EAAQH,GAAyBI,GACjC,SAASgB,EAGT16C,EAAE+4C,GAAuBW,GAAKV,GAAyBU,IAG/D,OAID,SAASiB,GAAmB36C,EAAGoM,GAClCsuC,GAAsB16C,EAAGoM,GA+QtB,SAASwuC,GAA0BxuC,EAAGqK,EAAKle,GAC9C,IAAIyD,EAAIzD,EACRoiD,IAAmB,SAACrkD,EAAGM,GACnB6f,EAAIza,GAAK,CAAC1F,EAAGM,GACboF,EAAMA,EAAI,EAAK,IAChBoQ,GAgCA,SAASyuC,GAAsBr+C,EAAUia,GAE5C,IADA,IAAI/O,OAAM+yC,EACD/pC,EAAM,EAAGA,GAAQ+F,EAAIje,OAAS,EAAIkY,IAAO,CAC9C,IAAMw2B,EAAazwB,EAAI/F,GACvBhJ,EAAM8yC,GAAkBh+C,EAAU0qC,EAAW,GAAIA,EAAW,GAAIx/B,GAEpE,OAAOA,EAqBJ,IAAMozC,GAAb,gCACI,WAAYC,EAAO7iC,GAAS,yBACxB,gBACK6iC,MAAQA,EACb,EAAK7iC,QAAUA,EAHS,EADhC,cAAiD9Z,GAY1C,SAAS48C,GAA0BC,GACtCD,EACA,OAAa,CACT,IAAMD,EAAQE,EACd,GAAKC,GAAUH,GAmBX,OAAOtgB,KAlBP,IAAMlV,EAAO5S,GAAKooC,GACZ3uC,EAAIsG,GAAKqoC,GACf,GAAS,MAAL3uC,EAAW,CACX,IAAMstC,EAAKttC,EACX,GAAIstC,aAAcT,GAAe,CAC7BgC,EAAYtmC,GAAgB,CAAC0kC,GAAwBK,GAAKZ,GAA2BC,GAAuBW,GAAKV,GAAyBU,IAAMJ,GAAyBI,IAAMn0B,GAC/K,SAASy1B,EAGT,OAAOD,EAIXE,EAAY11B,GAWrB,SAAS41B,GAAyB/uC,GACrC,OAAO,IAAI0uC,GAA4BE,GAA0B7mC,GAAU/H,KAAK,GAW7E,SAASgvC,GAAsB7iD,GAClC,GAAIA,EAAE2f,QAAS,CACX,IAAMlF,EAAaza,EAAEwiD,MACrB,GAAKG,GAAUloC,GAeX,OAtBL,WACH,MAAO,IAAIxb,MAAM,gCAqBF6jD,GAdP,GAAwB,MAApB3oC,GAAKM,GAAqB,CAC1B,IAAM5G,EAAIsG,GAAKM,GACf,GAAI5G,aAAa6sC,GACb,MAAO,IAAIzhD,MAAM,mEAGjB,MAAO,CAACuhD,GAAuB3sC,GAAI4sC,GAAyB5sC,IAIhE,MAAO,IAAI5U,MAAM,mEAQzB,OA9BD,WACH,MAAO,IAAIA,MAAM,2BA6BN8jD,GAgCR,SAASC,GAA4BnvC,GAAG,MACvC7T,EAAI4iD,GAAyB/uC,GACjC,eACK,wDADL,WAEQ,OAAOgvC,GAAsB7iD,MAFrC,KAIK,8CAJL,WAKQ,OAAO6iD,GAAsB7iD,MALrC,KAOK,2CAPL,WAQQ,OAtCL,SAAgCA,GACnC,GAAIA,EAAE2f,QAAS,CACX,IAAMlF,EAAaza,EAAEwiD,MACrB,GAAKG,GAAUloC,GAgBX,OAAO,EAfP,GAAwB,MAApBN,GAAKM,GAAqB,CAE1B,GADUN,GAAKM,aACEimC,GACb,MAAO,IAAIzhD,MAAM,oEAIjB,OADAe,EAAEwiD,MAAQC,GAA0BroC,GAAKK,KACjCkoC,GAAU3iD,EAAEwiD,OAIxB,MAAO,IAAIvjD,MAAM,oEASzB,OADAe,EAAE2f,SAAU,GACJgjC,GAAU3iD,EAAEwiD,OAcTS,CAAuBjjD,MARtC,KAUK,wCAVL,WAWQA,EAAI4iD,GAAyB/uC,MAXrC,iCA6BG,IAAMqvC,GAAb,cACI,WAAYj/C,EAAUk+B,GAAM,WACxBxjC,KAAKsF,SAAWA,EAChBtF,KAAKwjC,KAAOA,EAHpB,sCAKI,WAEI,OAA2C,EAwR5C,SAAoCghB,GACvC,IAAMC,EAAc,SAACrlD,EAAGM,GAAJ,OAAaN,GAAK,GAAKM,EAAK,KAC5C8Q,EAAM,EACJwN,EAAazd,EAAcikD,GACjC,IACI,KAAOxmC,EAAW,8CAA8C,CAC5D,IAAM0mC,EAA0B1mC,EAAW,0DAC3CxN,EAAsE,EAA/Di0C,EAAYj0C,EAAKtN,EAAewhD,EAAwB,KAC/Dl0C,EAAsE,EAA/Di0C,EAAYj0C,EAAKtN,EAAewhD,EAAwB,MAJvE,QAQI1mC,EAAWC,UAEf,OAAa,EAANzN,EAtSIm0C,CADO3kD,QANtB,oBASI,SAAO4kD,GAEH,KAAIA,aAAgBL,GAqChB,OAAO,EApCP,IAAMl8C,EAAK9H,EAFDP,MAGV,IACI,IAAMsI,EAAK/H,EAAcqkD,GACzB,IAsBI,OArBa,SAAPhpC,IACF,IAAMipC,EAAKx8C,EAAG,6CACd,GAAIw8C,IAAOv8C,EAAG,6CAA8C,CACxD,GAAKu8C,EAGA,CACD,IAAMC,EAAMz8C,EAAG,0DACT08C,EAAMz8C,EAAG,0DACf,SAAItE,EAAO8gD,EAAI,GAAIC,EAAI,MAAO/gD,EAAO8gD,EAAI,GAAIC,EAAI,MACtCnpC,IANX,OAAO,EAcX,OAAO,EAGRA,GAtBX,QAyBItT,EAAG2V,WA3BX,QA+BI5V,EAAG4V,aA5CnB,sBAmDI,WAEI,MAAQ,QAAU5X,GAAK,KAAMujB,IAAM,SAAC/jB,GAAD,OAAQ4M,GAAO,aAAc5M,EAAG,GAAIA,EAAG,MAD5D7F,OAC4E,MArDlG,KAuDSU,OAAOskD,YAvDhB,IAuDI,WACI,MAAO,cAxDf,oBA0DI,SAAO5oC,GAEH,OAAO/c,MAAMib,KADCta,QA3DtB,2BA8DI,WAEI,OAAOqkD,GADIrkD,KAC2BwjC,QAhE9C,KAkEK9iC,OAAOC,SAlEZ,MAkEI,WACI,OAAOC,EAAWZ,KAAKS,mBAnE/B,KAqEK,+CArEL,MAqEI,WAEI,OAAO4jD,GADIrkD,KAC2BwjC,QAvE9C,uBAyEI,SAAU59B,GACN,IAAMsP,EAAIlV,KACV,GAAI4F,aAAe2+C,EACf,OAGa,EzBpoBlB,SAAqBj/C,EAAU8D,EAAIiV,GACtC,IAAMhW,EAAKuV,GAAMxU,GACjB,IACI,IAAMd,EAAKsV,GAAMS,GACjB,IAII,IAHA,IAAIhC,EAAI,EACJ4oC,EAAK58C,EAAG,6CACR68C,EAAK58C,EAAG,6CACG,IAAN+T,GAAY4oC,GAAOC,GAEd,IADV7oC,EAA4I,EAAvI/W,EAAS+C,EAAG,0DAA2DC,EAAG,8DAE3E28C,EAAK58C,EAAG,6CACR68C,EAAK58C,EAAG,8CAGhB,OAAoD,GAArC,IAAN+T,EAAWA,EAAK4oC,EAAK,EAAKC,GAAM,EAAI,GAXjD,QAcI58C,EAAG2V,WAhBX,QAoBI5V,EAAG4V,WyB2mBQknC,EAAY,SAACC,EAAMC,GACtB,IAAMhpC,EAA2C,EAAvCnH,EAAE5P,SAASiD,QAAQ68C,EAAK,GAAIC,EAAK,IAC3C,OAAqD,GAAtC,IAANhpC,EAAWA,EAAIrX,EAAQogD,EAAK,GAAIC,EAAK,OAC/CnwC,EAAGtP,GAGN,MAAO,IAAItF,MAAM,0CAlF7B,KAqFK,oDArFL,MAqFI,SAAsDlB,GAClD,MAAO,IAAIkB,MAAM,2BAtFzB,KAwFK,iDAxFL,MAwFI,WACI,MAAO,IAAIA,MAAM,2BAzFzB,KA2FK,uDA3FL,MA2FI,SAAyDlB,GACrD,MAAO,IAAIkB,MAAM,2BA5FzB,KA8FK,yDA9FL,MA8FI,SAA2DlB,GAEvD,OAAOkmD,GADGtlD,KACuBZ,EAAE,KAAO4E,EAAOuhD,GADvCvlD,KAC8DZ,EAAE,IAAKA,EAAE,MAhGzF,KAkGK,2DAlGL,MAkGI,SAA6DmgB,EAAKle,GAE9DqiD,GADU1jD,KACkBwjC,KAAMjkB,EAAKle,KApG/C,KAsGK,0DAtGL,MAsGI,WACI,OAAO,IAvGf,KAyGK,qDAzGL,MAyGI,WAEI,OAAiC,EAA1BmkD,GADGxlD,QA1GlB,KA6GK,6DA7GL,MA6GI,WAEI,OAAiC,EAA1BwlD,GADGxlD,QA9GlB,gBAiHI,WAEI,OAAiC,EAA1BwlD,GADGxlD,QAlHlB,mBAqHI,WACI,MAAO,IAAIM,MAAM,2BAtHzB,oBAwHI,SAAOinB,GACH,MAAO,IAAIjnB,MAAM,2BAzHzB,qBA4HI,WAEI,OAAOspB,IAAM,SAACvc,GAAD,MAAO,CAACA,EAAE,GAAIA,EAAE,MADnBrN,QA7HlB,iBAgII,SAAI0kC,GAEA,OAAO6gB,GADGvlD,KACoB0kC,KAlItC,iBAoII,SAAIA,GAEA,OAAO4gB,GADGtlD,KACuB0kC,KAtIzC,kBAwII,WAEI,OAAO9a,IAAM,SAACvc,GAAD,OAAOA,EAAE,KADZrN,QAzIlB,iBA4II,SAAI0kC,EAAG/gC,GAEH,MAAO,IAAIrD,MAAM,2BA9IzB,oBAiJI,WAEI,OAAOspB,IAAM,SAACvc,GAAD,OAAOA,EAAE,KADZrN,QAlJlB,qBAqJI,SAAQ8I,EAAG28C,GACP,IAAMvwC,EAAIlV,KACV0lD,IAAU,SAACr4C,GACPvE,EAAEuE,EAAE,GAAIA,EAAE,GAAI6H,KACfA,OAzJX,KAiKO,SAASywC,GAAgBrgD,EAAUk+B,GACtC,OAAO,IAAI+gB,GAAUj/C,EAAUk+B,GAW5B,SAASoiB,GAAiB1jC,GAC7B,IAAM5c,EAAW8C,KACjB,OAAOu9C,GAAgBrgD,EA3UpB,SAA6BA,EAAU+W,GAC1C,GAAIld,EAAYkd,GACZ,OAAOsnC,GAAsBr+C,EAAU+W,GAEtC,GAAIA,aAAad,GAClB,OApCD,SAA8BjW,EAAU83B,GAC3C,OAAOyoB,IAAO,SAACtoC,EAAK+F,GAAN,OAAoBggC,GAAkBh+C,EAAUge,EAAU,GAAIA,EAAU,GAAI/F,UAAMgmC,EAAuBnmB,GAmC5G0oB,CAAqBxgD,EAAU+W,GAGtC,IAAM6F,EAAK3hB,EAAc8b,GACzB,IACI,OArCL,SAAwC0pC,EAAcvnC,EAASwnC,GAElE,OAAa,CACT,IAAM1gD,EAAWygD,EAAcxoC,EAAMiB,EAAShU,EAAIw7C,EAClD,IAAIx7C,EAAE,6CAQF,OAAO+S,EAPP,IAAMkL,EAAeje,EAAE,0DACvBu7C,EAAezgD,EACfkZ,EAAU8kC,GAAkBh+C,EAAUmjB,EAAa,GAAIA,EAAa,GAAIlL,GACxEyoC,EAAQx7C,GA6BDy7C,CAA+B3gD,OAAUi+C,EAAuBrhC,GAD3E,QAIIA,EAAGjE,WA8TsBioC,CAAoB5gD,EAAU4c,IAW5D,SAASikC,GAAejxC,EAAG/P,EAAK/E,GACnC,OAAOulD,GAAgBzwC,EAAE5P,SAAUg+C,GAAkBpuC,EAAE5P,SAAUH,EAAK/E,EAAO8U,EAAEsuB,OAW5E,SAAS+hB,GAAoBrwC,EAAG/P,GACnC,OAl7BG,SAA4BG,EAAUo/B,EAAGxvB,GAC5C,IAAM4G,EA5BH,SAA+BiqC,EAAcK,EAAO7D,GACvD8D,EACA,OAAa,CACT,IAAM/gD,EAAWygD,EAAcrhB,EAAI0hB,EACnC,GAAS,MADqC7D,EAC/B,CACX,IAAMC,EAFoCD,EAGpClmC,EAAsD,EAAlD/W,EAASiD,QAAQm8B,EAAGmd,GAAuBW,IACrD,GAAU,IAANnmC,EACA,OAAOtU,GAAK+5C,GAAyBU,IAEpC,GAAIA,aAAcT,GAAe,CAClCgE,EAAezgD,EACf8gD,EAAQ1hB,EACR6d,EAAUlmC,EAAI,EAAK8lC,GAAwBK,GAAMJ,GAAyBI,GAC1E,SAAS6D,EAGT,OAIJ,QAOWA,CAAsB/gD,EAAUo/B,EAAGxvB,GACtD,GAAkB,MAAd4G,EACA,MAAO,IAAIxb,MAGX,OAAOue,GAAQ/C,GA46BZwqC,CAAmBpxC,EAAE5P,SAAUH,EAAK+P,EAAEsuB,MA4C1C,SAASgiB,GAAqBtwC,GACjC,OAAOutC,GAAmBvtC,EAAEsuB,MAGzB,SAAS8hB,GAAuBpwC,EAAG/P,GACtC,OA1wBG,SAA2B4gD,EAAcK,EAAO7D,GACnDgE,EACA,OAAa,CACT,IAAMjhD,EAAWygD,EAAcrhB,EAAI0hB,EACnC,GAAS,MADqC7D,EAC/B,CACX,IAAMC,EAFoCD,EAGpClmC,EAAsD,EAAlD/W,EAASiD,QAAQm8B,EAAGmd,GAAuBW,IACrD,GAAIA,aAAcT,GAAe,CAC7B,GAAI1lC,EAAI,EAAG,CACP0pC,EAAezgD,EACf8gD,EAAQ1hB,EACR6d,EAAQJ,GAAwBK,GAChC,SAAS+D,EAER,GAAU,IAANlqC,EACL,OAAO,EAGP0pC,EAAezgD,EACf8gD,EAAQ1hB,EACR6d,EAAQH,GAAyBI,GACjC,SAAS+D,EAIb,OAAa,IAANlqC,EAIX,OAAO,GA6uBRkqC,CAAkBrxC,EAAE5P,SAAUH,EAAK+P,EAAEsuB,MA2KzC,SAAS9gB,GAAO8jC,GACnB,OAvoBG,SAA8BtxC,GAsBjC,OArBa,SAAP0G,EAAQ6qC,EAASjoC,GACnB5C,EACA,OAAa,CACT,IAAqB2B,EAAMiB,EAC3B,GAAW,MADCioC,EACK,CACb,IAAMjE,EAFEiE,EAGR,GAAIjE,aAAcT,GAAe,CAC7B0E,EAAUtE,GAAwBK,GAClChkC,EAAUrY,GAAK,CAAC07C,GAAuBW,GAAKV,GAAyBU,IAAM5mC,EAAKwmC,GAAyBI,GAAKjlC,IAC9G,SAAS3B,EAGT,OAAOzV,GAAK,CAAC07C,GAAuBW,GAAKV,GAAyBU,IAAMjlC,GAI5E,OAAOA,GAKZ3B,CAAK1G,EAAGquB,MAqeRmjB,CA4IkBF,EA5IKhjB,MAmJ3B,SAASxmB,KACZ,OAlQOunC,GAAUvnC,MC5kCd,SAAS2pC,GAAoBvmD,GAChC,OAAO,IAAIwgD,GAAO,EAAG,eAAgBxgD,GAuBlC,SAASwmD,GAAsBxmD,GAClC,OAAO,IAAIwgD,GAAO,EAAG,gBAAiBxgD,GD+iCtCmkD,GAAUvnC,MAAQ2oC,GAAgBv9C,UAA0Cm7C,GCh+BhF,IAAMsD,GAAsB,IAAI/F,GAAY,GAAI,IAAIH,GAAW,GAAI3jC,MAAS,OAAO,OAAQ,EAAQ,IAAI6jC,GAAY,IAInH,SAASiG,GAAazsC,EAAWtF,GAC7B,OAAImF,GAAcnF,GACP,CAACA,GAGDQ,GAAMR,EAAO,CAACsF,GAAY,KAAM,GA8BxC,SAAS0sC,GAAahG,GACzB,OAAO,IAAID,GAAYC,EAAK8F,GAAoB7F,OAAQ6F,GAAoBhhB,QAASghB,GAAoB5F,gBAAiB4F,GAAoB3F,kBAAmB2F,GAAoB1F,sBAAuB0F,GAAoBzF,SAG7N,SAAS4F,GAAYC,EAAUC,GAClC,OAAO,IAAIpG,GAAYoG,EAAInG,IAAKkG,EAAUC,EAAIrhB,QAASqhB,EAAIjG,gBAAiBiG,EAAIhG,kBAAmBgG,EAAI/F,sBAAuB+F,EAAI9F,SA2B/H,SAAS+F,GAAUD,GACtB,OAAO1H,IAAkB,SAACl8B,GACtB,IAAM8jC,EAAM,IAAIC,eAChBD,EAAIE,KA7DZ,SAA8B//B,GAC1B,OAAQA,EAAM7gB,KACV,KAAK,EACD,MAAO,OAEX,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,MAEX,KAAK,EACD,MAAO,SAEX,KAAK,EACD,MAAO,UAEX,KAAK,EACD,MAAO,OAEX,QACI,MAAO,OAwCF6gD,CAAqBL,EAAIlG,QAASkG,EAAInG,KAC/CqG,EAAII,mBAAsB,WACtB,IAAIhG,EAAc1lC,EAAYylC,EAAYE,EAAcL,EAASjgC,ED4oCrDsmC,EACdniD,EC5oCyB,IAAnB8hD,EAAIM,YACJpkC,EAAU,IAAIk+B,EAAgE,MAA/C1lC,EAAasrC,EAAI3F,eAAwE,SAAf3lC,EAArBsrC,EAAI5F,aAA6D,GAAQD,EAA2B,EAAb6F,EAAIO,OAAclG,EAAe2F,EAAI3F,aAAeL,EAA+D,MAAnDjgC,EAAeimC,EAAI3F,eAAsG,SAAjBtgC,EAA9C,IAAIkgC,GAAgB,EAAG+F,EAAI5F,cAAgI,IAAIH,GAAtB,gBAAjBlgC,EAAuD,EAAuC,SAAjBA,EAAgD,EAAyC,EAA5GimC,EAAIQ,UAAgI,IAAItG,GAAaC,EAAYC,EAAcC,GD0oC9nBgG,ElC5uBjB,SAAgBpkC,EAASwkC,EAAO1hD,GAEnC,IADA,IAAMqK,EAAM,GACHnP,EAAI,EAAGA,GAAMwmD,EAAMvmD,OAAS,EAAID,IAAK,CAC1C,IAAMya,GmCjasqBgsC,EnCiajpBD,EAAMxmD,GmChaf6sB,OAAAA,EACDhR,GADCgR,EAAevL,GAAUmkC,GAAa,IAAKgB,UAK7C,EAHO,CAACtsC,GAAK0S,GAAc65B,oBAAqB1hD,GAAK,IAAKoV,GAAKyS,IAAejZ,SnC+Z9F,GAAkB,MAAd6G,EAAoB,CACpB,IAAMpc,EAAIqwC,GAAQj0B,GAClBtL,EAAIoH,KAAKlY,ImCpa8pB,IAACooD,EAC1pB55B,EnCsatB,OAIW1d,EmC3a6pByO,CAAO,EAQhqB6nC,GAAa,OAAQM,EAAIY,0BDooCjCrC,GADDrgD,EAAW8C,KACgBu7C,GAAsBr+C,EAAUmiD,KCpoCGrG,MAGhE,IAAMpjC,EAAazd,EAAc2mD,EAAIrhB,SACrC,IACI,KAAO7nB,EAAW,8CAA8C,CAC5D,IAAMgyB,EAAahyB,EAAW,0DAC9BopC,EAAIa,iBAAiBjY,EAAWrqC,OAAO,GAAIqqC,EAAWrqC,OAAO,KAHrE,QAOIqY,EAAWC,UAEfmpC,EAAInG,gBAAkBiG,EAAIjG,gBAC1B,IAAMjuB,EAAek0B,EAAIhG,kBACL,MAAhBluB,GAGAo0B,EAAIc,iBAAiBl1B,GAEzB,IAAMS,EAAeyzB,EAAI/F,sBACL,MAAhB1tB,IAE0B,IAArBA,EAAa/sB,IAClB0gD,EAAI3F,aAAe,OAEO,IAArBhuB,EAAa/sB,IAClB0gD,EAAI3F,aAAe,cAGnB2F,EAAI3F,aAAe,QAEvB,IAAM9tB,EAAe,CAACuzB,EAAIlG,OAAQkG,EAAI9F,SACV,IAAxBztB,EAAa,GAAGjtB,IAChB0gD,EAAIe,KAAKpgD,QAAK,IAEe,IAAxB4rB,EAAa,GAAGjtB,KAGQ,IAAxBitB,EAAa,GAAGjtB,KAGQ,IAAxBitB,EAAa,GAAGjtB,IALrB0gD,EAAIe,KAAKpgD,GAAK4rB,EAAa,GAAGhuB,OAAO,KASrCyhD,EAAIe,KAAKpgD,QAAK,OAKnB,SAASqgD,GAASrH,GACrB,OAAOv+B,GAAAA,OAAkB,kBAAMA,GAAAA,KAAiB2kC,GAAUH,GAAY,IAAIrG,GAAW,GAAIoG,GAAahG,MAAQ,SAACx5B,GAC3G,IAAMqgC,EAAWrgC,EACjB,OAAO/E,GAAAA,OAAmB,CAAColC,EAASrG,WAAYqG,EAASpG,qBA1ItC,IAAIF,GAAa,EAAG,GAAI,GAAI/d,KAAW,IAAI8d,GAAgB,EAAG,KCzJlF,IAAI1H,GAAWp0C,OAAW,GAEpBmc,GAAU/D,GAAQ,CAAC,uDAAwD,mBCF7E0qC,GAAY9iD,OAAW,GAErBmc,GAAU/D,GAAQ,CAAC,wDAAyD,oBCOlF,SAAS2qC,GAA6BC,GACzC,IAAM9O,EAAU8O,EAAuC9O,QACjD+O,EAAaD,EAAuCC,WACpDC,EAAeF,EAAuCE,aACtDC,EAAU/qC,GAAQ,CAAC,CAAC,QAAS,CAC/B4H,UAAW,SACX,CAAC,WAAYtmB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKgE,IAAQ,SAACgF,GACnE,IAAIg4B,EAASj5C,EAAOsmD,EAAMxjC,EACpByjC,EAAStlC,EAAU,GACzB,OAAO3F,GAAQ,EAAE29B,EAAU39B,GAAQ,CAAC,CAAC,YAAa3Z,EAAOwkD,EAAYI,GAAU,sBAAwB,aAAc,CAAC,UAAW,SAACrhC,GAC9HkyB,EAAQmP,MACPvmD,EAAQihB,EAAU,GAAKqlC,EAAOC,EAAQ,CAAC,WAAY3pD,EAAAA,SAAAA,QAAkC,EAAEkmB,EAAOzC,GAAOlB,IAAM,WAC5G,IAAIoD,EACJ,OAAO3H,IAAUuH,EAAAA,EAAAA,eAAc,MAAO,CAClCC,WAAYG,EAAQE,GAAyB6jC,GAAOvwC,GAAOf,GAAO,WAAde,CAA0BwM,IAC9EF,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKoI,GAAOlB,IAAM,kBAAiB,MAATnf,EAAiB4a,IAAUuH,EAAAA,EAAAA,eAAc,OAAQ,CACzHC,UAAW,kBACXC,SAAUmkC,GAASxmD,MACjB2a,mBAETwH,EAAAA,EAAAA,eAAc,OAAQ,CACvBC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,QACtDX,EAAAA,EAAAA,eAAc,OAAQ,CACvBE,SAAUljB,EAASmnD,YACZnkC,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,cAAe83B,OAAa92B,EAAAA,EAAAA,eAAc,KAAM,QAClH7G,GAAQ,CAAC,CAAC,IAAIkH,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,GAAK4jC,EAAe,EAAKA,OAAgB,GAAU,CAAC,IAAI5jC,GAAW,QAAI,GAAS,CAAC,IAAIA,GAAW,QAAI,WACjR,OAAOL,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,QAASklC,KAGnE,SAASI,GAA2BC,GACvC,IAAI5jC,EAAMm2B,EAASr2B,EAAQG,EAAQF,EAAQ5B,EACrCJ,EAAS6lC,EAAqC7lC,OAC9C8lC,EAAiBD,EAAqCC,eACtDC,EAAStrC,GAAQ,EAAEwH,EAAOxH,GAAQ,EAAC6G,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,cAAehB,GAAY,CAAC,YAAa,8BAA+B84B,EAAU39B,GAAQ,CAAC,CAAC,YAAa,aAAc,CAAC,WAAY1e,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc,OAAQ,CACxRC,UAAW,WACXC,SAAU,aACVF,EAAAA,EAAAA,eAAc,OAAQ,CACtBC,UAAW,OACXC,SAAU,eACLF,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,cAAe83B,SAAe92B,EAAAA,EAAAA,eAAc,MAAO,CAC9GC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,QACrDF,EAASzC,IAAa4C,EAAS5C,IAAa0C,EAAS1C,IAAac,EAAY,CAAC0lC,EAAgB,kBAAmB,SAAC9e,GACrHhnB,OACAsB,EAAAA,EAAAA,eAAcR,GAA8B,CAC5CG,MAAOb,EAAU,GACjBY,SAAUZ,EAAU,GACpBJ,OAAQI,EAAU,QAChBkB,EAAAA,EAAAA,eAAc,MAAO,CACvBC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,SACrDV,EAAAA,EAAAA,eAAc,MAAO,CACvBC,UAAW,cACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK8K,SACrDZ,EAAAA,EAAAA,eAAc,MAAO,CACvBC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,SAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,cACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2uC,M,kzDC/ExD,ICMGlI,GDNGmI,GAAb,gCACI,WAAYC,EAAgBC,EAAoBC,EAAsBC,EAAuBC,EAAgB7T,EAAK8T,EAAcC,EAAKC,EAAKC,EAAKC,EAAKC,EAAMC,EAAqBC,EAAWC,EAAaC,EAAK3jD,EAAM4jD,GAAS,yBACvN,gBACKf,eAAiBA,EACtB,EAAKC,mBAAqBA,EAC1B,EAAKC,qBAAuBA,EAC5B,EAAKC,sBAAwBA,EAC7B,EAAKC,eAAiBA,EACtB,EAAK7T,IAAMA,EACX,EAAK8T,aAAeA,EACpB,EAAKC,IAAMA,EACX,EAAKC,IAAMA,EACX,EAAKC,IAAMA,EACX,EAAKC,IAAMA,EACX,EAAKC,KAAOA,EACZ,EAAKC,oBAAsBA,EAC3B,EAAKC,UAAYA,EACjB,EAAKC,YAAcA,EACnB,EAAKC,IAAa,EAANA,EACZ,EAAK3jD,KAAOA,EACZ,EAAK4jD,QAAUA,EAnBwM,EAD/N,cAAiChjD,GA4BpBijD,GAAb,gCACI,WAAYp1B,EAAMq1B,EAAUC,EAAcC,EAAYC,EAAOC,EAASC,GAAY,yBAC9E,gBACK11B,KAAOA,EACZ,EAAKq1B,SAAWA,EAChB,EAAKC,aAAeA,EACpB,EAAKC,WAAaA,EAClB,EAAKC,MAAQA,EACb,EAAKC,QAAUA,EACf,EAAKC,WAAaA,EAR4D,EADtF,cAA8BvjD,GAwBjBwjD,GAAb,gCACI,WAAYC,EAAWC,EAAWC,EAAcC,EAAeC,EAA0BC,GAAY,yBACjG,gBACKL,UAAYA,EACjB,EAAKC,UAAYA,EACjB,EAAKC,aAAeA,EACpB,EAAKC,cAAgBA,EACrB,EAAKC,yBAA2BA,EAChC,EAAKC,WAAaA,EAP+E,EADzG,cAA6B9jD,G,UC/CvBwP,GAEK,IAAIg0C,GAAQ,uCAAwC,qCADrD3J,GxCw8BH,SAAc8G,GACjB,GAAqB,IAAjBA,EAAMvmD,OACN,MAAO,IAAIhB,MAAM,qDAGjB,OAAOunD,EAAM,GwC78BLrsC,CAAKjG,GAAM4mC,OAAOC,SAASC,KAAM,CAAC,IAAK,OACmD,OAAQ0E,GAAK,8BAGjHkK,GAAc,IAAIC,GAAAA,YAAYx0C,IAEvBy0C,GAAa/yC,GAAOf,GAAO,mBAAde,CAAkC1B,GAAQi0C,UAA1CvyC,CAAqD1B,GAAQk0C,WAE1EQ,GAAUC,eAiChB,SAASC,GAAgBC,GArBzB,IAA2Bj0C,EACxBwE,EDkB+B0vC,EAC/B9rB,EACAryB,EACAm9C,EC/BAiB,EASwBn0C,EAsBZ,SAACS,G3CyBhB,IAAsB9P,E2CxBrBsjD,E3CyBU,OADWtjD,E2CblB8P,GAXoB,SAAC2zC,GACpB,IAAIC,EAAaC,EAA6BC,EpCoX3BzsD,EAAGM,EAzBTwU,EAAG0wC,EoCzVhB,OADA5sC,GAAUX,GAAO,kBAAjBW,CAAoC0zC,EAAcjB,YAC7CkB,EAAcD,EpCkXAtsD,EoClXgE8W,KpCkX7DxW,EoClXoEiW,GAAO,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GpCyV5GzB,EA0BL9U,EoCnX2BwsD,GpC0VpB,iBADChH,EA0BLllD,GAxBbgO,GAAIwG,GAAI0wC,GACR1wC,EAAE3Q,UAAYqhD,EAAKrhD,WqC5Ub,IDhB0JsoD,EAASF,EAAYlB,WAAamB,EAAgB5zC,GAAUX,GAAO,wDAAjBW,CAA0E2zC,EAAYlB,WAAtFzyC,CAAkG4zC,EAAlG5zC,CAAiH6zC,GAASF,EAAYlB,WAAamB,GAC/VR,GAAQU,WAAWX,SACnBhP,OAAOC,SAASC,KAAO9mC,GAAM4mC,OAAOC,SAASC,KAAM,CAAC,KAAM,KAAM,GAAG,KAI5DqP,E3CgBEvN,CAAO/9C,GAAM6H,SAAQlH,I2C9CxB,OADZ+a,EATU,OADV2vC,EAAWL,GAAQW,QAAQZ,UAE7B,GD0BiCK,ECvBDC,EDwB9B/rB,EAAOssB,KAAKvY,MAAM+X,GAClBn+C,EAAIqyB,EAAI,QACR8qB,EAAU,IAAItB,GAAY77C,EAAC,eAAoBA,EAAC,mBAAwBA,EAAC,qBAA0BA,EAAC,sBAA2BA,EAAC,eAAoBA,EAAC,IAASA,EAAC,aAAkBA,EAAC,IAASA,EAAC,IAASA,EAAC,IAASA,EAAC,IAASA,EAAC,KAAUA,EAAC,oBAAyBA,EAAC,UAAeA,EAAC,cAAqBA,EAAC,IAAWA,EAAC,KAAUA,EAAC,SAC3T,IAAI88C,GAASzqB,EAAI,KAAUA,EAAI,SAAcA,EAAI,aAAkBA,EAAI,WAAgBA,EAAI,MAAW8qB,EAAS9qB,EAAI,cCpBtHurB,GAAYgB,wBAAwBvM,MAAK,SAAC+L,GACtC,IAAMD,EAAOQ,KAAK1X,UAAUmX,GAC5BL,GAAQc,QAAQf,GAAY/yC,GAAOf,GAAO,MAAde,CAAqBozC,IACjDl0C,EAAKm0C,MAHT,OAIS,SAAC1N,GACN9lC,QAAQE,MAAM,2BAA4B4lC,GAC1CzmC,OAAK,MAITA,EAAKwE,G,yXEzCFqwC,GC2FLC,GAAAA,W,2DACF,SAAS7qD,EAAKoW,EAAOtV,GAQjB,GAPAd,EAAMlC,MAAMC,QAAQiC,GAAOA,EAAI8E,KAAK,IAAM9E,EAC7B,MAAToW,GAA0B,MAATtV,EACjBd,EAAMA,EAAI+L,UAAUqK,EAAOA,EAAQtV,GAErB,MAATsV,IACLpW,EAAMA,EAAI+L,UAAUqK,IAEF,oBAAX00C,OAAwB,CAC/B,IAAMphD,EAAQohD,OAAO/xC,KAAK/Y,EAAK,WAC/B,OAAO,IAAI+I,WAAWW,EAAM8gC,OAAQ9gC,EAAMqhD,WAAYrhD,EAAMshD,YAG5D,OAzGZ,SAAwBhrD,GAGpB,IAFA,IAAM0J,EAAQ,IAAIX,WAAwB,EAAb/I,EAAID,QAC3BqnD,EAAO,IAAI6D,SAASvhD,EAAM8gC,QACvB1qC,EAAI,EAAGA,EAAIE,EAAID,OAAQD,IAAK,CACjC,IAAM0zB,EAAOxzB,EAAIoB,WAAWtB,GAC5BsnD,EAAK8D,UAAc,EAAJprD,EAAO0zB,GANT,GAQjB,OAAO9pB,EAkGQyhD,CAAenrD,K,uBAG9B,SAAU0J,EAAO0M,EAAOtV,GACpB,IAAMwlD,EAAQtoD,YAAYC,OAAOyL,GAASA,EAAQX,WAAWgQ,KAAKrP,GAC9D8gC,EAAS,IAAIzhC,WAAWu9C,EAAM9b,OAAQ8b,EAAMyE,WAAYzE,EAAM0E,YAOlE,OANa,MAAT50C,GAA0B,MAATtV,EACjB0pC,EAASA,EAAO4gB,SAASh1C,EAAOA,EAAQtV,GAE1B,MAATsV,IACLo0B,EAASA,EAAO4gB,SAASh1C,IAEF,oBAAhBi1C,YACA,IAAIA,YAAY,YAAYC,OAAO9gB,GAEnB,oBAAXsgB,OACLA,OAAO/xC,KAAKyxB,GAAQvqC,SAAS,WAhHhD,SAAwByJ,GAIpB,IAHA,IAAM48C,EAAQtoD,YAAYC,OAAOyL,GAASA,EAAQX,WAAWgQ,KAAKrP,GAC5D09C,EAAO,IAAI6D,SAAS3E,EAAM9b,OAAQ8b,EAAMyE,WAAYzE,EAAM0E,YAC1DrxC,EAAQ,IAAI7b,MAAMspD,EAAK4D,WAAa,GACjClrD,EAAI,EAAGA,EAAI6Z,EAAM5Z,OAAQD,IAAK,CACnC,IAAM0zB,EAAO4zB,EAAKmE,UAAc,EAAJzrD,GAff,GAgBb6Z,EAAM7Z,GAAKkF,OAAOwmD,aAAah4B,GAEnC,OAAO7Z,EAAM7U,KAAK,IA2GH2mD,CAAejhB,O,EAjC5BqgB,GAqCAa,GAAAA,W,2DACF,SAAS1rD,EAAKoW,EAAOtV,GAQjB,GAPAd,EAAMlC,MAAMC,QAAQiC,GAAOA,EAAI8E,KAAK,IAAM9E,EAC7B,MAAToW,GAA0B,MAATtV,EACjBd,EAAMA,EAAI+L,UAAUqK,EAAOA,EAAQtV,GAErB,MAATsV,IACLpW,EAAMA,EAAI+L,UAAUqK,IAEG,oBAAhBu1C,YACP,OAAO,IAAIA,aAAcC,OAAO5rD,GAE/B,GAAsB,oBAAX8qD,OAAwB,CACpC,IAAMphD,EAAQohD,OAAO/xC,KAAK/Y,EAAK,QAC/B,OAAO,IAAI+I,WAAWW,EAAM8gC,OAAQ9gC,EAAMqhD,WAAYrhD,EAAMshD,YAG5D,OA9HZ,SAAqBhrD,GAGjB,IAFA,IAAI6rD,EAAM,EACNC,EAAM,IAAI/iD,WAAwB,EAAb/I,EAAID,QACpBD,EAAI,EAAGA,EAAIE,EAAID,OAAQD,IAAK,CACjC,IAAI0zB,EAAOxzB,EAAIoB,WAAWtB,GAC1B,GAAI0zB,GAAQ,OAAUA,GAAQ,MAAQ,CAClC,IAAMu4B,EAAYjsD,EAAIE,EAAID,OAAUC,EAAIoB,WAAWtB,EAAI,GAAK,EACxDisD,GAAY,OAAUA,GAAY,OAClCjsD,GAAK,GACL0zB,EAAyB,MAAjBA,EAAO,OAAkBu4B,EAAW,MAAS,OAC1C,QACPD,EAAID,KAAU,IAAcr4B,IAAS,GACrCs4B,EAAID,KAAU,IAAcr4B,IAAS,GAAM,GAC3Cs4B,EAAID,KAAU,IAAcr4B,IAAS,EAAK,GAC1Cs4B,EAAID,KAAU,IAAoB,GAAPr4B,KAI/Bs4B,EAAID,KAAS,IACbC,EAAID,KAAS,IACbC,EAAID,KAAS,UAGZr4B,GAAQ,IACbs4B,EAAID,KAAU,EAAYr4B,EAErBA,GAAQ,MACbs4B,EAAID,KAAU,IAAar4B,IAAS,EACpCs4B,EAAID,KAAU,IAAoB,GAAPr4B,IAG3Bs4B,EAAID,KAAU,IAAar4B,IAAS,GACpCs4B,EAAID,KAAU,IAAcr4B,IAAS,EAAK,GAC1Cs4B,EAAID,KAAU,IAAoB,GAAPr4B,GAInC,OADM,IAAIzqB,WAAW+iD,EAAIthB,OAAOziC,MAAM,EAAG8jD,IA0F1BG,CAAYhsD,K,uBAG3B,SAAU0J,EAAO0M,EAAOtV,GACpB,IAAMwlD,EAAQtoD,YAAYC,OAAOyL,GAASA,EAAQX,WAAWgQ,KAAKrP,GAC9D8gC,EAAS,IAAIzhC,WAAWu9C,EAAM9b,OAAQ8b,EAAMyE,WAAYzE,EAAM0E,YAOlE,OANa,MAAT50C,GAA0B,MAATtV,EACjB0pC,EAASA,EAAO4gB,SAASh1C,EAAOA,EAAQtV,GAE1B,MAATsV,IACLo0B,EAASA,EAAO4gB,SAASh1C,IAEF,oBAAhBi1C,aACA,IAAIA,aAAcC,OAAO9gB,GAET,oBAAXsgB,OACLA,OAAO/xC,KAAKyxB,GAAQvqC,SAAS,QAvGhD,SAAqByJ,GA2BjB,IA1BA,IAAImiD,EAAM,EACJI,EAAa,WACf,IAAMC,EAAKxiD,EAAMmiD,KACjB,GAAoB,IAAV,IAALK,GACD,OAAOA,EAEN,GAAoB,MAAV,IAALA,GAEN,OAAc,GAALA,IAAc,EAAW,GADvBxiD,EAAMmiD,KAGhB,GAAoB,MAAV,IAALK,GAGN,OAAc,GAALA,IAAc,IAAa,GAFzBxiD,EAAMmiD,OAE4B,EAAW,GAD7CniD,EAAMmiD,KAGhB,GAAoB,MAAV,IAALK,GAIN,OAAc,EAALA,IAAc,IAAa,GAHzBxiD,EAAMmiD,OAG4B,IAAa,GAF/CniD,EAAMmiD,OAEkD,EAAW,GADnEniD,EAAMmiD,KAIjB,MAAM,IAAIhgD,WAAW,sBAAwBqgD,IAG/CvyC,EAAQ,IAAI7b,MACX+tD,EAAMniD,EAAM3J,QAAQ,CACvB,IAAMyzB,EAAOy4B,IACbtyC,EAAMtD,KAAKrR,OAAOmnD,cAAc34B,IAEpC,OAAO7Z,EAAM7U,KAAK,IA2EHsnD,CAAY5hB,O,EApCzBkhB,GAwCAW,GAAS,IAAIxB,GAEZ,SAASyB,KAAgB,OAAOD,GD1DhC,SAASE,GAAuB1uD,GACnC,OAAc,aAAPA,EAAoBA,GAAKA,ECwDtB,IAAI6tD,GDxKlB,SAAWd,GAWPA,EAAaA,EAAY,kBAAwB,KAAO,oBAX5D,CAsBGA,KAAiBA,GAAe,KEbnC,IAAM4B,GAAkBpwC,GAAQ,CAAC,4BAA6B,iCAAkC,iBAAkB,kBAAmB,+BAAgC,uBAAwB,kBAAmB,oBAAqB,gBAAiB,mBAAoB,YAAa,aAAc,mBAAoB,kBAAmB,mBAAoB,gCAAiC,eAAgB,aAAc,8BAA+B,mBAAoB,qBAAsB,gBAAiB,oBAAqB,iBAAkB,6BAA8B,oBAAqB,+BAAgC,gBAAiB,8BAA+B,kBAAmB,aAAc,aAAc,wBAAyB,aAAc,mBAAoB,4BAA6B,0BAA2B,aAAc,+BAAgC,eAAgB,kBAAmB,oBAAqB,qBAAsB,+BAAgC,gCAAiC,eAAgB,gCAAiC,2BAA4B,uBAAwB,iBAAkB,gCAAiC,gBAAiB,oBAAqB,oCAAqC,gBAAiB,YAAa,iBAAkB,sBAAuB,qBAAsB,0BAA2B,8BAA+B,gBAAiB,eAAgB,kBAAmB,aAAc,4BAA6B,8BAA+B,gBAAiB,YAAa,yBAA0B,aAAc,eAAgB,mBAAoB,oBAAqB,gBAAiB,kBAAmB,gBAAiB,cAAe,mBAAoB,YAAa,gBAAiB,4BAA6B,kBAAmB,4BAA6B,mBAAoB,aAAc,gCAAiC,qBAAsB,kBAAmB,kBAAmB,yBAA0B,uBAA6B,kBAAmB,iBAAkB,6BAA8B,uBAAwB,6BAAmC,eAAgB,oBAAqB,qBAA2B,oBAAqB,sBAAuB,6BAA8B,kBAAmB,kBAAmB,iBAAkB,gBAAiB,+BAAgC,gBAAiB,oCAAqC,oBAAqB,gCAAiC,6BAA8B,eAAgB,oBAAqB,gBAAiB,mBAAoB,iBAAkB,wBAAyB,mBAAoB,eAAgB,+BAAgC,YAAa,6BAA8B,eAAgB,mBAAoB,eAAgB,4BAA6B,gBAAsB,wBAAyB,eAAgB,cAAe,iBAAuB,yBAA0B,+BAAgC,mBAAoB,gBAAiB,cAAe,+BAAgC,iBAAkB,kCAAmC,0BAA2B,8BAA+B,iBAAkB,eAAgB,0BAA2B,mBAAoB,mBAAoB,kBAAmB,cAAe,iBAAkB,gCAAsC,iBAAkB,eAAgB,0BAA2B,mBAAoB,cAAe,mBAAoB,qBAAsB,8BAA+B,kCAAmC,8BAA+B,mBAAoB,mBAAoB,oBAAqB,yBAA0B,eAAgB,iBAAkB,kBAAmB,kBAAmB,uBAAwB,eAAgB,cAAe,gBAAiB,6BAA8B,oBAAqB,eAAgB,kBAAwB,cAAe,mBAAoB,aAAc,oBAAqB,cAAe,gCAAiC,kBAAmB,YAAa,4BAA6B,sBAAuB,qBAAsB,WAAY,aAAc,2BAA4B,oBAAqB,sBAAuB,+BAAgC,mBAAoB,gBAAiB,WAAY,uBAAwB,mBAErxIqwC,GAAgBrwC,GAAQ,CAACo5B,GAAU,MAAO,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAM,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAM,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAO,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAM,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAO,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAO,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAK,EAAG,GAAG,EAAM,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,QAAS,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAS,EAAG,GAAG,EAAO,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,KAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,MAAO,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,OAAQ,EAAG,GAAG,EAAM,GAAIA,GAAU,IAAO,EAAG,GAAG,EAAO,KAE1tNkX,GAAS,IAAIC,WAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAMp1C,SAASrrC,GAASvc,EAAM6nD,IAJxB,SAAiB7nD,GACb8W,IAAK,SAAC5M,EAAKmb,GAAN,OAAanb,EAAMy9C,KAAUtiC,KAAM,EAAGkiC,KAAcO,SAAS9nD,IAK3D+nD,CAAQ/nD,GAEtB,IAAMgoD,EAAezzC,IAAO,SAAC0M,GAAD,OAAYta,KAAKshD,SAAW,KAAM5wC,GAAQ,CAAC,WAAY,UAAW,SAAU,YAAa,kBAAmB,iBAAkB,aAAc,gBAClKrc,EAAS,SAACktD,GAAD,OpCy/BCplD,EoCz/BasZ,GAAOlB,IAAM,kBAAMlD,IAAQ,SAACxC,GAAD,OAAgBmB,GAAWhQ,KAAKshD,SAAW,IAAQ,EAAI,KAAIxhC,GAAY,EAAG,EAAGyhC,QpC0/B9HpxC,IAAK,SAACG,EAAKne,GAAN,OAAYqgB,EAAMC,IAAInC,EAAKne,MADnBqgB,EoCz/B2H,CAC3IE,QAAS,kBAAM,GACfD,IAAK,SAACnW,EAAK6d,GAAN,OAAe7d,EAAM6d,KpCw/BmBzH,UAAWvW,GADzD,IAAaA,EAAIqW,GoCr/BdgvC,EAAiB,SAACC,GACpB,IAAIC,EpCw+BWxlD,EAAgB7D,EC3QZjD,EAAOyG,EmC5tBpB8lD,GpCu+BSzlD,EoCv+BM,SAAC+gC,GAAD,OjDualBj9B,KAAKgE,MAAM,WAAAhE,KAAKshD,UiDvawB,GpCu+BZjpD,EoCv+BiC,CAC5DiD,QAAS,SAACsmD,EAAKC,GAAN,OAAcnqD,EAAkBkqD,EAAKC,KpCu+B/CxvC,IAAS,SAAClgB,EAAGM,GAAJ,OAAU4F,EAASiD,QAAQY,IAAeA,OoCx+BKulD,IAG3D,OAAOhrD,IAAI,SAACqrD,GAAD,OAAclwC,GAAQkwC,KAAWnxC,IAAO+wC,EnC2dpD,SAAgB7lD,EAAGM,GACtB,OAnGG,SAAgBia,EAASja,GAC5B,OAAOyZ,IAAS,kBAAMjF,GAAMxU,MAAK,SAACoB,GAE9B,IADA,IAAIyW,OAAO,EACK,MAARA,GAAiBzW,EAAE,8CAgGhBpL,EA/FQoL,EAAE,0DAAjByW,EAgGAnY,EAAE1J,GACK2I,GAAK3I,QAGZ,EALM,IAACA,EA7FX,OAAO6hB,KACR,SAACmC,GACAA,EAAInF,aA2FDgB,CAAO,EAOX7V,GmCne+D4lD,EAAS,SAACC,GAAD,OAAuB,MAAVA,KnCytBjE5sD,EAKL,WALYyG,EmCztB8F,SAACzH,GACrH,IAAM6tD,EAAOpwC,GAAKzd,EAAIqoB,GAASklC,GAAQA,GACvC,OAAQ3hD,KAAKshD,SAAW,GAAOxmD,GAAKmnD,QAAS,GnCwtB9C9sC,IAAO,SAAC/gB,GAAD,OAASA,EAAIgB,EAAS,CAACyG,EAAEzH,GAAIA,EAAI,QAAM,IAAU,KmCvtBtD6e,GAAKwJ,GAASklC,GAAQD,OAE/B,OAAOjrD,IAAI,SAACyrD,GACR,IAAMC,EAAkBX,EAAeT,IACjCqB,EAAoBZ,EAAeV,IACzC,OAAO,IAAIrV,GAAQyW,EAAatJ,IAAO,SAACyJ,EAAWC,GAAZ,OAAsBppD,GAAK,IAAIuxC,GAAY6X,EAAMjsD,KAAMisD,EAAM3X,OAAQnmC,GAAcyL,GAAQoyC,GAAwCvY,GAAU,EAAG,EAAG,GAAG,EAAO,GAApDv7B,GAAK8zC,GAAWzX,QAAwC0X,EAAM3X,QAAS2X,EAAMxX,MAAOuX,KAAYtyC,KAAS6oC,IAAO,SAACz/C,EAASkd,GACtQ,IACMksC,EAAiBlsC,EAAU,GACjC,OAAOnd,GAAK,IAAIuxC,GAAcx6B,GAAQ9W,GAA2HmQ,GAAtB7U,GAAPwU,MAAqDs5C,GAAvIj5C,GAAQiF,GAAKpV,GAAS9C,KAAMksD,GAA8HlsC,EAAU,GAAIyzB,GAAU,EAAG,EAAG,GAAG,EAAO,GAAIzzB,EAAU,IAAKld,KACxQ4W,KAAS0F,GAAOlB,IAAM,kBAAMoI,IAAM,SAACrB,GAAD,MAAS,CAACzJ,GAAKyJ,EAAK6mC,GAAkBtwC,GAAKyJ,EAAK8mC,GAAoBvB,GAAuBxsD,EAAO,QAAOyrB,GAAY,EAAG,EAAGzrB,EAAO6sD,GAAmBA,aAC3LsB,GAAOpqD,GAAI,SAACjG,EAAGM,GAAJ,OAAUiF,EAAkBvF,EAAGM,KAAIgqB,GAAS4kC,GAAe,GAAIA,I,8mCC5C1E,IAeMoB,GAAb,WACI,WAAYC,EAAUC,EAAUC,EAAWC,EAAQnqD,EAAQc,EAAOspD,I,6FAAW,SACzE/vD,KAAK2vD,SAAWA,EAChB3vD,KAAK4vD,SAAWA,EAChB5vD,KAAK6vD,UAAYA,EACjB7vD,KAAK8vD,OAASA,EACd9vD,KAAK2F,OAASA,EACd3F,KAAKyG,MAAQA,EACbzG,KAAK+vD,UAAYA,EARzB,O,EAAA,G,EAAA,uBAUI,WACI,OAAOC,GAAShwD,QAXxB,yBAaI,WACI,OAAOiwD,GAAYjwD,QAd3B,oBAgBI,SAAOiH,GACH,OAAOjD,GAAOhE,KAAMiH,Q,gFAjB5B,E,UAAA,GAyBO,SAASipD,GAAY/zC,GACxB,OAAqB,MAAdA,EAAEyzC,SAAmBzzC,EAAEyzC,SAAW,GAEtC,SAASK,GAAY9zC,GACxB,I,EAAMg0C,EAAe5tD,EAAW4Z,EAAEwzC,UAC5BS,EAAYF,GAAY/zC,GAAGzY,IAAIusD,IACrC,OAAOptD,EAAiB,CAACstD,GAAF,O,gDAAmBC,I,wSAEvC,SAASpsD,GAAO++C,EAAIC,GACvB,MAAoB,KAAhBD,EAAG4M,SACoB,KAAhB3M,EAAG2M,UACH9rD,EAAgBwsD,GAAkBtN,GAAKsN,GAAkBrN,IAAK,4BAAEsN,EAAF,KAAMC,EAAN,eAAYC,EAAZ,KAAgBC,EAAhB,YAAwBH,IAAOE,GAAMxsD,GAAOusD,EAAIE,MAG9G1N,EAAG4M,WAAa3M,EAAG2M,UACnB9rD,EAAgBqsD,GAAYnN,GAAKmN,GAAYlN,GAAKh/C,IAS1D,SAAS0sD,KAA2B,2BAAR/qD,EAAQ,yBAARA,EAAQ,gBACvC,OAAO,IAAI+pD,GAAS,QAAI3uD,OAAWA,OAAWA,GAAW,kBAAM4E,KAoC5D,IAAMgrD,GAAW,IAAIjB,GAAS,iBAGxBkB,IAFY,IAAIlB,GAAS,8BACb,IAAIA,GAAS,eACX,IAAIA,GAAS,kBAC3BmB,GAAY,IAAInB,GAAS,kBAKzBoB,IAJY,IAAIpB,GAAS,gBACZ,IAAIA,GAAS,eACb,IAAIA,GAAS,gBACZ,IAAIA,GAAS,iBACd,IAAIA,GAAS,iBAKhC,SAASppD,GAAKo5B,GACjB,GAAIrgC,MAAMC,QAAQogC,GACd,OAAOA,EAAK,GAEX,GAAIA,aAAgBgwB,GAAU,CAC/B,IAAMqB,EAAWC,GAAetxB,GAChC,GAAgB,MAAZqxB,EACA,OAAOzqD,GAAKyqD,GAAY,KAGxB,IAAM1vD,EAAIq+B,EAAKiwB,SAAS11C,YAAY,KACpC,OAAc,IAAP5Y,EAAWq+B,EAAKiwB,SAAWjwB,EAAKiwB,SAAS3kD,OAAO3J,EAAI,GAI/D,OAAOq+B,EAAKp5B,KAGb,SAAS0pD,GAAS7zC,GACrB,IAAM40C,EAAWC,GAAe70C,GAChC,OAAgB,MAAZ40C,EACOf,GAASe,GAAY,KAET,MAAd50C,EAAEyzC,UAA0C,IAAtBzzC,EAAEyzC,SAAStuD,OAC/B6a,EAAEwzC,SAGFxzC,EAAEwzC,SAAW,IAAMxzC,EAAEyzC,SAASlsD,KAAI,SAACtE,GAAD,OAAO4wD,GAAS5wD,MAAIiH,KAAK,KAAO,IAgB1E,SAAS2qD,GAAe70C,GAC3B,IAAIrI,EACJ,MAAsB,OAAfqI,EAAEwzC,UAA4F,KAAhD,QAArB77C,EAAKqI,EAAEyzC,gBAA6B,IAAP97C,OAAgB,EAASA,EAAGxS,QAAgB6a,EAAEyzC,SAAS,QAAK7uD,EAuHtH,SAASkwD,GAAc90C,GAC1B,GAAe,MAAXA,EAAE1V,MACF,OAAO0V,EAAE1V,QAGT,MAAM,IAAInG,MAAJ,UAAa6b,EAAEwzC,SAAf,6BAGP,SAASU,GAAkBl0C,GAC9B,GAAgB,MAAZA,EAAExW,OACF,OAAOwW,EAAExW,SAGT,MAAM,IAAIrF,MAAJ,UAAa6b,EAAEwzC,SAAf,8BA0BP,SAASuB,GAAQ/0C,GACpB,OAAOA,EAAEwzC,SAASwB,WAAW,gBAG1B,SAASC,GAAWj1C,GACvB,MAAsB,uCAAfA,EAAEwzC,SCrUN,SAAS0B,GAAUnuC,GACxB,KAAMljB,gBAAgBqxD,IACpB,OAAO,IAAIA,GAAUnuC,GAEvBljB,KAAKuZ,EAAI2J,ED6GgB,IAAIwsC,GAAS,iBACZ,IAAIA,GAAS,iBACb,IAAIA,GAAS,iBACb,IAAIA,GAAS,kBC7GzC,IAAIn2C,GAAI83C,GAAUvmD,UAeX,SAAS/H,GAAO+F,EAAGwoD,EAAM/xC,GAI9B,OAVK,SAAiBzW,EAAGyW,IAPpB,SAAe9E,EAAG3R,GAEvB,IADA,IAAIzH,EAAI,EACAA,EAAIoZ,EAAGpZ,IACbyH,EAAEzH,GAKJ40C,CAAM12B,EAAIje,QAAQ,SAASD,GACzByH,EAAEyW,EAAIle,GAAIA,EAAGke,MAKfgyC,EAAQ,SAASrC,EAAM7tD,EAAGke,GACxB+xC,EAAOxoD,EAAEwoD,EAAMpC,EAAM7tD,EAAGke,KACvBA,GACI+xC,EAGF,SAAS5tD,GAAIoF,EAAGyW,GACrB,OAAOxc,IACL,SAASwa,EAAK2xC,EAAM7tD,EAAGqqB,GACrB,OAAOnO,EAAI5W,OAAO,CAACmC,EAAEomD,EAAM7tD,EAAGqqB,OAEhC,GACAnM,GAwQJ,SAASiyC,GAAS5rD,GAChB,OAAOA,aAAeyrD,GAGxB,SAAS/xD,GAAQF,GACf,MAA+B,mBAAxB,GAAGoC,SAASiwD,KAAKryD,GAG1B,SAASsyD,GAAStyD,GAEhB,MAvNyB,oBAAXitD,QAuNWA,OAAOqF,SAAStyD,GAGpC,SAASuyD,GAAYh6C,EAAOvX,GACjC,MAAO,CACLunD,QAAQ,EACRhwC,MAAOA,EACPvX,MAAOA,EACPwxD,UAAW,EACXC,SAAU,IAIP,SAASC,GAAYn6C,EAAOk6C,GAIjC,OAHKvyD,GAAQuyD,KACXA,EAAW,CAACA,IAEP,CACLlK,QAAQ,EACRhwC,OAAQ,EACRvX,MAAO,KACPwxD,SAAUj6C,EACVk6C,SAAUA,GAId,SAASE,GAAavqD,EAAQwqD,GAC5B,IAAKA,EACH,OAAOxqD,EAET,GAAIA,EAAOoqD,SAAWI,EAAKJ,SACzB,OAAOpqD,EAET,IAAIqqD,EACFrqD,EAAOoqD,WAAaI,EAAKJ,SAiC7B,SAAexoD,EAAIiV,GAEjB,IADA,IAAIzY,EAAM,GACDvE,EAAI,EAAGA,EAAI+H,EAAG9H,OAAQD,IAC7BuE,EAAIwD,EAAG/H,KAAM,EAEf,IAAK,IAAIyD,EAAI,EAAGA,EAAIuZ,EAAG/c,OAAQwD,IAC7Bc,EAAIyY,EAAGvZ,KAAM,EAEf,IAAIT,EAAO,GACX,IAAK,IAAIqgC,KAAK9+B,GACR,IAAGqsD,eAAeR,KAAK7rD,EAAK8+B,IAC9BrgC,EAAKuT,KAAK8sB,GAId,OADArgC,EAAKE,OACEF,EA/CD6tD,CAAM1qD,EAAOqqD,SAAUG,EAAKH,UAC5BG,EAAKH,SACX,MAAO,CACLlK,OAAQngD,EAAOmgD,OACfhwC,MAAOnQ,EAAOmQ,MACdvX,MAAOoH,EAAOpH,MACdwxD,SAAUI,EAAKJ,SACfC,SAAUA,GAId,SAASM,GAAoBp9C,EAAO1T,GAClC,GAAIqwD,GAAS38C,GACX,MAAO,CACLnT,OAAQP,EACR06B,MAAO,EACPq2B,QAAS,GAGb,IAAI7mC,EAAQxW,EAAMzL,MAAM,EAAGjI,GAAGkU,MAAM,MAKpC,MAAO,CACL3T,OAAQP,EACR06B,KAJkBxQ,EAAMjqB,OAKxB8wD,OAJoB7mC,EAAMA,EAAMjqB,OAAS,GAAGA,OAAS,GA2BzD,SAAS+wD,GAAahlD,GACpB,IAAKmkD,GAASnkD,GACZ,MAAM,IAAI/M,MAAM,iBAAmB+M,GAIvC,SAAS/K,GAAIyS,EAAO1T,GAClB,MAAqB,iBAAV0T,EACFA,EAAM4+B,OAAOtyC,GAEf0T,EAAM1T,GAUf,SAASixD,GAAalzD,GACpB,GAAiB,iBAANA,EACT,MAAM,IAAIkB,MAAM,iBAAmBlB,GAIvC,SAASmzD,GAAanzD,GACpB,KAAMA,aAAawX,QACjB,MAAM,IAAItW,MAAM,iBAAmBlB,GAGrC,IADA,IAAI0J,EAAI6N,GAAMvX,GACLiC,EAAI,EAAGA,EAAIyH,EAAExH,OAAQD,IAAK,CACjC,IAAIgb,EAAIvT,EAAE6qC,OAAOtyC,GAIjB,GAAU,MAANgb,GAAmB,MAANA,GAAmB,MAANA,EAC5B,MAAM,IAAI/b,MAAM,4BAA8B+b,EAAI,MAAQjd,IAKhE,SAASozD,GAAepzD,GACtB,GAAiB,mBAANA,EACT,MAAM,IAAIkB,MAAM,mBAAqBlB,GAIzC,SAASqzD,GAAarzD,GACpB,GAAiB,iBAANA,EACT,MAAM,IAAIkB,MAAM,iBAAmBlB,GAahC,SAASszD,GAAOC,EAAQC,GAC7B,OAAO,IAAIvzD,MAAMuzD,EAAS,GAAGvsD,KAAKssD,GAU7B,SAASE,GAAQtxD,EAAKuxD,EAAKC,GAChC,IAAIrlD,EAAMolD,EAAMvxD,EAAID,OACpB,OAAIoM,GAAO,EACFnM,EAEFmxD,GAAOK,EAAMrlD,GAAOnM,EA4BtB,SAASyxD,GAAyB3xD,EAAG4xD,EAAQv1B,EAAOp8B,GACzD,MAAO,CAELgZ,KAAMjZ,EAAI4xD,EAAS,EAAI5xD,EAAI4xD,EAAS,EACpCC,GAAI7xD,EAAIq8B,EAAQp8B,EAASA,EAASD,EAAIq8B,GAoBnC,SAASy1B,GAAUp+C,EAAOoD,GAC/B,IAIIi6C,EACAgB,EACA7nC,EACA8nC,EACAC,EARA37C,EAAQQ,EAAMR,MACdtW,EAAIsW,EAAM/V,OAEV2xD,EAAuB,EAO3B,GAAIlyD,IAAM0T,EAAMzT,OACd,MAAO,2BAGT,GAAIowD,GAAS38C,GAAQ,CACnB,IAAIy+C,EAAyBnyD,EAAKA,EAzFnB,EA0FXoyD,EAAkBpyD,EAAImyD,EACtBE,EAAYV,GACdQ,EA3FYG,GA6FZC,GACA7+C,EAAMzT,QAGJuyD,EA1ER,SAAkBt0C,EAAKu0C,GACrB,IAAIxyD,EAASie,EAAIje,OACbyyD,EAAS,GACTC,EAAa,EAEjB,GAAI1yD,GA7Ba,EA8Bf,MAAO,CAACie,EAAIjW,SAGd,IAAK,IAAIjI,EAAI,EAAGA,EAAIC,EAAQD,IACrB0yD,EAAOC,IACVD,EAAOn8C,KAAK,IAGdm8C,EAAOC,GAAYp8C,KAAK2H,EAAIle,KAEvBA,EAAI,GAxCM,GAwCa,GAC1B2yD,IAIJ,OAAOD,EAqDeE,CADRl/C,EAAMzL,MAAMoqD,EAAUp5C,KAAMo5C,EAAUR,IACfnoD,SAASmpD,MAExCC,EAAYzwD,IAAI,SAAS0wD,GAC3B,OAAO1wD,IAAI,SAAS2wD,GAElB,OAAOxB,GAAQwB,EAAU7yD,SAAS,IAAK,EAAG,OACzC4yD,KACFP,GAEHR,EAlDG,SAA0BK,GAE/B,OAAuB,IAAnBA,EAAUp5C,MAA+B,IAAjBo5C,EAAUR,GAC7B,CACL54C,KAAMo5C,EAAUp5C,KAChB44C,GAAIQ,EAAUR,IAIX,CACL54C,KAAMo5C,EAAUp5C,KAnED,EAqEf44C,GAAIjmD,KAAKgE,MAAMyiD,EAAUR,GArEV,IA2GHoB,CAAiBZ,GAC7BN,EAAqBI,EA5GN,EA6GfpB,EAA2B,EAAlBqB,EAGLA,GAAmB,IACrBrB,GAAU,GAGZmB,EAAuB,EACvBhoC,EAAQ7nB,IAAI,SAAS6wD,GACnB,OAAOA,EAASjzD,QAAU,EACtBizD,EAASluD,KAAK,KACdkuD,EAASjrD,MAAM,EAAG,GAAGjD,KAAK,KAAO,KAAOkuD,EAASjrD,MAAM,GAAGjD,KAAK,OAClE8tD,IACHb,GACyD,GAAtDD,EAAUH,GAAK,EAAIG,EAAUH,GAAK,EAAIG,EAAUH,KACjD1xD,SAAS,IAAIF,QAEiB,IAC9BgyD,EAA4B,OAEzB,CACL,IAAIkB,EAAaz/C,EAAMQ,MAAM,2BAC7B68C,EAASz6C,EAAMy6C,OAAS,EACxBgB,EAAqBz7C,EAAMokB,KAAO,EAClCs3B,EAAYL,GACVI,EAxIuB,EACD,EA0ItBoB,EAAWlzD,QAGbiqB,EAAQipC,EAAWlrD,MAAM+pD,EAAU/4C,KAAM+4C,EAAUH,IACnDI,EAA4BD,EAAUH,GAAG1xD,WAAWF,OAGtD,IAAImzD,EAA4BrB,EAAqBC,EAAU/4C,KAE3Do3C,GAAS38C,KACXu+C,GACyD,GAAtDD,EAAUH,GAAK,EAAIG,EAAUH,GAAK,EAAIG,EAAUH,KACjD1xD,SAAS,IAAIF,QAEiB,IAC9BgyD,EAA4B,GAIhC,IAAIoB,EAAuB3xD,IACzB,SAASwa,EAAKo3C,EAAYh9C,GACxB,IAEIi9C,EAFAC,EAAkBl9C,IAAU88C,EAC5Bz8B,EAAS68B,EAAkB,KA5Jb,KA6KlB,OAbED,EADElD,GAAS38C,GACO89C,IACY,GAA1BQ,EAAU/4C,KAAO3C,IAAYnW,SAAS,IACxC8xD,EACA,KAGgBT,IACfQ,EAAU/4C,KAAO3C,EAAQ,GAAGnW,WAC7B8xD,EACA,KAIG,GAAG3sD,OACR4W,EACA,CAACya,EAAS48B,EAAkB,MAAQD,GACpCE,EACI,CAjLY,KAmLRnC,GAAO,IAAKY,GACZ,MACAT,GAAQ,GAAIT,EAAQ,KACpBM,GAAO,IAAKa,IAEhB,MAGR,GACAhoC,GAGF,OAAOmpC,EAAqBruD,KAAK,MAe5B,SAASsQ,GAAMm+C,GACpB,IAAItyD,EAAI,GAAKsyD,EACb,OAAOtyD,EAAE8G,MAAM9G,EAAEyX,YAAY,KAAO,GAG/B,SAAS86C,GAAeD,GAC7B,OAAOl+C,OAAO,OAASk+C,EAAG/rD,OAAS,IAAK4N,GAAMm+C,IAKzC,SAASE,KAGd,IAFA,IAAIC,EAAU,GAAG3rD,MAAMmoD,KAAKyD,WACxBC,EAAaF,EAAQ3zD,OAChBwD,EAAI,EAAGA,EAAIqwD,EAAYrwD,GAAK,EACnCutD,GAAa4C,EAAQnwD,IAEvB,OAAOusD,IAAU,SAASt8C,EAAO1T,GAG/B,IAFA,IAAImG,EACA4tD,EAAQ,IAAI/1D,MAAM81D,GACbrwD,EAAI,EAAGA,EAAIqwD,EAAYrwD,GAAK,EAAG,CAEtC,KADA0C,EAASuqD,GAAakD,EAAQnwD,GAAGyU,EAAExE,EAAO1T,GAAImG,IAClCmgD,OACV,OAAOngD,EAET4tD,EAAMtwD,GAAK0C,EAAOpH,MAClBiB,EAAImG,EAAOmQ,MAEb,OAAOo6C,GAAaJ,GAAYtwD,EAAG+zD,GAAQ5tD,MA4DxC,SAAS6tD,KACd,IAAIj8C,EAAO,GAAG9P,MAAMmoD,KAAKyD,WACzB,GAAoB,IAAhB97C,EAAK9X,OACP,MAAM,IAAIhB,MAAM,sCAElB,IAAIg1D,EAASl8C,EAAKi7B,MAElB,OADAme,GAAe8C,GACRN,GAAIO,MAAM,KAAMn8C,GAAM1V,KAAI,SAAS8xD,GACxC,OAAOF,EAAOC,MAAM,KAAMC,MAoBvB,SAASC,KACd,IAAIR,EAAU,GAAG3rD,MAAMmoD,KAAKyD,WACxBC,EAAaF,EAAQ3zD,OACzB,GAAmB,IAAf6zD,EACF,OAAOngD,GAAK,mBAEd,IAAK,IAAIlQ,EAAI,EAAGA,EAAIqwD,EAAYrwD,GAAK,EACnCutD,GAAa4C,EAAQnwD,IAEvB,OAAOusD,IAAU,SAASt8C,EAAO1T,GAE/B,IADA,IAAImG,EACK1C,EAAI,EAAGA,EAAImwD,EAAQ3zD,OAAQwD,GAAK,EAEvC,IADA0C,EAASuqD,GAAakD,EAAQnwD,GAAGyU,EAAExE,EAAO1T,GAAImG,IACnCmgD,OACT,OAAOngD,EAGX,OAAOA,KASJ,SAASkuD,GAAOC,EAAQC,GAI7B,OAHAvD,GAAasD,GACbtD,GAAauD,GAENP,GAAOM,EADFC,EAAUlW,KAAKiW,GAAQE,QACN,SAAS7uC,EAAG8uC,GACvC,MAAO,CAAC9uC,GAAGrgB,OAAOmvD,MAmRf,SAASnD,GAAOpxD,GACrBkxD,GAAalxD,GACb,IAAIswD,EAAW,IAAMtwD,EAAM,IAC3B,OAAO8vD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAIyD,EAAIzD,EAAIE,EAAID,OACZka,EAAOzG,EAAMzL,MAAMjI,EAAGyD,GAC1B,OAAI0W,IAASja,EACJowD,GAAY7sD,EAAG0W,GAEfs2C,GAAYzwD,EAAGwwD,MA4BrB,SAASkE,GAAOjB,EAAIlzB,GACzB2wB,GAAauC,GACTI,UAAU5zD,QAAU,EACtBgxD,GAAa1wB,GAEbA,EAAQ,EAEV,IAAIo0B,EAAWjB,GAAeD,GAC1BjD,EAAW,GAAKiD,EACpB,OAAOzD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAIuR,EAAQojD,EAAS7gD,KAAKJ,EAAMzL,MAAMjI,IACtC,GAAIuR,EAAO,CACT,GAAI,GAAKgvB,GAASA,GAAShvB,EAAMtR,OAAQ,CACvC,IAAI20D,EAAYrjD,EAAM,GAClBsjD,EAAatjD,EAAMgvB,GACvB,OAAO+vB,GAAYtwD,EAAI40D,EAAU30D,OAAQ40D,GAI3C,OAAOpE,GAAYzwD,EADjB,2BAA6BuR,EAAMtR,OAAS,QAAUuwD,GAG1D,OAAOC,GAAYzwD,EAAGwwD,MAInB,SAASsE,GAAQ/1D,GACtB,OAAOixD,IAAU,SAASt8C,EAAO1T,GAC/B,OAAOswD,GAAYtwD,EAAGjB,MAInB,SAAS4U,GAAK68C,GACnB,OAAOR,IAAU,SAASt8C,EAAO1T,GAC/B,OAAOywD,GAAYzwD,EAAGwwD,MAInB,SAASuE,GAAUh3D,GACxB,GAAIoyD,GAASpyD,GACX,OAAOiyD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAImG,EAASpI,EAAEma,EAAExE,EAAO1T,GAGxB,OAFAmG,EAAOmQ,MAAQtW,EACfmG,EAAOpH,MAAQ,GACRoH,KAEJ,GAAiB,iBAANpI,EAChB,OAAOg3D,GAAUzD,GAAOvzD,IACnB,GAAIA,aAAawX,OACtB,OAAOw/C,GAAUL,GAAO32D,IAE1B,MAAM,IAAIkB,MAAM,oCAAsClB,GAcjD,SAASgb,GAAK6F,GAEnB,OADAuyC,GAAevyC,GACRoxC,IAAU,SAASt8C,EAAO1T,GAC/B,IAAI0xD,EAAOzwD,GAAIyS,EAAO1T,GACtB,OAAIA,EAAI0T,EAAMzT,QAAU2e,EAAU8yC,GACzBpB,GAAYtwD,EAAI,EAAG0xD,GAEnBjB,GAAYzwD,EAAG,6BAA+B4e,MAzX3D1G,GAAEk6B,MAAQ,SAAS1+B,GACjB,GAAqB,iBAAVA,IAAuB28C,GAAS38C,GACzC,MAAM,IAAIzU,MACR,iEAGJ,IAAIkH,EAASxH,KAAK4f,KAAKy2C,IAAK98C,EAAExE,EAAO,GACrC,OAAIvN,EAAOmgD,OACF,CACLA,QAAQ,EACRvnD,MAAOoH,EAAOpH,OAGX,CACLunD,QAAQ,EACRhwC,MAAOw6C,GAAoBp9C,EAAOvN,EAAOoqD,UACzCC,SAAUrqD,EAAOqqD,WAMrBt4C,GAAE+8C,SAAW,SAAS/0D,GACpB,IAAIiG,EAASxH,KAAKyzC,MAAMlyC,GACxB,GAAIiG,EAAOmgD,OACT,OAAOngD,EAAOpH,MAEd,IAhMwB2U,EAAOoD,EA5LJ05C,EA4XvB0E,GAhMoBxhD,EAgMFxT,EAhMS4W,EAgMJ3Q,EA/LtB,CACL,KACA,qBAAuBkrD,GAAO,IAAK,IACnC,OACAS,GAAUp+C,EAAOoD,GACjB,QAlM2B05C,EAmMZ15C,EAAM05C,SAlMC,IAApBA,EAASvwD,OACJ,gBAAkBuwD,EAAS,GAE7B,sCAAwCA,EAASxrD,KAAK,OAgM3D,MACAA,KAAK,KAwLD03C,EAAM,IAAIz9C,MAAMi2D,GAGpB,MAFAxY,EAAIyY,KAAO,iBACXzY,EAAIv2C,OAASA,EACPu2C,GAIVxkC,GAAEk9C,GAAK,SAASC,GACd,OAAOjB,GAAIz1D,KAAM02D,IAGnBn9C,GAAEtE,KAAO,SAAS0gD,GAChB,OAAO31D,KAAKmyC,KAAKwjB,EAAQA,IAG3Bp8C,GAAE44B,KAAO,SAASwkB,EAAYC,GAC5B,OAAOvB,GAAOsB,EAAY32D,KAAM42D,GAAa,SAAS5U,EAAM6U,GAC1D,OAAOA,MAIXt9C,GAAEu9C,KAAO,SAASC,GAChB,OAAOA,EAAQ/2D,OAGjBuZ,GAAEmmC,KAAO,SAASv/C,GAEhB,OADAkyD,GAAalyD,GACN60D,GAAIh1D,KAAMG,GAAMuD,KAAI,SAAS8xD,GAClC,OAAOA,EAAQ,OAInBj8C,GAAEs8C,KAAO,WACP,IAAI5vD,EAAOjG,KAEX,OAAOqxD,IAAU,SAASt8C,EAAO1T,GAI/B,IAHA,IAAI+zD,EAAQ,GACR5tD,OAASzG,IAEJ,CAEP,KADAyG,EAASuqD,GAAa9rD,EAAKsT,EAAExE,EAAO1T,GAAImG,IAC7BmgD,OAUT,OAAOoK,GAAaJ,GAAYtwD,EAAG+zD,GAAQ5tD,GAT3C,GAAInG,IAAMmG,EAAOmQ,MACf,MAAM,IAAIrX,MACR,kIAIJe,EAAImG,EAAOmQ,MACXy9C,EAAMx9C,KAAKpQ,EAAOpH,YAQ1BmZ,GAAEy9C,QAAU,SAASpB,GAEnB,OADAnD,GAAamD,GACN51D,KAAK0D,KAAI,SAAS0V,GAEvB,GA/eJ,SAAqBha,GACnB,IAAKE,GAAQF,GACX,MAAM,IAAIkB,MAAM,iBAAmBlB,GA4enC63D,CAAY79C,GACRA,EAAK9X,OAAQ,CACfmxD,GAAar5C,EAAK,IAElB,IADA,IAAI5W,EAAI4W,EAAK,GACJ/X,EAAI,EAAGA,EAAI+X,EAAK9X,OAAQD,IAC/BoxD,GAAar5C,EAAK/X,IAClBmB,GAAKozD,EAAYx8C,EAAK/X,GAExB,OAAOmB,EAEP,MAAO,OAKb+W,GAAE29C,IAAM,WACN,OAAOl3D,KAAKg3D,QAAQ,KAGtBz9C,GAAE08B,MAAQ,SAAS5wC,EAAK2L,GACtB,IAAI/K,EAAOjG,KAMX,OALIk1D,UAAU5zD,OAAS,IACrB0P,EAAM3L,GAERitD,GAAajtD,GACbitD,GAAathD,GACNqgD,IAAU,SAASt8C,EAAO1T,GAI/B,IAHA,IAAI+zD,EAAQ,GACR5tD,OAASzG,EACTo2D,OAAap2D,EACRk1C,EAAQ,EAAGA,EAAQ5wC,EAAK4wC,GAAS,EAAG,CAG3C,GADAkhB,EAAapF,GADbvqD,EAASvB,EAAKsT,EAAExE,EAAO1T,GACW81D,IAC9B3vD,EAAOmgD,OAIT,OAAOwP,EAHP91D,EAAImG,EAAOmQ,MACXy9C,EAAMx9C,KAAKpQ,EAAOpH,OAKtB,KAAO61C,EAAQjlC,IAEbmmD,EAAapF,GADbvqD,EAASvB,EAAKsT,EAAExE,EAAO1T,GACW81D,GAC9B3vD,EAAOmgD,QAHO1R,GAAS,EAIzB50C,EAAImG,EAAOmQ,MACXy9C,EAAMx9C,KAAKpQ,EAAOpH,OAKtB,OAAO2xD,GAAaJ,GAAYtwD,EAAG+zD,GAAQ+B,OAI/C59C,GAAE/R,OAAS,SAASgJ,GAClB,OAAOxQ,KAAK0D,KAAI,WACd,OAAO8M,MAIX+I,GAAE69C,OAAS,SAAS38C,GAClB,OAAOza,KAAKi2C,MAAM,EAAGx7B,IAGvBlB,GAAE89C,QAAU,SAAS58C,GACnB,OAAO46C,GAAOr1D,KAAKi2C,MAAMx7B,GAAIza,KAAK61D,QAAQ,SAASyB,EAAMjpC,GACvD,OAAOipC,EAAK3wD,OAAO0nB,OAIvB9U,GAAE7V,IAAM,SAAS6zD,GACf/E,GAAe+E,GACf,IAAItxD,EAAOjG,KACX,OAAOqxD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAImG,EAASvB,EAAKsT,EAAExE,EAAO1T,GAC3B,OAAKmG,EAAOmgD,OAGLoK,GAAaJ,GAAYnqD,EAAOmQ,MAAO4/C,EAAG/vD,EAAOpH,QAASoH,GAFxDA,MAMb+R,GAAEi+C,UAAY,SAASD,GACrB/E,GAAe+E,GACf,IAAItxD,EAAOjG,KACX,OAAOqxD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAImG,EAASvB,EAAKwtC,MAAM8jB,EAAGxiD,EAAMzL,MAAMjI,KACvC,OAAKmG,EAAOmgD,OAGLgK,GAAYtwD,EAAI0T,EAAMzT,OAAQkG,EAAOpH,OAFnCoH,MAMb+R,GAAEk+C,OAAS,SAAS3uD,EAAG+nC,GAGrB,OAFA2hB,GAAe1pD,GACf0pD,GAAe3hB,GACR7wC,KAAKw3D,UAAU1uD,GAAGpF,IAAImtC,IAG/Bt3B,GAAEqG,KAAO,SAASzf,GAChB,OAAO60D,GAAIh1D,KAAMG,GAAMuD,KAAI,SAAS8xD,GAClC,OAAOA,EAAQ,OAInBj8C,GAAEm+C,KAAO,WACP,OAAOrC,GAAO19C,GAAO3X,KAAM2X,IAAO,SAAS/O,EAAOxI,EAAOu3D,GACvD,MAAO,CACL/uD,MAAOA,EACPxI,MAAOA,EACPu3D,IAAKA,OAKXp+C,GAAEwE,KAAO,SAASzX,GAChB,OAAO+uD,GAAO19C,GAAO3X,KAAM2X,IAAO,SAAS/O,EAAOxI,EAAOu3D,GACvD,MAAO,CACLrxD,KAAMA,EACNlG,MAAOA,EACPwI,MAAOA,EACP+uD,IAAKA,OAKXp+C,GAAEq+C,MAAQ,SAAShC,GACjB,OAxOK,SAAeD,EAAQC,GAE5B,OAAOF,GAAOC,EAAQC,GAAWa,GAAGN,GAAQ,KAsOrCyB,CAAM53D,KAAM41D,IAGrBr8C,GAAEm8C,OAAS,SAASE,GAClB,OAAOF,GAAO11D,KAAM41D,IAGtBr8C,GAAE68C,UAAY,SAASh3D,GACrB,OAAOY,KAAK4f,KAAKw2C,GAAUh3D,KAG7Bma,GAAEs+C,cAAgB,SAASz4D,GACzB,OAAOY,KAAK4f,MAoIZyyC,GAD4BsD,EAnIGv2D,GAqIxBiyD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAImG,EAASmuD,EAAOp8C,EAAExE,EAAO1T,GACzB2nB,EAAOjU,EAAMzL,MAAMjI,EAAGmG,EAAOmQ,OACjC,OAAOnQ,EAAOmgD,OACVmK,GAAYzwD,EAAG,QAAU2nB,EAAO,KAChC2oC,GAAYtwD,EAAG,WAPhB,IAAuBs0D,GAhI9Bp8C,GAAEu+C,KAAO,SAASjG,GACXvyD,GAAQuyD,KACXA,EAAW,CAACA,IAEd,IAAI5rD,EAAOjG,KACX,OAAOqxD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAI02D,EAAQ9xD,EAAKsT,EAAExE,EAAO1T,GAI1B,OAHK02D,EAAMpQ,SACToQ,EAAMlG,SAAWA,GAEZkG,MAIXx+C,GAAEy+C,SAAW,SAASxwD,GACpB,OAAOxH,KAAKy2D,GAAGN,GAAQ3uD,KAGzB+R,GAAE0+C,GAAK,SAAShxD,GACd,OAAOouD,GAAOpuD,EAAOjH,MAAM,SAAS8I,EAAG1J,GACrC,OAAO0J,EAAE1J,OAIbma,GAAE2+C,MAAQ,SAASpvD,GACjB,IAAI7C,EAAOjG,KACX,OAAOqxD,IAAU,SAASt8C,EAAO1T,GAC/B,IAAImG,EAASvB,EAAKsT,EAAExE,EAAO1T,GAC3B,OAAKmG,EAAOmgD,OAILoK,GADUjpD,EAAEtB,EAAOpH,OACKmZ,EAAExE,EAAOvN,EAAOmQ,OAAQnQ,GAH9CA,MAyLb+R,GAAE5S,OAAS4S,GAAEk9C,GACbl9C,GAAEyD,MALF,WACE,OAAOhI,GAAK,uBAKduE,GAAE4+C,GAAKhC,GACP58C,GAAE,mBAAqBA,GAAE0+C,GACzB1+C,GAAE,sBAAwBA,GAAE2+C,MAC5B3+C,GAAE,uBAAyBA,GAAE5S,OAC7B4S,GAAE,sBAAwBA,GAAEyD,MAC5BzD,GAAE,mBAAqBA,GAAE4+C,GACzB5+C,GAAE,oBAAsBA,GAAE7V,IAInB,IAAMiU,GAAQ05C,IAAU,SAASt8C,EAAO1T,GAC7C,OAAOswD,GAAYtwD,EAAG8wD,GAAoBp9C,EAAO1T,OActCg1D,IAXMhF,IAAU,SAASt8C,EAAO1T,GAC3C,OAAIA,GAAK0T,EAAMzT,OACNwwD,GAAYzwD,EAAG,sBAEjBswD,GAAYtwD,EAAI,EAAGiB,GAAIyS,EAAO1T,OAGpBgwD,IAAU,SAASt8C,EAAO1T,GAC3C,OAAOswD,GAAY58C,EAAMzT,OAAQyT,EAAMzL,MAAMjI,OAG5BgwD,IAAU,SAASt8C,EAAO1T,GAC3C,OAAIA,EAAI0T,EAAMzT,OACLwwD,GAAYzwD,EAAG,OAEjBswD,GAAYtwD,EAAG,UAGX+2D,GAAQrC,GAAO,SAAS+B,KAAK,WAI7BO,IAHStC,GAAO,UAAU+B,KAAK,mBACtB/B,GAAO,UAAU+B,KAAK,YACrB/B,GAAO,WAAW+B,KAAK,oBACjB/B,GAAO,OAAO+B,KAAK,wBAEnCQ,IADavC,GAAO,OAAO+B,KAAK,cAC3BnF,GAAO,OACZ4F,GAAK5F,GAAO,MAEZ/gB,GAAU6jB,GADH9C,GAAO,QACM4F,GAAID,IAAIR,KAAK,WCltCvC,SAASU,GAAe7C,GAC3B,OAAOA,EAAOE,ODktCCJ,GAAI7jB,GAASykB,IC/sCzB,IAAMoC,GD2oCN,SAAcX,EAAMhvD,GACrBosD,UAAU5zD,OAAS,IACrBwH,EAAIgvD,EACJA,OAAO/2D,GAGT,IAAI40D,EAAStE,IAAU,SAASt8C,EAAO1T,GAErC,OADAs0D,EAAOp8C,EAAIzQ,IAAIyQ,EACRo8C,EAAOp8C,EAAExE,EAAO1T,MAGzB,OAAIy2D,EACKnC,EAAOmC,KAAKA,GAEZnC,GCznCE+C,GAAkBN,GAQxB,SAASO,GAAqBvX,EAASra,GAC1C,OAAOA,EAAO6wB,MAAMxW,GAGjB,SAASwX,GAAkB5W,EAAMC,EAAO4U,GAC3C,OArD2BgC,EAqDL5W,EAvCMvkB,EAuCiBm5B,EAAQ7U,EAtCvCtC,KAAKhiB,GAdP9d,KAAKi5C,GADd,IAAwBA,EAcCn7B,EA0CzB,SAASo7B,GAAchwD,EAAG6sD,GAC7B,OAAOA,EAAOjyD,IAAIoF,GASf,SAASiwD,GAAiBC,GAC7B,OAAOj2D,IAAO,SAACwa,EAAKo4C,GAAN,OAAkBp4C,EAAIk5C,GAAGd,KAAUqD,GAzBrBR,GAAeE,IA4BxC,IAIMO,GAAoB7+C,GAIpB8+C,GAAgBvG,GAMhBwG,GAA+Bd,GAErC,SAASe,GAA2BzD,GACvC,OA/FG,SAA2Bl7C,EAAGk7C,GACjC,OAAOA,EAAO0B,QA8FW,GAAlBgC,CAAkB,EAAG1D,GAGzB,SAAS2D,GAAuBvkD,EAAO3U,GAC1C,OAAO04D,IAAc,SAACvxC,GAAD,OAAWnnB,IAAO84D,GAAcnkD,IAGlD,IAEMwkD,GAAiBvE,GAMvB,SAASwE,GAAiB7D,GAC7B,OAAOA,EAAOjyD,KAAI,SAAC+1D,GAAD,OAAapzD,GAAK,GAAIozD,MAGrC,IAAMC,GAAiB1E,GChKvB,SAASvhB,GAAMlyC,GAClB,IAAMo4D,EAAW,IAAIjyD,EAAU,GAC/B,GAbG,SAAkBnG,EAAKo4D,GAE1B,GAAW,MAAPp4D,GAAe,KAAK6Y,KAAK7Y,GAAM,CAC/B,IAAMoC,GAAKpC,EAAIoR,QAAQ,IAAK,IAC5B,IAAK1I,OAAOmC,MAAMzI,GAEd,OADAg2D,EAASvwC,SAAWzlB,GACb,EAGf,OAAO,EAIH2yD,CAAS/0D,EAAKo4D,GACd,OAAOA,EAASvwC,SAGhB,MAAM,IAAI9oB,MAAM,6C,+/BCfjB,IF+CyBs5D,GGtBtB/iD,GAsBAgjD,GD/CGC,GAAb,a,sRAAA,U,QAAA,G,EAAA,E,kZACI,WAAYpzD,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,O,EAAA,G,EAAA,oBAMI,WACI,MAAO,CAAC,UAAW,UAAW,QAAS,QAAS,SAAU,gB,qEAPlE,GAA0Ba,GCObuzD,GAAOjB,IAAc,SAAC14D,GAAD,OAAWqzC,GAAMrzC,KAF7Bo5D,GAAiBJ,GAA2BV,MAIrDsB,GAAUlB,IAAc,SAACx1C,GAAD,OAAiBA,EAAU,KAAKi2C,GAAeL,GAAc,KAAMa,KAE3FE,GAASnB,IAAc,SAACx1C,GACjC,IAAM42C,EAAa52C,EAAU,GAC7B,OAAOmwB,GAAMptC,GAAK,GAAI,CAAiB,KAAf6zD,EAAqB,IAAMA,EAAY52C,EAAU,GAAIA,EAAU,QACxFo2C,GAAeF,GAAiBhB,GAAeE,KAAmBQ,GAAc,KAAMM,GAAiBJ,GAA2BV,OAExHyB,GAAiBrB,IAAc,SAACx1C,GAAD,OAAiBA,EAAU,KAAKi2C,GAAeL,GAAc,KAAMe,KAElGG,GAAUtB,IAAc,SAACuB,GAAD,OAAW,IAAIP,GAAK,EAAGO,KAAQtB,GAAiBp7C,GAAQ,CAACs8C,GAAQE,GAAgBJ,GAAMC,OAE/GM,GAAQvB,GAAiBp7C,GAAQ,CAAC27C,GAAuB,OAAQ,IAAIQ,GAAK,GAAG,IAAQR,GAAuB,QAAS,IAAIQ,GAAK,GAAG,OAEjIS,GAAQjB,GAAuB,OAAQ,IAAIQ,GAAK,IAEhDU,IACH3jD,GAASiiD,IAAc,SAACvxC,GAC1B,OAAQA,GACJ,IAAK,IACD,MAAO,KAEX,IAAK,IACD,MAAO,KAEX,IAAK,IACD,MAAO,KAEX,IAAK,IACD,MAAO,KAEX,IAAK,IACD,MAAO,KAEX,QACI,OAAOA,KJgoChB,SAAehmB,GAEpB,IADA,IAAIswD,EAAWtwD,EAAIgU,MAAM,IAChBiE,EAAM,EAAGA,EAAMq4C,EAASvwD,OAAQkY,IACvCq4C,EAASr4C,GAAO,IAAMq4C,EAASr4C,GAAO,IAExC,OAAOY,IAAK,SAAStB,GACnB,OAAOvX,EAAIuF,QAAQgS,IAAO,KACzBg/C,KAAKjG,GIpoCH4I,CAAgB,cACbZ,GAAiBL,GAAiBhB,IHAZoB,GGA2Cd,IAAc,SAAC51B,GAAD,OAAWA,EAAM,KAAIq2B,GAAeL,GAAc,MAAOriD,KAAUoiD,IAAkB,SAAC5mC,GAAD,MAAmB,MAARA,GAA0B,OAARA,KHCzLokC,GAAGmD,OGAVhB,GAAkBM,GAAc,KAAOA,GAAc,KAAOW,KAKhE,SAASa,GAAertD,GAC3B,OAAOurD,GAAkBO,GAA8BA,GAA8B9rD,GAGlF,IAAMstD,GAAS5B,GAAiBr1D,IAAI,SAAC2J,GAAD,OAAOqtD,GAAertD,KAAIsQ,GAAQ,CAAC48C,GAAOD,GAAOF,GANrEI,GAAc92D,KAAI,SAAC22D,GAAD,OAAW,IAAIP,GAAK,EAAGO,UAQnDO,GAAQF,GAAexB,GAAc,MAM5C2B,GAAoB,IAAI75D,GAJ9B,WACI,OAAOy3D,IAAiB,kBAAMM,GAAiBp7C,GAAQ,CAACg9C,GAAQ7B,IAAc,SAAC/gD,GAAD,OAAU,IAAI+hD,GAAK,EAAGn8C,GAAQ5F,MAAQ6gD,GAAkB8B,GAAexB,GAAc,MAAOwB,GAAexB,GAAc,MAAOP,GAAqBiC,GAAOC,GAAkBhpC,SAAUinC,IAAc,SAACvxB,GAAD,OAAY,IAAIuyB,GAAK,EhBmzClSlU,GgBnzC4SjoC,GAAQ4pB,OAAWqxB,GAAkB8B,GAAexB,GAAc,MAAOwB,GAAexB,GAAc,MAAOP,GAAqBiC,GAAO9B,IAAc,SAACx1C,GAAD,MAAe,CAACA,EAAU,GAAIA,EAAU,MAAKo2C,GAAegB,GAAeF,IAAgBE,GAAexB,GAAc,MAAOwB,GAAeG,GAAkBhpC,qB,kzDAOplB6oC,GAFNG,GAAkBhpC,OC9D/B,IAAMipC,GAAb,gCACI,WAAYC,EAAOlsD,GAAQ,yBACvB,gBACKksD,MAAiB,EAARA,EACd,EAAKlsD,OAASA,EAHS,EAD/B,cAA4B3H,GAYrB,SAAS8zD,GAAuBC,EAAOC,GAE1C,OAAa,CACT,IAAM97D,EAAI67D,EAAOxgD,EAAIygD,EACrB,GAAU,IAANzgD,EACA,OAAO,EAEN,GAAKA,EAAI,GAAO,EAMjB,OAAQrb,EAAI47D,GAAuB57D,EAAIA,KAAOqb,EAAI,IAAQ,EAL1DwgD,EAAS77D,EAAIA,EACb87D,KAAazgD,EAAI,IA4LtB,SAAS0gD,GAAmB1gD,GAC/B,OAAOA,EAAEsgD,MAON,SAASK,GAAmB3gD,EAAGpZ,GAClC,OAAOoZ,EAAE5L,OAAOxN,GAGb,SAASg6D,GAAqB5gD,EAAGpZ,GACpC,OAAO0Q,GAAYqpD,GAAmB3gD,EAAGpZ,IAAI,EAAO,GAGjD,SAASi6D,GAAsB7gD,EAAGpZ,EAAGsC,GACxC8W,EAAE5L,OAAOxN,GAAU,EAAJsC,EAGZ,SAAS43D,GAAmBN,EAAOC,GAEtC,OAAa,CACT,IAAM97D,EAAI67D,EAAOxgD,EAAIygD,EACrB,GAAU,IAANzgD,EACA,OAAOvO,GAAS,EAAG,GAAG,GAErB,GAAKuO,EAAI,GAAO,EAMjB,OAAO9I,GAAYvS,EAAGm8D,GAAmB5pD,GAAYvS,EAAGA,MAAQqb,EAAI,KALpEwgD,EAAQtpD,GAAYvS,EAAGA,GACvB87D,KAAazgD,EAAI,IAUtB,SAAS+gD,GAAmBP,EAAOC,GAEtC,OAAa,CACT,IAAM97D,EAAI67D,EAAOxgD,EAAIygD,EACrB,GAAU,IAANzgD,EACA,OAAO,EAEN,GAAKA,EAAI,GAAO,EAMjB,OAAQrb,EAAIo8D,GAAmBp8D,EAAIA,KAAOqb,EAAI,IAAQ,EALtDwgD,EAAS77D,EAAIA,EACb87D,KAAazgD,EAAI,IA9MKvO,GAAS,WAAY,GAAG,GAkBnBA,GAAS,WAAY,GAAG,GAmGjBlD,GAAWyyD,IAAkC,SAACp6D,GAAD,OAAO25D,GAAuB,EAAG35D,KAAI6sD,YA6HzH,IAEMwN,GAAqB,SAIrBC,GAAwBzvD,GAAS,SAAU,GAAG,GAE9C0vD,GAA2B1vD,GAAS,SAAU,GAAG,GA4BvD,SAAS2vD,GAAqBlwC,GACjC,OAAO,IAAImvC,GAAOnvC,EAAG,IAAIuiC,WAAWviC,IAOjC,SAASmwC,GAAmBrhD,GAC/B,IAeMsgD,EAAgD,EAf/B,SAACgB,EAAQ9/C,GAE5B,OAAa,CACT,IAAM+/C,EAAKD,EAAQ16D,EAAI4a,EACvB,IAAY,IAAP5a,GAA8B,IAAV26D,EAAG36D,GACxB,OAAQA,EAAI,EAAK,EAGjB06D,EAASC,EACT//C,EAAS5a,EAAI,GAMX46D,CAAexhD,EAAE5L,OAAQ4L,EAAEsgD,MAAQ,GAEjD,OADAtgD,EAAEsgD,MAAiB,EAARA,EACJtgD,EASJ,SAASyhD,GAAmB98D,GAC/B,IAAMmK,EAA0B,GAAlBnK,EAAI,EAAK,EAAIA,GAC3B,GAAImK,EAAMmyD,GAAoB,CAC1B,IAAM10C,EAAI60C,GAAqB,GAE/B,OADA70C,EAAEnY,OAAO,GAAY,EAANtF,EACRuyD,GAAmB90C,GAI1B,IADA,IAAMG,EAAM00C,GAdiB,GAepBx6D,EAAI,EAAGA,GAAM86D,EAA4B96D,IAC9C8lB,EAAItY,OAAOxN,MAAYkI,EAAMiyD,GAAmBE,GAAoBr6D,IAAQq6D,GAAsB,EAEtG,OAAOI,GAAmB30C,GAa3B,SAASi1C,GAAoB3hD,GAChC,GAAgB,IAAZA,EAAEsgD,MACF,OAAqB,EAAdtgD,EAAE5L,OAAO,GAIhB,IADA,IAAI0O,EAAM,EACDlc,EAAIoZ,EAAEsgD,MAAQ,EAAG15D,GAAK,EAAGA,IAC9Bkc,EAAQ9C,EAAE5L,OAAOxN,GAAMq6D,GAAqBn+C,EAAQ,EAExD,OAAa,EAANA,EA/FuBrR,GAAS,SAAU,GAAG,GAgHrD,IAAMmwD,GAAmBH,GAAmB,GAEtCI,GAAoBJ,GAAmB,GA2B7C,SAASK,GAAoB9hD,GAChC,OAAOA,EAAEsgD,MAAQ,EA6Ed,SAASyB,GAAoBnvD,GAChC,OAAmB,IAAZA,EAAE0tD,MAoHN,SAAS0B,GAAgBpvD,EAAG6nC,GAC/B,OAAuC,IAnCpC,SAA8B7nC,EAAG6nC,GACpC,OAAI7nC,EAAE0tD,MAAQ7lB,EAAE6lB,OACJ,EAEH1tD,EAAE0tD,MAAQ7lB,EAAE6lB,MACV,EAyByC,EAtBlC,SAAC2B,EAAQC,EAAQ1gD,GAE3B,OAAa,CACT,IAAM2gD,EAAKF,EAAQG,EAAKF,EAAQt7D,EAAI4a,EACpC,IAAW,IAAP5a,EACA,OAAO,EAEN,GAAIu7D,EAAGv7D,KAAOw7D,EAAGx7D,GAMjB,OAAIu7D,EAAGv7D,GAAKw7D,EAAGx7D,IACR,EAGD,EATPq7D,EAASE,EACTD,EAASE,EACT5gD,EAAS5a,EAAI,GAYlBogC,CAAMp0B,EAAEwB,OAAQqmC,EAAErmC,OAAQxB,EAAE0tD,MAAQ,GAKxC+B,CAAqBzvD,EAAG6nC,GAoE5B,SAAS6nB,GAAgCC,EAAOC,EAAO7W,GAE1D,OAAa,CACT,IAAMp/B,EAAIg2C,EAAO3gD,EAAI4gD,EAAOv4B,EAAI0hB,EAChC,KAAIphD,GAAQqX,EAAGnQ,GAAS,EAAG,GAAG,IAAU,GAQxC,MAPI,IAAMgxD,EAAMzrD,GAAY4pD,GAAqBr0C,EAAG0d,GAAIroB,GACpDi/C,GAAsBt0C,EAAG0d,IAAMx2B,GAAM4D,GAAcorD,EAAKtB,MACxDoB,EAAQh2C,EACRi2C,EAAQrrD,GAAYsrD,EAAKvB,IACzBvV,EAAS1hB,EAAI,GAOlB,SAASy4B,GAAmC9vD,EAAG6nC,GAKlD,IAJA,IAAMkoB,EAA6B,EAAxBjC,GAAmB9tD,GACxB2Z,EAAI60C,GAAqBuB,EAAK,GAC9BC,EAAMtrD,GAAYmjC,GAAG,EAAO,GAC9B74B,EAAInQ,GAAS,EAAG,GAAG,GACd7K,EAAI,EAAGA,GAAM+7D,EAAK,EAAI/7D,IAAK,CAChC,IAAM67D,EAAMzrD,GAAYA,GAAY4K,EAAGg/C,GAAqBr0C,EAAG3lB,IAAKsQ,GAAY0pD,GAAqBhuD,EAAGhM,GAAIg8D,IAC5G/B,GAAsBt0C,EAAG3lB,IAAM6M,GAAM4D,GAAcorD,EAAKtB,MACxDv/C,EAAIzK,GAAYsrD,EAAKvB,IAGzB,OADAoB,GAAgC/1C,EAAG3K,EAAG+gD,GAC/BtB,GAAmB90C,GAuCvB,IAAMs2C,GAAb,gCACI,WAAYC,EAAMC,EAAW94B,EAAG+4B,EAAMC,EAAMnoD,EAAOuF,GAAQ,yBACvD,gBACKyiD,KAAe,EAAPA,EACb,EAAKC,UAAyB,EAAZA,EAClB,EAAK94B,EAAS,EAAJA,EACV,EAAK+4B,KAAe,EAAPA,EACb,EAAKC,KAAe,EAAPA,EACb,EAAKnoD,MAAiB,EAARA,EACd,EAAKuF,OAASA,EARyC,EAD/D,cAA2C5T,GAiBpC,SAASy2D,GAAwBJ,EAAM74B,EAAG+4B,EAAMC,GACnD,OAAO,IAAIJ,GAAsBC,EAAM/B,GAAmB,EAAG+B,GAAO74B,EAAG+4B,EAAMC,KAnf5C,GAmf8EH,GAAQv0D,MAnftF,GAmf6Hu0D,IAAQ,SAACl8D,GAAD,OAAOm6D,GAAmB,EAAG+B,EAAOl8D,KAAI6sD,aAG3M,IAAM0P,GAAqB,CAACD,GAAwB,EAAG,GAAI,UAAW,WAAYA,GAAwB,EAAG,GAAI,SAAU,WAAYA,GAAwB,EAAG,GAAI,SAAU,UAAWA,GAAwB,EAAG,GAAI,QAAS,UAAWA,GAAwB,EAAG,GAAI,QAAS,SAAUA,GAAwB,EAAG,GAAI,OAAQ,SAAUA,GAAwB,EAAG,GAAI,MAAO,QAASA,GAAwB,EAAG,GAAI,MAAO,QAASA,GAAwB,EAAG,GAAI,KAAM,OAAQA,GAAwB,GAAI,GAAI,KAAM,OAAQA,GAAwB,GAAI,EAAG,IAAK,MAAOA,GAAwB,GAAI,EAAG,GAAI,KAAMA,GAAwB,GAAI,EAAG,GAAI,MAiLjoB,SAASE,GAAiBxwD,EAAG6nC,GAChC,OAxNG,SAAoC7nC,EAAG6nC,GAC1C,IAAM4oB,EAAmC,IAA1B3C,GAAmB9tD,GAC5B0wD,EAAmC,IAA1B5C,GAAmBjmB,GAClC,OAAI4oB,GAAUC,EA5DX,SAA6C1wD,EAAG6nC,GACnD,IAAMluB,EAAI60C,GAAqB,GACzBqB,EAAMvrD,GAAYI,GAAY1E,GAAG,EAAO,GAAI0E,GAAYmjC,GAAG,EAAO,IAGxE,OAFAomB,GAAsBt0C,EAAG,IAAM9Y,GAAM4D,GAAcorD,EAAKtB,MACxDN,GAAsBt0C,EAAG,IAAM9Y,GAAM0D,GAAYsrD,EAAKvB,MAC/CG,GAAmB90C,GAwDfg3C,CAAoC5C,GAAmB/tD,EAAG,GAAI+tD,GAAmBlmB,EAAG,IAEtF4oB,EACEX,GAAmCjoB,EAAGkmB,GAAmB/tD,EAAG,IAE9D0wD,EACEZ,GAAmC9vD,EAAG+tD,GAAmBlmB,EAAG,IA7BpE,SAAgD7nC,EAAG6nC,GAGtD,IAFA,IAAMluB,EAAI60C,GAAqBxuD,EAAE0tD,MAAQ7lB,EAAE6lB,OACrCkD,EAAKj3C,EAAEnY,OACJxN,EAAI,EAAGA,GAAMgM,EAAE0tD,MAAQ,EAAI15D,IAAK,CAIrC,IAHA,IAAM68D,EAAMnsD,GAAY1E,EAAEwB,OAAOxN,IAAI,EAAO,GACxCgb,EAAInQ,GAAS,EAAG,GAAG,GACnBw4B,EAAIrjC,EACCyD,EAAI,EAAGA,GAAMowC,EAAE6lB,MAAQ,EAAIj2D,IAAK,CACrC,IAAMq5D,EAAMpsD,GAAYmjC,EAAErmC,OAAO/J,IAAI,EAAO,GACtCo4D,EAAMzrD,GAAYA,GAAYM,GAAYksD,EAAGv5B,IAAI,EAAO,GAAIroB,GAAI1K,GAAYusD,EAAKC,IACvFF,EAAGv5B,GAAkE,IAAxDx2B,GAAM4D,GAAcorD,EAAKtB,KACtCv/C,EAAIzK,GAAYsrD,EAAKvB,IACrBj3B,EAAMA,EAAI,EAAK,EAEnBq4B,GAAgC/1C,EAAG3K,EAAGqoB,GAE1C,OAAOo3B,GAAmB90C,GAgBfo3C,CAAuC/wD,EAAG6nC,GA2M9CmpB,CAA2BhxD,EAAG6nC,GAGlC,SAASopB,GAA6Bl/D,EAAG0J,EAAG4iB,EAAGjR,GASlD,IARA,IAAMgO,EAAe,CAACrpB,EAAEyP,OAAQ0tD,GAAoBn9D,IAC9CmK,EAAMkf,EAAa,GACnBE,EAAiB,CAAC+C,EAAE7c,OAAQ0tD,GAAoB7wC,IAChD6yC,EAAyB,EAApB51C,EAAe,GACpB61C,EAAM71C,EAAe,GACrB8jB,EAAM16B,GAAYjJ,GAAG,EAAO,GAC9BhE,EAAI,EACJ25D,EAAI9sD,GAAY86B,EAAK16B,GAAYysD,EAAI,IAAI,EAAO,IAC5Cx5D,GAAQy5D,EAAGvyD,GAAS,EAAG,GAAG,IAAU,GAAapH,EAAIy5D,GAAK,CAC9D,GAAIz5D,EAAI2jB,EAAa,GACjB,MAAO,IAAInoB,MAAM,qEAErB,IAAIo+D,IAASxwD,GAAM4D,GAAc2sD,EAAG7C,KAChC+C,EAAM/sD,GAAY6sD,EAAG9C,IACrB+C,GAAOn1D,EAAIzE,EAAI2V,GACflR,EAAIzE,EAAI2V,GAAOlR,EAAIzE,EAAI2V,GAAKikD,EAAO,GAGnCn1D,EAAIzE,EAAI2V,GAAOlR,EAAIzE,EAAI2V,IAAMihD,GAAqBgD,GAAQ,EAC1DC,EAAMltD,GAAYktD,EAAKzyD,GAAS,EAAG,GAAG,KAGtCuyD,EADA35D,EAAIy5D,EACA9sD,GAAYktD,EAAKhtD,GAAY86B,EAAK16B,GAAYysD,EAAI15D,EAAI,IAAI,EAAO,KAGjE65D,EAER75D,EAAMA,EAAI,EAAK,EAEnBg3D,GAAmB18D,GAShB,SAASw/D,GAA6Bx/D,EAAG0J,EAAG4iB,EAAGjR,GASlD,IARA,IAAMgO,EAAe,CAACrpB,EAAEyP,OAAQ0tD,GAAoBn9D,IAC9CmK,EAAMkf,EAAa,GACnBE,EAAiB,CAAC+C,EAAE7c,OAAQ0tD,GAAoB7wC,IAChD6yC,EAAyB,EAApB51C,EAAe,GACpB61C,EAAM71C,EAAe,GACrB8jB,EAAM16B,GAAYjJ,GAAG,EAAO,GAC9BhE,EAAI,EACJ25D,EAAI9sD,GAAY86B,EAAK16B,GAAYysD,EAAI,IAAI,EAAO,IAC5Cx5D,GAAQy5D,EAAGvyD,GAAS,EAAG,GAAG,IAAU,GAAapH,EAAIy5D,GAAK,CAC9D,GAAIz5D,EAAI2jB,EAAa,GACjB,MAAO,IAAInoB,MAAM,qEAErB,IAAIo+D,IAASxwD,GAAM4D,GAAc2sD,EAAG7C,KAChC+C,EAAM/sD,GAAY6sD,EAAG9C,IACrB+C,EAAOhD,GAAqBnyD,EAAIzE,EAAI2V,GACpClR,EAAIzE,EAAI2V,GAAOlR,EAAIzE,EAAI2V,GAAKikD,EAAO,GAGnCn1D,EAAIzE,EAAI2V,GAAOikD,GAAOhD,GAAqBnyD,EAAIzE,EAAI2V,IAAO,EAC1DkkD,EAAMltD,GAAYktD,EAAKzyD,GAAS,EAAG,GAAG,KAGtCuyD,EADA35D,EAAIy5D,EACA9sD,GAAYktD,EAAKhtD,GAAY86B,EAAK16B,GAAYysD,EAAI15D,EAAI,IAAI,EAAO,KAGjE65D,EAER75D,EAAMA,EAAI,EAAK,EAEnBg3D,GAAmB18D,GAShB,SAASy/D,GAA0Bz/D,EAAGssB,EAAGjR,GAC5C,IAAMgO,EAAe,CAAC8zC,GAAoB7wC,GAAI6wC,GAAoBn9D,IAC5D0/D,EAAyB,EAAlBr2C,EAAa,GACpBs2C,EAAyB,EAAlBt2C,EAAa,GAC1B,GAAIq2C,EAAQC,EAAOtkD,EACf,OAAO,EAGP,IA/ekCpN,EAAG2xD,EAAI9pB,EA+enCvsB,EAAiB,CAAC+C,EAAE7c,OAAQzP,EAAEyP,QAC9BowD,EAAKt2C,EAAe,GACpBu2C,EAAKv2C,EAAe,GACpB7f,EAAmgB,GAApf,IAATi2D,EAAgBD,IAASrkD,KAAUwkD,EAAGxkD,GAAKykD,EAAG,MAAYhxD,GAAM0D,GAAYH,GAAYE,GAAYI,GAAYktD,EAAGH,IAAO,EAAO,GAAInD,IAAwB5pD,GAAYktD,EAAGH,EAAO,IAAI,EAAO,IAAK/sD,GAAYmtD,EAAG,IAAI,EAAO,KAAYJ,IAAUC,EAAOtkD,KAAWwkD,EAAGH,IAASI,EAAGH,GAAQ,MAAY7wD,GAAM0D,GAAYH,GAAYE,GAAYI,GAAYktD,EAAGH,IAAO,EAAO,GAAInD,IAAwB5pD,GAAYktD,EAAGH,EAAO,IAAI,EAAO,IAAKrtD,GAAYM,GAAYmtD,EAAGH,IAAO,EAAO,GAAI7yD,GAAS,EAAG,GAAG,OACzf,OAAU,IAANpD,EAC8C,IApfbk2D,EAofAvkD,EApfIy6B,EAofD91C,EAAG,GApfTiO,EAofAqe,GAnf/BqvC,MAAQiE,EAAO9pB,EAAE6lB,MAmfuB,GAlfnC,EAEF1tD,EAAE0tD,MAAQiE,EAAO9pB,EAAE6lB,MAAQiE,EAC1B,EA6BgD,EA1BzC,SAACtC,EAAQC,EAAQ1gD,GAE3B,OAAa,CACT,IAAM2gD,EAAKF,EAAQG,EAAKF,EAAQt7D,EAAI4a,EACpC,IAAW,IAAP5a,EACA,OAAO,EAGP,IAAM68D,EAAoC,GAA5B78D,EAAI29D,EAAM,EAAIpC,EAAGv7D,EAAI29D,IAC7BG,EAAoC,GAA5B99D,EAmeiB,EAneP,EAAIw7D,EAAGx7D,EAmeA,IAle/B,GAAI68D,IAAQiB,EAMP,OAAIjB,EAAMiB,GACH,EAGD,EATPzC,EAASE,EACTD,EAASE,EACT5gD,EAAS5a,EAAI,GAatBogC,CAAMp0B,EAAEwB,OAAQqmC,EAAErmC,OAASxB,EAAE0tD,MAAQiE,EAAM,IAmdnC,EAGA,EAIA,EAAJl2D,EAKZ,SAASs2D,GAAoBzzC,EAAGD,GACnC,GAAI8wC,GAAoB9wC,GACpB,MAAO,IAAIprB,MAEV,GAAIi8D,GAAoB5wC,GAAK4wC,GAAoB7wC,GAClD,MAAO,CAAC4wC,GAAmB3wC,GAW3B,IARA,IAAMvsB,EAnvBP,SAA4BA,GAC/B,OAAO,IAAI07D,GAAO17D,EAAE27D,MAAY37D,EAAEyP,OnD7DrBvF,SmD+yBC+1D,CAAmB1zC,GACvBzX,EAAI2nD,GAAuBU,GAAoB5wC,GAAK4wC,GAAoB7wC,GAAM,EAAK,GACrFre,EAAIkvD,GAAoB5wC,GACtBzW,EAA6B,EAAzBqnD,GAAoB7wC,GAC1BjR,EAAIpN,EAAI6H,EAGR2M,GAAW,GACPA,GAAU,CAEd,IAAM/Y,EAAyC,EAArC+1D,GAA0Bz/D,EAAGssB,EAAGjR,GACtC3R,EAAI,GACJw1D,GAA6Bl/D,EAAG0J,EAAG4iB,EAAGjR,GACtCmkD,GAA6B1qD,EAAGpL,EAAGuzD,GAAkB5hD,KAIrDoH,EAAmB,IAAN/Y,GAAmB,IAAN2R,KAElBpN,IAAO6H,EAAIuF,EAEXA,EAAMA,EAAI,EAAK,GAIfA,EAAMA,EAAI,EAAK,EACfpN,EAAMA,EAAI,EAAK,IAK/B,MAAO,CAACyuD,GAAmB5nD,GAAI4nD,GAAmB18D,IA4HnD,SAASkgE,GAAqB7kD,GAiBjC,OAhBkB,SAAC+D,EAAS4nC,EAAOnqC,GAE/B,OAAa,CACT,IAAMsB,EAAMiB,EAASkmB,EAAI0hB,EAAO/kD,EAAI4a,EACpC,GAAI5a,IAAMoZ,EAAEsgD,MACR,OAAOx9C,EAGPiB,EAAWjB,EAAOmnB,EAAIjqB,EAAE5L,OAAOxN,GAC/B+kD,EAAS1hB,EAAIg3B,GACbz/C,EAAS5a,EAAI,GAMlBk+D,CAAU,EAAG,EAAG,GAGpB,SAASC,GAAqB/kD,GACjC,OAAOyhD,GAAmBzhD,GA0DvB,SAASglD,GAAsBhlD,GAClC,IAAMilD,EAAgC,EAAzBnD,GAAoB9hD,GAqD3BklD,EApCU,SAAVrhD,EAAWshD,EAAeC,EAAYC,EAASx4C,GAEjD,OAAa,CACT,IAAMy4C,EAAYH,EAAe/wD,EAASgxD,EAAY1uC,EAAM2uC,EAASv4C,EAAQD,EAC7E,GAAKpK,GAAQqK,GAoBR,CACD,IAAM2M,EAAiC,EAA3BkoC,GAAoBjrC,GAChC,OAAI4uC,GAAsB,IAAR7rC,EACPrlB,EAGA1I,GAAKpE,EAAcmyB,GAAMrlB,GAzBpC,IAAMmxD,EAAUvkD,GAAK8L,GACfkB,EAAe22C,GAAoBjuC,EAAK3V,GAAK+L,GAAO,IACpD04C,EAAKx3C,EAAa,GAClBy3C,EAAKz3C,EAAa,GACpBs3C,GAAavD,GAAoB0D,IACjCN,EAAgBG,EAChBF,EAAahxD,EACbixD,EAAUG,EACV34C,EAAY04C,IAIZJ,EAAgBG,EAChBF,EAAavhD,GAAQ,EAAOzP,EAAQoxD,EAAID,GACxCF,EAAUI,EACV54C,EAAY04C,IAgBX1hD,EAAQ,EAAMtB,KAASvC,EApD1B,SAAC0lD,EAAW/Z,EAAOga,GAE7B,OAAa,CACT,IAAMC,EAAQF,EAAWz7B,EAAI0hB,EAAOka,EAAQF,EAC5C,GAAI7D,GAAoB+D,GAASZ,EAC7B,OAAOv5D,GAAK,CAACu+B,EAAG47B,GAAQD,GAGxBF,EAAYh6D,GAAK,CAACu+B,EAAG47B,GAAQD,GAC7Bja,EAAS1hB,EAAI,EACb07B,EAAYvC,GAAiByC,EAAOA,IA0CLC,CAAMvjD,KAAS,EAAGk/C,GAAmB,MAChF,OAAIh/C,GAAQyiD,GACD,IAGAt5D,GAAK,GAAI8W,GAAQwiD,IAsCzB,SAASa,GAAsB/lD,GAClC,IAAMgkD,EAAIhkD,EAEV,OADU,EACFgkD,EAAE1D,MACe,EAAd0D,EAAE5vD,OAFH,GAKC,E,g6BAxlBqB7F,GArhBC,IAqhBiC,SAAC3H,GAAD,OAAQm6D,GAAmB,EAAGn6D,GAAK,IAAI6sD,YAEvEllD,GAvhBD,IAuhBmC,SAAC3H,GAAD,OAAOm6D,GAAmB,EAAGn6D,KAAI6sD,YAEhEllD,GAzhBJ,IAyhBsC,SAAC3H,GAAD,OAAOk6D,GAAmBrvD,GAAS,EAAG,GAAG,GAAQ7K,MA4ItEu8D,GAAmB,GAAGF,KAuN5CxB,GAAmB,GCjqC5C,IAAMuE,GAAb,a,sRAAA,U,QAAA,G,EAAA,E,kZACI,WAAYC,EAAS/8D,GAAG,a,4FAAA,UACpB,gBACK+8D,QAAqB,EAAVA,EAChB,EAAK/8D,EAAIA,EAHW,EAD5B,O,EAAA,E,EAAA,uBAMI,WACI,IAAMvE,EAAIY,KAEV,OADgD,EAA7B2gE,GAAwBvhE,IAEvC,KAAM,EACF,OAAOo9D,GAAoBoE,GAAkBxhE,IAAM,IAAO,IAAMqgE,GAAsBmB,GAAkBxhE,IAE5G,KAAK,EACD,MAAO,IAEX,KAAK,EACD,OAAOqgE,GAAsBmB,GAAkBxhE,IAEnD,QACI,MAAO,IAAIkB,MAAM,iCApBjC,oBAwBI,SAAOsF,GAEH,OAAQA,aAAe66D,GAAeI,GADxB7gE,KAC+D4F,KA1BrF,yBA4BI,WAEI,OAAsC,GAkWP,IAA/B+6D,GAnWU3gE,MAoWH,EAGC2gE,GAvWE3gE,MD8OX,SAA2Bya,GAE9B,IADA,IAAIjK,EAAM,EACDnP,EAAI,EAAGA,GAAMoZ,EAAEsgD,MAAQ,EAAI15D,IAChCmP,EAAQiK,EAAE5L,OAAOxN,IAAMmP,GAAO,GAAM,EAExC,OAAa,EAANA,ECoHkCswD,CAAkBF,GAvW7C5gE,OAuWsE,KApYxF,oBAgCI,SAAOoc,GAEH,OAAO5a,EADOxB,QAjCtB,uBAoCI,SAAU4F,GACN,IA8UuCm7D,EA7UvC,GAAIn7D,aAAe66D,EACf,OAAiD,GA8JtD,SAAyCrhE,EAAGM,GAC/C,IAAMoc,EAAa,CAAC6kD,GAAwBvhE,GAAIuhE,GAAwBjhE,IA+CxE,QA7CuB,IAAnBoc,EAAW,IACY,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAGP,IAAlBA,EAAW,IACO,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAGP,IAAlBA,EAAW,IACO,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAIJ,GAG1B,KAAK,EACD,OAAO2gD,GAAgBmE,GAAkBxhE,GAAIwhE,GAAkBlhE,IAEnE,KAAK,EACD,OAAO+8D,GAAgBmE,GAAkBlhE,GAAIkhE,GAAkBxhE,IAEnE,KAAK,EAWL,KAAK,EAML,KAAK,EAGL,KAAK,EACD,OAAO,EAlBX,KAAK,EACD,OAAKo9D,GAAoBoE,GAAkBxhE,MAI/Bo9D,GAAoBoE,GAAkBlhE,IAMtD,KAAK,EACD,OAAQ88D,GAAoBoE,GAAkBlhE,IAQlD,KAAK,EACD,OAAQ88D,GAAoBoE,GAAkBxhE,IAElD,KAAK,EACD,MAAO,IAAIkB,MAAM,mDA6FrB0gE,CA/UchhE,KA8UyB+gE,EA5UOn7D,IA8UtC,EAEHi7D,GAlVS7gE,KAkV0B+gE,GACjC,EAGA,GAjVH,MAAO,IAAIzgE,MAAM,2D,wEA1C7B,GAAgC4G,GAmDzB,SAAS+5D,GAA0BP,EAAS/8D,GAC/C,OAAO,IAAI88D,GAAWC,EAAS/8D,GAW5B,SAASu9D,GAAyBzmD,GACrC,ODu0CG,SAA8BA,GACjC,OAAOA,EAAEsgD,OAAS,ECx0CdoG,CAAqB1mD,IAAO+lD,GAAsB/lD,GAAKgmD,GAAWW,SAC3DX,GAAWY,YAAYb,GAAsB/lD,IAG7CA,EAyBR,SAASkmD,GAAwBvhE,GACpC,OAAOA,EAAEshE,QAGN,SAASE,GAAkBxhE,GAC9B,OAAOA,EAAEuE,EAGN,SAASk9D,GAAgCzhE,EAAGM,GAC/C,IDqb+B2N,EAAG6nC,ECrb5Bp5B,EAAa,CAAC6kD,GAAwBvhE,GAAIuhE,GAAwBjhE,IA+CxE,QA7CuB,IAAnBoc,EAAW,IACY,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAGP,IAAlBA,EAAW,IACO,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAGP,IAAlBA,EAAW,IACO,IAAnBA,EAAW,GACe,EAEH,IAAlBA,EAAW,GACU,EAEH,IAAlBA,EAAW,GACU,EAGA,EAIJ,GAG1B,KAAK,EAGL,KAAK,EACD,ODiYuBzO,ECjYGuzD,GAAkBxhE,GDiYlB81C,ECjYsB0rB,GAAkBlhE,GDkYtE2N,EAAE0tD,QAAU7lB,EAAE6lB,OACA,SAAC2B,EAAQC,EAAQ1gD,GAE3B,OAAa,CACT,IAAM2gD,EAAKF,EAAQG,EAAKF,EAAQt7D,EAAI4a,EACpC,IAAW,IAAP5a,EACA,OAAO,EAEN,GAAIu7D,EAAGv7D,KAAOw7D,EAAGx7D,GAOlB,OAAO,EANPq7D,EAASE,EACTD,EAASE,EACT5gD,EAAS5a,EAAI,GASlBogC,CAAMp0B,EAAEwB,OAAQqmC,EAAErmC,OAAQxB,EAAE0tD,MAAQ,GCpZ3C,KAAK,EAQL,KAAK,EACD,QAAIyB,GAAoBoE,GAAkBxhE,KAC/Bo9D,GAAoBoE,GAAkBlhE,IAMrD,KAAK,EACD,OAAO,EAEX,KAAK,EAGL,KAAK,EACD,OAAO88D,GAAoBoE,GAAkBlhE,IAEjD,KAAK,EAGL,KAAK,EACD,OAAO88D,GAAoBoE,GAAkBxhE,IAEjD,KAAK,EACD,MAAO,IAAIkB,MAAM,mDAgNtB,SAASghE,GAA2B7mD,GACvC,OAAIA,GAAK,EACEwmD,GAA0B,EAAGC,GAAyB1B,GAAqB/kD,KAG3EwmD,IAA2B,EAAGC,IADzB,aAAPzmD,EDm2BN,SAA8BA,GACjC,OAx3BG,SAA8Brb,GAGjC,IAFA,IAAMmK,EAAOvE,GAAQ5F,EAAG8M,GAAS,EAAG,GAAG,IAAU,EAAKA,GAAS,EAAG,GAAG,GAAS9M,EACxE4nB,EAAI60C,GAtByB,GAuB1Bx6D,EAAI,EAAGA,GAAMkgE,EAA8BlgE,IAChD2lB,EAAEnY,OAAOxN,GAAuH,IAA7G6M,IjDgmBJ5C,EiDhmBqBsG,GAAYrI,EAAKgyD,GAAmBI,GAAuBt6D,IjDgmBzEiP,EiDhmB8EqrD,GjDimBnG9wD,GAAOyF,KACRA,EAAU3C,GAAU2C,IAEpBpG,GAEOgC,IADIZ,EAAMV,SAAWV,GAAKs3D,MAAQt3D,GAAKu3D,OAAOn2D,EAAMZ,IAAKY,EAAMX,KAAM2F,EAAQ5F,IAAK4F,EAAQ3F,MAC5ET,GAAKkG,WAAY9E,EAAMV,UAEzC8D,GAASpD,EAAO5B,GAAS8E,GAAOlD,EAAOgF,GAAUA,MARrD,IAAgBhF,EAAOgF,EiD9lB1B,OAAOwrD,GAAmB90C,GAk3BnB06C,CAAqBjnD,GCn2BsCknD,CAAqB9vD,GAAiBE,GAAY0I,GAAG,EAAO,KAG5D+kD,GAAqB1R,GAAuBrzC,MAgB3G,SAASmnD,KACZ,OAAOnB,GAAWvqB,IAOf,SAAS2rB,KACZ,OAAOpB,GAAWvzC,KCnUf,SAAS40C,GAAU1iE,GACtB,OD25BG,SAAmCA,GACtC,OAAO,IAAIq4C,GAvCR,SAAkCr4C,GAErC,OADgD,EAA7BuhE,GAAwBvhE,IAEvC,KAAM,EACF,OAAQkgE,GAAqBsB,GAAkBxhE,IAEnD,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAOkgE,GAAqBsB,GAAkBxhE,IAElD,QACI,MAAO,IAAIkB,MAAM,mDA0BNyhE,CAAyB3iE,IC55BrC4iE,CAA0B5iE,G,yOCvF9B,SAAS6iE,GAAqB7iE,GACjC,SAAe,MAALA,GALP,SAAqCA,GACxC,MAAsB,WAAf,GAAQA,GAIU8iE,CAA4B9iE,IAAQ,YAAaA,GAAQ,MAAOA,GAAQ,WAAaA,EAAC,IACpG,UAAYA,EAAC,EAiGrB,SAAS+iE,GAAqB/hE,GACjC,OAAa,MAATA,EACO4rD,KAAK1X,UAAU,MAGf0X,KAAK1X,UAAUl0C,GAAO,SAAC+E,EAAKi9D,GAC/B,I3DpIehjE,E2DqIf,OAAO6iE,GAAqBG,GAAa5gE,GAASsgE,GAAUM,IAAgBA,aAAqB9+D,KAAQ++D,GAAWD,EAAW,KAAgC,iBAAfA,EAA2BA,E3DpIvK,OADWhjE,E2DqIoLgjE,I3DpI1K,WAAb,EAAOhjE,IAAkBsB,OAAOC,YAAYvB,E2DoIyJC,MAAMC,QAAQ8iE,GAAaA,EAAa/iE,MAAMib,KAAK8nD,GAAgBH,GAAqBG,GAAa5gE,GAASsgE,GAAUM,IAvH9U,SAAkChjE,GACrC,OAAIA,aAAakE,MACN,WAAYlE,EAqHyUkjE,CAAyBF,GAAyCC,GAAXD,EAAoC,KAASA,IAC7br6D,GAAK,I,kzDFvEZ04D,GAAWW,SAAW,KACtBX,GAAWY,YAAcr4D,GAAWy3D,GAAWW,UAAU,SAAC3mD,GAAD,OAAO+kD,GAAqB/kD,MACrFgmD,GAAWvqB,IAAMorB,GAA2B,GAC5Cb,GAAW8B,IAAMjB,GAA2B,GAC5Cb,GAAWvzC,KAAOo0C,GAA2B,GCzB7BO,KAEDD,KDoYRnB,GAAW8B,IC/REV,KAEDD,KEjJhB,IAAMY,GAAb,gCACI,WAAYC,EAAWC,EAAWC,GAAc,yBAC5C,gBACKF,UAAYA,EACjB,EAAKC,UAAYA,EACjB,EAAKC,aAAeA,EAJwB,EADpD,cAAiCz7D,GAapB07D,GAAb,gCACI,WAAYC,EAAUC,EAAWC,GAAM,yBACnC,gBACKF,SAAWA,EAChB,EAAKC,UAAYA,EACjB,EAAKC,KAAOA,EAJuB,EAD3C,cAA+B77D,GAalBwoD,GAAb,gCACI,WAAYhpD,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,gCAMI,WACI,MAAO,CAAC,OAAQ,OAAQ,SAAU,SAAU,SAAU,SAAU,QAAS,OAAQ,UAAW,QAAS,UAAW,QAAS,OAAQ,OAAQ,QAAS,WAAY,iBAAkB,WAAY,WAAY,SAAU,WAAY,OAAQ,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,MAAO,QAAS,MAAO,QAAS,MAAO,aAAc,cAAe,UAAW,OAAQ,OAAQ,SAAU,aAP9Y,GAA8Ba,G,uKCtBvB,IAAMw8D,GAAb,cACI,WAAYC,EAAO39D,I,4FAAU,SACzB,IAAMk/C,EAAQ,IAAI98C,EAAU,MAC5B1H,KAAKsF,SAAWA,EAChBk/C,EAAMp7B,SAAWppB,KACjBA,KAAKkjE,QAAW,IAAIn1B,IAAI,IACxB/tC,KAAK,YAAc,EACnB,IAAMge,EAAazd,EAAc0iE,GACjC,IACI,KAAOjlD,EAAW,8CAA8C,CAC5D,IAAMmlD,EAAOnlD,EAAW,0DACxBolD,GAAuB5e,EAAMp7B,SAAU+5C,EAAK,GAAIA,EAAK,KAH7D,QAOInlD,EAAWC,WAfvB,O,EAAA,E,EAAA,MAkBSvd,OAAOskD,YAlBhB,IAkBI,WACI,MAAO,eAnBf,oBAqBI,SAAO5oC,GAEH,OAAO/c,MAAMib,KADCta,QAtBtB,KAyBK,+CAzBL,MAyBI,WAEI,OAAOO,EADOP,QA1BtB,2BA6BI,WAEI,OAAOO,EAAcoG,GADP3G,KACoBkjE,QAAQz/D,aA/BlD,KAiCK/C,OAAOC,SAjCZ,MAiCI,WACI,OAAOC,EAAWZ,KAAKS,mBAlC/B,KAoCK,oDApCL,MAoCI,SAAsDqe,GAElDskD,GADcpjE,KACgB8e,EAAK,GAAIA,EAAK,MAtCpD,KAwCK,iDAxCL,MAwCI,WAEIukD,GADcrjE,QAzCtB,KA4CK,yDA5CL,MA4CI,SAA2D8e,GACvD,IACMhD,EAAawnD,GADLtjE,KACsC8e,EAAK,IAazD,OAXkB,MAAdhD,GACI9X,EAAO8X,EAAW,GAAIgD,EAAK,IACD,EAOJ,GAG1B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,KAhEvB,KAoEK,2DApEL,MAoEI,SAA6D+oC,EAAO0b,GAChE,I/CmwBuBrgD,EAAAA,E+ClwBR,SAAC7hB,EAAGmJ,GACfq9C,EAAM0b,EAAaliE,GAAKmJ,G/CkwBhC4S,IAAK,SAAC/b,EAAGjC,GAEL,OADA8jB,EAAO7hB,EAAGjC,GACFiC,EAAI,EAAK,IAClB,E+CvwBerB,QArEtB,KA0EK,qDA1EL,MA0EI,WAEI,OAAsC,EAA/BwjE,GADOxjE,QA3EtB,KA8EK,0DA9EL,MA8EI,WACI,OAAO,IA/Ef,KAiFK,uDAjFL,MAiFI,SAAyD8e,GACrD,IACMhD,EAAawnD,GADLtjE,KACsC8e,EAAK,IACzD,OAAkB,MAAdhD,IACI9X,EAAO8X,EAAW,GAAIgD,EAAK,KAC3B2kD,GAJMzjE,KAI0B8e,EAAK,KAElC,KAxFnB,KA8FK,qDA9FL,MA8FI,SAAuD3Z,EAAK/E,GAExDgjE,GADcpjE,KACgBmF,EAAK/E,KAhG3C,KAkGK,4DAlGL,MAkGI,SAA8D+E,GAE1D,OAAOu+D,GADO1jE,KAC8BmF,KApGpD,KAsGK,yDAtGL,MAsGI,SAA2DA,GAEvD,OAAOw+D,GADO3jE,KAC2BmF,KAxGjD,KA0GK,0DA1GL,MA0GI,SAA4DA,EAAKxB,GAE7DigE,GADc5jE,KACqBmF,EAAKxB,KA5GhD,KA8GK,oDA9GL,MA8GI,WACI,IAAM6gD,EAAQxkD,KACd,OAAOmd,GAAQqE,IAAM,kBAAM9d,IAAI,SAACy/D,GAAD,OAAUA,EAAK,KAAI3e,SAhH1D,KAkHK,uDAlHL,MAkHI,SAAyDr/C,GAErD,OAAOs+D,GADOzjE,KACyBmF,KApH/C,KAsHK,+DAtHL,MAsHI,SAAiEA,EAAK/E,GAClE,IACM0b,EAAawnD,GADLtjE,KACsCmF,GACpD,GAAkB,MAAd2W,EAAoB,CACpB,IAAMqnD,EAAOrnD,EAEb,OADA1b,EAAMgpB,SAAW+5C,EAAK,IACf,EAGP,OAAO,IA/HnB,KAkIK,sDAlIL,MAkII,WACI,IAAM3e,EAAQxkD,KACd,OAAOmd,GAAQqE,IAAM,kBAAM9d,IAAI,SAACy/D,GAAD,OAAUA,EAAK,KAAI3e,SApI1D,gBAsII,WAEI,OAAsC,EAA/Bgf,GADOxjE,QAvItB,mBA0II,WAEIqjE,GADcrjE,QA3ItB,oBA8II,SAAO0kC,GAEH,OAAO++B,GADOzjE,KACyB0kC,KAhJ/C,qBAkJI,WAEI,OAAOhhC,IAAI,SAAC2J,GAAD,MAAO,CAACA,EAAE,GAAIA,EAAE,MADbrN,QAnJtB,iBAsJI,SAAI0kC,GAEA,OAAOi/B,GADO3jE,KAC2B0kC,KAxJjD,iBA0JI,SAAIA,GAEA,OAAOg/B,GADO1jE,KAC8B0kC,KA5JpD,kBA8JI,WAEI,OAAOhhC,IAAI,SAAC2J,GAAD,OAAOA,EAAE,KADNrN,QA/JtB,iBAkKI,SAAI0kC,EAAG/gC,GAGH,OADAigE,GADc5jE,KACqB0kC,EAAG/gC,GADxB3D,OAnKtB,oBAuKI,WAEI,OAAO0D,IAAI,SAAC2J,GAAD,OAAOA,EAAE,KADNrN,QAxKtB,qBA2KI,SAAQ8I,EAAG28C,GACP,IAAMjB,EAAQxkD,KACdijB,IAAQ,SAAC5V,GACLvE,EAAEuE,EAAE,GAAIA,EAAE,GAAIm3C,KACfA,M,wEA/KX,E,QAAA,GA2LA,SAASqf,GAA+Brf,EAAO9f,GAC3C,IACI5oB,EADErZ,EAAoC,EAAhC+hD,EAAMl/C,SAASnC,YAAYuhC,GAEjCkJ,EAAS,KAIb,OAHA9xB,EAAa,CAAC2R,GAAY+2B,EAAM0e,QAASzgE,EAAG,IAAIiF,GAAU,kBAAMkmC,KAAQ,SAACjqC,GACrEiqC,EAASjqC,MACRiqC,IACU,GACJ,EAAC,EAAMnrC,EAAGqZ,EAAW,GAAGo4B,WAAU,SAACivB,GAAD,OAAU3e,EAAMl/C,SAASrB,OAAOygC,EAAGy+B,EAAK,QAG1E,EAAC,EAAO1gE,GAAI,GAIpB,SAAS6gE,GAA0B9e,EAAO9f,GAC7C,IAAM5oB,EAAa+nD,GAA+Brf,EAAO9f,GAazD,OAXI5oB,EAAW,IACPA,EAAW,IAAM,EACS,EAOJ,GAG1B,KAAK,EACD,OAAO4R,GAAgB82B,EAAM0e,QAASpnD,EAAW,IAAIA,EAAW,IAEpE,KAAK,EACD,QASL,SAASunD,GAAkB7e,GAC9BA,EAAM0e,QAAQY,QAGX,SAASN,GAAsBhf,GAClC,IAAIniD,EAAQ,EACR2b,EAAazd,EAAcikD,EAAM0e,QAAQz/D,UAC7C,IACI,KAAOua,EAAW,8CAEd3b,EAAUA,EADI2b,EAAW,0DACD1c,OAAU,EAH1C,QAOI0c,EAAWC,UAEf,OAAe,EAAR5b,EAGJ,SAASshE,GAA2Bnf,EAAO9f,GAC9C,IAAM5oB,EAAawnD,GAA0B9e,EAAO9f,GACpD,GAAkB,MAAd5oB,EACA,OAAOA,EAAW,GAGlB,MAAO,IAAIxb,MAAM,wCAIlB,SAASsjE,GAA4Bpf,EAAO9f,EAAG/gC,GAClD,IAAMmY,EAAa+nD,GAA+Brf,EAAO9f,GAazD,OAXI5oB,EAAW,IACPA,EAAW,IAAM,EACS,EAOJ,GAG1B,KAAK,EACD4R,GAAgB82B,EAAM0e,QAASpnD,EAAW,IAAIA,EAAW,IAAM,CAAC4oB,EAAG/gC,GACnE,MAEJ,KAAK,EACGmY,EAAW,GACS4R,GAAgB82B,EAAM0e,QAASpnD,EAAW,IAAIlE,KAAK,CAAC8sB,EAAG/gC,IAG3E6gD,EAAM0e,QAAQ9gE,IAAI0Z,EAAW,GAAI,CAAC,CAAC4oB,EAAG/gC,MAO/C,SAASy/D,GAAuB5e,EAAO9f,EAAG/gC,GAC7C,IAAMmY,EAAa+nD,GAA+Brf,EAAO9f,GAazD,OAXI5oB,EAAW,IACPA,EAAW,IAAM,EACS,EAOJ,GAG1B,KAAK,EACD,IAAMy6C,EAAM9jD,GAAO,6DAA8DiyB,GACjF,MAAO,IAAIpkC,MAAMi2D,GAGrB,KAAK,EACGz6C,EAAW,GACS4R,GAAgB82B,EAAM0e,QAASpnD,EAAW,IAAIlE,KAAK,CAAC8sB,EAAG/gC,IAG3E6gD,EAAM0e,QAAQ9gE,IAAI0Z,EAAW,GAAI,CAAC,CAAC4oB,EAAG/gC,MAO/C,SAAS+/D,GAA8Blf,EAAO9f,GACjD,IAAM5oB,EAAa+nD,GAA+Brf,EAAO9f,GAazD,OAXI5oB,EAAW,IACPA,EAAW,IAAM,EACS,EAOJ,GAG1B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,GAKZ,SAAS2nD,GAAyBjf,EAAO9f,GAC5C,IAAM5oB,EAAa+nD,GAA+Brf,EAAO9f,GAazD,OAXI5oB,EAAW,IACPA,EAAW,IAAM,EACS,EAOJ,GAG1B,KAAK,EAED,OADA4R,GAAgB82B,EAAM0e,QAASpnD,EAAW,IAAI9U,OAAO8U,EAAW,GAAI,IAC7D,EAEX,KAAK,EACD,OAAO,GCpOZ,SAASioD,GAAiBC,GAC7B,OAAO7mD,GAAQqE,IAAM,WACjB,GAAI4vC,GAAW4S,GAAU,CACrB,IAAMv7C,EZ+JX,SAA6BtM,GAChC,GAAIi1C,GAAWj1C,IAAoB,MAAdA,EAAEyzC,SAAkB,CACrC,IAAMqU,EAAM9nD,EAAEyzC,SACd,MAAO,CAACqU,EAAI,GAAIA,EAAI,IAGpB,MAAM,IAAI3jE,MAAJ,UAAa6b,EAAEwzC,SAAf,gCYrKmBuU,CAAoBF,GACzC,OAAO5lD,GAAO2lD,GAAiBt7C,EAAa,IAAKjH,IAAM,kBAAMuiD,GAAiBt7C,EAAa,QAG3F,OAAOxL,GAAU+mD,OAgG7B,SAASG,GAAc/mC,EAAGja,GACtB,OAAOia,EAAEvL,MAYb,SAASuyC,GAAgBC,GACrB,IAAIjnC,EAAGknC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAC9EC,EA7PH,SAAuCC,GAE1C,OADmBtV,GAASsV,IAExB,IAAK,gBACD,OAAO,IAAI5V,GAAS,GAExB,IAAK,cACD,OAAO,IAAIA,GAAS,GAExB,IAAK,eACD,OAAO,IAAIA,GAAS,IAExB,IAAK,eACD,OAAO,IAAIA,GAAS,GAExB,IAAK,gCACL,IAAK,eACD,OAAO,IAAIA,GAAS,IAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,kBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,kBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,kBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,kBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,wBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,iBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,GAExB,IAAK,kCACL,IAAK,iBACD,OAAO,IAAIA,GAAS,IAExB,IAAK,6BACD,OAAO,IAAIA,GAAS,IAExB,IAAK,6BACD,OAAO,IAAIA,GAAS,GAExB,IAAK,cACD,OAAO,IAAIA,GAAS,IAExB,IAAK,cACD,OAAO,IAAIA,GAAS,IAExB,IAAK,eACD,OAAO,IAAIA,GAAS,IAExB,IAAK,gBACD,OAAO,IAAIA,GAAS,IAExB,QACI,QAkLwB6V,CAA8BlB,GAC9D,GAA+B,MAA3BgB,EAEA,OADiBA,EAIjB,IAAMG,EA/GNpU,GADiCj1C,GAgHwBkoD,GA9GlDN,GAAiB5nD,SAGxB,EA4GA,GAA+B,MAA3BqpD,EAAiC,CACjC,IAAMC,EAAQD,EACd,OAAO,IAAI9V,GAAS,IAAKtyB,EAAK,IAAIp8B,GAAK,kBAAM0C,IAAI,SAACgiE,GAAD,OAAoBC,GAAeD,KAAiBD,MAAU,kBAAMtB,GAAc/mC,MAGnI,IAAMwoC,EAzLX,SAAoCzpD,GACvC,OZoOG,SAAkBA,GACrB,OAAOA,aAAauzC,GAAuB,MAAZvzC,EAAExW,OAAiBwW,aAAajV,EYrO3D2+D,CAAS1pD,GACFzY,IAAI,SAACoiE,GAAD,MAAW,CAACA,EAAOx/D,GAAKw/D,GAAQA,EAAM,MAAKzV,GAAkBl0C,SAGxE,EAoLoC4pD,CAA2B1B,GAC3D,GAA+B,MAA3BuB,EAAiC,CACjC,IAAMjgE,EAASigE,EACTn9B,EAAM,IAAIznC,GAAK,iBAAM,CAACmc,GAAQqE,IAAM,kBAAMlD,IAAQ,SAACxC,GAAD,OAAgBmB,GAAU,IAAIulD,GAAY1mD,EAAW,GAAI6pD,GAAe7pD,EAAW,IAAKA,EAAW,OAAMnW,OAAW0+D,MAC5K,OAAO,IAAI3U,GAAS,IAAI,kBAAMyU,GAAc17B,MAG5C,IAAMu9B,EArKf,SAAmC7pD,GACtC,OZsMG,SAAiBA,GACpB,OAAOA,aAAauzC,GAAsB,MAAXvzC,EAAE1V,MAAgB0V,aAAa3V,EYvM1Dy/D,CAAQ9pD,GACDzY,IAAI,SAACg8B,GAAD,MAAU,CAACp5B,GAAKo5B,GAAOA,EAAMh8B,IAAI,SAACwiE,GAAD,OAAUA,EAAK,MZ2NhCC,EY3NuDzmC,EZ4NjE,MAAdymC,EAAIxgE,OAAiB,GAAKwgE,EAAIxgE,UADlC,IAA4BwgE,IY3NgElV,GAAc90C,SAGzG,EAgKwCiqD,CAA0B/B,GAC1D,GAA+B,MAA3B2B,EAAiC,CACjC,IAAMv/D,EAAQu/D,EACRhjC,EAAM,IAAIhiC,GAAK,iBAAM,CAACmc,GAAQqE,IAAM,kBAAMlD,IAAQ,SAAC6C,GAAD,OAAkBlE,GAAU,IAAI2lD,GAAUzhD,EAAa,GAAIzd,IAAI,SAAC2iE,GAAD,OAAoBV,GAAeU,KAAiBllD,EAAa,IAAKA,EAAa,OAAM1a,OAAU49D,MAC1N,OAAO,IAAI3U,GAAS,IAAI,kBAAMyU,GAAcnhC,MAG5C,IAAMsjC,EArCnB,SAAkCnqD,GACrC,OZjFG,SAAgBA,GACnB,OAAsB,MAAfA,EAAE4zC,WAAqB5zC,EAAE4zC,UAAUzuD,OAAS,EYgF/CilE,CAAOpqD,GZ1CR,SAA+BA,GAClC,IAAIrI,EACJ,OAA6B,QAArBA,EAAKqI,EAAEyzC,gBAA6B,IAAP97C,OAAgB,EAASA,EAAG,GYyCtD0yD,CAAsBrqD,QAG7B,EAgC4CsqD,CAAyBpC,GACzD,GAA+B,MAA3BiC,EAAiC,CACjC,IAAMvV,EAAWuV,EACjB,OAAO,IAAI5W,GAAS,IAAK4U,EAAO,IAAItjE,GAAK,iBAAM,CAAC2kE,GAAe5U,GAAWsT,MAAiB,kBAAMF,GAAcG,MAG/G,IAAMoC,EA/JvB,SAAkCvqD,GACrC,OAAyE,IAArE6zC,GAAS7zC,GAAGrV,QAAQ,6CACbopD,GAAY/zC,GAAG,QAGtB,EA0JgDwqD,CAAyBtC,GACzD,GAA+B,MAA3BqC,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAIhX,GAAS,IAAK6U,EAAO,IAAIvjE,GAAK,kBAAM2kE,GAAeiB,MAAe,kBAAMzC,GAAcI,MAGjG,IAAMsC,EAzF3B,SAAyC1qD,GAC5C,OAA+D,IAA3D6zC,GAAS7zC,GAAGrV,QAAQ,mCACbopD,GAAY/zC,GAAG,QAGtB,EAoFoD2qD,CAAgCzC,GAChE,GAA+B,MAA3BwC,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAInX,GAAS,IAAK8U,EAAO,IAAIxjE,GAAK,kBAAM2kE,GAAeoB,MAAe,kBAAM5C,GAAcK,MAGjG,IAAMwC,EAtF/B,SAAqC7qD,GACxC,OAAkE,IAA9D6zC,GAAS7zC,GAAGrV,QAAQ,sCACbopD,GAAY/zC,GAAG,QAGtB,EAiFwD8qD,CAA4B5C,GAC5D,GAA+B,MAA3B2C,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAItX,GAAS,IAAK+U,EAAO,IAAIzjE,GAAK,kBAAM2kE,GAAeuB,MAAe,kBAAM/C,GAAcM,MAGjG,IAAM0C,EAnJnC,SAAmChrD,GACtC,OZRG,SAAiBA,GACpB,OAA4B,MAArB60C,GAAe70C,GYOlB7c,CAAQ6c,GACD60C,GAAe70C,QAGtB,EA8I4DirD,CAA0B/C,GAC1D,GAA+B,MAA3B8C,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAIzX,GAAS,IAAKgV,EAAO,IAAI1jE,GAAK,kBAAM2kE,GAAe0B,MAAe,kBAAMlD,GAAcO,MAGjG,IAAM4C,EAvIvC,SAAmCnrD,GACtC,OAAI+0C,GAAQ/0C,GZkHT,SAA0BA,GAC7B,GAAI+0C,GAAQ/0C,IAAoB,MAAdA,EAAEyzC,SAChB,OAAOzzC,EAAEyzC,SAGT,MAAM,IAAItvD,MAAJ,UAAa6b,EAAEwzC,SAAf,yBYtHC4X,CAAiBprD,QAGxB,EAkIgEqrD,CAA0BnD,GAC1D,GAA+B,MAA3BiD,EAAiC,CACjC,IAAMG,EAAUH,EAChB,OAAO,IAAI5X,GAAS,IAAKiV,EAAO,IAAI3jE,GAAK,kBAAM0C,IAAI,SAACgkE,GAAD,OAAoB/B,GAAe+B,KAAiBD,MAAY,kBAAMtD,GAAcQ,MAGvI,IAAMgD,EAtJ3C,SAAoCxrD,GACvC,OAAoE,IAAhE6zC,GAAS7zC,GAAGrV,QAAQ,wCACbopD,GAAY/zC,GAAG,QAGtB,EAiJoEyrD,CAA2BvD,GAC3D,GAA+B,MAA3BsD,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAIjY,GAAS,IAAKkV,EAAO,IAAI5jE,GAAK,kBAAM2kE,GAAekC,MAAe,kBAAM1D,GAAcS,MAGjG,IAAMkD,EA/N/C,SAAkC3rD,GACrC,OAAiD,IAA7C6zC,GAAS7zC,GAAGrV,QAAQ,qBACbopD,GAAY/zC,GAAG,QAGtB,EA0NwE4rD,CAAyB1D,GACzD,GAA+B,MAA3ByD,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAIpY,GAAS,IAAKmV,EAAQ,IAAI7jE,GAAK,kBAAM2kE,GAAeqC,MAAe,kBAAM7D,GAAcU,MAGlG,IAAMoD,EA9OnD,SAAiC9rD,GACpC,OAAwE,IAApE6zC,GAAS7zC,GAAGrV,QAAQ,4CACbopD,GAAY/zC,GAAG,QAGtB,EAyO4E+rD,CAAwB7D,GACxD,GAA+B,MAA3B4D,EAAiC,CACjC,IAAME,EAAaF,EACnB,OAAO,IAAIvY,GAAS,IAAKoV,EAAQ,IAAI9jE,GAAK,kBAAM2kE,GAAewC,MAAe,kBAAMhE,GAAcW,MAGlG,IAAMsD,EAzNvD,SAAiCjsD,GACpC,GAAwE,IAApE6zC,GAAS7zC,GAAGrV,QAAQ,4CAAmD,CACvE,IAAMuhE,EAAUnY,GAAY/zC,GAC5B,MAAO,CAACksD,EAAQ,GAAIA,EAAQ,KAsNoDC,CAAwBjE,GACxD,GAA+B,MAA3B+D,EAAiC,CACjC,IAAMG,EAAUH,EAAwB,GAClCI,EAAYJ,EAAwB,GAC1C,OAAO,IAAI1Y,GAAS,IAAKqV,EAAQ,IAAI/jE,GAAK,iBAAM,CAAC2kE,GAAe4C,GAAU5C,GAAe6C,OAAe,kBAAMrE,GAAcY,MAG5H,IAAM0D,EApJ3D,SAAwCtsD,GAC3C,GAAqE,IAAjE6zC,GAAS7zC,GAAGrV,QAAQ,yCAAgD,CACpE,IAAMuhE,EAAUnY,GAAY/zC,GAC5B,MAAO,CAACksD,EAAQ,GAAIA,EAAQ,KAiJwDK,CAA+BrE,GAC/D,GAA+B,MAA3BoE,EAAiC,CACjC,IAAME,EAAYF,EAAwB,GACpCG,EAAcH,EAAwB,GAC5C,OAAO,IAAI/Y,GAAS,IAAKsV,EAAQ,IAAIhkE,GAAK,iBAAM,CAAC2kE,GAAegD,GAAYhD,GAAeiD,GAAcA,MAAgB,kBAAMzE,GAAca,MAG7I,IAAM6D,EApK/D,SAAiC1sD,GACpC,OAAwE,IAApE6zC,GAAS7zC,GAAGrV,QAAQ,4CACbopD,GAAY/zC,GAAG,QAGtB,EA+JwF2sD,CAAwBzE,GACxD,GAA+B,MAA3BwE,EAAiC,CACjC,IAAME,GAAaF,EACnB,OAAO,IAAInZ,GAAS,IAAKuV,EAAQ,IAAIjkE,GAAK,kBAAM2kE,GAAeoD,OAAe,kBAAM5E,GAAcc,MAGlG,IAAM+D,GArInE,SAAmC7sD,GACtC,OAAsE,IAAlE6zC,GAAS7zC,GAAGrV,QAAQ,0CACbopD,GAAY/zC,GAAG,QAGtB,EAgI4F8sD,CAA0B5E,GAC1D,GAA+B,MAA3B2E,GAAiC,CACjC,IAAME,GAAaF,GACnB,OAAO,IAAItZ,GAAS,IAAKwV,EAAQ,IAAIlkE,GAAK,kBAAM2kE,GAAeuD,OAAe,kBAAM/E,GAAce,MAGlG,IApN/B/oD,GAoNqCgtD,GAlIvE,SAAqChtD,GACxC,OAAuD,IAAnD6zC,GAAS7zC,GAAGrV,QAAQ,2BACbopD,GAAY/zC,GAAG,QAGtB,EA6HgGitD,CAA4B/E,GAC5D,GAA+B,MAA3B8E,GAAiC,CACjC,IAAME,GAAcF,GACpB,OAAO,IAAIzZ,GAAS,IAAKyV,EAAQ,IAAInkE,GAAK,kBAAM2kE,GAAe0D,OAAgB,kBAAMlF,GAAcgB,MAGnG,OAAO,IAAIzV,GAAS,IAAK0V,EAAQ,IAAIpkE,GAAK,kBAAMqjE,KAAgB,kBAAMF,GAAciB,MAqBhK,IAAMkE,GAAgB,IAAItG,GAAW,GAAI,CACrC/+D,OAAQ,SAAC7E,EAAGM,GAAJ,OAAUsE,GAAO5E,EAAGM,IAC5ByD,YAAa,SAAC/D,GAAD,OAAO8D,EAAe9D,MAGhC,SAASumE,GAAetB,GAC3B,IAAIvoD,EACA8xB,EAAS,KAIb,IAHA9xB,EAAa,CAAC2R,GAAY67C,GAAejF,EAAc,IAAI38D,GAAU,kBAAMkmC,KAAQ,SAACjqC,GAChFiqC,EAASjqC,MACRiqC,IACU,GACX,OAAO9xB,EAAW,GAGlB,IAAMytD,EAAOnF,GAAgBC,GAC7B,OAAOnqD,GAAc81C,GAASqU,KAAqBtqD,GAASi2C,GAASqU,GAAe,SAAetqD,GAASi2C,GAASqU,GAAe,SAChIiF,GAAclnE,IAAIiiE,EAAckF,GAIzBA,EAKZ,SAASC,GAAYjiD,GACxB,OAAQA,EAAM7gB,KACV,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACD,OAAO,EAEX,QACI,OAAO,GAKZ,SAAS+iE,GAAUliD,GACtB,OAAkB,KAAdA,EAAM7gB,KACC6gB,EAAM5hB,OAAO,KAAK,GAAG+jE,OAAM,SAACC,GAAD,OAAuC,IAA3BA,EAAM7G,UAAUxhE,U,yOCrB/D,SAASsoE,GAAiB70D,GAC7B,OAA4B,IAAxBA,EAAMjO,QAAQ,MACPiT,GAAShF,EAAO,KAOxB,SAAS80D,GAAsB90D,GAClC,MAAQ,IAAOA,EAAS,IA1ZU,IAAI+0D,SAAS,sDAAb,GA4qD/B,IAAMC,GC7sDE,SAAeC,GAC1B,IAAIC,EAAY,2HACZC,EAAO,CACP,KAAM,MACN,KAAM,MACN,KAAM,MACN,KAAM,MACN,KAAM,MACN,IAAK,MACL,KAAM,QAIV,OADAD,EAAUjzD,UAAY,EACfizD,EAAU7vD,KAAK4vD,GAClB,IAAMA,EAAUr3D,QAAQs3D,GAAW,SAAUv+C,GACzC,IAAIrP,EAAI6tD,EAAKx+C,GACb,MAAoB,iBAANrP,EAAiBA,EAC3B,OAAS,OAASqP,EAAE/oB,WAAW,GAAGnB,SAAS,KAAK8H,OAAO,MAC1D,IACL,IAAM0gE,EAAY,KD4rDnB,SAASG,GAAkBC,EAAWC,GAGzC,IAFA,IAAInuB,EAAcouB,EAAgBC,EAAgBC,EAAgBC,EADX,aAInD,IjBzpDct0D,EmBrCIjC,EPyHD9U,EKqkDXgB,EAAQgqE,EAAWM,EAAWL,EACpC,OAAQK,EAAShkE,KACb,KAAK,EAED,OAAe,MADCtG,EAEZ,GAAO,QAGP,GAAO2pE,GALK3pE,IAQpB,KAAK,EAsLL,QACI,SAAO,QApLX,KAAK,EACL,KAAK,EACD,OAAI6J,OAAOmC,MAAMhM,GACb,GAAO2pE,GAAkB,QAGzB,GAAO3pE,EAAMoB,YAGrB,KAAK,EACD,SAAOuoE,GAAkB3pE,IAE7B,KAAK,GACL,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,EACD,SAAO2B,EAAc3B,IAEzB,KAAK,EACL,KAAK,GACD,SAAOypE,GAAsBroE,GAASpB,KAE1C,KAAK,GACD,SAAOypE,IL9mDEzqE,EK8mD+BgB,EL7mD7CiiE,EAAWjjE,MK+mDV,KAAK,GACD,SAAOyqE,GAAsBc,GAAWvqE,KAE5C,KAAK,EACD,OAAIA,EACA,GAAO,QAGP,GAAO,SAGf,KAAK,GACD,SAAOypE,IAAuB3tB,EAAe97C,EAAO87C,KAExD,KAAK,GACD,SAAO2tB,IAAuBS,EAAiBlqE,EAAOwqE,GAAWN,EAAgB,QAErF,KAAK,GACD,SAAOT,IAAuBU,EAAiBnqE,EAAOwqE,GAAWL,EAAgB,QAErF,KAAK,GACD,SAAOxoE,GAAeyoE,EAAiBpqE,EE9vD7B8T,EF8vD8Cs2D,EE7vD7Dt8D,GAAM28D,GAAiBj2D,GAASV,GAAI,WF+vDnC,KAAK,GACD,SAAO21D,GAAsBroE,IAAUipE,EAAiBrqE,EjB5tDlD+V,EiB4tD+Ds0D,EjB3tD1EK,GAAiBC,GAAgB50D,GAAK,SiB6tDrC,KAAK,GACD,SAAQ,IAAM9P,GAAK,KAAMumC,IAAM,SAACk5B,GAC5B,IAAMkF,EAAQb,Gb/7C3B,SAAwBxmE,EAAGmiE,GAC9B,OAAOniE,EAAEmiE,EAAM,Ia87CiCmF,CAAe7qE,EAAO0lE,EAAMnD,cAAemD,EAAMpD,WACjF,OAAOtqD,GAAOf,GAAO,YAAde,CAA6B0tD,EAAMrD,UAAnCrqD,CAA8C4yD,KACtDN,EAAS/kE,OAAO,KAAK,KAAQ,KAEpC,KAAK,GACD,IAAMulE,EAAcR,EAAS/kE,OAAO,KACpC,SAAQ,IAAMU,GAAK,KAAM8kE,IAAM,SAACC,GAAD,OAAajB,GAAkBiB,EAASF,KAAc9qE,IAAW,KAEpG,KAAK,GACD,IAAMirE,EAAgBX,EAAS/kE,OAAO,KACtC,SAAQ,IAAMU,GAAK,KAAM8kE,IAAM,SAACG,GAAD,OAAenB,GAAkBmB,EAAWD,KAAgBjrE,IAAW,KAE1G,KAAK,GACD,IAAMmrE,EAAgBb,EAAS/kE,OAAO,KACtC,SAAQ,IAAMU,GAAK,KAAM8kE,IAAM,SAACK,GAAD,OAAerB,GAAkBqB,EAAWD,KAAgBnrE,IAAW,KAE1G,KAAK,GACD,IAAMqrE,EAAgBf,EAAS/kE,OAAO,KACtC,SAAQ,IAAMU,GAAK,KAAMumC,IAAM,SAAC8+B,GAAD,OAAevB,GAAkBuB,EAAWD,KAAgBrrE,IAAW,KAE1G,KAAK,GACD,IAAMurE,EAAgBjB,EAAS/kE,OAAO,KACtC,SAAQ,IAAMU,GAAK,KAAMulE,IAAM,SAACC,GAAD,OAAe1B,GAAkB0B,EAAWF,KAAgBvrE,IAAW,KAE1G,KAAK,GACD,IAAM0rE,EAAgBpB,EAAS/kE,OAAO,KACtC,SAAQ,IAAMU,GAAK,KAAMumC,IAAM,SAACm/B,GAAD,OAAe5B,GAAkB4B,EAAWD,KAAgBrpD,GAAUriB,KAAY,KAErH,KAAK,GAED,OAAkB,MADCA,GAEfgqE,EAAY4B,GAFG5rE,GAGfiqE,EAAeK,EAAS/kE,OAAO,KAC/B,8BAGA,GAAO,QAGf,KAAK,GACD,IAAMgjB,EAAiB+hD,EAAS/kE,OAAO,KACjCq3B,Ebz/Cf,SAAwBr5B,EAAGwY,GAC9B,IACM8vD,EADQhb,GAAc90C,GACRxY,EAAE+C,KACtB,GAAa,MAATulE,EACA,MAAM,IAAI3rE,MAAJ,2BAA8BqD,EAAE2C,KAAhC,mBAEV,MAAO,CAAC2lE,EAAOtoE,EAAEgC,Qam/CkBumE,CAAe9rE,EAAOuoB,EAAe,IACtDwjD,EAAWnvC,EAAe,GAC1Br3B,EAASq3B,EAAe,GACxBovC,EAAYzjD,EAAe,GAAGjK,MAAK,SAACirD,GAAD,OAAYA,EAAM9G,WAAawJ,GAAOF,MAAYrJ,UAC3F,GAAI2G,GAAUiB,IAAyC,IAArB0B,EAAU9qE,OACxC,SAAOuoE,GAAsBwC,GAAOF,KAEnC,GAAyB,IAArBC,EAAU9qE,OACf,SAAU,IAAMuoE,GAAsBwC,GAAOF,IAAc,KAAQhC,GAAkBxkE,EAAO,GAAIymE,EAAU,IAAO,KAGjH,IAAME,EAAqBjmE,GAAK,KAAMwC,IAAW,SAAC8O,EAAO40D,GAAR,OAAqBpC,GAAkBxkE,EAAOgS,GAAQ40D,KAAWH,IAClH,SAAW,IAAMvC,GAAsBwC,GAAOF,IAAnC,MAAgEG,EAAsB,OAGzG,KAAK,GACD,IAAMz4C,EAAiB62C,EAAS/kE,OAAO,KACjC4iE,EAAU10C,EAAe,GACzB24C,EAAmBnmE,GAAK,KAAMumC,IAAM,SAACtpB,GACvC,IAAMmpD,EAAgBtC,GAAkB7mD,EAAU,GAAIilD,GAChDmE,EAAkBvC,GAAkB7mD,EAAU,GAAIuQ,EAAe,IACvE,OAAI21C,GAAYjB,IAAkBkB,GAAUlB,GACnCqB,GAAiB6C,GAIVA,EAAgB,KAAQC,EAHxB3C,GAAkB0C,GAAiB,KAAQC,EAO7C,IAAMD,EAAiB,KAAQC,EAAmB,MxBtkC7E,SAA+Bx3D,GAClC,IAAMuF,EAA4B,EAAxBgoC,GAAmBvtC,GACvB1E,EAAM/H,GAAK,IAAIpJ,MAAMob,GAAI,EAAGA,EAAG,CAAC,KAAM,OAE5C,OADAipC,GAA0BxuC,EAAG1E,EAAK,GAC3BA,EA0dAm8D,CwB0mBkBvsE,ExB1mBMojC,QwB2mBnB,OAAIgmC,GAAYjB,IAAkBkB,GAAUlB,GACxC,GAAQ,IAAMiE,EAAoB,KAGlC,GAAQ,IAAMA,EAAoB,KAG1C,KAAK,GACD,IAAMn4C,EAAiBq2C,EAAS/kE,OAAO,KACjCgjE,EAAYt0C,EAAe,GAC3Bu4C,EAAqBvmE,GAAK,KAAM8kE,IAAM,SAAChI,GACzC,IAAM1uC,EAAiB,CAAC0uC,EAAK,GAAIA,EAAK,IAChC0J,EAAkB1C,GAAkB11C,EAAe,GAAIk0C,GACvDmE,EAAoB3C,GAAkB11C,EAAe,GAAIJ,EAAe,IAC9E,OAAIm1C,GAAYb,IAAoBc,GAAUd,GACrCiB,GAAiBiD,GAIVA,EAAkB,KAAQC,EAH1BjD,GAAsBgD,GAAmB,KAAQC,EAOnD,IAAMD,EAAmB,KAAQC,EAAqB,MAErE1sE,IACH,OAAIopE,GAAYb,IAAoBc,GAAUd,GAC1C,GAAQ,IAAMiE,EAAsB,KAGpC,GAAQ,IAAMA,EAAsB,KAG5C,KAAK,GACD,IAAMG,EAAarC,EAAS/kE,OAAO,KACnC,OAA0B,IAAtBonE,EAAWzrE,OACX,GAAQ,IAAM6oE,GAAkB/pE,EAAO2sE,EAAW,IAAO,KAGzD,GAAQ,IAAM1mE,GAAK,KAAMwC,IAAW,SAACmkE,EAASC,GAAV,OAAwB9C,GAAkB8C,EAAWF,EAAWC,MAAW5sE,IAAW,KAGlI,KAAK,GAGL,KAAK,GACD,SAAO+hE,GAAqB/hE,IAMpC,iBAtMS,+DAsMT,MAtMS,iC,knCGtsDX8sE,GAAAA,SAAAA,I,6rBACF,WAAYxmE,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,E,gCAK5B,WACI,MAAO,CAAC,cAAe,cAAe,aAAc,eAAgB,oB,sBAExE,WAEI,OADU3F,KACA0G,KACN,KAAK,EACD,MAAO,cAEX,KAAK,EACD,MAAO,aAEX,KAAK,EACD,MAAO,eAEX,KAAK,EACD,MAAO,iBAEX,QACI,MAAO,mB,EAzBjBwmE,CAAkB1mE,GAmCX2mE,GAAb,IACI,WAAYC,EAASC,GAAO,WACxBrtE,KAAKotE,QAAUA,EACfptE,KAAKqtE,MAAQA,KAgDrB,SAASC,GAAa9oB,EAAO+oB,EAAW/hB,GACpC,OAAOxL,GAAe/iC,GAAAA,OAAgB,WAClC,IAAIuwD,E1BkHiB/pE,EAAQyjD,E0BjH7B,OAAOjqC,GAAAA,KAAekqC,G1BiIvB,SAAsBsmB,EAAavmB,GACtC,OAAO,IAAIpG,GAAYoG,EAAInG,IAAKmG,EAAIlG,OAAQkG,EAAIrhB,QAASqhB,EAAIjG,gBAAiBiG,EAAIhG,kBAAmBgG,EAAI/F,sBAAuBssB,G0BlI5FC,CAAa,IAAI7sB,GAAY,EAAG2K,IAAQgiB,EAAQxmB,GAAY,IAAIrG,GAAW,GAAIoG,GAAa3uC,GAAOf,GAAO,QAAde,CAAuBosC,EAAM4oB,QAA7Bh1D,CAAsCm1D,K1BiH7I9pE,E0BjHwKka,GAAQ,CAACgpC,GAAoB,oBAAqBC,GAAsBxuC,GAAOf,GAAO,aAAde,CAA4BosC,EAAM6oB,U1BkHpS,IAAIvsB,IADsBoG,E0BjHqRsmB,G1BkH3RzsB,IAAKmG,EAAIlG,OAAQ5iC,GAAO8oC,EAAIrhB,QAASpiC,GAASyjD,EAAIjG,gBAAiBiG,EAAIhG,kBAAmBgG,EAAI/F,sBAAuB+F,EAAI9F,a0BlH6K,SAAC75B,GAC1T,IAAMqgC,EAAWrgC,EACjB,OAAOtK,GAAAA,OAAiB,CAAC2qC,EAASrG,WAAYqG,EAASpG,sB,yvBClG5D,IAAMmsB,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,kZACI,WAAYC,EAAsBC,EAAct0B,GAAsB,a,4FAAA,UAClE,gBACKq0B,qBAAuBA,EAC5B,EAAKC,aAAeA,EACpB,EAAKt0B,qBAAuBA,EAJsC,EAD1E,O,EAAA,E,qDAAA,CAA6BryC,GAatB,SAASimE,GAAOC,EAASC,GAC5B,IAAMS,EDuCH,SAAgCV,EAASC,GAC5C,OAAO,IAAIF,GAAOC,EAASC,GCxCZU,CAAuBX,EAASC,GAC/C,OAAO,IAAIM,IAAQ,SAACrqD,GAAD,OD0ChB,SAA+C9G,EAAIiyB,EAAO4Z,GAC7D,OAAOilB,GAAa9wD,EAAI,IAAI0wD,GAAU,GAAI/C,GAAkB,CACxD6D,+BAA+B,EAC/B3lB,UAAW3kD,IAAI,SAACguC,GACZ,IAAI51B,EACJ,MAAO,CACHs8B,QAAS1G,EAAI0G,QACbK,WAAY38B,EAAa41B,EAAI+G,UAA0B,MAAd38B,EAAsBA,EAAa,MAC5EmyD,MAAOv8B,EAAIu8B,SAEhB5lB,GACH6lB,kBAAmB,KACnBC,6BAA6B,EAC7BC,eAAgB,GAChBC,YAAa,KACbC,uBAAwB,KACxB7/B,MAAOA,EACP8/B,WAAY,MACb5I,GAAejV,GAAgB,CAAC,gCAAiCG,IAAY,CAAC,ahBa1D2d,EgBbkF9d,GAAgB,CAAC,UAAWE,IAAc,CAAC,YAAaA,IAAc,CAAC,QAASA,KhBclL,IAAIlB,GAAS,KAAM,CAAC8e,MgBd+K,CAAC,oBAAqB7d,IAAW,CAAC,8BAA+BE,IAAY,CAAC,iBAAkBC,IAAa,CAAC,cAAeH,IAAW,CAAC,yBAA0BA,IAAW,CAAC,QAASC,IAAc,CAAC,aAAcD,QhBa5Z,IAAoB6d,EiBzEWC,CAAsCX,EAAQxqD,EAAU,GAAIA,EAAU,OAAK,SAACC,GAAD,OD+DlE/G,EC/DkHsxD,ED+D9GY,EC/DsHnrD,EAAY,GD+DzHorD,EC/D6HprD,EAAY,GDgE1L+pD,GAAa9wD,EAAI,IAAI0wD,GAAU,GAAI/C,GAAkB,CACxDyE,UAAW,CACPvmB,UAAW,KACXwmB,mBAAoB,KACpBC,UAAWH,GAEfI,iBAAkBL,GACnB/I,GAAejV,GAAgB,CAAC,YAAaA,GAAgB,CAAC,YAAaC,IAAW,CAAC,qBAAsBA,IAAW,CAAC,YAAaC,MAAgB,CAAC,mBAAoBA,QAR3K,IAAwCp0C,EAAIkyD,EAASC,KC/D8I,SAAC7zB,GAAD,OD0E/I4zB,EC1E2M5zB,ED2E3PwyB,GC3EmPQ,ED2ElO,IAAIZ,GAAU,GAAI/C,GAAkBuE,EAAS/I,GAAe/U,MADjF,IAAoD8d,K,sREXpD,SAASM,GAA+Bz1D,EAAGkI,GAC9C,MAAO,CACHi+B,KAAM,SAACtB,EAAWJ,GACd,IACI,OAAOv8B,IAAYi+B,KAAKtB,EAAWJ,GAEvC,MAAOixB,GACH,GAAe,MAAXjxB,EACA,OAAO8B,QAAQU,OAAOyuB,GAGtB,IACI,IAAMvjD,EAAIsyB,EAAQixB,GAClB,OAAOnvB,QAAQS,QAAQ70B,GAE3B,MAAOwjD,GACH,OAAOpvB,QAAQU,OAAO0uB,MAKtCC,MAAO,SAACC,GACJ,IACI,OAAO3tD,IAAS,MAAS2tD,GAE7B,MAAOC,GACH,IACI,IAAM7Q,EAAM4Q,EAAUC,GACtB,OAAOvvB,QAAQS,QAAQie,GAE3B,MAAO8Q,GACH,OAAOxvB,QAAQU,OAAO8uB,OAOnC,SAASC,GAA6Bh2D,EAAGlM,GAC5C,OAAOA,EAAEqyC,MAAK,SAACtgD,GAAD,OAAOA,K,+/BA7Ed,IAVX,IACI,c,4FAAc,aChCX,IAAMowE,GAAb,a,sRAAA,U,UAAA,G,EAAA,E,kZACI,WAAY9oE,GAAgB,kBACxB,gBACKA,IAAa,EAANA,EAFY,2BAARf,EAAQ,iCAARA,EAAQ,yBAGxB,EAAKA,OAASA,EAHU,EADhC,O,EAAA,G,EAAA,oBAMI,WACI,MAAO,CAAC,KAAM,c,gFAPtB,GAAoCa,G,yvBCD7B,IAAMipE,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,kZACI,WAAYC,EAAQC,GAAY,a,4FAAA,UAC5B,gBACKrvE,MAAQovE,EACb,EAAKC,WAA2B,EAAbA,EAHS,EADpC,O,EAAA,E,qDAAA,CAAmCzoE,G,yvBCA5B,IAAM0oE,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,kZACI,WAAY3B,EAAO71B,EAASK,GAAW,a,4FAAA,UACnC,gBACKw1B,MAAQA,EACb,EAAK71B,QAAUA,EACf,EAAKK,UAAYA,EAJkB,EAD3C,O,EAAA,E,qDAAA,CAAkCvxC,G,sRC8C3B,SAAS2oE,GAAqBC,GACjC,IAAMp2B,EAAco2B,EAA+Bp2B,YAC7C2O,EAAYynB,EAA+BznB,UAC3C1O,EAAWm2B,EAA+Bn2B,SAC1CF,EAAUq2B,EAA+Br2B,QACzC+O,EAAasnB,EAA+BtnB,WAC5CxjC,EAAO8qD,EAA+B9qD,KACtC+qD,EAAqB,SAACpsE,GACxB,IAAIshB,EAAQC,EAAQC,EAAMrB,EAAOc,EAAOQ,EAAQk2B,EAC1CW,EAAUt+B,GAAQ,CAAC,CAAC,QAAS,CAC/B4H,UAAW,OACXlB,gBAAiB,YACjB,CAAC,WAAYplB,EAAAA,SAAAA,QAAkC,EAAEgmB,EAAStH,GAAQ,EAAEuH,EAASjI,IAAWkI,EAAOlI,IAAW6G,EAAQ7G,GAAU,CAAC,aAAc2H,EAAQE,GAAyBnhB,GAAIyU,GAAOf,GAAO,oBAAde,CAAmCwM,OAAWJ,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,QAASM,QAAYU,EAAAA,EAAAA,eAAc,MAAO,CACjUC,UAAW,aACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SACrDX,EAAAA,EAAAA,eAAc,UAAW,CAC3BC,UAAW,QACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK4K,QACrDE,EAASnI,IAAWq+B,EAAUr+B,GAAU,CAAC,WAAYzb,EAASmC,MAAM6gB,EAAAA,EAAAA,eAAc,KAAM9e,EAAU8d,GAAuB,QAAS83B,QAAc92B,EAAAA,EAAAA,eAAc,MAAO,CACvKC,UAAW,UACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK8K,UACpDZ,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,eACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK2K,YAE3D,OAAOT,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,OAAQy4B,MAEnE1C,EAAuB,SAACm1B,GAAD,OAsHjC,SAAmCsB,EAAeC,EAAWvB,GACzD,OAAO,WACHzuB,GAAez9B,GAAAA,OAAkB,WAC7B,IAAIsrD,EACJ,OAAOtrD,GAAAA,MAAkBsrD,EAASX,GAAO,wDAAyD8C,GAAY1wB,GAAagwB,GAA6BW,EAASlB,GAA+BkB,GAAS,kBAAOpC,EAAOv0B,qBAAqBm1B,GAAShvB,MAAK,SAACn4B,GACvP,IAAIjE,EAAW6sD,EAAcC,EAC7B,OAAOtwB,QAAQS,SAA6B4vB,EAA+B,GAAnD7sD,EAAYiE,GAAkC,GAAU6oD,EAAiB9sD,EAAU,GAAsB,MAAjB6sD,EAAyB,IAAIX,GAAe,EAAGY,GAAoB,IAAIZ,GAAe,EAAG,IAAIC,GAAcW,EAAgBD,gBACtO,SAAC3lD,GACN,IA9HyDvK,EA8HnDspB,EAAQ/e,EACd,OAAkB,IAAd+e,EAAM7iC,KACNwR,GAAeb,GAAO,mCAAtBa,CAA0Dw2D,EAA1Dx2D,CAAmEqxB,EAAM5jC,OAAO,IACzE6c,GAAAA,SAGPxK,GAAUX,GAAO,cAAjBW,CAAgCuxB,EAAM5jC,OAAO,IApIQsa,EAqIvC,SAACs2C,GACX,IAAMz6C,EAAay6C,EAAIhe,KAavB,OAXuB,IAAnBz8B,EAAWpV,KACPoV,EAAWnW,OAAO,KAAO+oE,EACC,EAOJ,GAG1B,KAAK,EACD,OAAO,EAEX,KAAK,EACD,OAAO,IAvJ/Bh1B,EAAY7+B,IAAO,SAAC9C,GAAD,OAAWkI,EAAUlI,KAAO4hC,IA2J5Bn3B,GAAAA,gBA5JmB6tD,CAA0B,EAEjErrD,EAAK+zB,MAAO21B,IACT4B,EAAiC,IAAnB9nB,EAAW9hD,IAAaiX,GAAQ,EAAC6G,EAAAA,EAAAA,eAAcO,GAA6BC,IAAOR,EAAAA,EAAAA,eAAc40B,GAAuB,CACxI3K,MAAO,eACPkL,SAAUA,EACVD,YAAaA,EACbD,QAASA,EACTD,SAAU,EACVD,qBAAsBA,KACtB/0B,EAAAA,EAAAA,eAAcm3B,GAAsB,CACpCI,SAAU/2B,EAAK8zB,SACfgD,YAAa,SAACy0B,GACV92B,EAAQ,IAAI50B,GAAW,EAAG0rD,SAEN,IAAnB/nB,EAAW9hD,IAAauW,IAAUuH,EAAAA,EAAAA,eAAcm3B,GAAsB,CAC3EI,SAAU/2B,EAAK8zB,SACfgD,YAAa,SAAC00B,GACV/2B,EAAQ,IAAI50B,GAAW,EAAG2rD,QAEP,IAAnBhoB,EAAW9hD,IAAauW,IAAUuH,EAAAA,EAAAA,eAAcy2B,GAAgCv8B,IAAK,SAACgN,GAAD,OAAQA,EAAElG,OAASgjC,EAAW7iD,OAAO,KAAKqf,EAAK8zB,YAAmC,IAAnB0P,EAAW9hD,IAAauW,IAAUuH,EAAAA,EAAAA,eAAc40B,GAAuB,CAC/N3K,MAAO,WACPkL,SAAUA,EACVD,YAAaA,EACbD,QAASA,EACTD,cAAU,EACVD,qBAAsBA,KACC,IAAnBiP,EAAW9hD,IAAaiX,GAAQ,CAACoyD,EAAmB,IAAIlrD,GAAW,KAAKL,EAAAA,EAAAA,eAAc,SAAU9e,EAAU8d,GAAuB,SAAU7F,GAAQ,CAAC,CAAC,WAAY,SAAU,CAAC,UAAW,SAAC4J,GAC5L04B,GAuIR,SAA0Bj7B,EAAMqjC,EAAWooB,GACvC,OAAOjuD,GAAAA,OAAkB,WACrB,IAAIkuD,EAAa5C,EACXp8B,EAAMl2B,GAAK6sC,GACX4nB,EAAYjrD,EAAK+zB,MACvB,OAAOv2B,GAAAA,MAAkBkuD,EAAc,CAAC,IAAId,GAAaj9D,GAAQ++B,EAAIlsB,KAAM,aAAcR,EAAKQ,MAAO7S,GAAQ++B,EAAI0G,QAAS,aAAcpzB,EAAKQ,WAAO,IAAWsoD,EAASX,GAAO,wDAAyD8C,GAAY1wB,GAAagwB,GAA6BW,EAASlB,GAA+BkB,GAAS,kBAAOpC,EAAOF,qBAAqB,CAAC,kBAAmB8C,IAAchxB,MAAK,SAACn4B,GACtZ,IAAIjE,EAAW6sD,EAAcC,EAC7B,OAAOtwB,QAAQS,SAA6B4vB,EAA+B,GAAnD7sD,EAAYiE,GAAkC,GAAU6oD,EAAiB9sD,EAAU,GAAsB,MAAjB6sD,EAAyB,IAAIX,GAAe,EAAGxjB,KAAKvY,MAAM28B,IAAqB,IAAIZ,GAAe,EAAG,IAAIC,GAAcW,EAAgBD,gBACjP,SAACjmC,GACP,IAAMymC,EAAuBzmC,EAC7B,GAAiC,IAA7BymC,EAAqBjqE,IAErB,OADAsR,GAAUX,GAAO,oDAAjBW,CAAsE24D,EAAqBhrE,OAAO,IAC3F6c,GAAAA,OAGP,IAAMouD,EAAQD,EAAqBhrE,OAAO,GAqB1C,OApBAs6C,GAAez9B,GAAAA,OAAkB,WAC7B,IAAIksD,EAASmC,EACPlC,E7DyInB,SAAwBmC,GAE3B,IADA,IAAIvvE,EAAM,GACDF,EAAI,EAAGA,EAAIyvE,EAAQxvE,OAAQD,IAChCE,GAAOgF,OAAOwmD,aAAa+jB,EAAQzvE,IAEvC,MAAuB,mBAAT0vE,KAAsBA,KAAKxvE,GAR7C,SAAsB+E,GAClB,MAAM,IAAIhG,MAAM,oCAAsCgG,EAAO,6BAOb0qE,CAAa,Q6D9I7BC,CAAepjB,KAAcO,SAASppC,EAAKQ,OAC3D,OAAOhD,GAAAA,MAAkBksD,EAAWkC,EAAK,GAAUC,EAAW1D,GAAO,wDAAyD8C,GAAY1wB,GAAagwB,GAA6BW,EAASlB,GAA+BkB,GAAS,kBAAOW,EAAShD,aAAa,CAACa,EAASC,IAAUjvB,MAAK,SAACl1B,GACxR,IAAIjH,EAAa2tD,EAAcC,EAC/B,OAAOrxB,QAAQS,SAAiC2wB,EAAiC,GAAzD3tD,EAAciH,GAAsC,GAAU2mD,EAAiB5tD,EAAY,GAAsB,MAAjB2tD,EAAyB,IAAI1B,GAAe,EAAGxjB,KAAKvY,MAAM09B,IAAqB,IAAI3B,GAAe,EAAG,IAAIC,GAAc0B,EAAgBD,gBACzP,SAACl2B,GACP,IAAIsvB,EACE8G,EAAuBp2B,EAC7B,GAAiC,IAA7Bo2B,EAAqB1qE,IAErB,OADAwR,GAAeb,GAAO,mCAAtBa,CAA0Dk5D,EAAqBzrE,OAAO,IAC/E6c,GAAAA,OAGP,IArK8B+zC,EAqKxB8a,EAAaD,EAAqBzrE,OAAO,GAA5B,UAAD,aAElB,OAvK8B4wD,EAsKlB,IAAIte,GAAQ02B,GAAYrE,EAAyC11D,GAAPsB,MAAiCmsD,GAAWiI,IAAmB,wBAAyB,gGAAiG,oBAAqBp0D,MAAO,EAAM,IAAI8hC,GAAY,EAAGq5B,EAAWT,EAAK,KArKpVl3B,EAAYvzC,GAAKowD,EAAK5c,IAsKCn3B,GAAAA,cAIZA,GAAAA,aA3KA8uD,CAAiBtsD,EAAMqjC,aAG9BprC,GAAU8yD,EAAmBvnB,IACzC,OAAOhkC,EAAAA,EAAAA,eAAc,MAAO,CACxBC,UAAW,YACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKg2D,MAIxD,SAASiB,KACZ,IAAIpsD,EAAME,EAASjB,EAASk3B,E9BnGTk2B,E8BoGb/oD,EAAeg4B,GAA2C,IAAI57B,GAAW,IACzE8jC,EAAOlgC,EAAa,GACpBgxB,EAAUhxB,EAAa,GACvBE,EAAiB83B,QAA2C,GAC5Dz7B,EAAO2D,EAAe,GACtBqU,EAAiByjB,GAA2CzjC,MAC5D6W,EAAiB4sB,GAA2CzjC,MAC5DqX,EAAiBosB,GAA2C,GAC5D/G,EAAc,SAACJ,GACjBjlB,EAAe,GAAG7U,IAAM,SAACtK,GACrB,OAAIA,EAAEojC,OACK,EAGA,IAEZgB,EAAM,CACL35B,QAAS,kBAAM,GACfD,IAAK,SAACtgB,EAAGM,GAAJ,OAAWN,EAAIM,MAExBs9B,EAAe,GAAGsc,IAItB,G/B5HG,SAAgBI,GACD,MAAdC,MACAsG,GAAehjC,GAAAA,OAAgB,kBAAMA,GAAAA,KAAe2iC,GAAS/2C,IAAW,SAAC4oE,EAAUC,GAAX,OAAmBz0D,GAAAA,OAAgB,kBAAMA,GAAAA,KAAemrC,GAASspB,IAAM,SAACnqD,GAC5I,IpCgvBqBpe,EAAYC,EAAI9D,EACvC+D,EoCjvBQk4C,EAAwB,EAAXh6B,EAAM,GACnBoqD,EAAcpqD,EAAM,GAC1B,GAAmB,MAAfg6B,EAAoB,CACpB,IAAMqwB,EAAaj0D,IpC6uBFxU,EoC7uB2B,SAAC05C,GAAD,MAAS,CAACA,EAAIvK,OAAS,EAAI,EAAGuK,EAAIv/C,OpC6uBjD8F,EoC7uBwDyoE,IAAa,SAACxwE,EAAGywE,GAAJ,OAAa,IAAI75B,GAAQ65B,EAAG,GAAQA,EAAG,MAAWA,EAAG,QAAaA,EAAG,KhCiOhL,SAAevwE,GAAwB,IAAnBwwE,EAAmB,wDAC1C,KAAuBj9D,GAASvT,GAAhC,GAAOG,EAAP,KAAaE,EAAb,KAGMC,EAAiB,MAAVD,EACNmwE,GAAwB,MAAXnwE,EAAiB,EAAc,EAC7C,EACN,OAAO+S,GAASjT,EAAK6B,UAAW1B,GgCxO6J4xC,CAAMq+B,EAAG,KAAU,IAAMzwE,EAAI,GAAO,EAAG,IAAI22C,GAAY,MAAQgU,KAAKvY,MAAMk+B,GAAZ,SAAuC92D,QAAO,SAAC3F,GAAD,OAASiF,GAAmBjF,EAAC,QpC6uBzR5P,EoC7uBqS,CAClUiD,QAAS,SAACnJ,EAAGM,GAAJ,OAAUkF,EAAcxF,EAAGM,MpC6uB9C2J,EAAOD,EAAGE,SACX/E,MAAK,SAACnF,EAAGM,GAAJ,OAA6D,EAAlD4F,EAASiD,QAAQY,EAAW/J,GAAI+J,EAAWzJ,OACzD2J,IoC7uBK,OAAK6T,GAAQ00D,IAIT15D,GAAeb,GAAO,yCAAtBa,CAAgEw5D,EAAhEx5D,CAAqEqpC,EAArErpC,CAAiFy5D,GAC1E10D,GAAAA,OAAiB,CAACw0D,EAAUz0D,QAJ5BC,GAAAA,OAAiB,CAACw0D,EAAUG,IASvC,OADA15D,GAAeb,GAAO,6CAAtBa,CAAoEqpC,EAApErpC,CAAgFy5D,EAAhFz5D,CAA6Fw5D,GACtFz0D,GAAAA,OAAiB,CAACw0D,EAAUz0D,eAEtC0E,MAAW,SAACwoB,GACb,IAAI8nC,EAKJ,OAJAr4B,GAASj2C,IAAI,SAAC2mC,GAAD,OAAaA,EAAQ,KAAI3nB,IAAQsvD,EAAS1zD,IAAQ,SAACuwC,GAAD,OAASA,IAAKlxC,GAAQiM,IAAM,SAACuZ,GAAD,OAAaA,EAAQ,KAAIj6B,IAAO,SAACg6B,GAAD,OAAWA,EAAM,KAAIgH,EAAO,CACnJ3hC,QAAS,SAACgB,EAAK6d,GAAN,OAAcziB,EAAkB4E,EAAK6d,SAC3ChK,IAAK,SAAC5M,EAAK0yC,GAAN,OAAciD,GAAe31C,EAAK0yC,EAAIhL,GAAIgL,KAAM3f,KAAWyuC,OAAY,GACnFt4B,EAAY3J,GAAQ4J,OACb18B,GAAAA,c+B+Ffg1D,CAAOv4B,G9B1HY83B,E8B2HV39C,EAAe,G9B1HL,MAAfw0B,MACApI,GAAehjC,GAAAA,OAAgB,kBAAMA,GAAAA,KAAe2iC,GAAS/2C,IAAW,SAAC4oE,EAAUC,GAAX,OAAmBz0D,GAAAA,OAAgB,kBAAMA,GAAAA,KAAemrC,GAASspB,IAAM,SAACxnC,GAC5I,IAAMqX,EAAwB,EAAXrX,EAAM,GACnBgoC,EAAehoC,EAAM,GAC3B,OAAmB,MAAfqX,EACOtkC,GAAAA,KAAe2iC,GAASl8C,IAAI,SAACyuE,GAChC,IAAMzgC,EAAMygC,EACZ,OAAOl1D,GAAAA,OAAgB,kBAAMA,GAAAA,KAAekqC,GAAUH,GAAY,IAAIrG,GAAW,GAAIoG,GAAarV,EAAG,gBAAoB,SAACnqB,GACtH,IAAMqgC,EAAWrgC,EACjB,OAAOtK,GAAAA,OAAiB2M,IAAM,SAACwoD,GAAD,OAAgB,IAAI55B,GAAU9G,EAAG,KAAU0gC,EAAkC,MAArB1gC,EAAG,eAA2B,EAAWA,EAAG,aAA2C,MAAxBkW,EAASrG,WAAsBqG,EAASpG,kBAAiBxpC,GAAUX,GAAO,iCAAjBW,CAAmD4vC,EAASpG,wBAE9QwK,KAAKvY,MAAMy+B,GAAZ,aAA2C,SAACl3B,GAC3C,IAAM01B,EAAc/yD,GAAQja,IAAI,SAAC2uE,GAAD,OAActiC,GAAQsiC,KAAWr3B,EAAMngC,QAAO,SAACk0C,GAAD,OAA2B,MAAZA,OAC7F,OAAK7xC,GAAQwzD,IAITx4D,GAAeb,GAAO,yCAAtBa,CAAgEw5D,EAAhEx5D,CAAqEqpC,EAArErpC,CAAiFg6D,GAC1Ej1D,GAAAA,OAAiB,CAACw0D,EAAUz0D,QAJ5BC,GAAAA,OAAiB,CAACw0D,EAAUf,QAS3Cx4D,GAAeb,GAAO,8CAAtBa,CAAqEqpC,EAArErpC,CAAiFg6D,EAAjFh6D,CAA+Fw5D,GACxFz0D,GAAAA,OAAiB,CAACw0D,EAAUz0D,gBAEtC0E,MAAW,SAAC4wD,GACb,IAAIN,EAKJ,OAJA3pB,GAAUzb,IAAM,SAACvC,GAAD,OAAaA,EAAQ,KAAI3nB,IAAQsvD,EAAS1zD,IAAQ,SAAC/U,GAAD,OAASA,IAAKoU,GAAQja,IAAI,SAACy/B,GAAD,OAAaA,EAAQ,KAAIj6B,IAAO,SAACg6B,GAAD,OAAWA,EAAM,KAAIovC,EAAO,CACpJ/pE,QAAS,SAACnJ,EAAGM,GAAJ,OAAUiF,EAAkBvF,EAAGM,SACrC0d,IAAK,SAAC5M,EAAK+hE,GAAN,OAAgBpsB,GAAe31C,EAAK+hE,EAAM/sD,KAAM+sD,KAAQhvC,KAAWyuC,OAAY,GAC3FR,EAAazhC,GAAQsY,OACdprC,GAAAA,c8B2FH,MAAR+H,EAAc,CACd,IAAMwtD,EAASxtD,EACTytD,EAAa90D,GAAQ,EAAC6G,EAAAA,EAAAA,eAAcskC,GAA4B,CAClEE,eAAgB,UAChB9lC,OAAQ,Y3B7Eb,WACH,IACIkoC,GAAQU,WAAWX,IACnBF,GAAYynB,kBAEhB,MAAOloE,GACH,IAAMoa,EAAQpa,EAAEwvC,QAChB9hC,GAAeb,GAAO,6BAAtBa,CAAoD0M,I2BuE5C+tD,OAEHxtD,EAAOlI,IAAWoI,EAAU1H,GAAQ,CAAC,CAAC,QAAS,CAChDi1D,UAAW,KACX,CAAC,YAAa,eAAgB,CAAC,WAAY3zE,EAAAA,SAAAA,QAAkC,EAAEmlB,EAAUzG,GAAQ,CAAC,CAAC,QAAS,CAC5G4H,UAAW,SACX,CAAC,YAAa,kBAAmB,CAAC,YAAa,uBAAwB,CAAC,WAAYtmB,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAc8jC,GAA8B,CACnKG,aAAcp0B,EAAe,GAC7Bm0B,WAAYG,EACZlP,QAASA,UACJj1B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAUY,OAAck3B,EAAUr+B,GAAU,CAAC,WAAYhe,EAAAA,SAAAA,QAAkC,EAACulB,EAAAA,EAAAA,eAAcqrD,GAAsB,CAC3L7qD,KAAMwtD,EACNhqB,WAAYG,EACZlP,QAASA,EACTE,SAAU3c,EAAe,GACzBqrB,UAAWx0B,EAAe,GAC1B6lB,YAAaA,SACTl1B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,SAAU83B,YAAkB92B,EAAAA,EAAAA,eAAc,MAAO9e,EAAU8d,GAAuB,UAAW6B,QAAcb,EAAAA,EAAAA,eAAc,MAAO,CAC1LC,UAAW,YACXC,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAK6K,SAE3D,OAAOX,EAAAA,EAAAA,eAAc,MAAO,CACxBE,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKm4D,MAG1D,G3B3HEt2B,OAAOC,SAASC,KAAKv1C,QAAQ,UAAY,E2B+I5C,OARgBwkD,IAAgB,SAACunB,GAC7B,IAAMC,EAASpvE,IAAI,SAACqvE,GAAD,OAAS,IAAIl6B,GAAKk6B,EAAGvoB,QAAQlkD,KAAMysE,EAAGvoB,QAAQT,UAAWlnC,GAASkwD,EAAGvoB,QAAQlkD,KAAM,KAAMysE,EAAG3oB,YAAYyoB,GAC7G,MAAVC,GAGAnqD,EAAe,GAAGmqD,OAGnBtuD,EAAAA,EAAAA,eAAc,MAAO,IAnB5B,IAAME,EAAW/G,GAAQ,EAAC6G,EAAAA,EAAAA,eAAcskC,GAA4B,CAChEE,eAAgB,SAChB9lC,OAAQ,W3B9FT+nC,GAAY+nB,qB2BiGXxuD,EAAAA,EAAAA,eAAckB,GAAmB,QACrC,OAAOlB,EAAAA,EAAAA,eAAc,MAAO,CACxBE,SAAUzlB,EAAAA,SAAAA,QAAkCI,MAAMib,KAAKoK,MAlJnE,IACI,c,4FAAc,YAaTuuD,WAAa,GCxCtB74B,SAAS3L,MAAQ,gBAEjBykC,EAAAA,EAAAA,SAAO1uD,EAAAA,EAAAA,eAAc+sD,GAAa,MAAOn3B,SAAS+4B,eAAe,UCP7DC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBvyE,IAAjBwyE,EACH,OAAOA,EAAahpE,QAGrB,IAAIipE,EAASJ,EAAyBE,GAAY,CAGjD/oE,QAAS,IAOV,OAHAkpE,EAAoBH,GAAU7hB,KAAK+hB,EAAOjpE,QAASipE,EAAQA,EAAOjpE,QAAS8oE,GAGpEG,EAAOjpE,QAIf8oE,EAAoBn+D,EAAIu+D,E5EzBpBz0E,EAAW,GACfq0E,EAAoBK,EAAI,CAAClsE,EAAQmsE,EAAUpc,EAAIka,KAC9C,IAAGkC,EAAH,CAMA,IAAIC,EAAeC,EAAAA,EACnB,IAASxyE,EAAI,EAAGA,EAAIrC,EAASsC,OAAQD,IAAK,CAGzC,IAFA,IAAKsyE,EAAUpc,EAAIka,GAAYzyE,EAASqC,GACpCyyE,GAAY,EACPhvE,EAAI,EAAGA,EAAI6uE,EAASryE,OAAQwD,MACpB,EAAX2sE,GAAsBmC,GAAgBnC,IAAa9xE,OAAO0E,KAAKgvE,EAAoBK,GAAGhK,OAAOvkE,GAASkuE,EAAoBK,EAAEvuE,GAAKwuE,EAAS7uE,MAC9I6uE,EAAS3sE,OAAOlC,IAAK,IAErBgvE,GAAY,EACTrC,EAAWmC,IAAcA,EAAenC,IAG7C,GAAGqC,EAAW,CACb90E,EAASgI,OAAO3F,IAAK,GACrB,IAAI2lB,EAAIuwC,SACEx2D,IAANimB,IAAiBxf,EAASwf,IAGhC,OAAOxf,EAvBNiqE,EAAWA,GAAY,EACvB,IAAI,IAAIpwE,EAAIrC,EAASsC,OAAQD,EAAI,GAAKrC,EAASqC,EAAI,GAAG,GAAKowE,EAAUpwE,IAAKrC,EAASqC,GAAKrC,EAASqC,EAAI,GACrGrC,EAASqC,GAAK,CAACsyE,EAAUpc,EAAIka,I6EL/B4B,EAAoB7yE,EAAI,CAACoF,EAAKsgE,IAAUvmE,OAAOmL,UAAUmnD,eAAeR,KAAK7rD,EAAKsgE,G,MCKlF,IAAI6N,EAAkB,CACrB,IAAK,GAaNV,EAAoBK,EAAE5uE,EAAKkvE,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BhgB,KACvD,IAGIof,EAAUU,GAHTL,EAAUQ,EAAaC,GAAWlgB,EAGhB7yD,EAAI,EAC3B,GAAGsyE,EAAS5rE,MAAMnE,GAAgC,IAAxBmwE,EAAgBnwE,KAAa,CACtD,IAAI0vE,KAAYa,EACZd,EAAoB7yE,EAAE2zE,EAAab,KACrCD,EAAoBn+D,EAAEo+D,GAAYa,EAAYb,IAGhD,GAAGc,EAAS,IAAI5sE,EAAS4sE,EAAQf,GAGlC,IADGa,GAA4BA,EAA2BhgB,GACrD7yD,EAAIsyE,EAASryE,OAAQD,IACzB2yE,EAAUL,EAAStyE,GAChBgyE,EAAoB7yE,EAAEuzE,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBJ,EAAStyE,IAAM,EAEhC,OAAOgyE,EAAoBK,EAAElsE,IAG1B6sE,EAAqBpuE,KAAmB,aAAIA,KAAmB,cAAK,GACxEouE,EAAmB9iB,QAAQ0iB,EAAqBK,KAAK,KAAM,IAC3DD,EAAmBz8D,KAAOq8D,EAAqBK,KAAK,KAAMD,EAAmBz8D,KAAK08D,KAAKD,K,GC7CvF,IAAIE,EAAsBlB,EAAoBK,OAAE3yE,EAAW,CAAC,MAAM,IAAOsyE,EAAoB,OAC7FkB,EAAsBlB,EAAoBK,EAAEa,I","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///./.webpack/fable_modules/Feliz.1.57.0/Interop.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Util.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Types.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Option.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/FSharp.Core.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/FSharp.Collections.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Array.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Numeric.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/lib/long.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Long.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Date.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/RegExp.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/String.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Global.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/List.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Seq.js","webpack:///./.webpack/fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js","webpack:///./.webpack/App/Components/Elements.js","webpack:///./.webpack/App/Components/Components.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/Range.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/Collections.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/StringParsing.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/MarkdownModel.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Char.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Unicode.13.0.0.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Range.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/MapUtil.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/MarkdownParser.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/MarkdownUtils.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/HtmlFormatting.fs.js","webpack:///./.webpack/fable_modules/Fable.Formatting.Markdown.1.0.1/Markdown.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/lib/big.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Decimal.js","webpack:///./.webpack/App/Models.js","webpack:///./.webpack/App/Components/Message.js","webpack:///./.webpack/App/Components/Account.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/AsyncBuilder.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Async.js","webpack:///./.webpack/fable_modules/Feliz.1.57.0/React.fs.js","webpack:///./.webpack/fable_modules/Fable.SimpleHttp.3.0.0/Types.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Map.js","webpack:///./.webpack/fable_modules/Fable.SimpleHttp.3.0.0/Http.fs.js","webpack:///./.webpack/App/Data/Messages.js","webpack:///./.webpack/App/Data/Documents.js","webpack:///./.webpack/App/Components/Navigation.js","webpack:///./.webpack/Authentication/OidcClient.js","webpack:///./.webpack/Authentication/Identity.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/TimeSpan.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Int32.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Encoding.js","webpack:///./.webpack/App/Data/Statements.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Reflection.js","webpack:///./.webpack/fable_modules/Fable.Parsimmon.4.1.0/Parsimmon.js","webpack:///./.webpack/fable_modules/Fable.Parsimmon.4.1.0/Parsimmon.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Double.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/Json.fs.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/Parser.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/BigInt/n.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/BigInt/z.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/BigInt.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/SimpleJson.fs.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/TypeInfo.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/MutableMap.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/TypeInfo.Converter.fs.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/Json.Converter.fs.js","webpack:///./.webpack/fable_modules/Fable.SimpleJson.3.22.0/quote.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/DateOnly.js","webpack:///./.webpack/Signatures/Npm/Implementation.js","webpack:///./.webpack/Signatures/Npm/Client.js","webpack:///./.webpack/fable_modules/Fable.Promise.3.1.3/Promise.fs.js","webpack:///./.webpack/fable_modules/fable-library.3.6.3/Choice.js","webpack:///./.webpack/Signatures/Signatures.js","webpack:///./.webpack/Signatures/Npm/Types.js","webpack:///./.webpack/App/Components/Page.js","webpack:///./.webpack/Main.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { some } from \"../fable-library.3.6.3/Option.js\";\nimport { create, isLeapYear } from \"../fable-library.3.6.3/Date.js\";\nimport { parse } from \"../fable-library.3.6.3/Int32.js\";\nimport { split, isNullOrWhiteSpace } from \"../fable-library.3.6.3/String.js\";\nimport { equalsWith } from \"../fable-library.3.6.3/Array.js\";\nimport react from \"react\";\n\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\n    if ((input >= x) && (input <= y)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function DateParsing_isLeapYear(year) {\n    return isLeapYear(year);\n}\n\nexport function DateParsing_$007CInt$007C_$007C(input) {\n    try {\n        return parse(input, 511, false, 32);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function DateParsing_parse(input) {\n    try {\n        if (isNullOrWhiteSpace(input)) {\n            return void 0;\n        }\n        else {\n            const parts = split(input, [\"-\"], null, 0);\n            let patternInput;\n            let pattern_matching_result, month, year;\n            if ((!equalsWith((x, y) => (x === y), parts, null)) && (parts.length === 2)) {\n                const activePatternResult5104 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                if (activePatternResult5104 != null) {\n                    const activePatternResult5105 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                    if (activePatternResult5105 != null) {\n                        pattern_matching_result = 0;\n                        month = activePatternResult5105;\n                        year = activePatternResult5104;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    patternInput = [year, month, 1, 0, 0];\n                    break;\n                }\n                case 1: {\n                    let pattern_matching_result_1, day, month_1, year_1;\n                    if ((!equalsWith((x_1, y_1) => (x_1 === y_1), parts, null)) && (parts.length === 3)) {\n                        const activePatternResult5101 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                        if (activePatternResult5101 != null) {\n                            const activePatternResult5102 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                            if (activePatternResult5102 != null) {\n                                const activePatternResult5103 = DateParsing_$007CInt$007C_$007C(parts[2]);\n                                if (activePatternResult5103 != null) {\n                                    pattern_matching_result_1 = 0;\n                                    day = activePatternResult5103;\n                                    month_1 = activePatternResult5102;\n                                    year_1 = activePatternResult5101;\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            patternInput = [year_1, month_1, day, 0, 0];\n                            break;\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, day_1, month_2, year_2;\n                            if ((!equalsWith((x_2, y_2) => (x_2 === y_2), parts, null)) && (parts.length === 3)) {\n                                const activePatternResult5099 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                                if (activePatternResult5099 != null) {\n                                    const activePatternResult5100 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                                    if (activePatternResult5100 != null) {\n                                        pattern_matching_result_2 = 0;\n                                        day_1 = parts[2];\n                                        month_2 = activePatternResult5100;\n                                        year_2 = activePatternResult5099;\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    if (day_1.indexOf(\"T\") >= 0) {\n                                        const matchValue = split(day_1, [\"T\"], null, 0);\n                                        let pattern_matching_result_3, parsedDay, time;\n                                        if ((!equalsWith((x_3, y_3) => (x_3 === y_3), matchValue, null)) && (matchValue.length === 2)) {\n                                            const activePatternResult5098 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\n                                            if (activePatternResult5098 != null) {\n                                                pattern_matching_result_3 = 0;\n                                                parsedDay = activePatternResult5098;\n                                                time = matchValue[1];\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                        switch (pattern_matching_result_3) {\n                                            case 0: {\n                                                const matchValue_1 = split(time, [\":\"], null, 0);\n                                                let pattern_matching_result_4, hour, minute;\n                                                if ((!equalsWith((x_4, y_4) => (x_4 === y_4), matchValue_1, null)) && (matchValue_1.length === 2)) {\n                                                    const activePatternResult5096 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\n                                                    if (activePatternResult5096 != null) {\n                                                        const activePatternResult5097 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\n                                                        if (activePatternResult5097 != null) {\n                                                            pattern_matching_result_4 = 0;\n                                                            hour = activePatternResult5096;\n                                                            minute = activePatternResult5097;\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_4 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        const matchValue_2 = [hour, minute];\n                                                        let pattern_matching_result_5;\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) {\n                                                                pattern_matching_result_5 = 0;\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_5 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_5 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_5) {\n                                                            case 0: {\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\n                                                                break;\n                                                            }\n                                                            case 1: {\n                                                                patternInput = [-1, 1, 1, 0, 0];\n                                                                break;\n                                                            }\n                                                        }\n                                                        break;\n                                                    }\n                                                    case 1: {\n                                                        patternInput = [-1, 1, 1, 0, 0];\n                                                        break;\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                            case 1: {\n                                                patternInput = [-1, 1, 1, 0, 0];\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        patternInput = [-1, 1, 1, 0, 0];\n                                    }\n                                    break;\n                                }\n                                case 1: {\n                                    patternInput = [-1, 1, 1, 0, 0];\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            const year_3 = patternInput[0] | 0;\n            const month_3 = patternInput[1] | 0;\n            const minute_1 = patternInput[4] | 0;\n            const hour_1 = patternInput[3] | 0;\n            const day_2 = patternInput[2] | 0;\n            if (year_3 <= 0) {\n                return void 0;\n            }\n            else {\n                const matchValue_3 = [month_3, day_2];\n                let pattern_matching_result_6;\n                if (matchValue_3[0] === 2) {\n                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {\n                        if (DateParsing_isLeapYear(year_3)) {\n                            pattern_matching_result_6 = 0;\n                        }\n                        else {\n                            pattern_matching_result_6 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_6 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_6 = 1;\n                }\n                switch (pattern_matching_result_6) {\n                    case 0: {\n                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                    }\n                    case 1: {\n                        let pattern_matching_result_7;\n                        if (matchValue_3[0] === 2) {\n                            if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {\n                                if (!DateParsing_isLeapYear(year_3)) {\n                                    pattern_matching_result_7 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_7 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_7 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_7 = 1;\n                        }\n                        switch (pattern_matching_result_7) {\n                            case 0: {\n                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                            }\n                            case 1: {\n                                let pattern_matching_result_8;\n                                if (matchValue_3[0] === 1) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 3) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 5) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 7) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 8) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 10) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 12) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_8 = 1;\n                                }\n                                switch (pattern_matching_result_8) {\n                                    case 0: {\n                                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                    }\n                                    case 1: {\n                                        let pattern_matching_result_9;\n                                        if (matchValue_3[0] === 4) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 6) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 9) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 11) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 1;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                            }\n                                            case 1: {\n                                                return void 0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (matchValue_4) {\n        return void 0;\n    }\n}\n\nexport const Interop_reactApi = react;\n\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            resource.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\r\n\r\nexport function HashIdentity_FromFunctions(hash, eq) {\r\n    return {\r\n        Equals(x, y) {\r\n            return eq(x, y);\r\n        },\r\n        GetHashCode(x_1) {\r\n            return hash(x_1);\r\n        },\r\n    };\r\n}\r\n\r\nexport function HashIdentity_Structural() {\r\n    return HashIdentity_FromFunctions((obj) => structuralHash(obj), (e1, e2) => equals(e1, e2));\r\n}\r\n\r\nexport function HashIdentity_Reference() {\r\n    return HashIdentity_FromFunctions((obj) => physicalHash(obj), (e1, e2) => (e1 === e2));\r\n}\r\n\r\nexport function ComparisonIdentity_FromFunction(comparer) {\r\n    return {\r\n        Compare(x, y) {\r\n            return comparer(x, y);\r\n        },\r\n    };\r\n}\r\n\r\nexport function ComparisonIdentity_Structural() {\r\n    return ComparisonIdentity_FromFunction((e1, e2) => compare(e1, e2));\r\n}\r\n\r\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1((x, y) => comparePrimitives(x, y), 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = array.indexOf(item_1, 0);\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = array.findIndex(predicate);\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = array.indexOf(item_1, start_1);\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1) => folder(delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1((x, y) => comparePrimitives(x, y), 0, source.length - windowSize) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1((x, y) => comparePrimitives(x, y), chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1((x_1, y_1) => comparePrimitives(x_1, y_1), chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const lenInner = arrays_1[0].length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\nexport function divRem(x, y, out) {\n    const div = op_Division(x, y);\n    const rem = op_Modulus(x, y);\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input === null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(input);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(input);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","\r\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the collection.\";\r\n\r\nexport const SR_inputWasEmpty = \"Collection was empty.\";\r\n\r\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_differentLengths = \"The collections had different lengths.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\n","import { join } from \"./String.js\";\r\nimport { uncurry, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\nimport { foldBack as foldBack_2 } from \"./Seq.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node;\r\n    const t = new FSharpList(state, void 0);\r\n    root.tail = t;\r\n    node = t;\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        const t = new FSharpList(mapping(i, x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const t = new FSharpList(mapping(x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        const t = new FSharpList(mapping(x, y), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), transpose_1(map_1((xs) => toArray(xs), Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = foldBack_2((y, acc) => FSharpList_Cons_305B8EAC(y, acc), ys, FSharpList_get_Empty());\r\n    const result = fold((acc_1, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc_1));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc_1);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","import { clear, equals, isArrayLike, isDisposable, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            e.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                inner.Dispose();\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                outer.Dispose();\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                inner_1.Dispose();\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            e.Dispose();\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            matchValue.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            copyOfStruct.Dispose();\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            try {\r\n                tupledArg_1[1].Dispose();\r\n            }\r\n            finally {\r\n                tupledArg_1[2].Dispose();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        clear(prefix);\r\n        let pattern_matching_result, e;\r\n        if (enumeratorR != null) {\r\n            if (value_1(enumeratorR) != null) {\r\n                pattern_matching_result = 0;\r\n                e = value_1(enumeratorR);\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                e.Dispose();\r\n                break;\r\n            }\r\n        }\r\n        enumeratorR = (void 0);\r\n    }, unfold((i_1) => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        enumerator.Dispose();\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }, 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            e.Dispose();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), transpose_1(map_1((xs_1) => toArray(xs_1), toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        tupledArg_1[0].Dispose();\r\n        tupledArg_1[1].Dispose();\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\n","import { reverse, empty, cons, fold } from \"../fable-library.3.6.3/List.js\";\nimport { uncurry } from \"../fable-library.3.6.3/Util.js\";\nimport { toString } from \"../fable-library.3.6.3/Types.js\";\nimport { join } from \"../fable-library.3.6.3/String.js\";\n\nexport function Helpers_extractClasses(xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const classes = tupledArg[0];\n        const props = tupledArg[1];\n        return (x) => {\n            const matchValue = x;\n            return (matchValue[0] === \"className\") ? [cons(toString(matchValue[1]), classes), props] : [classes, cons(x, props)];\n        };\n    }), [empty(), empty()], reverse(xs));\n}\n\nexport function Helpers_combineClasses(cn, xs) {\n    const tupledArg = Helpers_extractClasses(xs);\n    return cons([\"className\", join(\" \", cons(cn, tupledArg[0]))], tupledArg[1]);\n}\n\n","import { union_type, string_type, class_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { empty, singleton, append, delay, toList } from \"../../fable_modules/fable-library.3.6.3/Seq.js\";\nimport { createElement } from \"react\";\nimport { value as value_12 } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { ofArray } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { createObj } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { Union } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\n\nexport class Elements {\n    constructor() {\n    }\n}\n\nexport function Elements$reflection() {\n    return class_type(\"App.Components.Elements\", void 0, Elements);\n}\n\nexport function Elements_IconButton_62C67EE5(elements_IconButton_62C67EE5InputProps) {\n    const iconName = elements_IconButton_62C67EE5InputProps.iconName;\n    const label = elements_IconButton_62C67EE5InputProps.label;\n    const props_2 = ofArray([[\"onClick\", elements_IconButton_62C67EE5InputProps.action], [\"style\", {\n        backgroundColor: \"transparent\",\n        borderStyle: \"none\",\n        fontSize: 18 + \"px\",\n    }], [\"children\", Interop_reactApi.Children.toArray(Array.from(toList(delay(() => append((label != null) ? singleton(createElement(\"span\", {\n        className: \"navbar-item\",\n        children: value_12(label),\n    })) : empty(), delay(() => {\n        let arg10;\n        return (iconName != null) ? singleton(createElement(\"div\", {\n            className: (arg10 = value_12(iconName), toText(printf(\"icon %s\"))(arg10)),\n        })) : empty();\n    }))))))]]);\n    return createElement(\"a\", createObj(Helpers_combineClasses(\"button\", props_2)));\n}\n\nexport class Types_View extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Overview\", \"Account\", \"Transfer\", \"Invest\", \"Pensions\", \"Messages\", \"Profile\", \"DevSupport\", \"Accounts\"];\n    }\n    toString() {\n        const x = this;\n        switch (x.tag) {\n            case 8: {\n                return \"Accounts\";\n            }\n            case 1: {\n                return toText(printf(\"Account - %s\"))(x.fields[0]);\n            }\n            case 2: {\n                return \"Payments \\u0026 Transfer\";\n            }\n            case 3: {\n                return \"Investment\";\n            }\n            case 4: {\n                return \"Pension and Insurance\";\n            }\n            case 5: {\n                return \"Messages\";\n            }\n            case 6: {\n                return \"Profile\";\n            }\n            case 7: {\n                return \"Developer Support\";\n            }\n            default: {\n                return \"Overview\";\n            }\n        }\n    }\n}\n\nexport function Types_View$reflection() {\n    return union_type(\"App.Components.Types.View\", [], Types_View, () => [[], [[\"Item\", string_type]], [], [], [], [], [], [], []]);\n}\n\nexport function Types_View__get_IconName(x) {\n    switch (x.tag) {\n        case 8: {\n            return \"coins\";\n        }\n        case 1: {\n            return \"\";\n        }\n        case 2: {\n            return \"arrows\";\n        }\n        case 3: {\n            return \"chart\";\n        }\n        case 4: {\n            return \"wineglass\";\n        }\n        case 5: {\n            return \"envelope\";\n        }\n        case 6: {\n            return \"profile\";\n        }\n        case 7: {\n            return \"code\";\n        }\n        default: {\n            return \"lamp\";\n        }\n    }\n}\n\n","import { class_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { createElement } from \"react\";\nimport { createObj } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { map, ofArray, singleton } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\n\nexport class Components {\n    constructor() {\n    }\n}\n\nexport function Components$reflection() {\n    return class_type(\"App.Components.Components\", void 0, Components);\n}\n\nexport function Components_IdCard_Z34C1F15A(user) {\n    let elms_3, elms_1, elms, elms_2, props_6;\n    const props_10 = ofArray([[\"style\", {\n        boxShadow: \"none\",\n        backgroundColor: \"#FFFFFF\",\n    }], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton(createElement(\"figure\", createObj(Helpers_combineClasses(\"image\", singleton([\"className\", \"is-32x32 icon profile\"]))))), createElement(\"div\", {\n        className: \"media-left\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"article\", {\n        className: \"media\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    })), (elms_2 = ofArray([createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", singleton([\"children\", user.Name])))), (props_6 = ofArray([[\"className\", \"is-size-6\"], [\"children\", toText(printf(\"Fødselsdag: %s\"))(user.DateOfBirth)]]), createElement(\"h2\", createObj(Helpers_combineClasses(\"subtitle\", props_6))))]), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n    }))]), createElement(\"div\", {\n        className: \"card-content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"card\", props_10)));\n}\n\nexport function Components_Splash() {\n    let props_41, props_15, props_13, props_27, props_25, props_23, props_31, props_29, props_39, props_37, props_35;\n    const elms = ofArray([createElement(\"div\", createObj(Helpers_combineClasses(\"column\", singleton([\"className\", \"is-2\"])))), (props_41 = ofArray([[\"className\", \"is-8\"], [\"children\", Interop_reactApi.Children.toArray([(props_15 = ofArray([[\"className\", \"is-ancestor splash-menu\"], [\"children\", Interop_reactApi.Children.toArray([(props_13 = ofArray([[\"className\", \"is-parent\"], [\"children\", Interop_reactApi.Children.toArray(Array.from(map((tupledArg) => {\n        const props_2 = ofArray([[\"className\", \"is-child\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"div\", {\n            className: toText(printf(\"menu-icon icon %s\"))(tupledArg[0]),\n        }), createElement(\"div\", {\n            className: \"menu-name\",\n            children: tupledArg[1],\n        })])]]);\n        return createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_2)));\n    }, ofArray([[\"apartment\", \"Housing\"], [\"car\", \"Cars\"], [\"chart\", \"Investment\"], [\"wineglass\", \"Pension\"], [\"hand-holding-medical\", \"Insurance\"], [\"credit-card\", \"Cards\"], [\"coins\", \"Loans\"], [\"cardboard-box\", \"More products\"]]))))]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_13))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_15)))), (props_27 = ofArray([[\"className\", \"is-ancestor\"], [\"children\", Interop_reactApi.Children.toArray([(props_25 = ofArray([[\"className\", \"is-parent\"], [\"children\", Interop_reactApi.Children.toArray([(props_23 = ofArray([[\"className\", \"is-child box banner\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"div\", {\n        className: \"banner overlay\",\n    }), createElement(\"div\", {\n        className: \"banner-content\",\n        children: Interop_reactApi.Children.toArray([createElement(\"h2\", createObj(Helpers_combineClasses(\"subtitle\", ofArray([[\"className\", \"banner\"], [\"children\", \"BUSINESS TO BUSINESS\"]])))), createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", ofArray([[\"className\", \"banner\"], [\"children\", \"“We save 120 dev hours a year with Criipto’s e-ID login”\"]]))))]),\n    })])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_23))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_25))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_27)))), (props_31 = ofArray([[\"className\", \"is-ancestor\"], [\"children\", Interop_reactApi.Children.toArray([(props_29 = ofArray([[\"className\", \"is-parent\"], [\"children\", Interop_reactApi.Children.toArray(Array.from(map((tupledArg_1) => {\n        const props_9 = ofArray([[\"className\", \"is-child box splash-item\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"div\", {\n            className: toText(printf(\"icon %s is-40h splash-item\"))(tupledArg_1[0]),\n        }), createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", ofArray([[\"className\", \"splash-item\"], [\"children\", tupledArg_1[1]]])))), createElement(\"div\", createObj(Helpers_combineClasses(\"content\", ofArray([[\"className\", \"splash-item\"], [\"children\", tupledArg_1[2]]]))))])]]);\n        return createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_9)));\n    }, ofArray([[\"signature\", \"Easy digital signing of sensitive documents\", \"Criipto provides Criipto Bank’s secure and user-friendly signing solution so you can sign securely - on your computer and on the go.\"], [\"power-off\", \"Easy login to Criipto Bank\", \"Criipto Bank is using Criipto\\u0027s easy and secure login solution. It saves us a lot of money that we can spend on better service for you!\"], [\"mitid\", \"MitID has arrived - We have you covered\", \"Don’t worry. We have your back. With Criipto’s easy e-ID login solution we provide MitID and NemID login side-by-side.\"]]))))]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_29))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_31)))), (props_39 = ofArray([[\"className\", \"is-ancestor\"], [\"children\", Interop_reactApi.Children.toArray([(props_37 = ofArray([[\"className\", \"is-parent\"], [\"children\", Interop_reactApi.Children.toArray([(props_35 = ofArray([[\"className\", \"is-child call-to-action\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"button\", createObj(Helpers_combineClasses(\"button\", ofArray([[\"className\", \"call-to-action\"], [\"children\", \"Become a customer in Criipto Bank\"]]))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_35))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_37))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"tile\", props_39))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_41)))), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", singleton([\"className\", \"is-2\"]))))]);\n    return createElement(\"div\", {\n        className: \"columns\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    });\n}\n\n","import { Record } from \"../fable-library.3.6.3/Types.js\";\nimport { record_type, int32_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { maxBy, minBy } from \"../fable-library.3.6.3/List.js\";\nimport { compareArrays } from \"../fable-library.3.6.3/Util.js\";\n\nexport class MarkdownRange extends Record {\n    constructor(StartLine, StartColumn, EndLine, EndColumn) {\n        super();\n        this.StartLine = (StartLine | 0);\n        this.StartColumn = (StartColumn | 0);\n        this.EndLine = (EndLine | 0);\n        this.EndColumn = (EndColumn | 0);\n    }\n}\n\nexport function MarkdownRange$reflection() {\n    return record_type(\"Fable.Formatting.Markdown.MarkdownRange\", [], MarkdownRange, () => [[\"StartLine\", int32_type], [\"StartColumn\", int32_type], [\"EndLine\", int32_type], [\"EndColumn\", int32_type]]);\n}\n\nexport const MarkdownRangeModule_zero = new MarkdownRange(0, 0, 0, 0);\n\nexport function MarkdownRangeModule_mergeRanges(ranges) {\n    const startRange = minBy((r) => [r.StartLine, r.StartColumn], ranges, {\n        Compare: (x, y) => compareArrays(x, y),\n    });\n    const endRange = maxBy((r_1) => [r_1.EndLine, r_1.EndColumn], ranges, {\n        Compare: (x_1, y_1) => compareArrays(x_1, y_1),\n    });\n    return new MarkdownRange(startRange.StartLine, startRange.StartColumn, endRange.EndLine, endRange.EndColumn);\n}\n\n","import { ofSeq, empty, tail as tail_6, head, isEmpty, reverse, cons } from \"../fable-library.3.6.3/List.js\";\nimport { compare, equals } from \"../fable-library.3.6.3/Util.js\";\nimport { singleton, map, append, empty as empty_1, delay } from \"../fable-library.3.6.3/Seq.js\";\nimport { Union } from \"../fable-library.3.6.3/Types.js\";\nimport { union_type, list_type } from \"../fable-library.3.6.3/Reflection.js\";\n\nexport function List_partitionWhile(p, input) {\n    const loop = (acc_mut, _arg1_mut) => {\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            let pattern_matching_result, hd_1, tl_1;\n            if (!isEmpty(_arg1)) {\n                if (p(head(_arg1))) {\n                    pattern_matching_result = 0;\n                    hd_1 = head(_arg1);\n                    tl_1 = tail_6(_arg1);\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    acc_mut = cons(hd_1, acc);\n                    _arg1_mut = tl_1;\n                    continue loop;\n                }\n                case 1: {\n                    return [reverse(acc), _arg1];\n                }\n            }\n            break;\n        }\n    };\n    return loop(empty(), input);\n}\n\nexport function List_partitionWhileLookahead(p, input) {\n    const loop = (acc_mut, _arg1_mut) => {\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            let pattern_matching_result, hd_1, tl_1;\n            if (!isEmpty(_arg1)) {\n                if (p(cons(head(_arg1), tail_6(_arg1)))) {\n                    pattern_matching_result = 0;\n                    hd_1 = head(_arg1);\n                    tl_1 = tail_6(_arg1);\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    acc_mut = cons(hd_1, acc);\n                    _arg1_mut = tl_1;\n                    continue loop;\n                }\n                case 1: {\n                    return [reverse(acc), _arg1];\n                }\n            }\n            break;\n        }\n    };\n    return loop(empty(), input);\n}\n\nexport function List_partitionUntil(p, input) {\n    return List_partitionWhile((arg) => (!p(arg)), input);\n}\n\nexport function List_partitionUntilLookahead(p, input) {\n    return List_partitionWhileLookahead((arg) => (!p(arg)), input);\n}\n\nexport function List_iterInterleaved(f_mut, g_mut, input_mut) {\n    List_iterInterleaved:\n    while (true) {\n        const f = f_mut, g = g_mut, input = input_mut;\n        if (isEmpty(input)) {\n        }\n        else if (isEmpty(tail_6(input))) {\n            f(head(input));\n        }\n        else {\n            f(head(input));\n            g();\n            f_mut = f;\n            g_mut = g;\n            input_mut = cons(head(tail_6(input)), tail_6(tail_6(input)));\n            continue List_iterInterleaved;\n        }\n        break;\n    }\n}\n\nexport function List_partitionUntilEquals(endl, input) {\n    const loop = (acc_mut, _arg1_mut) => {\n        let loop_1;\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            if ((loop_1 = ((start_1_mut, list_1_mut) => {\n                loop_1:\n                while (true) {\n                    const start_1 = start_1_mut, list_1 = list_1_mut;\n                    const matchValue = [start_1, list_1];\n                    let pattern_matching_result, x_1, xs_1, y_1, ys_1;\n                    if (!isEmpty(matchValue[0])) {\n                        if (!isEmpty(matchValue[1])) {\n                            if (equals(head(matchValue[0]), head(matchValue[1]))) {\n                                pattern_matching_result = 0;\n                                x_1 = head(matchValue[0]);\n                                xs_1 = tail_6(matchValue[0]);\n                                y_1 = head(matchValue[1]);\n                                ys_1 = tail_6(matchValue[1]);\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                    switch (pattern_matching_result) {\n                        case 0: {\n                            start_1_mut = xs_1;\n                            list_1_mut = ys_1;\n                            continue loop_1;\n                        }\n                        case 1: {\n                            if (isEmpty(matchValue[0])) {\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }), loop_1(endl, _arg1))) {\n                return [reverse(acc), _arg1];\n            }\n            else if (isEmpty(_arg1)) {\n                return void 0;\n            }\n            else {\n                acc_mut = cons(head(_arg1), acc);\n                _arg1_mut = tail_6(_arg1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(empty(), input);\n}\n\nexport function List_nestUnderLastMatching(f, input) {\n    const loop = (input_1) => delay(() => {\n        const patternInput = List_partitionUntil(f, input_1);\n        const other = patternInput[1];\n        const matchValue = reverse(patternInput[0]);\n        if (isEmpty(matchValue)) {\n            if (equals(other, empty())) {\n                return empty_1();\n            }\n            else {\n                throw (new Error(\"Should start with true\\\\nParameter name: \"));\n                return empty_1();\n            }\n        }\n        else {\n            return append(map((p) => [p, empty()], reverse(tail_6(matchValue))), delay(() => {\n                const patternInput_1 = List_partitionUntil((arg) => (!f(arg)), other);\n                return append(singleton([head(matchValue), patternInput_1[0]]), delay(() => loop(patternInput_1[1])));\n            }));\n        }\n    });\n    return ofSeq(loop(input));\n}\n\nexport class Tree$1 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Node\"];\n    }\n}\n\nexport function Tree$1$reflection(gen0) {\n    return union_type(\"Fable.Formatting.Collections.Tree`1\", [gen0], Tree$1, () => [[[\"Item1\", gen0], [\"Item2\", list_type(Tree$1$reflection(gen0))]]]);\n}\n\nfunction Tree_takeAtLevel(indent, tail) {\n    let pattern_matching_result, i_1, tail_2, value_1;\n    if (!isEmpty(tail)) {\n        if (compare(head(tail)[0], indent) >= 0) {\n            pattern_matching_result = 0;\n            i_1 = head(tail)[0];\n            tail_2 = tail_6(tail);\n            value_1 = head(tail)[1];\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const patternInput = Tree_takeDeeperThan(i_1, tail_2);\n            const patternInput_1 = Tree_takeAtLevel(indent, patternInput[1]);\n            return [cons(new Tree$1(0, value_1, patternInput[0]), patternInput_1[0]), patternInput_1[1]];\n        }\n        case 1: {\n            return [empty(), tail];\n        }\n    }\n}\n\nfunction Tree_takeDeeperThan(indent, tail) {\n    let pattern_matching_result, i_1, tail_2, value_1;\n    if (!isEmpty(tail)) {\n        if (compare(head(tail)[0], indent) > 0) {\n            pattern_matching_result = 0;\n            i_1 = head(tail)[0];\n            tail_2 = tail_6(tail);\n            value_1 = head(tail)[1];\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const patternInput = Tree_takeDeeperThan(i_1, tail_2);\n            const patternInput_1 = Tree_takeAtLevel(i_1, patternInput[1]);\n            return [cons(new Tree$1(0, value_1, patternInput[0]), patternInput_1[0]), patternInput_1[1]];\n        }\n        case 1: {\n            return [empty(), tail];\n        }\n    }\n}\n\nexport function Tree_ofIndentedList(input) {\n    const patternInput = Tree_takeAtLevel(0, input);\n    if (!equals(patternInput[1], empty())) {\n        throw (new Error(\"Wrong indentation\"));\n    }\n    return patternInput[0];\n}\n\n","import { split, replace, trimStart, trimEnd, endsWith, substring, isNullOrWhiteSpace } from \"../fable-library.3.6.3/String.js\";\nimport { some } from \"../fable-library.3.6.3/Option.js\";\nimport { takeWhile as takeWhile_1, skipWhile, toArray, empty, reverse, cons, map as map_1, ofArray, tail, head, isEmpty } from \"../fable-library.3.6.3/List.js\";\nimport { forAll, empty as empty_1, singleton, collect, delay, toList, windowed, exists, min, isEmpty as isEmpty_1, filter, takeWhile, length, map } from \"../fable-library.3.6.3/Seq.js\";\nimport { isLetter, isWhiteSpace } from \"../fable-library.3.6.3/Char.js\";\nimport { equals, comparePrimitives } from \"../fable-library.3.6.3/Util.js\";\nimport { FSharpRef } from \"../fable-library.3.6.3/Types.js\";\nimport { MarkdownRange } from \"./Range.fs.js\";\nimport { List_partitionWhile } from \"./Collections.fs.js\";\nimport { tryGetValue } from \"../fable-library.3.6.3/MapUtil.js\";\n\nexport function Log_warn(s) {\n    console.log(s);\n}\n\nexport function String_$007CWhiteSpace$007C_$007C(s) {\n    if (isNullOrWhiteSpace(s)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CTrimBoth$007C(text) {\n    return text.trim();\n}\n\nexport function String_$007CStartsWith$007C_$007C(start, text) {\n    if (text.indexOf(start) === 0) {\n        return substring(text, start.length);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CStartsWithTrim$007C_$007C(start, text) {\n    if (text.indexOf(start) === 0) {\n        return substring(text, start.length).trim();\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CStartsAndEndsWith$007C_$007C(starts, ends, s) {\n    if (((s.indexOf(starts) === 0) && endsWith(s, ends)) && (s.length >= (starts.length + ends.length))) {\n        return substring(s, starts.length, (s.length - starts.length) - ends.length);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CStartsAndEndsWithTrim$007C_$007C(args_0, args_1, _arg1) {\n    const args = [args_0, args_1];\n    const activePatternResult1645 = String_$007CStartsAndEndsWith$007C_$007C(args[0], args[1], _arg1);\n    if (activePatternResult1645 != null) {\n        const activePatternResult1646 = String_$007CTrimBoth$007C(activePatternResult1645);\n        return activePatternResult1646;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CStartsWithWrapped$007C_$007C(starts, ends, text) {\n    if (text.indexOf(starts) === 0) {\n        const id = text.indexOf(ends, starts.length) | 0;\n        if (id >= 0) {\n            return [substring(text, starts.length, id - starts.length), substring(text, id + ends.length, (text.length - id) - ends.length)];\n        }\n        else {\n            return void 0;\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function String_$007CSkipSingleLine$007C(text) {\n    const tryEol = (eolList_mut) => {\n        tryEol:\n        while (true) {\n            const eolList = eolList_mut;\n            if (!isEmpty(eolList)) {\n                const h = head(eolList);\n                const matchValue = text.indexOf(h) | 0;\n                if (matchValue < 0) {\n                    eolList_mut = tail(eolList);\n                    continue tryEol;\n                }\n                else {\n                    return substring(text, matchValue + h.length);\n                }\n            }\n            else {\n                return text;\n            }\n            break;\n        }\n    };\n    const result = tryEol(ofArray([\"\\r\\n\", \"\\n\"]));\n    const skipped = substring(text, 0, text.length - result.length);\n    if (!isNullOrWhiteSpace(skipped)) {\n        Log_warn(`skipped '${skipped}' which contains non-whitespace character!`);\n    }\n    if (result === text) {\n        Log_warn(`could not skip a line of ${text}, because no line-ending character was found!`);\n    }\n    return result;\n}\n\nexport function String_removeSpaces(lines) {\n    let spaces;\n    const xs = map((line) => length(takeWhile((arg00_1) => isWhiteSpace(arg00_1), line.split(\"\"))), filter((arg) => (!isNullOrWhiteSpace(arg)), lines));\n    spaces = (isEmpty_1(xs) ? 0 : min(xs, {\n        Compare: (x, y) => comparePrimitives(x, y),\n    }));\n    return map_1((line_1) => {\n        if (isNullOrWhiteSpace(line_1)) {\n            return \"\";\n        }\n        else {\n            return substring(line_1, spaces);\n        }\n    }, lines);\n}\n\nexport function StringPosition_$007CWhiteSpace$007C_$007C(s, _n) {\n    if (isNullOrWhiteSpace(s)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CUnindented$007C_$007C(s, _n) {\n    if ((!isNullOrWhiteSpace(s)) && (s.trimStart() === s)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CTrimBoth$007C(text, n) {\n    let inputRecord;\n    const trimmedStart = text.trimStart();\n    const trimmed = trimmedStart.trimEnd();\n    return [trimmed, (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + text.length) - trimmedStart.length, inputRecord.contents.EndLine, (n.EndColumn - trimmedStart.length) + trimmed.length))];\n}\n\nexport function StringPosition_$007CTrimEnd$007C(text, n) {\n    let inputRecord;\n    const trimmed = text.trimEnd();\n    return [trimmed, (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, inputRecord.contents.StartColumn, inputRecord.contents.EndLine, (n.EndColumn - text.length) + trimmed.length))];\n}\n\nexport function StringPosition_$007CTrimStart$007C(text, n) {\n    let inputRecord;\n    const trimmed = text.trimStart();\n    return [trimmed, (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + text.length) - trimmed.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))];\n}\n\nexport function StringPosition_$007CTrimEndUsing$007C(chars, text, n) {\n    let inputRecord;\n    const trimmed = trimEnd(text, ...Array.from(chars));\n    return [trimmed, (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, inputRecord.contents.StartColumn, inputRecord.contents.EndLine, (n.EndColumn - text.length) + trimmed.length))];\n}\n\nexport function StringPosition_$007CTrimStartAndCount$007C(text, n) {\n    let inputRecord;\n    const trimmed = trimStart(text, \" \", \"\\t\");\n    const len = (text.length - trimmed.length) | 0;\n    return [len, replace(substring(text, 0, len), \"\\t\", \"    \").length, [trimmed, (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + text.length) - trimmed.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))]];\n}\n\nexport function StringPosition_$007CStartsWithAny$007C_$007C(starts, text, _n) {\n    if (exists((arg00) => (text.indexOf(arg00) === 0), starts)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsWith$007C_$007C(start, text, n) {\n    let inputRecord;\n    if (text.indexOf(start) === 0) {\n        return [substring(text, start.length), (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + text.length) - start.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsWithTrim$007C_$007C(start, text, n) {\n    let inputRecord;\n    if (text.indexOf(start) === 0) {\n        return [substring(text, start.length).trim(), (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + text.length) - start.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C(start, text, _n) {\n    if (text.indexOf(start) >= 0) {\n        const beforeStart = substring(text, 0, text.indexOf(start));\n        if (isNullOrWhiteSpace(beforeStart)) {\n            const startNum = length(takeWhile((y) => (start === y), map((chars) => (chars.join('')), windowed(start.length, substring(text, beforeStart.length).split(\"\"))))) | 0;\n            return [startNum, beforeStart.length, substring(text, beforeStart.length + (start.length * startNum)).trim()];\n        }\n        else {\n            return void 0;\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsAndEndsWith$007C_$007C(starts, ends, s, n) {\n    let inputRecord;\n    if (((s.indexOf(starts) === 0) && endsWith(s, ends)) && (s.length >= (starts.length + ends.length))) {\n        return [substring(s, starts.length, (s.length - starts.length) - ends.length), (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, (n.StartColumn + s.length) - starts.length, inputRecord.contents.EndLine, (n.EndColumn - s.length) + ends.length))];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsAndEndsWithTrim$007C_$007C(args_0, args_1, _arg1_0, _arg1_1) {\n    const args = [args_0, args_1];\n    const _arg1 = [_arg1_0, _arg1_1];\n    const activePatternResult1680 = StringPosition_$007CStartsAndEndsWith$007C_$007C(args[0], args[1], _arg1[0], _arg1[1]);\n    if (activePatternResult1680 != null) {\n        let activePatternResult1681;\n        const tupledArg = activePatternResult1680;\n        activePatternResult1681 = StringPosition_$007CTrimBoth$007C(tupledArg[0], tupledArg[1]);\n        return activePatternResult1681;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CStartsWithRepeated$007C_$007C(repeated, text, ln) {\n    let inputRecord;\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i === text.length) {\n                return i | 0;\n            }\n            else if (text[i] !== repeated[i % repeated.length]) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const n = loop(0) | 0;\n    if ((n === 0) ? true : ((n % repeated.length) !== 0)) {\n        return void 0;\n    }\n    else {\n        return [~(~(n / repeated.length)), [substring(text, n, text.length - n), (inputRecord = (new FSharpRef(ln)), new MarkdownRange(inputRecord.contents.StartLine, n, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))]];\n    }\n}\n\nexport function StringPosition_$007CStartsWithWrapped$007C_$007C(starts, ends, text, n) {\n    let inputRecord;\n    if (text.indexOf(starts) === 0) {\n        const id = text.indexOf(ends, starts.length) | 0;\n        if (id >= 0) {\n            return [substring(text, starts.length, id - starts.length), [substring(text, id + ends.length, (text.length - id) - ends.length), (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, id + ends.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))]];\n        }\n        else {\n            return void 0;\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function StringPosition_$007CEqualsRepeated$007C_$007C(repeated, _n, _arg1_0, _arg1_1) {\n    const _arg1 = [_arg1_0, _arg1_1];\n    let pattern_matching_result;\n    const activePatternResult1690 = StringPosition_$007CStartsWithRepeated$007C_$007C(repeated, _arg1[0], _arg1[1]);\n    if (activePatternResult1690 != null) {\n        if (activePatternResult1690[1][0] === \"\") {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return some(void 0);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function List_$007CBracketDelimited$007C_$007C(startc, endc, input) {\n    const loop = (acc_mut, count_mut, _arg1_mut) => {\n        loop:\n        while (true) {\n            const acc = acc_mut, count = count_mut, _arg1 = _arg1_mut;\n            let pattern_matching_result, x_1, xs_1;\n            if (!isEmpty(_arg1)) {\n                if (head(_arg1) === \"\\\\\") {\n                    if (!isEmpty(tail(_arg1))) {\n                        if (head(tail(_arg1)) === endc) {\n                            pattern_matching_result = 0;\n                            x_1 = head(tail(_arg1));\n                            xs_1 = tail(tail(_arg1));\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    acc_mut = cons(x_1, acc);\n                    count_mut = count;\n                    _arg1_mut = xs_1;\n                    continue loop;\n                }\n                case 1: {\n                    let pattern_matching_result_1, x_3, xs_3;\n                    if (!isEmpty(_arg1)) {\n                        if ((head(_arg1) === endc) && (count === 0)) {\n                            pattern_matching_result_1 = 0;\n                            x_3 = head(_arg1);\n                            xs_3 = tail(_arg1);\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            return [reverse(acc), xs_3];\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, x_5, xs_5;\n                            if (!isEmpty(_arg1)) {\n                                if (head(_arg1) === endc) {\n                                    pattern_matching_result_2 = 0;\n                                    x_5 = head(_arg1);\n                                    xs_5 = tail(_arg1);\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    acc_mut = cons(x_5, acc);\n                                    count_mut = (count - 1);\n                                    _arg1_mut = xs_5;\n                                    continue loop;\n                                }\n                                case 1: {\n                                    let pattern_matching_result_3, x_7, xs_7;\n                                    if (!isEmpty(_arg1)) {\n                                        if (head(_arg1) === startc) {\n                                            pattern_matching_result_3 = 0;\n                                            x_7 = head(_arg1);\n                                            xs_7 = tail(_arg1);\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_3 = 1;\n                                    }\n                                    switch (pattern_matching_result_3) {\n                                        case 0: {\n                                            acc_mut = cons(x_7, acc);\n                                            count_mut = (count + 1);\n                                            _arg1_mut = xs_7;\n                                            continue loop;\n                                        }\n                                        case 1: {\n                                            if (isEmpty(_arg1)) {\n                                                return void 0;\n                                            }\n                                            else {\n                                                acc_mut = cons(head(_arg1), acc);\n                                                count_mut = count;\n                                                _arg1_mut = tail(_arg1);\n                                                continue loop;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            break;\n        }\n    };\n    let pattern_matching_result_4, x_10, xs_10;\n    if (!isEmpty(input)) {\n        if (head(input) === startc) {\n            pattern_matching_result_4 = 0;\n            x_10 = head(input);\n            xs_10 = tail(input);\n        }\n        else {\n            pattern_matching_result_4 = 1;\n        }\n    }\n    else {\n        pattern_matching_result_4 = 1;\n    }\n    switch (pattern_matching_result_4) {\n        case 0: {\n            return loop(empty(), 0, xs_10);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function List_$007CAsString$007C(chars) {\n    return toArray(chars).join('');\n}\n\nexport function Lines_$007CTrimBlank$007C(lines) {\n    return reverse(skipWhile((tupledArg_1) => isNullOrWhiteSpace(tupledArg_1[0]), reverse(skipWhile((tupledArg) => isNullOrWhiteSpace(tupledArg[0]), lines))));\n}\n\nexport function Lines_$007CTakeStartingWithOrBlank$007C_$007C(start, input) {\n    const matchValue = List_partitionWhile((s) => {\n        if (isNullOrWhiteSpace(s)) {\n            return true;\n        }\n        else {\n            return s.indexOf(start) === 0;\n        }\n    }, input);\n    if (!equals(matchValue[0], empty())) {\n        return [matchValue[0], matchValue[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Lines_$007CTakeCodeBlock$007C_$007C(input) {\n    const spaceNum = 4;\n    const matchValue = List_partitionWhile((tupledArg) => {\n        const s_1 = tupledArg[0];\n        if (isNullOrWhiteSpace(s_1)) {\n            return true;\n        }\n        else {\n            const normalized = replace(s_1, \"\\t\", \"    \");\n            return (normalized.length >= spaceNum) && (substring(normalized, 0, spaceNum) === (Array(spaceNum + 1).join(\" \")));\n        }\n    }, input);\n    if ((!equals(matchValue[0], empty())) && (spaceNum >= 4)) {\n        return [spaceNum, matchValue[0], matchValue[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Lines_$007CTrimBlankStart$007C(lines) {\n    return [takeWhile_1((tupledArg) => isNullOrWhiteSpace(tupledArg[0]), lines), skipWhile((tupledArg_1) => isNullOrWhiteSpace(tupledArg_1[0]), lines)];\n}\n\nexport function Lines_$007CTrimParagraphLines$007C(lines) {\n    return map_1((tupledArg_1) => {\n        let inputRecord;\n        const s = tupledArg_1[0];\n        const n_1 = tupledArg_1[1];\n        const endsWithTwoSpaces = endsWith(s, \"  \");\n        const trimmed = trimEnd(s, \" \") + (endsWithTwoSpaces ? \"  \" : \"\");\n        return [trimmed, (inputRecord = (new FSharpRef(n_1)), new MarkdownRange(inputRecord.contents.StartLine, inputRecord.contents.StartColumn, inputRecord.contents.EndLine, (n_1.EndColumn - s.length) + trimmed.length))];\n    }, map_1((tupledArg) => StringPosition_$007CTrimStart$007C(tupledArg[0], tupledArg[1]), lines));\n}\n\nexport function $007CLet$007C(a, b) {\n    return [a, b];\n}\n\nexport function $007CParseCommands$007C_$007C(str) {\n    const kvs = toList(delay(() => collect((cmd) => {\n        const kv = split(cmd, [\"=\", \":\"]);\n        return (kv.length === 2) ? singleton([kv[0].trim(), kv[1].trim()]) : ((kv.length === 1) ? singleton([kv[0].trim(), \"\"]) : empty_1());\n    }, split(str, [\",\"], null, 0))));\n    if (forAll((arg) => forAll((c) => {\n        if (isLetter(c) ? true : (c === \"_\")) {\n            return true;\n        }\n        else {\n            return c === \"-\";\n        }\n    }, arg[0].split(\"\")), kvs) && (!equals(kvs, empty()))) {\n        return new Map(kvs);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CParseCommand$007C_$007C(cmd) {\n    const kv = split(cmd, [\"=\", \":\"]);\n    if ((kv.length >= 1) && (!forAll((arg00) => isLetter(arg00), kv[0].split(\"\")))) {\n        return void 0;\n    }\n    else if (kv.length === 2) {\n        return [kv[0].trim(), kv[1].trim()];\n    }\n    else if (kv.length === 1) {\n        return [kv[0].trim(), \"\"];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CCommand$007C_$007C(k, d) {\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(d, k, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return some(matchValue[1]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","import { Union } from \"../fable-library.3.6.3/Types.js\";\nimport { tuple_type, char_type, int32_type, class_type, list_type, option_type, string_type, union_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { MarkdownRange$reflection } from \"./Range.fs.js\";\nimport { tail, head, empty, reverse, length, cons, concat, singleton, isEmpty } from \"../fable-library.3.6.3/List.js\";\nimport { FSharpChoice$3, FSharpChoice$2 } from \"../fable-library.3.6.3/Choice.js\";\n\nexport class MarkdownListKind extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ordered\", \"Unordered\"];\n    }\n}\n\nexport function MarkdownListKind$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownListKind\", [], MarkdownListKind, () => [[], []]);\n}\n\nexport class MarkdownColumnAlignment extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"AlignLeft\", \"AlignRight\", \"AlignCenter\", \"AlignDefault\"];\n    }\n}\n\nexport function MarkdownColumnAlignment$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownColumnAlignment\", [], MarkdownColumnAlignment, () => [[], [], [], []]);\n}\n\nexport class MarkdownSpan extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Literal\", \"InlineCode\", \"Strong\", \"Emphasis\", \"AnchorLink\", \"DirectLink\", \"IndirectLink\", \"DirectImage\", \"IndirectImage\", \"HardLineBreak\", \"LatexInlineMath\", \"LatexDisplayMath\", \"EmbedSpans\"];\n    }\n}\n\nexport function MarkdownSpan$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownSpan\", [], MarkdownSpan, () => [[[\"text\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"code\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"link\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"link\", string_type], [\"title\", option_type(string_type)], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"original\", string_type], [\"key\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", string_type], [\"link\", string_type], [\"title\", option_type(string_type)], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", string_type], [\"link\", string_type], [\"key\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"range\", option_type(MarkdownRange$reflection())]], [[\"code\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"code\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"customSpans\", class_type(\"Fable.Formatting.Markdown.MarkdownEmbedSpans\")], [\"range\", option_type(MarkdownRange$reflection())]]]);\n}\n\nexport class MarkdownParagraph extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Heading\", \"Paragraph\", \"CodeBlock\", \"InlineHtmlBlock\", \"ListBlock\", \"QuotedBlock\", \"Span\", \"LatexBlock\", \"HorizontalRule\", \"TableBlock\", \"OtherBlock\", \"EmbedParagraphs\", \"YamlFrontmatter\", \"OutputBlock\"];\n    }\n}\n\nexport function MarkdownParagraph$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownParagraph\", [], MarkdownParagraph, () => [[[\"size\", int32_type], [\"body\", list_type(MarkdownSpan$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"code\", string_type], [\"executionCount\", option_type(int32_type)], [\"language\", string_type], [\"ignoredLine\", string_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"code\", string_type], [\"executionCount\", option_type(int32_type)], [\"range\", option_type(MarkdownRange$reflection())]], [[\"kind\", MarkdownListKind$reflection()], [\"items\", list_type(list_type(MarkdownParagraph$reflection()))], [\"range\", option_type(MarkdownRange$reflection())]], [[\"paragraphs\", list_type(MarkdownParagraph$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"body\", list_type(MarkdownSpan$reflection())], [\"range\", option_type(MarkdownRange$reflection())]], [[\"env\", string_type], [\"body\", list_type(string_type)], [\"range\", option_type(MarkdownRange$reflection())]], [[\"character\", char_type], [\"range\", option_type(MarkdownRange$reflection())]], [[\"headers\", option_type(list_type(list_type(MarkdownParagraph$reflection())))], [\"alignments\", list_type(MarkdownColumnAlignment$reflection())], [\"rows\", list_type(list_type(list_type(MarkdownParagraph$reflection())))], [\"range\", option_type(MarkdownRange$reflection())]], [[\"lines\", list_type(tuple_type(string_type, MarkdownRange$reflection()))], [\"range\", option_type(MarkdownRange$reflection())]], [[\"customParagraphs\", class_type(\"Fable.Formatting.Markdown.MarkdownEmbedParagraphs\")], [\"range\", option_type(MarkdownRange$reflection())]], [[\"yaml\", list_type(string_type)], [\"range\", option_type(MarkdownRange$reflection())]], [[\"output\", string_type], [\"kind\", string_type], [\"executionCount\", option_type(int32_type)]]]);\n}\n\nexport function Dsl_$0023(value) {\n    return new MarkdownParagraph(0, 1, value, void 0);\n}\n\nexport function Dsl_$0023$0023(value) {\n    return new MarkdownParagraph(0, 2, value, void 0);\n}\n\nexport function Dsl_$0023$0023$0023(value) {\n    return new MarkdownParagraph(0, 3, value, void 0);\n}\n\nexport function Dsl_$0023$0023$0023$0023(value) {\n    return new MarkdownParagraph(0, 4, value, void 0);\n}\n\nexport function Dsl_$0023$0023$0023$0023$0023(value) {\n    return new MarkdownParagraph(0, 5, value, void 0);\n}\n\nexport function Dsl_strong(value) {\n    return new MarkdownSpan(2, value, void 0);\n}\n\nexport function Dsl_p(value) {\n    return new MarkdownParagraph(1, value, void 0);\n}\n\nexport function Dsl_span(value) {\n    return new MarkdownParagraph(6, value, void 0);\n}\n\nexport function Dsl_op_BangBang(value) {\n    return new MarkdownSpan(0, value, void 0);\n}\n\nexport function Dsl_link(content, url) {\n    return new MarkdownSpan(5, content, url, void 0, void 0);\n}\n\nexport function Dsl_ul(value) {\n    return new MarkdownParagraph(4, new MarkdownListKind(1), value, void 0);\n}\n\nexport function Dsl_ol(value) {\n    return new MarkdownParagraph(4, new MarkdownListKind(0), value, void 0);\n}\n\nexport function Dsl_table(headers, alignments, rows) {\n    return new MarkdownParagraph(9, isEmpty(headers) ? (void 0) : headers, alignments, rows, void 0);\n}\n\nexport function Dsl_img(body, link) {\n    return new MarkdownSpan(7, body, link, void 0, void 0);\n}\n\nexport class MarkdownPatterns_SpanLeafInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"SL\"];\n    }\n}\n\nexport function MarkdownPatterns_SpanLeafInfo$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownPatterns.SpanLeafInfo\", [], MarkdownPatterns_SpanLeafInfo, () => [[[\"Item\", MarkdownSpan$reflection()]]]);\n}\n\nexport class MarkdownPatterns_SpanNodeInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"SN\"];\n    }\n}\n\nexport function MarkdownPatterns_SpanNodeInfo$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownPatterns.SpanNodeInfo\", [], MarkdownPatterns_SpanNodeInfo, () => [[[\"Item\", MarkdownSpan$reflection()]]]);\n}\n\nexport class MarkdownPatterns_ParagraphSpansInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"PS\"];\n    }\n}\n\nexport function MarkdownPatterns_ParagraphSpansInfo$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownPatterns.ParagraphSpansInfo\", [], MarkdownPatterns_ParagraphSpansInfo, () => [[[\"Item\", MarkdownParagraph$reflection()]]]);\n}\n\nexport class MarkdownPatterns_ParagraphLeafInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"PL\"];\n    }\n}\n\nexport function MarkdownPatterns_ParagraphLeafInfo$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownPatterns.ParagraphLeafInfo\", [], MarkdownPatterns_ParagraphLeafInfo, () => [[[\"Item\", MarkdownParagraph$reflection()]]]);\n}\n\nexport class MarkdownPatterns_ParagraphNestedInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"PN\"];\n    }\n}\n\nexport function MarkdownPatterns_ParagraphNestedInfo$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.MarkdownPatterns.ParagraphNestedInfo\", [], MarkdownPatterns_ParagraphNestedInfo, () => [[[\"Item\", MarkdownParagraph$reflection()]]]);\n}\n\nexport function MarkdownPatterns_$007CSpanLeaf$007CSpanNode$007C(span) {\n    let pattern_matching_result, spans;\n    switch (span.tag) {\n        case 4:\n        case 1:\n        case 7:\n        case 8:\n        case 10:\n        case 11:\n        case 12:\n        case 9: {\n            pattern_matching_result = 0;\n            break;\n        }\n        case 2: {\n            pattern_matching_result = 1;\n            spans = span.fields[0];\n            break;\n        }\n        case 3: {\n            pattern_matching_result = 1;\n            spans = span.fields[0];\n            break;\n        }\n        case 5: {\n            pattern_matching_result = 1;\n            spans = span.fields[0];\n            break;\n        }\n        case 6: {\n            pattern_matching_result = 1;\n            spans = span.fields[0];\n            break;\n        }\n        default: pattern_matching_result = 0}\n    switch (pattern_matching_result) {\n        case 0: {\n            return new FSharpChoice$2(0, new MarkdownPatterns_SpanLeafInfo(0, span));\n        }\n        case 1: {\n            return new FSharpChoice$2(1, [new MarkdownPatterns_SpanNodeInfo(0, span), spans]);\n        }\n    }\n}\n\nexport function MarkdownPatterns_SpanLeaf(_arg1) {\n    return _arg1.fields[0];\n}\n\nexport function MarkdownPatterns_SpanNode(_arg2, spans) {\n    const span = _arg2.fields[0];\n    switch (span.tag) {\n        case 2: {\n            return new MarkdownSpan(2, spans, span.fields[1]);\n        }\n        case 3: {\n            return new MarkdownSpan(3, spans, span.fields[1]);\n        }\n        case 5: {\n            return new MarkdownSpan(5, spans, span.fields[1], span.fields[2], span.fields[3]);\n        }\n        case 6: {\n            return new MarkdownSpan(6, spans, span.fields[1], span.fields[2], span.fields[3]);\n        }\n        default: {\n            throw (new Error(\"Incorrect SpanNodeInfo\\\\nParameter name: \"));\n        }\n    }\n}\n\nexport function MarkdownPatterns_$007CParagraphLeaf$007CParagraphNested$007CParagraphSpans$007C(par) {\n    let pattern_matching_result, spans;\n    switch (par.tag) {\n        case 1: {\n            pattern_matching_result = 0;\n            spans = par.fields[0];\n            break;\n        }\n        case 6: {\n            pattern_matching_result = 0;\n            spans = par.fields[0];\n            break;\n        }\n        case 10:\n        case 13:\n        case 2:\n        case 3:\n        case 11:\n        case 7:\n        case 12:\n        case 8: {\n            pattern_matching_result = 1;\n            break;\n        }\n        case 4: {\n            pattern_matching_result = 2;\n            break;\n        }\n        case 5: {\n            pattern_matching_result = 3;\n            break;\n        }\n        case 9: {\n            pattern_matching_result = 4;\n            break;\n        }\n        default: {\n            pattern_matching_result = 0;\n            spans = par.fields[1];\n        }\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return new FSharpChoice$3(2, [new MarkdownPatterns_ParagraphSpansInfo(0, par), spans]);\n        }\n        case 1: {\n            return new FSharpChoice$3(0, new MarkdownPatterns_ParagraphLeafInfo(0, par));\n        }\n        case 2: {\n            return new FSharpChoice$3(1, [new MarkdownPatterns_ParagraphNestedInfo(0, par), par.fields[1]]);\n        }\n        case 3: {\n            return new FSharpChoice$3(1, [new MarkdownPatterns_ParagraphNestedInfo(0, par), singleton(par.fields[0])]);\n        }\n        case 4: {\n            const rows = par.fields[2];\n            const headers = par.fields[0];\n            if (headers != null) {\n                return new FSharpChoice$3(1, [new MarkdownPatterns_ParagraphNestedInfo(0, par), concat(cons(headers, rows))]);\n            }\n            else {\n                return new FSharpChoice$3(1, [new MarkdownPatterns_ParagraphNestedInfo(0, par), concat(rows)]);\n            }\n        }\n    }\n}\n\nexport function MarkdownPatterns_ParagraphSpans(_arg3, spans) {\n    const par = _arg3.fields[0];\n    switch (par.tag) {\n        case 0: {\n            return new MarkdownParagraph(0, par.fields[0], spans, par.fields[2]);\n        }\n        case 1: {\n            return new MarkdownParagraph(1, spans, par.fields[1]);\n        }\n        case 6: {\n            return new MarkdownParagraph(6, spans, par.fields[1]);\n        }\n        default: {\n            throw (new Error(\"Incorrect ParagraphSpansInfo.\\\\nParameter name: \"));\n        }\n    }\n}\n\nexport function MarkdownPatterns_ParagraphLeaf(_arg4) {\n    return _arg4.fields[0];\n}\n\nexport function MarkdownPatterns_ParagraphNested(_arg5, pars) {\n    const par = _arg5.fields[0];\n    switch (par.tag) {\n        case 4: {\n            return new MarkdownParagraph(4, par.fields[0], pars, par.fields[2]);\n        }\n        case 5: {\n            return new MarkdownParagraph(5, concat(pars), par.fields[1]);\n        }\n        case 9: {\n            const r_2 = par.fields[3];\n            const alignments = par.fields[1];\n            let rows;\n            const n = length(alignments) | 0;\n            const loop = (n_1_mut, left_mut, ansList_mut, curList_mut, items_mut) => {\n                loop:\n                while (true) {\n                    const n_1 = n_1_mut, left = left_mut, ansList = ansList_mut, curList = curList_mut, items = items_mut;\n                    if (isEmpty(items) && isEmpty(curList)) {\n                        return reverse(ansList);\n                    }\n                    else if ((left === 0) ? true : isEmpty(items)) {\n                        n_1_mut = n_1;\n                        left_mut = n_1;\n                        ansList_mut = cons(reverse(curList), ansList);\n                        curList_mut = empty();\n                        items_mut = items;\n                        continue loop;\n                    }\n                    else {\n                        n_1_mut = n_1;\n                        left_mut = (left - 1);\n                        ansList_mut = ansList;\n                        curList_mut = cons(head(items), curList);\n                        items_mut = tail(items);\n                        continue loop;\n                    }\n                    break;\n                }\n            };\n            rows = loop(n, n, empty(), empty(), pars);\n            if (isEmpty(rows) ? true : (par.fields[0] == null)) {\n                return new MarkdownParagraph(9, void 0, alignments, rows, r_2);\n            }\n            else {\n                return new MarkdownParagraph(9, head(rows), alignments, tail(rows), r_2);\n            }\n        }\n        default: {\n            throw (new Error(\"Incorrect ParagraphNestedInfo.\\\\nParameter name: \"));\n        }\n    }\n}\n\n","import * as Unicode from \"./Unicode.13.0.0.js\";\nfunction getCategoryFunc() {\n    // unpack Unicode codepoint ranges (delta encoded) and general categories\n    const offset = 35; // offsets unprintable characters\n    const a1 = [...Unicode.rangeDeltas].map((ch) => { var _a; return ((_a = ch.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) - offset; });\n    const a2 = [...Unicode.categories].map((ch) => { var _a; return ((_a = ch.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) - offset; });\n    const codepoints = new Uint32Array(a1);\n    const categories = new Uint8Array(a2);\n    for (let i = 1; i < codepoints.length; ++i) {\n        codepoints[i] += codepoints[i - 1];\n    }\n    // binary search in unicode ranges\n    return (cp) => {\n        let hi = codepoints.length;\n        let lo = 0;\n        while (hi - lo > 1) {\n            const mid = Math.floor((hi + lo) / 2);\n            const test = codepoints[mid];\n            if (cp < test) {\n                hi = mid;\n            }\n            else if (cp === test) {\n                hi = lo = mid;\n                break;\n            }\n            else if (test < cp) {\n                lo = mid;\n            }\n        }\n        return categories[lo];\n    };\n}\nconst isControlMask = 1 << 14 /* Control */;\nconst isDigitMask = 1 << 8 /* DecimalDigitNumber */;\nconst isLetterMask = 0\n    | 1 << 0 /* UppercaseLetter */\n    | 1 << 1 /* LowercaseLetter */\n    | 1 << 2 /* TitlecaseLetter */\n    | 1 << 3 /* ModifierLetter */\n    | 1 << 4 /* OtherLetter */;\nconst isLetterOrDigitMask = isLetterMask | isDigitMask;\nconst isUpperMask = 1 << 0 /* UppercaseLetter */;\nconst isLowerMask = 1 << 1 /* LowercaseLetter */;\nconst isNumberMask = 0\n    | 1 << 8 /* DecimalDigitNumber */\n    | 1 << 9 /* LetterNumber */\n    | 1 << 10 /* OtherNumber */;\nconst isPunctuationMask = 0\n    | 1 << 18 /* ConnectorPunctuation */\n    | 1 << 19 /* DashPunctuation */\n    | 1 << 20 /* OpenPunctuation */\n    | 1 << 21 /* ClosePunctuation */\n    | 1 << 22 /* InitialQuotePunctuation */\n    | 1 << 23 /* FinalQuotePunctuation */\n    | 1 << 24 /* OtherPunctuation */;\nconst isSeparatorMask = 0\n    | 1 << 11 /* SpaceSeparator */\n    | 1 << 12 /* LineSeparator */\n    | 1 << 13 /* ParagraphSeparator */;\nconst isSymbolMask = 0\n    | 1 << 25 /* MathSymbol */\n    | 1 << 26 /* CurrencySymbol */\n    | 1 << 27 /* ModifierSymbol */\n    | 1 << 28 /* OtherSymbol */;\nconst isWhiteSpaceMask = 0\n    | 1 << 11 /* SpaceSeparator */\n    | 1 << 12 /* LineSeparator */\n    | 1 << 13 /* ParagraphSeparator */;\nconst unicodeCategoryFunc = getCategoryFunc();\nfunction charCodeAt(s, index) {\n    if (index >= 0 && index < s.length) {\n        return s.charCodeAt(index);\n    }\n    else {\n        throw new Error(\"Index out of range.\");\n    }\n}\nexport const getUnicodeCategory = (s) => getUnicodeCategory2(s, 0);\nexport const isControl = (s) => isControl2(s, 0);\nexport const isDigit = (s) => isDigit2(s, 0);\nexport const isLetter = (s) => isLetter2(s, 0);\nexport const isLetterOrDigit = (s) => isLetterOrDigit2(s, 0);\nexport const isUpper = (s) => isUpper2(s, 0);\nexport const isLower = (s) => isLower2(s, 0);\nexport const isNumber = (s) => isNumber2(s, 0);\nexport const isPunctuation = (s) => isPunctuation2(s, 0);\nexport const isSeparator = (s) => isSeparator2(s, 0);\nexport const isSymbol = (s) => isSymbol2(s, 0);\nexport const isWhiteSpace = (s) => isWhiteSpace2(s, 0);\nexport const isHighSurrogate = (s) => isHighSurrogate2(s, 0);\nexport const isLowSurrogate = (s) => isLowSurrogate2(s, 0);\nexport const isSurrogate = (s) => isSurrogate2(s, 0);\nexport function getUnicodeCategory2(s, index) {\n    const cp = charCodeAt(s, index);\n    return unicodeCategoryFunc(cp);\n}\nexport function isControl2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isControlMask) !== 0;\n}\nexport function isDigit2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isDigitMask) !== 0;\n}\nexport function isLetter2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isLetterMask) !== 0;\n}\nexport function isLetterOrDigit2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isLetterOrDigitMask) !== 0;\n}\nexport function isUpper2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isUpperMask) !== 0;\n}\nexport function isLower2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isLowerMask) !== 0;\n}\nexport function isNumber2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isNumberMask) !== 0;\n}\nexport function isPunctuation2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isPunctuationMask) !== 0;\n}\nexport function isSeparator2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isSeparatorMask) !== 0;\n}\nexport function isSymbol2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    return (test & isSymbolMask) !== 0;\n}\nexport function isWhiteSpace2(s, index) {\n    const test = 1 << getUnicodeCategory2(s, index);\n    if ((test & isWhiteSpaceMask) !== 0) {\n        return true;\n    }\n    const cp = charCodeAt(s, index);\n    return (0x09 <= cp && cp <= 0x0D) || cp === 0x85 || cp === 0xA0;\n}\nexport function isHighSurrogate2(s, index) {\n    const cp = charCodeAt(s, index);\n    return (0xD800 <= cp && cp <= 0xDBFF);\n}\nexport function isLowSurrogate2(s, index) {\n    const cp = charCodeAt(s, index);\n    return (0xDC00 <= cp && cp <= 0xDFFF);\n}\nexport function isSurrogate2(s, index) {\n    const cp = charCodeAt(s, index);\n    return (0xD800 <= cp && cp <= 0xDFFF);\n}\nexport function isSurrogatePair(s, index) {\n    return typeof index === \"number\"\n        ? isHighSurrogate2(s, index) && isLowSurrogate2(s, index + 1)\n        : isHighSurrogate(s) && isLowSurrogate(index);\n}\nexport function parse(input) {\n    if (input.length === 1) {\n        return input[0];\n    }\n    else {\n        throw new Error(\"String must be exactly one character long.\");\n    }\n}\n","// Unicode 13.0.0 codepoint ranges (delta encoded) and general categories.\n// Integer delta values are offset by 35 and stored as Unicode characters.\nexport const rangeDeltas = \"#C$&$&$$$$$$%-%&%=$$$$$$=$$$$D$$'$$$$$$$$$$$$%$$%$$$$&$:$*;$+$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%$$$$$$$$$$$$$$$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%$$$$&%$$$%$&%'$%$&&%$%$$$$$%$$%$$%$&$$$%%$$&'$$$$$$$$$$$$$$$$$$$$$$$$%$$$$$$$$$$$$$$$$$%$$$$$&$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*%$%%$$'$$$$$$$$h$>5'/1(*$$$4$$$$$$$$%$&$$'%$$&$$$%$4$,F$%&&$$$$$$$$$$$$$$$$$$$$$$$($$$$$%%VS$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$(%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%$$$$$$$$$$$$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$I%$)L$$%%$$P$$$%$%$$+>''%.)&%$%%.$$$%C$-8-'%$$$*$$)%%$'%-&%$1$$$$A>%|Ŭ$'%*$$$'%L$'%D$'%*$$$'%2$\\\\$'%f%&,7&3-)y%)%$ʏ$$4$=$$&n&&+*0$'&.5&%,5%/0$&$%/W%$*+$%.&$&$$$%-)-))$'&$$-)F$X*(%E$$(i-B$&'%&'%$)&'$&%-A%(.O'=)-$&E:%%$%%X$$$*$$$$%+)-%$-)-)*$)%1$%b'$R$$($$($%*'-*-,,&%$A$'%%$&%-O$$%&$$&%+'G++%%&(-&&-A)%,*N%&++&$0$*'$)$%$%$(Ob0$EH]$($$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$,$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$,+)%)%++++)%)%+$$$$$$$$++1%++++++($%'$$$&&$%'$&'%%'$&+(&%&$%'$%$.()%$$$%$$$+$$($,$$'%&$$$.$$$-$($-$$%)&$$$-&$$$0&C30'$&/2%$'$%$&%&$$$%$()$$$$$$'$$'$'$%%%($'$$%$$3F$$'$%'((%'$%$%$*$B%%$$$Bį+$$$$7%*$$t$A<K)h<.8_q9Ú$,$Y+$ě$$$$$$$$$$$$$$AO($$B$$$$$$$$$$3ģ¦$$$$$$$$$$$$$$$$$$$$$$b$$$$C$$ĥS8%)J%C$R$R$$$&%$$$$$$'$$%$)%&$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%)$$$$&$$('$%I$$($%[*$$1$:,*$*$*$*$*$*$*$*$C%$$$$&$$$$$,$%$$$$%$$$$$$$$$$($-%'$$$0%$P=$|/ù=/'$&$$$$$$$$$$$$$$%$$$$$$$$$$%$,'%$(%&$$$%$y%%%%$$}$&$(N$$%'-CG/3B$-A+$2C-J2ţ᧣c删&8$Қ&Z,K)%į$&3-%7$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&$-$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%i-%)+:,%$$$$$$$$$$$$$&$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$+$$$$%$$$$$$$$$$%$$$$$$$$&$$$$$$$$$$$$$$$$$$$$($($$$$$$$$$$$%$$'$$$M$$$%$*$&$'$:%%$'$&)%$$)W'+%U3%+%-)5)&$$%$-?+%:.%.$@&&$R$%'%%&0$$-'%($$,-($L)%%%%,&$+$$%-%'3$)&$$$$U$$&%%(%$$$;%$%.$%%%$%$$-)%)%),*$*$N$',$%'sF%$%$%$$$%-)⯇/:'T'ࠣᤣƑ%I*/(($$-$0$($$$%$%$34Ǝ$$3c%YK/$$%3*$$$)3$%%$$$$$$$$$$$$$$$$%$$'&&$'$$$$$$$&$$&$$$%'($ª%$$&$&$$$$$$%-%&%=$$$$$$=$$$$$$$$$%-$P%B&)%)%)%&&%$$$%$$'%-&%%/$=$6$%$2%1E(&'P&,X'4%&$0&$RP$¥@&T2$>'C',7$+$(I((A$$G'+$(MKKq%-)G'G'K+W.$³Ś,9-+»)%$$O$%&$%:$$+:%*B+,S6$%((9)&$=($c['%%3%Q$&$%(''$&$@%&'$,*,*@%$@&C+$?%'(*,Y&*9%+6(+5*'/*slZV0V*)G'+-ŉB$M$%$%%q@-$+9.'(y8*7:,$$$X2*'7-2&$P&'%%%$'.$%<*-)&G($+$-'$%$+F$%$,%$S&,%'''$$$-$$$&$7.5$<&&%$$%)$d*$$$'$2$-$)R$&+(-)%%$+%%%9$*$%$($%$%$'%%%&%$)$((%%*&(®X&+%&$$'(-%$$$&AS&)$$'%$%%$$+-ÉR&'%'%$%:'%ES&+%$$%&$.-)06N$$$%)$$$*-Y>%&%'$('-%&$ãO&,$%$CC-,/+%$%+$%$;)$%%%$$$$$$$&,-i+%J&'%%'$$$$$>$-K)$$'+$+$)%&Q0$%&$(@\\\\Ī,$H$*$)$$$(--6&%A%9$$*$%$%l*$%$I)&$$%$*$$+-))$%$C($%$%$$$$*-ř6%%%Ú$28+'40$ν$(.ç૟ђ$,࿪ɪ⇜ɜ*B$-'%A%($-S*(''$$--$*$8(6˓CC:'n'$$Z*'0c%$$$.%1᠛+ӹM,⌚łT&4'+Ưध(0&,*-%$%$'፿ę-J%_%&&)++%*A'^:e&$½7/z,<ª===*$5==$$%%$%%%'$+'$$$*$.==%$'%+$*$=%$'$($$&*$============?%<$<$)<$<$)<$<$)<$<$)<$<$)$$%UȣZ'U+$1$%(2($2ճ*$4%*$%$(øP&**%-'$$ƓO'-($ԣè%,*LEE*$'-'%̴^$&$'oP$2å'$>$%$$%$$-$'$$$$)$'$$$$$$&$%$$%$$$$$$$$$$%$$%'$*$'$'$$$-$4(&$($4W%ıO'/2%2$2$H-0Ä[@0O',*%1)½Ğ(˻+0&0&/|*/7/'[+-)K+A%%q$u$ª/1%(&&(*,<**,&0*L¶$ZH-Щ꜁Eၘ.ā%ᚥ1ᵔూɁ؅፮򮳙$A£ē︳𐀡%𐀡\";\nexport const categoriesn","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : ((!stepGreaterThanZero) && (comparedWithLast >= 0))) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), (x, y) => op_Addition(x, y));\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), (x, y) => op_Addition_1(x, y));\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { Lines_$007CTrimParagraphLines$007C, StringPosition_$007CStartsWithWrapped$007C_$007C, Lines_$007CTrimBlankStart$007C, StringPosition_$007CStartsWith$007C_$007C, StringPosition_$007CStartsAndEndsWith$007C_$007C, StringPosition_$007CUnindented$007C_$007C, StringPosition_$007CWhiteSpace$007C_$007C, StringPosition_$007CStartsWithAny$007C_$007C, StringPosition_$007CTrimStartAndCount$007C, $007CLet$007C, StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C, Lines_$007CTrimBlank$007C, Lines_$007CTakeCodeBlock$007C_$007C, StringPosition_$007CEqualsRepeated$007C_$007C, StringPosition_$007CTrimEnd$007C, StringPosition_$007CStartsWithRepeated$007C_$007C, List_$007CAsString$007C, List_$007CBracketDelimited$007C_$007C, StringPosition_$007CTrimBoth$007C } from \"./StringParsing.fs.js\";\nimport { printf, toFail, join, split, isNullOrWhiteSpace, replicate, getCharAtIndex, endsWith, isNullOrEmpty, trimStart, trimEnd, substring } from \"../fable-library.3.6.3/String.js\";\nimport { zip, replicate as replicate_1, forAll as forAll_1, choose, skipWhile, map, takeWhile, initialize, ofSeq, append as append_1, splitAt, toArray, singleton, ofArray, length, skip, empty, cons, reverse, ofArrayWithTail, tail, head, isEmpty } from \"../fable-library.3.6.3/List.js\";\nimport { exists, empty as empty_1, toArray as toArray_1, take, tryFind, collect, toList, forAll, singleton as singleton_1, append, delay, tryPick } from \"../fable-library.3.6.3/Seq.js\";\nimport { List_nestUnderLastMatching, Tree$1, Tree_ofIndentedList, List_partitionWhileLookahead, List_partitionUntilLookahead, List_partitionUntil, List_partitionWhile, List_partitionUntilEquals } from \"./Collections.fs.js\";\nimport { MarkdownParagraph, MarkdownColumnAlignment, MarkdownListKind, MarkdownSpan } from \"./MarkdownModel.fs.js\";\nimport { create, match } from \"../fable-library.3.6.3/RegExp.js\";\nimport { FSharpRef, Record } from \"../fable-library.3.6.3/Types.js\";\nimport { record_type, enum_type, int32_type, bool_type, class_type, tuple_type, option_type, string_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { MarkdownRangeModule_mergeRanges, MarkdownRangeModule_zero, MarkdownRange, MarkdownRange$reflection } from \"./Range.fs.js\";\nimport { equals, Lazy } from \"../fable-library.3.6.3/Util.js\";\nimport { isDigit, isWhiteSpace } from \"../fable-library.3.6.3/Char.js\";\nimport { map as map_1 } from \"../fable-library.3.6.3/Array.js\";\nimport { some, value as value_14 } from \"../fable-library.3.6.3/Option.js\";\nimport { rangeDouble } from \"../fable-library.3.6.3/Range.js\";\nimport { addToDict } from \"../fable-library.3.6.3/MapUtil.js\";\n\nexport function getLinkAndTitle(_arg1_0, _arg1_1) {\n    const _arg1 = [_arg1_0, _arg1_1];\n    const input = StringPosition_$007CTrimBoth$007C(_arg1[0], _arg1[1])[0];\n    let patternInput;\n    if (input.length === 0) {\n        patternInput = [\"\", void 0];\n    }\n    else {\n        const c = input[input.length - 1];\n        if ((c === \"\\u0027\") ? true : (c === \"\\\"\")) {\n            const start = input.indexOf(c) | 0;\n            patternInput = [substring(input, 0, start).trim(), substring(input, start + 1, (input.length - 2) - start).trim()];\n        }\n        else {\n            patternInput = [input, void 0];\n        }\n    }\n    return [trimEnd(trimStart(patternInput[0], \"\\u003c\"), \"\\u003e\"), patternInput[1]];\n}\n\nexport function $007CDelimitedMarkdown$007C_$007C(bracket, input) {\n    let loop_2;\n    const loop = (acc_mut, _arg1_mut) => {\n        let loop_1;\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            let activePatternResult1887;\n            const input_1 = _arg1;\n            let pattern_matching_result, c, rest;\n            if (!isEmpty(input_1)) {\n                if (head(input_1) === \"\\\\\") {\n                    if (!isEmpty(tail(input_1))) {\n                        if (head(tail(input_1)) === \"!\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"#\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"$\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"(\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \")\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"*\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"+\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"-\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \".\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"\\u003e\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"[\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"\\\\\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"]\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"_\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"`\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"{\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else if (head(tail(input_1)) === \"}\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    activePatternResult1887 = [c, rest];\n                    break;\n                }\n                case 1: {\n                    activePatternResult1887 = (void 0);\n                    break;\n                }\n            }\n            if (activePatternResult1887 != null) {\n                const x = activePatternResult1887[0];\n                const xs = activePatternResult1887[1];\n                acc_mut = ofArrayWithTail([x, \"\\\\\"], acc);\n                _arg1_mut = xs;\n                continue loop;\n            }\n            else if ((loop_1 = ((start_1_mut, list_1_mut) => {\n                loop_1:\n                while (true) {\n                    const start_1 = start_1_mut, list_1 = list_1_mut;\n                    const matchValue = [start_1, list_1];\n                    let pattern_matching_result_1, x_2, xs_2, y_1, ys_1;\n                    if (!isEmpty(matchValue[0])) {\n                        if (!isEmpty(matchValue[1])) {\n                            if (head(matchValue[0]) === head(matchValue[1])) {\n                                pattern_matching_result_1 = 0;\n                                x_2 = head(matchValue[0]);\n                                xs_2 = tail(matchValue[0]);\n                                y_1 = head(matchValue[1]);\n                                ys_1 = tail(matchValue[1]);\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            start_1_mut = xs_2;\n                            list_1_mut = ys_1;\n                            continue loop_1;\n                        }\n                        case 1: {\n                            if (isEmpty(matchValue[0])) {\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }), loop_1(bracket, _arg1))) {\n                return [reverse(acc), _arg1];\n            }\n            else if (isEmpty(_arg1)) {\n                return void 0;\n            }\n            else {\n                acc_mut = cons(head(_arg1), acc);\n                _arg1_mut = tail(_arg1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    if ((loop_2 = ((start_3_mut, list_3_mut) => {\n        loop_2:\n        while (true) {\n            const start_3 = start_3_mut, list_3 = list_3_mut;\n            const matchValue_1 = [start_3, list_3];\n            let pattern_matching_result_2, x_5, xs_5, y_3, ys_3;\n            if (!isEmpty(matchValue_1[0])) {\n                if (!isEmpty(matchValue_1[1])) {\n                    if (head(matchValue_1[0]) === head(matchValue_1[1])) {\n                        pattern_matching_result_2 = 0;\n                        x_5 = head(matchValue_1[0]);\n                        xs_5 = tail(matchValue_1[0]);\n                        y_3 = head(matchValue_1[1]);\n                        ys_3 = tail(matchValue_1[1]);\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_2 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_2 = 1;\n            }\n            switch (pattern_matching_result_2) {\n                case 0: {\n                    start_3_mut = xs_5;\n                    list_3_mut = ys_3;\n                    continue loop_2;\n                }\n                case 1: {\n                    if (isEmpty(matchValue_1[0])) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n            }\n            break;\n        }\n    }), loop_2(bracket, input))) {\n        const matchValue_2 = loop(empty(), skip(length(bracket), input));\n        if (matchValue_2 == null) {\n            return void 0;\n        }\n        else {\n            const post = matchValue_2[1];\n            return [matchValue_2[0], skip(length(bracket), post)];\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CDelimitedLatexDisplayMath$007C_$007C(bracket, input) {\n    let loop_2;\n    const loop = (acc_mut, _arg1_mut) => {\n        let loop_1;\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            let activePatternResult1892;\n            const input_1 = _arg1;\n            let pattern_matching_result, c, rest;\n            if (!isEmpty(input_1)) {\n                if (head(input_1) === \"\\\\\") {\n                    if (!isEmpty(tail(input_1))) {\n                        if (head(tail(input_1)) === \"$\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    activePatternResult1892 = [c, rest];\n                    break;\n                }\n                case 1: {\n                    activePatternResult1892 = (void 0);\n                    break;\n                }\n            }\n            if (activePatternResult1892 != null) {\n                const x = activePatternResult1892[0];\n                const xs = activePatternResult1892[1];\n                acc_mut = ofArrayWithTail([x, \"\\\\\"], acc);\n                _arg1_mut = xs;\n                continue loop;\n            }\n            else if ((loop_1 = ((start_1_mut, list_1_mut) => {\n                loop_1:\n                while (true) {\n                    const start_1 = start_1_mut, list_1 = list_1_mut;\n                    const matchValue = [start_1, list_1];\n                    let pattern_matching_result_1, x_2, xs_2, y_1, ys_1;\n                    if (!isEmpty(matchValue[0])) {\n                        if (!isEmpty(matchValue[1])) {\n                            if (head(matchValue[0]) === head(matchValue[1])) {\n                                pattern_matching_result_1 = 0;\n                                x_2 = head(matchValue[0]);\n                                xs_2 = tail(matchValue[0]);\n                                y_1 = head(matchValue[1]);\n                                ys_1 = tail(matchValue[1]);\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            start_1_mut = xs_2;\n                            list_1_mut = ys_1;\n                            continue loop_1;\n                        }\n                        case 1: {\n                            if (isEmpty(matchValue[0])) {\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }), loop_1(bracket, _arg1))) {\n                return [reverse(acc), _arg1];\n            }\n            else if (isEmpty(_arg1)) {\n                return void 0;\n            }\n            else {\n                acc_mut = cons(head(_arg1), acc);\n                _arg1_mut = tail(_arg1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    if ((loop_2 = ((start_3_mut, list_3_mut) => {\n        loop_2:\n        while (true) {\n            const start_3 = start_3_mut, list_3 = list_3_mut;\n            const matchValue_1 = [start_3, list_3];\n            let pattern_matching_result_2, x_5, xs_5, y_3, ys_3;\n            if (!isEmpty(matchValue_1[0])) {\n                if (!isEmpty(matchValue_1[1])) {\n                    if (head(matchValue_1[0]) === head(matchValue_1[1])) {\n                        pattern_matching_result_2 = 0;\n                        x_5 = head(matchValue_1[0]);\n                        xs_5 = tail(matchValue_1[0]);\n                        y_3 = head(matchValue_1[1]);\n                        ys_3 = tail(matchValue_1[1]);\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_2 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_2 = 1;\n            }\n            switch (pattern_matching_result_2) {\n                case 0: {\n                    start_3_mut = xs_5;\n                    list_3_mut = ys_3;\n                    continue loop_2;\n                }\n                case 1: {\n                    if (isEmpty(matchValue_1[0])) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n            }\n            break;\n        }\n    }), loop_2(bracket, input))) {\n        const matchValue_2 = loop(empty(), skip(length(bracket), input));\n        if (matchValue_2 == null) {\n            return void 0;\n        }\n        else {\n            const post = matchValue_2[1];\n            return [matchValue_2[0], skip(length(bracket), post)];\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CDelimitedLatexInlineMath$007C_$007C(bracket, input) {\n    let loop_2;\n    const loop = (acc_mut, _arg1_mut) => {\n        let loop_1;\n        loop:\n        while (true) {\n            const acc = acc_mut, _arg1 = _arg1_mut;\n            let activePatternResult1897;\n            const input_1 = _arg1;\n            let pattern_matching_result, c, rest;\n            if (!isEmpty(input_1)) {\n                if (head(input_1) === \"\\\\\") {\n                    if (!isEmpty(tail(input_1))) {\n                        if (head(tail(input_1)) === \"$\") {\n                            pattern_matching_result = 0;\n                            c = head(tail(input_1));\n                            rest = tail(tail(input_1));\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    activePatternResult1897 = [c, rest];\n                    break;\n                }\n                case 1: {\n                    activePatternResult1897 = (void 0);\n                    break;\n                }\n            }\n            if (activePatternResult1897 != null) {\n                const x = activePatternResult1897[0];\n                const xs = activePatternResult1897[1];\n                acc_mut = ofArrayWithTail([x, \"\\\\\"], acc);\n                _arg1_mut = xs;\n                continue loop;\n            }\n            else if ((loop_1 = ((start_1_mut, list_1_mut) => {\n                loop_1:\n                while (true) {\n                    const start_1 = start_1_mut, list_1 = list_1_mut;\n                    const matchValue = [start_1, list_1];\n                    let pattern_matching_result_1, x_2, xs_2, y_1, ys_1;\n                    if (!isEmpty(matchValue[0])) {\n                        if (!isEmpty(matchValue[1])) {\n                            if (head(matchValue[0]) === head(matchValue[1])) {\n                                pattern_matching_result_1 = 0;\n                                x_2 = head(matchValue[0]);\n                                xs_2 = tail(matchValue[0]);\n                                y_1 = head(matchValue[1]);\n                                ys_1 = tail(matchValue[1]);\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            start_1_mut = xs_2;\n                            list_1_mut = ys_1;\n                            continue loop_1;\n                        }\n                        case 1: {\n                            if (isEmpty(matchValue[0])) {\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }), loop_1(bracket, _arg1))) {\n                return [reverse(acc), _arg1];\n            }\n            else if (isEmpty(_arg1)) {\n                return void 0;\n            }\n            else {\n                acc_mut = cons(head(_arg1), acc);\n                _arg1_mut = tail(_arg1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    if ((loop_2 = ((start_3_mut, list_3_mut) => {\n        loop_2:\n        while (true) {\n            const start_3 = start_3_mut, list_3 = list_3_mut;\n            const matchValue_1 = [start_3, list_3];\n            let pattern_matching_result_2, x_5, xs_5, y_3, ys_3;\n            if (!isEmpty(matchValue_1[0])) {\n                if (!isEmpty(matchValue_1[1])) {\n                    if (head(matchValue_1[0]) === head(matchValue_1[1])) {\n                        pattern_matching_result_2 = 0;\n                        x_5 = head(matchValue_1[0]);\n                        xs_5 = tail(matchValue_1[0]);\n                        y_3 = head(matchValue_1[1]);\n                        ys_3 = tail(matchValue_1[1]);\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_2 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_2 = 1;\n            }\n            switch (pattern_matching_result_2) {\n                case 0: {\n                    start_3_mut = xs_5;\n                    list_3_mut = ys_3;\n                    continue loop_2;\n                }\n                case 1: {\n                    if (isEmpty(matchValue_1[0])) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n            }\n            break;\n        }\n    }), loop_2(bracket, input))) {\n        const matchValue_2 = loop(empty(), skip(length(bracket), input));\n        if (matchValue_2 == null) {\n            return void 0;\n        }\n        else {\n            const post = matchValue_2[1];\n            return [matchValue_2[0], skip(length(bracket), post)];\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CIndirectLink$007C_$007C(_arg1) {\n    let pattern_matching_result, body, link, rest;\n    const activePatternResult1917 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", _arg1);\n    if (activePatternResult1917 != null) {\n        if (!isEmpty(activePatternResult1917[1])) {\n            if (head(activePatternResult1917[1]) === \"\\r\") {\n                if (!isEmpty(tail(activePatternResult1917[1]))) {\n                    if (head(tail(activePatternResult1917[1])) === \"\\n\") {\n                        const activePatternResult1919 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", tail(tail(activePatternResult1917[1])));\n                        if (activePatternResult1919 != null) {\n                            const activePatternResult1920 = List_$007CAsString$007C(activePatternResult1919[0]);\n                            pattern_matching_result = 0;\n                            body = activePatternResult1917[0];\n                            link = activePatternResult1920;\n                            rest = activePatternResult1919[1];\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [body, link, (\"\\r\\n[\" + link) + \"]\", rest];\n        }\n        case 1: {\n            let pattern_matching_result_1, body_1, c, link_1, rest_1;\n            const activePatternResult1910 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", _arg1);\n            if (activePatternResult1910 != null) {\n                if (!isEmpty(activePatternResult1910[1])) {\n                    if (head(activePatternResult1910[1]) === \"\\n\") {\n                        const activePatternResult1914 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", tail(activePatternResult1910[1]));\n                        if (activePatternResult1914 != null) {\n                            const activePatternResult1915 = List_$007CAsString$007C(activePatternResult1914[0]);\n                            pattern_matching_result_1 = 0;\n                            body_1 = activePatternResult1910[0];\n                            c = head(activePatternResult1910[1]);\n                            link_1 = activePatternResult1915;\n                            rest_1 = activePatternResult1914[1];\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else if (head(activePatternResult1910[1]) === \" \") {\n                        const activePatternResult1912 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", tail(activePatternResult1910[1]));\n                        if (activePatternResult1912 != null) {\n                            const activePatternResult1913 = List_$007CAsString$007C(activePatternResult1912[0]);\n                            pattern_matching_result_1 = 0;\n                            body_1 = activePatternResult1910[0];\n                            c = head(activePatternResult1910[1]);\n                            link_1 = activePatternResult1913;\n                            rest_1 = activePatternResult1912[1];\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    return [body_1, link_1, ((c + \"[\") + link_1) + \"]\", rest_1];\n                }\n                case 1: {\n                    let pattern_matching_result_2, body_2, link_2, rest_2;\n                    const activePatternResult1905 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", _arg1);\n                    if (activePatternResult1905 != null) {\n                        const activePatternResult1907 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", activePatternResult1905[1]);\n                        if (activePatternResult1907 != null) {\n                            const activePatternResult1908 = List_$007CAsString$007C(activePatternResult1907[0]);\n                            pattern_matching_result_2 = 0;\n                            body_2 = activePatternResult1905[0];\n                            link_2 = activePatternResult1908;\n                            rest_2 = activePatternResult1907[1];\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            return [body_2, link_2, (\"[\" + link_2) + \"]\", rest_2];\n                        }\n                        case 1: {\n                            const activePatternResult1903 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", _arg1);\n                            if (activePatternResult1903 != null) {\n                                const body_3 = activePatternResult1903[0];\n                                const rest_3 = activePatternResult1903[1];\n                                return [body_3, \"\", \"\", rest_3];\n                            }\n                            else {\n                                return void 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function $007CDirectLink$007C_$007C(_arg1) {\n    let pattern_matching_result, body, link, rest;\n    const activePatternResult1923 = List_$007CBracketDelimited$007C_$007C(\"[\", \"]\", _arg1);\n    if (activePatternResult1923 != null) {\n        const activePatternResult1925 = List_$007CBracketDelimited$007C_$007C(\"(\", \")\", activePatternResult1923[1]);\n        if (activePatternResult1925 != null) {\n            pattern_matching_result = 0;\n            body = activePatternResult1923[0];\n            link = activePatternResult1925[0];\n            rest = activePatternResult1925[1];\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [body, link, rest];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CAutoLink$007C_$007C(input) {\n    return tryPick((scheme) => {\n        let loop, loop_1;\n        const prefix = ofArray(scheme.split(\"\"));\n        let activePatternResult1931;\n        const startl = prefix;\n        const endl = singleton(\" \");\n        const input_1 = input;\n        if ((loop = ((start_1_mut, list_1_mut) => {\n            loop:\n            while (true) {\n                const start_1 = start_1_mut, list_1 = list_1_mut;\n                const matchValue = [start_1, list_1];\n                let pattern_matching_result, x_1, xs_1, y_1, ys_1;\n                if (!isEmpty(matchValue[0])) {\n                    if (!isEmpty(matchValue[1])) {\n                        if (head(matchValue[0]) === head(matchValue[1])) {\n                            pattern_matching_result = 0;\n                            x_1 = head(matchValue[0]);\n                            xs_1 = tail(matchValue[0]);\n                            y_1 = head(matchValue[1]);\n                            ys_1 = tail(matchValue[1]);\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        start_1_mut = xs_1;\n                        list_1_mut = ys_1;\n                        continue loop;\n                    }\n                    case 1: {\n                        if (isEmpty(matchValue[0])) {\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    }\n                }\n                break;\n            }\n        }), loop(startl, input_1))) {\n            const matchValue_1 = List_partitionUntilEquals(endl, skip(length(startl), input_1));\n            if (matchValue_1 == null) {\n                activePatternResult1931 = (void 0);\n            }\n            else {\n                const post = matchValue_1[1];\n                activePatternResult1931 = [matchValue_1[0], skip(length(endl), post), length(startl), length(endl)];\n            }\n        }\n        else {\n            activePatternResult1931 = (void 0);\n        }\n        if (activePatternResult1931 != null) {\n            const activePatternResult1932 = List_$007CAsString$007C(activePatternResult1931[0]);\n            const _e = activePatternResult1931[3] | 0;\n            const _s = activePatternResult1931[2] | 0;\n            const rest = activePatternResult1931[1];\n            return [scheme + activePatternResult1932, cons(\" \", rest)];\n        }\n        else {\n            let activePatternResult1928;\n            const input_2 = input;\n            activePatternResult1928 = (((loop_1 = ((start_3_mut, list_3_mut) => {\n                loop_1:\n                while (true) {\n                    const start_3 = start_3_mut, list_3 = list_3_mut;\n                    const matchValue_2 = [start_3, list_3];\n                    let pattern_matching_result_1, x_3, xs_3, y_3, ys_3;\n                    if (!isEmpty(matchValue_2[0])) {\n                        if (!isEmpty(matchValue_2[1])) {\n                            if (head(matchValue_2[0]) === head(matchValue_2[1])) {\n                                pattern_matching_result_1 = 0;\n                                x_3 = head(matchValue_2[0]);\n                                xs_3 = tail(matchValue_2[0]);\n                                y_3 = head(matchValue_2[1]);\n                                ys_3 = tail(matchValue_2[1]);\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            start_3_mut = xs_3;\n                            list_3_mut = ys_3;\n                            continue loop_1;\n                        }\n                        case 1: {\n                            if (isEmpty(matchValue_2[0])) {\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }), loop_1(prefix, input_2))) ? input_2 : (void 0));\n            if (activePatternResult1928 != null) {\n                const activePatternResult1929 = List_$007CAsString$007C(activePatternResult1928);\n                return [activePatternResult1929, empty()];\n            }\n            else {\n                return void 0;\n            }\n        }\n    }, [\"http://\", \"https://\"]);\n}\n\nexport function $007CEmphasised$007C_$007C(_arg1) {\n    let pattern_matching_result, _tail, input;\n    if (!isEmpty(_arg1)) {\n        if (head(_arg1) === \"*\") {\n            pattern_matching_result = 0;\n            _tail = tail(_arg1);\n            input = _arg1;\n        }\n        else if (head(_arg1) === \"_\") {\n            pattern_matching_result = 0;\n            _tail = tail(_arg1);\n            input = _arg1;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            let pattern_matching_result_1, body, rest;\n            const activePatternResult1949 = $007CDelimitedMarkdown$007C_$007C(ofArray([\"_\", \"_\", \"_\"]), input);\n            if (activePatternResult1949 != null) {\n                pattern_matching_result_1 = 0;\n                body = activePatternResult1949[0];\n                rest = activePatternResult1949[1];\n            }\n            else {\n                const activePatternResult1950 = $007CDelimitedMarkdown$007C_$007C(ofArray([\"*\", \"*\", \"*\"]), input);\n                if (activePatternResult1950 != null) {\n                    pattern_matching_result_1 = 0;\n                    body = activePatternResult1950[0];\n                    rest = activePatternResult1950[1];\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    return [body, (arg_1) => {\n                        let tupledArg;\n                        return new MarkdownSpan(2, singleton((tupledArg = arg_1, new MarkdownSpan(3, tupledArg[0], tupledArg[1]))), void 0);\n                    }, rest];\n                }\n                case 1: {\n                    let pattern_matching_result_2, body_1, rest_1;\n                    const activePatternResult1945 = $007CDelimitedMarkdown$007C_$007C(ofArray([\"_\", \"_\"]), input);\n                    if (activePatternResult1945 != null) {\n                        pattern_matching_result_2 = 0;\n                        body_1 = activePatternResult1945[0];\n                        rest_1 = activePatternResult1945[1];\n                    }\n                    else {\n                        const activePatternResult1946 = $007CDelimitedMarkdown$007C_$007C(ofArray([\"*\", \"*\"]), input);\n                        if (activePatternResult1946 != null) {\n                            pattern_matching_result_2 = 0;\n                            body_1 = activePatternResult1946[0];\n                            rest_1 = activePatternResult1946[1];\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            return [body_1, (tupledArg_1) => (new MarkdownSpan(2, tupledArg_1[0], tupledArg_1[1])), rest_1];\n                        }\n                        case 1: {\n                            let pattern_matching_result_3, body_2, rest_2;\n                            const activePatternResult1941 = $007CDelimitedMarkdown$007C_$007C(singleton(\"_\"), input);\n                            if (activePatternResult1941 != null) {\n                                pattern_matching_result_3 = 0;\n                                body_2 = activePatternResult1941[0];\n                                rest_2 = activePatternResult1941[1];\n                            }\n                            else {\n                                const activePatternResult1942 = $007CDelimitedMarkdown$007C_$007C(singleton(\"*\"), input);\n                                if (activePatternResult1942 != null) {\n                                    pattern_matching_result_3 = 0;\n                                    body_2 = activePatternResult1942[0];\n                                    rest_2 = activePatternResult1942[1];\n                                }\n                                else {\n                                    pattern_matching_result_3 = 1;\n                                }\n                            }\n                            switch (pattern_matching_result_3) {\n                                case 0: {\n                                    return [body_2, (tupledArg_2) => (new MarkdownSpan(3, tupledArg_2[0], tupledArg_2[1])), rest_2];\n                                }\n                                case 1: {\n                                    return void 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CHtmlEntity$007C_$007C(input) {\n    let arg00;\n    let pattern_matching_result;\n    if (!isEmpty(input)) {\n        if (head(input) === \"\\u0026\") {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const match$0027 = match(create(\"^\\u0026(?:#x[a-f0-9]{1,8}|#[0-9]{1,8}|[a-z][a-z0-9]{1,31});\"), (arg00 = toArray(input), arg00.join('')));\n            if (match$0027 != null) {\n                const entity = match$0027[0];\n                return [entity, splitAt(entity.length, input)[1]];\n            }\n            else {\n                return void 0;\n            }\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport class ParsingContext extends Record {\n    constructor(Links, Newline, IsFirst, CurrentRange, ParseOptions) {\n        super();\n        this.Links = Links;\n        this.Newline = Newline;\n        this.IsFirst = IsFirst;\n        this.CurrentRange = CurrentRange;\n        this.ParseOptions = (ParseOptions | 0);\n    }\n}\n\nexport function ParsingContext$reflection() {\n    return record_type(\"Fable.Formatting.Markdown.Parser.ParsingContext\", [], ParsingContext, () => [[\"Links\", class_type(\"System.Collections.Generic.Dictionary`2\", [string_type, tuple_type(string_type, option_type(string_type))])], [\"Newline\", string_type], [\"IsFirst\", bool_type], [\"CurrentRange\", option_type(MarkdownRange$reflection())], [\"ParseOptions\", enum_type(\"Fable.Formatting.Markdown.MarkdownParseOptions\", int32_type, [[\"None\", 0], [\"ParseCodeAsOther\", 1], [\"ParseNonCodeAsOther\", 2], [\"AllowYamlFrontMatter\", 4]])]]);\n}\n\nexport function ParsingContext__get_ParseCodeAsOther(x) {\n    return (x.ParseOptions & 1) !== 0;\n}\n\nexport function ParsingContext__get_ParseNonCodeAsOther(x) {\n    return (x.ParseOptions & 2) !== 0;\n}\n\nexport function ParsingContext__get_AllowYamlFrontMatter(x) {\n    return (x.ParseOptions & 4) !== 0;\n}\n\nexport function parseChars(acc, input, ctx) {\n    return delay(() => {\n        let matchValue_7, n_3, inputRecord_3, loop_3, loop_2, rest_9, link, _s, _e, loop, loop_1;\n        const accLiterals = new Lazy(() => {\n            let inputRecord, matchValue_1, n_1, inputRecord_1;\n            if (isEmpty(acc)) {\n                return [empty(), ctx];\n            }\n            else {\n                let range;\n                const matchValue = ctx.CurrentRange;\n                if (matchValue == null) {\n                    range = (void 0);\n                }\n                else {\n                    const n = matchValue;\n                    range = ((inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, inputRecord.contents.StartColumn, inputRecord.contents.EndLine, n.StartColumn + length(acc))));\n                }\n                const ctx_1 = new ParsingContext(ctx.Links, ctx.Newline, ctx.IsFirst, (matchValue_1 = ctx.CurrentRange, (matchValue_1 == null) ? (void 0) : ((n_1 = matchValue_1, (inputRecord_1 = (new FSharpRef(n_1)), new MarkdownRange(inputRecord_1.contents.StartLine, n_1.StartColumn + length(acc), inputRecord_1.contents.EndLine, inputRecord_1.contents.EndColumn))))), ctx.ParseOptions);\n                return [singleton(new MarkdownSpan(0, toArray(reverse(acc)).join(''), range)), ctx_1];\n            }\n        });\n        let pattern_matching_result, rest, entity, rest_1;\n        if (!isEmpty(input)) {\n            if (head(input) === \" \") {\n                if (!isEmpty(tail(input))) {\n                    if (head(tail(input)) === \" \") {\n                        if (!isEmpty(tail(tail(input)))) {\n                            if (head(tail(tail(input))) === \"\\n\") {\n                                pattern_matching_result = 0;\n                                rest = tail(tail(tail(input)));\n                            }\n                            else if (head(tail(tail(input))) === \"\\r\") {\n                                if (!isEmpty(tail(tail(tail(input))))) {\n                                    if (head(tail(tail(tail(input)))) === \"\\n\") {\n                                        pattern_matching_result = 0;\n                                        rest = tail(tail(tail(tail(input))));\n                                    }\n                                    else {\n                                        pattern_matching_result = 0;\n                                        rest = tail(tail(tail(input)));\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result = 0;\n                                    rest = tail(tail(tail(input)));\n                                }\n                            }\n                            else {\n                                const activePatternResult2017 = $007CHtmlEntity$007C_$007C(input);\n                                if (activePatternResult2017 != null) {\n                                    pattern_matching_result = 1;\n                                    entity = activePatternResult2017[0];\n                                    rest_1 = activePatternResult2017[1];\n                                }\n                                else {\n                                    pattern_matching_result = 2;\n                                }\n                            }\n                        }\n                        else {\n                            const activePatternResult2018 = $007CHtmlEntity$007C_$007C(input);\n                            if (activePatternResult2018 != null) {\n                                pattern_matching_result = 1;\n                                entity = activePatternResult2018[0];\n                                rest_1 = activePatternResult2018[1];\n                            }\n                            else {\n                                pattern_matching_result = 2;\n                            }\n                        }\n                    }\n                    else {\n                        const activePatternResult2019 = $007CHtmlEntity$007C_$007C(input);\n                        if (activePatternResult2019 != null) {\n                            pattern_matching_result = 1;\n                            entity = activePatternResult2019[0];\n                            rest_1 = activePatternResult2019[1];\n                        }\n                        else {\n                            pattern_matching_result = 2;\n                        }\n                    }\n                }\n                else {\n                    const activePatternResult2020 = $007CHtmlEntity$007C_$007C(input);\n                    if (activePatternResult2020 != null) {\n                        pattern_matching_result = 1;\n                        entity = activePatternResult2020[0];\n                        rest_1 = activePatternResult2020[1];\n                    }\n                    else {\n                        pattern_matching_result = 2;\n                    }\n                }\n            }\n            else {\n                const activePatternResult2021 = $007CHtmlEntity$007C_$007C(input);\n                if (activePatternResult2021 != null) {\n                    pattern_matching_result = 1;\n                    entity = activePatternResult2021[0];\n                    rest_1 = activePatternResult2021[1];\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n        }\n        else {\n            const activePatternResult2022 = $007CHtmlEntity$007C_$007C(input);\n            if (activePatternResult2022 != null) {\n                pattern_matching_result = 1;\n                entity = activePatternResult2022[0];\n                rest_1 = activePatternResult2022[1];\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                const patternInput = accLiterals.Value;\n                const ctx_2 = patternInput[1];\n                return append(patternInput[0], delay(() => append(singleton_1(new MarkdownSpan(9, ctx_2.CurrentRange)), delay(() => parseChars(empty(), rest, ctx_2)))));\n            }\n            case 1: {\n                const patternInput_1 = accLiterals.Value;\n                const ctx_3 = patternInput_1[1];\n                return append(patternInput_1[0], delay(() => append(singleton_1(new MarkdownSpan(0, entity, ctx_3.CurrentRange)), delay(() => parseChars(empty(), rest_1, ctx_3)))));\n            }\n            case 2: {\n                let pattern_matching_result_1, rest_4, c_2, rest_5;\n                if (!isEmpty(input)) {\n                    if (head(input) === \"\\u0026\") {\n                        pattern_matching_result_1 = 0;\n                        rest_4 = tail(input);\n                    }\n                    else {\n                        let activePatternResult2015;\n                        const input_1 = input;\n                        let pattern_matching_result_10, c, rest_2;\n                        if (!isEmpty(input_1)) {\n                            if (head(input_1) === \"\\\\\") {\n                                if (!isEmpty(tail(input_1))) {\n                                    if (head(tail(input_1)) === \"!\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"#\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"$\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"(\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \")\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"*\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"+\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"-\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \".\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"\\u003e\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"[\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"\\\\\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"]\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"_\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"`\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"{\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else if (head(tail(input_1)) === \"}\") {\n                                        pattern_matching_result_10 = 0;\n                                        c = head(tail(input_1));\n                                        rest_2 = tail(tail(input_1));\n                                    }\n                                    else {\n                                        pattern_matching_result_10 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_10 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_10 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_10 = 1;\n                        }\n                        switch (pattern_matching_result_10) {\n                            case 0: {\n                                activePatternResult2015 = [c, rest_2];\n                                break;\n                            }\n                            case 1: {\n                                activePatternResult2015 = (void 0);\n                                break;\n                            }\n                        }\n                        if (activePatternResult2015 != null) {\n                            pattern_matching_result_1 = 1;\n                            c_2 = activePatternResult2015[0];\n                            rest_5 = activePatternResult2015[1];\n                        }\n                        else {\n                            pattern_matching_result_1 = 2;\n                        }\n                    }\n                }\n                else {\n                    let activePatternResult2016;\n                    const input_2 = input;\n                    let pattern_matching_result_11, c_1, rest_3;\n                    if (!isEmpty(input_2)) {\n                        if (head(input_2) === \"\\\\\") {\n                            if (!isEmpty(tail(input_2))) {\n                                if (head(tail(input_2)) === \"!\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"#\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"$\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"(\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \")\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"*\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"+\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"-\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \".\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"\\u003e\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"[\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"\\\\\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"]\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"_\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"`\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"{\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else if (head(tail(input_2)) === \"}\") {\n                                    pattern_matching_result_11 = 0;\n                                    c_1 = head(tail(input_2));\n                                    rest_3 = tail(tail(input_2));\n                                }\n                                else {\n                                    pattern_matching_result_11 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_11 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_11 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_11 = 1;\n                    }\n                    switch (pattern_matching_result_11) {\n                        case 0: {\n                            activePatternResult2016 = [c_1, rest_3];\n                            break;\n                        }\n                        case 1: {\n                            activePatternResult2016 = (void 0);\n                            break;\n                        }\n                    }\n                    if (activePatternResult2016 != null) {\n                        pattern_matching_result_1 = 1;\n                        c_2 = activePatternResult2016[0];\n                        rest_5 = activePatternResult2016[1];\n                    }\n                    else {\n                        pattern_matching_result_1 = 2;\n                    }\n                }\n                switch (pattern_matching_result_1) {\n                    case 0: {\n                        return parseChars(ofArrayWithTail([\";\", \"p\", \"m\", \"a\", \"\\u0026\"], acc), rest_4, ctx);\n                    }\n                    case 1: {\n                        return parseChars(cons(c_2, acc), rest_5, ctx);\n                    }\n                    case 2: {\n                        let pattern_matching_result_2, body, e, rest_6, s;\n                        let activePatternResult2013;\n                        const startl = ofArray([\"`\", \" \"]);\n                        const endl = ofArray([\" \", \"`\"]);\n                        const input_3 = input;\n                        if ((loop = ((start_1_mut, list_2_mut) => {\n                            loop:\n                            while (true) {\n                                const start_1 = start_1_mut, list_2 = list_2_mut;\n                                const matchValue_2 = [start_1, list_2];\n                                let pattern_matching_result_8, x_1, xs_1, y_1, ys_1;\n                                if (!isEmpty(matchValue_2[0])) {\n                                    if (!isEmpty(matchValue_2[1])) {\n                                        if (head(matchValue_2[0]) === head(matchValue_2[1])) {\n                                            pattern_matching_result_8 = 0;\n                                            x_1 = head(matchValue_2[0]);\n                                            xs_1 = tail(matchValue_2[0]);\n                                            y_1 = head(matchValue_2[1]);\n                                            ys_1 = tail(matchValue_2[1]);\n                                        }\n                                        else {\n                                            pattern_matching_result_8 = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_8 = 1;\n                                }\n                                switch (pattern_matching_result_8) {\n                                    case 0: {\n                                        start_1_mut = xs_1;\n                                        list_2_mut = ys_1;\n                                        continue loop;\n                                    }\n                                    case 1: {\n                                        if (isEmpty(matchValue_2[0])) {\n                                            return true;\n                                        }\n                                        else {\n                                            return false;\n                                        }\n                                    }\n                                }\n                                break;\n                            }\n                        }), loop(startl, input_3))) {\n                            const matchValue_3 = List_partitionUntilEquals(endl, skip(length(startl), input_3));\n                            if (matchValue_3 == null) {\n                                activePatternResult2013 = (void 0);\n                            }\n                            else {\n                                const post = matchValue_3[1];\n                                activePatternResult2013 = [matchValue_3[0], skip(length(endl), post), length(startl), length(endl)];\n                            }\n                        }\n                        else {\n                            activePatternResult2013 = (void 0);\n                        }\n                        if (activePatternResult2013 != null) {\n                            pattern_matching_result_2 = 0;\n                            body = activePatternResult2013[0];\n                            e = activePatternResult2013[3];\n                            rest_6 = activePatternResult2013[1];\n                            s = activePatternResult2013[2];\n                        }\n                        else {\n                            let activePatternResult2014;\n                            const str = \"`\";\n                            const input_4 = input;\n                            const strs = List_partitionWhile((i) => (i === str), input_4)[0];\n                            if (!isEmpty(strs)) {\n                                const str_1 = initialize(length(strs), (_arg1) => str);\n                                const startl_1 = str_1;\n                                const endl_1 = str_1;\n                                const input_6 = input_4;\n                                if ((loop_1 = ((start_3_mut, list_4_mut) => {\n                                    loop_1:\n                                    while (true) {\n                                        const start_3 = start_3_mut, list_4 = list_4_mut;\n                                        const matchValue_4 = [start_3, list_4];\n                                        let pattern_matching_result_9, x_3, xs_3, y_3, ys_3;\n                                        if (!isEmpty(matchValue_4[0])) {\n                                            if (!isEmpty(matchValue_4[1])) {\n                                                if (head(matchValue_4[0]) === head(matchValue_4[1])) {\n                                                    pattern_matching_result_9 = 0;\n                                                    x_3 = head(matchValue_4[0]);\n                                                    xs_3 = tail(matchValue_4[0]);\n                                                    y_3 = head(matchValue_4[1]);\n                                                    ys_3 = tail(matchValue_4[1]);\n                                                }\n                                                else {\n                                                    pattern_matching_result_9 = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 1;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                start_3_mut = xs_3;\n                                                list_4_mut = ys_3;\n                                                continue loop_1;\n                                            }\n                                            case 1: {\n                                                if (isEmpty(matchValue_4[0])) {\n                                                    return true;\n                                                }\n                                                else {\n                                                    return false;\n                                                }\n                                            }\n                                        }\n                                        break;\n                                    }\n                                }), loop_1(startl_1, input_6))) {\n                                    const matchValue_5 = List_partitionUntilEquals(endl_1, skip(length(startl_1), input_6));\n                                    if (matchValue_5 == null) {\n                                        activePatternResult2014 = (void 0);\n                                    }\n                                    else {\n                                        const post_1 = matchValue_5[1];\n                                        activePatternResult2014 = [matchValue_5[0], skip(length(endl_1), post_1), length(startl_1), length(endl_1)];\n                                    }\n                                }\n                                else {\n                                    activePatternResult2014 = (void 0);\n                                }\n                            }\n                            else {\n                                activePatternResult2014 = (void 0);\n                            }\n                            if (activePatternResult2014 != null) {\n                                pattern_matching_result_2 = 0;\n                                body = activePatternResult2014[0];\n                                e = activePatternResult2014[3];\n                                rest_6 = activePatternResult2014[1];\n                                s = activePatternResult2014[2];\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                        }\n                        switch (pattern_matching_result_2) {\n                            case 0: {\n                                const patternInput_3 = accLiterals.Value;\n                                const ctx_4 = patternInput_3[1];\n                                return append(patternInput_3[0], delay(() => {\n                                    let inputRecord_2;\n                                    let rng;\n                                    const matchValue_6 = ctx_4.CurrentRange;\n                                    if (matchValue_6 == null) {\n                                        rng = (void 0);\n                                    }\n                                    else {\n                                        const n_2 = matchValue_6;\n                                        rng = ((inputRecord_2 = (new FSharpRef(n_2)), new MarkdownRange(inputRecord_2.contents.StartLine, n_2.StartColumn + s, inputRecord_2.contents.EndLine, n_2.EndColumn - e)));\n                                    }\n                                    return append(singleton_1(new MarkdownSpan(1, (toArray(body).join('')).trim(), rng)), delay(() => parseChars(empty(), rest_6, ctx_4)));\n                                }));\n                            }\n                            case 1: {\n                                const activePatternResult2010 = $007CDelimitedLatexDisplayMath$007C_$007C(ofArray([\"$\", \"$\"]), input);\n                                if (activePatternResult2010 != null) {\n                                    const body_1 = activePatternResult2010[0];\n                                    const rest_7 = activePatternResult2010[1];\n                                    const patternInput_4 = accLiterals.Value;\n                                    const ctx_5 = patternInput_4[1];\n                                    return append(patternInput_4[0], delay(() => append(singleton_1(new MarkdownSpan(11, (toArray(body_1).join('')).trim(), ctx_5.CurrentRange)), delay(() => parseChars(empty(), rest_7, ctx_5)))));\n                                }\n                                else {\n                                    const activePatternResult2008 = $007CDelimitedLatexInlineMath$007C_$007C(singleton(\"$\"), input);\n                                    if (activePatternResult2008 != null) {\n                                        const body_2 = activePatternResult2008[0];\n                                        const rest_8 = activePatternResult2008[1];\n                                        const patternInput_5 = accLiterals.Value;\n                                        const ctx_6 = patternInput_5[1];\n                                        const ctx_7 = new ParsingContext(ctx_6.Links, ctx_6.Newline, ctx_6.IsFirst, (matchValue_7 = ctx_6.CurrentRange, (matchValue_7 == null) ? (void 0) : ((n_3 = matchValue_7, (inputRecord_3 = (new FSharpRef(n_3)), new MarkdownRange(inputRecord_3.contents.StartLine, n_3.StartColumn + 1, inputRecord_3.contents.EndLine, inputRecord_3.contents.EndColumn))))), ctx_6.ParseOptions);\n                                        return append(patternInput_5[0], delay(() => {\n                                            let matchValue_8, n_4, inputRecord_4;\n                                            const code = (toArray(body_2).join('')).trim();\n                                            return append(singleton_1(new MarkdownSpan(10, code, (matchValue_8 = ctx_7.CurrentRange, (matchValue_8 == null) ? (void 0) : ((n_4 = matchValue_8, (inputRecord_4 = (new FSharpRef(n_4)), new MarkdownRange(inputRecord_4.contents.StartLine, inputRecord_4.contents.StartColumn, inputRecord_4.contents.EndLine, n_4.StartColumn + code.length))))))), delay(() => parseChars(empty(), rest_8, ctx_7)));\n                                        }));\n                                    }\n                                    else {\n                                        let pattern_matching_result_3, _e_1, _s_1, link_1, rest_10;\n                                        let activePatternResult2005;\n                                        const startl_2 = singleton(\"\\u003c\");\n                                        const endl_2 = singleton(\"\\u003e\");\n                                        const input_7 = input;\n                                        if ((loop_2 = ((start_5_mut, list_6_mut) => {\n                                            loop_2:\n                                            while (true) {\n                                                const start_5 = start_5_mut, list_6 = list_6_mut;\n                                                const matchValue_9 = [start_5, list_6];\n                                                let pattern_matching_result_7, x_5, xs_5, y_5, ys_5;\n                                                if (!isEmpty(matchValue_9[0])) {\n                                                    if (!isEmpty(matchValue_9[1])) {\n                                                        if (head(matchValue_9[0]) === head(matchValue_9[1])) {\n                                                            pattern_matching_result_7 = 0;\n                                                            x_5 = head(matchValue_9[0]);\n                                                            xs_5 = tail(matchValue_9[0]);\n                                                            y_5 = head(matchValue_9[1]);\n                                                            ys_5 = tail(matchValue_9[1]);\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_7 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_7 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_7 = 1;\n                                                }\n                                                switch (pattern_matching_result_7) {\n                                                    case 0: {\n                                                        start_5_mut = xs_5;\n                                                        list_6_mut = ys_5;\n                                                        continue loop_2;\n                                                    }\n                                                    case 1: {\n                                                        if (isEmpty(matchValue_9[0])) {\n                                                            return true;\n                                                        }\n                                                        else {\n                                                            return false;\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                        }), loop_2(startl_2, input_7))) {\n                                            const matchValue_10 = List_partitionUntilEquals(endl_2, skip(length(startl_2), input_7));\n                                            if (matchValue_10 == null) {\n                                                activePatternResult2005 = (void 0);\n                                            }\n                                            else {\n                                                const post_2 = matchValue_10[1];\n                                                activePatternResult2005 = [matchValue_10[0], skip(length(endl_2), post_2), length(startl_2), length(endl_2)];\n                                            }\n                                        }\n                                        else {\n                                            activePatternResult2005 = (void 0);\n                                        }\n                                        if (activePatternResult2005 != null) {\n                                            const activePatternResult2006 = List_$007CAsString$007C(activePatternResult2005[0]);\n                                            if ((rest_9 = activePatternResult2005[1], (link = activePatternResult2006, (_s = (activePatternResult2005[2] | 0), (_e = (activePatternResult2005[3] | 0), forAll((arg) => (!isWhiteSpace(arg)), link.split(\"\")) && ((link.indexOf(\"@\") >= 0) ? true : (link.indexOf(\"://\") >= 0))))))) {\n                                                pattern_matching_result_3 = 0;\n                                                _e_1 = activePatternResult2005[3];\n                                                _s_1 = activePatternResult2005[2];\n                                                link_1 = activePatternResult2006;\n                                                rest_10 = activePatternResult2005[1];\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                        switch (pattern_matching_result_3) {\n                                            case 0: {\n                                                const patternInput_6 = accLiterals.Value;\n                                                const ctx_8 = patternInput_6[1];\n                                                return append(patternInput_6[0], delay(() => append(singleton_1(new MarkdownSpan(5, singleton(new MarkdownSpan(0, link_1, ctx_8.CurrentRange)), link_1, void 0, ctx_8.CurrentRange)), delay(() => parseChars(empty(), rest_10, ctx_8)))));\n                                            }\n                                            case 1: {\n                                                let activePatternResult2003;\n                                                const startl_3 = singleton(\"\\u003c\");\n                                                const endl_3 = singleton(\"\\u003e\");\n                                                const input_8 = input;\n                                                if ((loop_3 = ((start_7_mut, list_8_mut) => {\n                                                    loop_3:\n                                                    while (true) {\n                                                        const start_7 = start_7_mut, list_8 = list_8_mut;\n                                                        const matchValue_11 = [start_7, list_8];\n                                                        let pattern_matching_result_4, x_7, xs_7, y_7, ys_7;\n                                                        if (!isEmpty(matchValue_11[0])) {\n                                                            if (!isEmpty(matchValue_11[1])) {\n                                                                if (head(matchValue_11[0]) === head(matchValue_11[1])) {\n                                                                    pattern_matching_result_4 = 0;\n                                                                    x_7 = head(matchValue_11[0]);\n                                                                    xs_7 = tail(matchValue_11[0]);\n                                                                    y_7 = head(matchValue_11[1]);\n                                                                    ys_7 = tail(matchValue_11[1]);\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_4 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_4 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_4 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_4) {\n                                                            case 0: {\n                                                                start_7_mut = xs_7;\n                                                                list_8_mut = ys_7;\n                                                                continue loop_3;\n                                                            }\n                                                            case 1: {\n                                                                if (isEmpty(matchValue_11[0])) {\n                                                                    return true;\n                                                                }\n                                                                else {\n                                                                    return false;\n                                                                }\n                                                            }\n                                                        }\n                                                        break;\n                                                    }\n                                                }), loop_3(startl_3, input_8))) {\n                                                    const matchValue_12 = List_partitionUntilEquals(endl_3, skip(length(startl_3), input_8));\n                                                    if (matchValue_12 == null) {\n                                                        activePatternResult2003 = (void 0);\n                                                    }\n                                                    else {\n                                                        const post_3 = matchValue_12[1];\n                                                        activePatternResult2003 = [matchValue_12[0], skip(length(endl_3), post_3), length(startl_3), length(endl_3)];\n                                                    }\n                                                }\n                                                else {\n                                                    activePatternResult2003 = (void 0);\n                                                }\n                                                if (activePatternResult2003 != null) {\n                                                    const _e_2 = activePatternResult2003[3] | 0;\n                                                    const _s_2 = activePatternResult2003[2] | 0;\n                                                    const rest_11 = activePatternResult2003[1];\n                                                    const tag = activePatternResult2003[0];\n                                                    return parseChars(append_1(cons(\"\\u003e\", reverse(tag)), cons(\"\\u003c\", acc)), rest_11, ctx);\n                                                }\n                                                else {\n                                                    const activePatternResult2001 = $007CDirectLink$007C_$007C(input);\n                                                    if (activePatternResult2001 != null) {\n                                                        const body_3 = activePatternResult2001[0];\n                                                        const link_2 = activePatternResult2001[1];\n                                                        const rest_12 = activePatternResult2001[2];\n                                                        const patternInput_7 = accLiterals.Value;\n                                                        const ctx_9 = patternInput_7[1];\n                                                        return append(patternInput_7[0], delay(() => {\n                                                            const patternInput_8 = getLinkAndTitle(toArray(link_2).join(''), MarkdownRangeModule_zero);\n                                                            return append(singleton_1(new MarkdownSpan(5, ofSeq(parseChars(empty(), body_3, ctx_9)), patternInput_8[0], patternInput_8[1], ctx_9.CurrentRange)), delay(() => parseChars(empty(), rest_12, ctx_9)));\n                                                        }));\n                                                    }\n                                                    else {\n                                                        const activePatternResult2000 = $007CIndirectLink$007C_$007C(input);\n                                                        if (activePatternResult2000 != null) {\n                                                            const body_4 = activePatternResult2000[0];\n                                                            const link_4 = activePatternResult2000[1];\n                                                            const original = activePatternResult2000[2];\n                                                            const rest_13 = activePatternResult2000[3];\n                                                            const patternInput_9 = accLiterals.Value;\n                                                            const ctx_10 = patternInput_9[1];\n                                                            return append(patternInput_9[0], delay(() => {\n                                                                const key = isNullOrEmpty(link_4) ? (Array.from(body_4).join('')) : link_4;\n                                                                return append(singleton_1(new MarkdownSpan(6, ofSeq(parseChars(empty(), body_4, ctx_10)), original, key, ctx_10.CurrentRange)), delay(() => parseChars(empty(), rest_13, ctx_10)));\n                                                            }));\n                                                        }\n                                                        else {\n                                                            const activePatternResult1999 = $007CAutoLink$007C_$007C(input);\n                                                            if (activePatternResult1999 != null) {\n                                                                const link_5 = activePatternResult1999[0];\n                                                                const rest_14 = activePatternResult1999[1];\n                                                                const patternInput_10 = accLiterals.Value;\n                                                                const ctx_11 = patternInput_10[1];\n                                                                return append(patternInput_10[0], delay(() => append(singleton_1(new MarkdownSpan(5, singleton(new MarkdownSpan(0, link_5, ctx_11.CurrentRange)), link_5, void 0, ctx_11.CurrentRange)), delay(() => parseChars(empty(), rest_14, ctx_11)))));\n                                                            }\n                                                            else {\n                                                                let pattern_matching_result_5, body_5, link_6, rest_15;\n                                                                if (!isEmpty(input)) {\n                                                                    if (head(input) === \"!\") {\n                                                                        const activePatternResult1998 = $007CDirectLink$007C_$007C(tail(input));\n                                                                        if (activePatternResult1998 != null) {\n                                                                            pattern_matching_result_5 = 0;\n                                                                            body_5 = activePatternResult1998[0];\n                                                                            link_6 = activePatternResult1998[1];\n                                                                            rest_15 = activePatternResult1998[2];\n                                                                        }\n                                                                        else {\n                                                                            pattern_matching_result_5 = 1;\n                                                                        }\n                                                                    }\n                                                                    else {\n                                                                        pattern_matching_result_5 = 1;\n                                                                    }\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_5 = 1;\n                                                                }\n                                                                switch (pattern_matching_result_5) {\n                                                                    case 0: {\n                                                                        const patternInput_11 = accLiterals.Value;\n                                                                        const ctx_12 = patternInput_11[1];\n                                                                        return append(patternInput_11[0], delay(() => {\n                                                                            const patternInput_12 = getLinkAndTitle(toArray(link_6).join(''), MarkdownRangeModule_zero);\n                                                                            return append(singleton_1(new MarkdownSpan(7, toArray(body_5).join(''), patternInput_12[0], patternInput_12[1], ctx_12.CurrentRange)), delay(() => parseChars(empty(), rest_15, ctx_12)));\n                                                                        }));\n                                                                    }\n                                                                    case 1: {\n                                                                        let pattern_matching_result_6, body_6, link_8, original_1, rest_16;\n                                                                        if (!isEmpty(input)) {\n                                                                            if (head(input) === \"!\") {\n                                                                                const activePatternResult1997 = $007CIndirectLink$007C_$007C(tail(input));\n                                                                                if (activePatternResult1997 != null) {\n                                                                                    pattern_matching_result_6 = 0;\n                                                                                    body_6 = activePatternResult1997[0];\n                                                                                    link_8 = activePatternResult1997[1];\n                                                                                    original_1 = activePatternResult1997[2];\n                                                                                    rest_16 = activePatternResult1997[3];\n                                                                                }\n                                                                                else {\n                                                                                    pattern_matching_result_6 = 1;\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                pattern_matching_result_6 = 1;\n                                                                            }\n                                                                        }\n                                                                        else {\n                                                                            pattern_matching_result_6 = 1;\n                                                                        }\n                                                                        switch (pattern_matching_result_6) {\n                                                                            case 0: {\n                                                                                const patternInput_13 = accLiterals.Value;\n                                                                                const ctx_13 = patternInput_13[1];\n                                                                                return append(patternInput_13[0], delay(() => {\n                                                                                    const key_1 = isNullOrEmpty(link_8) ? (Array.from(body_6).join('')) : link_8;\n                                                                                    return append(singleton_1(new MarkdownSpan(8, toArray(body_6).join(''), original_1, key_1, ctx_13.CurrentRange)), delay(() => parseChars(empty(), rest_16, ctx_13)));\n                                                                                }));\n                                                                            }\n                                                                            case 1: {\n                                                                                const activePatternResult1996 = $007CEmphasised$007C_$007C(input);\n                                                                                if (activePatternResult1996 != null) {\n                                                                                    const body_7 = activePatternResult1996[0];\n                                                                                    const f = activePatternResult1996[1];\n                                                                                    const rest_17 = activePatternResult1996[2];\n                                                                                    const patternInput_14 = accLiterals.Value;\n                                                                                    const ctx_14 = patternInput_14[1];\n                                                                                    return append(patternInput_14[0], delay(() => append(singleton_1(f([ofSeq(parseChars(empty(), body_7, ctx_14)), ctx_14.CurrentRange])), delay(() => parseChars(empty(), rest_17, ctx_14)))));\n                                                                                }\n                                                                                else {\n                                                                                    return isEmpty(input) ? accLiterals.Value[0] : ((head(input) === \"\\u003c\") ? parseChars(ofArrayWithTail([\";\", \"t\", \"l\", \"\\u0026\"], acc), tail(input), ctx) : ((head(input) === \"\\u003e\") ? parseChars(ofArrayWithTail([\";\", \"t\", \"g\", \"\\u0026\"], acc), tail(input), ctx) : parseChars(cons(head(input), acc), tail(input), ctx)));\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\nexport function parseSpans(_arg1_0, _arg1_1, ctx) {\n    const _arg1 = [_arg1_0, _arg1_1];\n    const activePatternResult2027 = StringPosition_$007CTrimBoth$007C(_arg1[0], _arg1[1]);\n    const ctx_1 = new ParsingContext(ctx.Links, ctx.Newline, ctx.IsFirst, activePatternResult2027[1], ctx.ParseOptions);\n    return ofSeq(parseChars(empty(), ofArray(activePatternResult2027[0].split(\"\")), ctx_1));\n}\n\nexport function trimSpaces(numSpaces_mut, s_mut) {\n    trimSpaces:\n    while (true) {\n        const numSpaces = numSpaces_mut, s = s_mut;\n        if (numSpaces <= 0) {\n            return s;\n        }\n        else if (s.indexOf(\" \") === 0) {\n            numSpaces_mut = (numSpaces - 1);\n            s_mut = substring(s, 1);\n            continue trimSpaces;\n        }\n        else if (s.indexOf(\"\\t\") === 0) {\n            numSpaces_mut = (numSpaces - 4);\n            s_mut = substring(s, 1);\n            continue trimSpaces;\n        }\n        else {\n            return s;\n        }\n        break;\n    }\n}\n\nexport function $007CHeading$007C_$007C(lines) {\n    let noHash;\n    let pattern_matching_result, header, line1, line2, rest;\n    if (!isEmpty(lines)) {\n        let activePatternResult2041;\n        const tupledArg = head(lines);\n        activePatternResult2041 = StringPosition_$007CTrimBoth$007C(tupledArg[0], tupledArg[1]);\n        if (!isEmpty(tail(lines))) {\n            let activePatternResult2042;\n            const tupledArg_1 = head(tail(lines));\n            activePatternResult2042 = StringPosition_$007CTrimEnd$007C(tupledArg_1[0], tupledArg_1[1]);\n            if (StringPosition_$007CEqualsRepeated$007C_$007C(\"=\", MarkdownRangeModule_zero, activePatternResult2042[0], activePatternResult2042[1]) != null) {\n                pattern_matching_result = 0;\n                header = activePatternResult2041;\n                line1 = head(lines);\n                line2 = head(tail(lines));\n                rest = tail(tail(lines));\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [1, header, ofArray([line1, line2]), rest];\n        }\n        case 1: {\n            let pattern_matching_result_1, header_1, line1_1, line2_1, rest_1;\n            if (!isEmpty(lines)) {\n                let activePatternResult2037;\n                const tupledArg_2 = head(lines);\n                activePatternResult2037 = StringPosition_$007CTrimBoth$007C(tupledArg_2[0], tupledArg_2[1]);\n                if (!isEmpty(tail(lines))) {\n                    let activePatternResult2038;\n                    const tupledArg_3 = head(tail(lines));\n                    activePatternResult2038 = StringPosition_$007CTrimEnd$007C(tupledArg_3[0], tupledArg_3[1]);\n                    if (StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, activePatternResult2038[0], activePatternResult2038[1]) != null) {\n                        pattern_matching_result_1 = 0;\n                        header_1 = activePatternResult2037;\n                        line1_1 = head(lines);\n                        line2_1 = head(tail(lines));\n                        rest_1 = tail(tail(lines));\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    return [2, header_1, ofArray([line1_1, line2_1]), rest_1];\n                }\n                case 1: {\n                    let pattern_matching_result_2, header_2, line1_2, ln_1, n_5, rest_2;\n                    if (!isEmpty(lines)) {\n                        let activePatternResult2035;\n                        const tupledArg_4 = head(lines);\n                        activePatternResult2035 = StringPosition_$007CStartsWithRepeated$007C_$007C(\"#\", tupledArg_4[0], tupledArg_4[1]);\n                        if (activePatternResult2035 != null) {\n                            let activePatternResult2036;\n                            const tupledArg_5 = activePatternResult2035[1];\n                            activePatternResult2036 = StringPosition_$007CTrimBoth$007C(tupledArg_5[0], tupledArg_5[1]);\n                            pattern_matching_result_2 = 0;\n                            header_2 = activePatternResult2036[0];\n                            line1_2 = head(lines);\n                            ln_1 = activePatternResult2036[1];\n                            n_5 = activePatternResult2035[0];\n                            rest_2 = tail(lines);\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            return [n_5, [endsWith(header_2, \"#\") ? ((noHash = trimEnd(header_2, \"#\"), ((noHash.length > 0) && isWhiteSpace(getCharAtIndex(noHash, noHash.length - 1))) ? noHash : header_2)) : header_2, ln_1], singleton(line1_2), rest_2];\n                        }\n                        case 1: {\n                            return void 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function $007CYamlFrontmatter$007C_$007C(lines) {\n    let pattern_matching_result, p, rest;\n    if (!isEmpty(lines)) {\n        if (head(lines)[0] === \"---\") {\n            pattern_matching_result = 0;\n            p = head(lines)[1];\n            rest = tail(lines);\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const yaml = takeWhile((tupledArg) => (tupledArg[0] !== \"---\"), rest);\n            const yamlTextLines = map((tuple) => tuple[0], yaml);\n            let rest_1;\n            const _arg1_1 = skipWhile((tupledArg_1) => (tupledArg_1[0] !== \"---\"), rest);\n            let pattern_matching_result_1, t, l_2;\n            if (!isEmpty(_arg1_1)) {\n                if (head(_arg1_1)[0] === \"---\") {\n                    pattern_matching_result_1 = 0;\n                    t = tail(_arg1_1);\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                    l_2 = _arg1_1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n                l_2 = _arg1_1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    rest_1 = t;\n                    break;\n                }\n                case 1: {\n                    rest_1 = l_2;\n                    break;\n                }\n            }\n            return [yamlTextLines, MarkdownRangeModule_mergeRanges(cons(p, map((tuple_1) => tuple_1[1], yaml))), rest_1];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CHorizontalRule$007C_$007C(line, _n) {\n    const loop = (arg_mut, i_mut) => {\n        loop:\n        while (true) {\n            const arg = arg_mut, i = i_mut;\n            const arg_1 = arg;\n            const u = arg_1[2] | 0;\n            const h = arg_1[0] | 0;\n            const a = arg_1[1] | 0;\n            if ((((h >= 3) ? true : (a >= 3)) ? true : (u >= 3)) && (i === line.length)) {\n                return line[0];\n            }\n            else if (i === line.length) {\n                return void 0;\n            }\n            else if (isWhiteSpace(line[i])) {\n                arg_mut = arg_1;\n                i_mut = (i + 1);\n                continue loop;\n            }\n            else if (((line[i] === \"-\") && (a === 0)) && (u === 0)) {\n                arg_mut = [h + 1, a, u];\n                i_mut = (i + 1);\n                continue loop;\n            }\n            else if (((line[i] === \"*\") && (h === 0)) && (u === 0)) {\n                arg_mut = [h, a + 1, u];\n                i_mut = (i + 1);\n                continue loop;\n            }\n            else if (((line[i] === \"_\") && (a === 0)) && (h === 0)) {\n                arg_mut = [h, a, u + 1];\n                i_mut = (i + 1);\n                continue loop;\n            }\n            else {\n                return void 0;\n            }\n            break;\n        }\n    };\n    return loop([0, 0, 0], 0);\n}\n\nexport function $007CNestedCodeBlock$007C_$007C(lines) {\n    let takenLines, rest, _numspaces;\n    let pattern_matching_result, _numspaces_1, lines_2, rest_1, takenLines_1;\n    const activePatternResult2055 = Lines_$007CTakeCodeBlock$007C_$007C(lines);\n    if (activePatternResult2055 != null) {\n        const activePatternResult2056 = Lines_$007CTrimBlank$007C(activePatternResult2055[1]);\n        if ((takenLines = activePatternResult2055[1], (rest = activePatternResult2055[2], (_numspaces = (activePatternResult2055[0] | 0), !equals(activePatternResult2056, empty()))))) {\n            pattern_matching_result = 0;\n            _numspaces_1 = activePatternResult2055[0];\n            lines_2 = activePatternResult2056;\n            rest_1 = activePatternResult2055[2];\n            takenLines_1 = activePatternResult2055[1];\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [append_1(toList(delay(() => collect((matchValue) => {\n                const l = matchValue[0];\n                return singleton_1(isNullOrEmpty(l) ? \"\" : trimSpaces(4, l));\n            }, lines_2))), singleton(\"\")), takenLines_1, rest_1, \"\", \"\"];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CFencedCodeBlock$007C_$007C(lines) {\n    let indent, header, indent_1, header_1, indent_2, header_2;\n    let pattern_matching_result, header_3, indent_3, lines_4, num_3, start_6, takenLine_3;\n    if (!isEmpty(lines)) {\n        let activePatternResult2067;\n        const tupledArg = head(lines);\n        activePatternResult2067 = StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C(\"~\", tupledArg[0], tupledArg[1]);\n        if (activePatternResult2067 != null) {\n            const activePatternResult2069 = $007CLet$007C(\"~\", activePatternResult2067[0]);\n            if ((indent = (activePatternResult2067[1] | 0), (header = activePatternResult2067[2], activePatternResult2069[1] > 2))) {\n                pattern_matching_result = 0;\n                header_3 = activePatternResult2067[2];\n                indent_3 = activePatternResult2067[1];\n                lines_4 = tail(lines);\n                num_3 = activePatternResult2069[1];\n                start_6 = activePatternResult2069[0];\n                takenLine_3 = head(lines);\n            }\n            else {\n                let activePatternResult2070;\n                const tupledArg_1 = head(lines);\n                activePatternResult2070 = StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C(\"`\", tupledArg_1[0], tupledArg_1[1]);\n                if (activePatternResult2070 != null) {\n                    const activePatternResult2072 = $007CLet$007C(\"`\", activePatternResult2070[0]);\n                    if ((indent_1 = (activePatternResult2070[1] | 0), (header_1 = activePatternResult2070[2], activePatternResult2072[1] > 2))) {\n                        pattern_matching_result = 0;\n                        header_3 = activePatternResult2070[2];\n                        indent_3 = activePatternResult2070[1];\n                        lines_4 = tail(lines);\n                        num_3 = activePatternResult2072[1];\n                        start_6 = activePatternResult2072[0];\n                        takenLine_3 = head(lines);\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n        }\n        else {\n            let activePatternResult2073;\n            const tupledArg_2 = head(lines);\n            activePatternResult2073 = StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C(\"`\", tupledArg_2[0], tupledArg_2[1]);\n            if (activePatternResult2073 != null) {\n                const activePatternResult2075 = $007CLet$007C(\"`\", activePatternResult2073[0]);\n                if ((indent_2 = (activePatternResult2073[1] | 0), (header_2 = activePatternResult2073[2], activePatternResult2075[1] > 2))) {\n                    pattern_matching_result = 0;\n                    header_3 = activePatternResult2073[2];\n                    indent_3 = activePatternResult2073[1];\n                    lines_4 = tail(lines);\n                    num_3 = activePatternResult2075[1];\n                    start_6 = activePatternResult2075[0];\n                    takenLine_3 = head(lines);\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            let endStr = replicate(num_3, start_6);\n            if (header_3.indexOf(start_6) >= 0) {\n                return void 0;\n            }\n            else {\n                const patternInput = List_partitionUntil((line) => {\n                    const matchValue = singleton(line);\n                    let pattern_matching_result_1, h_1, i_1, n_1;\n                    if (!isEmpty(matchValue)) {\n                        let activePatternResult2059;\n                        const tupledArg_3 = head(matchValue);\n                        activePatternResult2059 = StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C(start_6, tupledArg_3[0], tupledArg_3[1]);\n                        if (activePatternResult2059 != null) {\n                            if (((activePatternResult2059[0] >= num_3) && (activePatternResult2059[1] < 4)) && isNullOrWhiteSpace(activePatternResult2059[2])) {\n                                pattern_matching_result_1 = 0;\n                                h_1 = activePatternResult2059[2];\n                                i_1 = activePatternResult2059[1];\n                                n_1 = activePatternResult2059[0];\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            endStr = replicate(n_1, start_6);\n                            return true;\n                        }\n                        case 1: {\n                            return false;\n                        }\n                    }\n                }, lines_4);\n                const rest = patternInput[1];\n                const codeLines = patternInput[0];\n                const codeWithoutIndent = toList(delay(() => collect((matchValue_1) => {\n                    let l;\n                    return singleton_1((l = matchValue_1[0], ((l.length <= indent_3) && isNullOrWhiteSpace(l)) ? \"\" : (((l.length > indent_3) && isNullOrWhiteSpace(substring(l, 0, indent_3))) ? substring(l, indent_3, l.length - indent_3) : l.trimStart())));\n                }, codeLines)));\n                let patternInput_1;\n                if (isNullOrWhiteSpace(header_3)) {\n                    patternInput_1 = [\"\", \"\"];\n                }\n                else {\n                    const matchValue_2 = tryFind((_arg1) => true, split(header_3, [\" \"], null, 1));\n                    if (matchValue_2 != null) {\n                        const langString = matchValue_2;\n                        const ignoredString = substring(header_3, header_3.indexOf(langString) + langString.length);\n                        patternInput_1 = [langString, isNullOrWhiteSpace(ignoredString) ? \"\" : ignoredString];\n                    }\n                    else {\n                        patternInput_1 = [\"\", \"\"];\n                    }\n                }\n                let patternInput_2;\n                if (!isEmpty(rest)) {\n                    const tl = tail(rest);\n                    const takenLine2 = head(rest);\n                    const hd = head(rest)[0];\n                    const idx = hd.indexOf(endStr) | 0;\n                    if ((idx > -1) && ((idx + endStr.length) <= hd.length)) {\n                        const _pre = substring(hd, 0, idx);\n                        const after = substring(hd, idx + endStr.length);\n                        patternInput_2 = [singleton(takenLine2), append_1(codeWithoutIndent, singleton(\"\")), isNullOrWhiteSpace(after) ? tl : cons([after, head(rest)[1]], tl)];\n                    }\n                    else {\n                        patternInput_2 = [singleton(takenLine2), append_1(codeWithoutIndent, singleton(\"\")), tl];\n                    }\n                }\n                else {\n                    patternInput_2 = [empty(), codeWithoutIndent, rest];\n                }\n                return [patternInput_2[1], append_1(cons(takenLine_3, codeLines), patternInput_2[0]), patternInput_2[2], patternInput_1[0], patternInput_1[1]];\n            }\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CSkipSomeNumbers$007C_$007C(input, _n) {\n    const matchValue = ofSeq(input.split(\"\"));\n    let pattern_matching_result, x_1, xs_1;\n    if (!isEmpty(matchValue)) {\n        if (isDigit(head(matchValue))) {\n            pattern_matching_result = 0;\n            x_1 = head(matchValue);\n            xs_1 = tail(matchValue);\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const rest = List_partitionUntil((arg) => (!isDigit(arg)), xs_1)[1];\n            return [input.length - length(rest), rest];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CListStart$007C_$007C(_arg1_0, _arg1_1) {\n    let tupledArg, inputRecord;\n    const _arg1 = [_arg1_0, _arg1_1];\n    const activePatternResult2085 = StringPosition_$007CTrimStartAndCount$007C(_arg1[0], _arg1[1]);\n    if (((tupledArg = activePatternResult2085[2], StringPosition_$007CStartsWithAny$007C_$007C([\"+ \", \"* \", \"- \"], tupledArg[0], tupledArg[1]))) != null) {\n        const range = activePatternResult2085[2][1];\n        const li = [substring(activePatternResult2085[2][0], 2), (inputRecord = (new FSharpRef(range)), new MarkdownRange(inputRecord.contents.StartLine, range.StartColumn + 2, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))];\n        const startIndent2 = StringPosition_$007CTrimStartAndCount$007C(li[0], li[1])[0] | 0;\n        return [new MarkdownListKind(1), activePatternResult2085[0], (activePatternResult2085[0] + 2) + ((startIndent2 >= 5) ? 1 : startIndent2), li];\n    }\n    else {\n        let pattern_matching_result, _spaces_1, item_1, skipNumCount, startIndent_1;\n        const activePatternResult2082 = StringPosition_$007CTrimStartAndCount$007C(_arg1[0], _arg1[1]);\n        let activePatternResult2083;\n        const tupledArg_1 = activePatternResult2082[2];\n        activePatternResult2083 = $007CSkipSomeNumbers$007C_$007C(tupledArg_1[0], tupledArg_1[1]);\n        if (activePatternResult2083 != null) {\n            if (!isEmpty(activePatternResult2083[1])) {\n                if (head(activePatternResult2083[1]) === \".\") {\n                    if (!isEmpty(tail(activePatternResult2083[1]))) {\n                        if (head(tail(activePatternResult2083[1])) === \" \") {\n                            const activePatternResult2084 = List_$007CAsString$007C(tail(tail(activePatternResult2083[1])));\n                            pattern_matching_result = 0;\n                            _spaces_1 = activePatternResult2082[1];\n                            item_1 = activePatternResult2084;\n                            skipNumCount = activePatternResult2083[0];\n                            startIndent_1 = activePatternResult2082[0];\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                const patternInput = [item_1, MarkdownRangeModule_zero];\n                const startIndent2_1 = StringPosition_$007CTrimStartAndCount$007C(patternInput[0], patternInput[1])[0] | 0;\n                return [new MarkdownListKind(0), startIndent_1, ((startIndent_1 + 2) + skipNumCount) + ((startIndent2_1 >= 5) ? 1 : startIndent2_1), [item_1, MarkdownRangeModule_zero]];\n            }\n            case 1: {\n                return void 0;\n            }\n        }\n    }\n}\n\nexport function $007CLinesUntilListOrWhite$007C(lines) {\n    return List_partitionUntil((_arg1) => {\n        let pattern_matching_result;\n        if ($007CListStart$007C_$007C(_arg1[0], _arg1[1]) != null) {\n            pattern_matching_result = 0;\n        }\n        else if (StringPosition_$007CWhiteSpace$007C_$007C(_arg1[0], _arg1[1]) != null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }, lines);\n}\n\nexport function $007CLinesUntilListOrUnindented$007C(lines) {\n    return List_partitionUntilLookahead((_arg1) => {\n        let tupledArg, tupledArg_1, tupledArg_2, tupledArg_3;\n        let pattern_matching_result;\n        if (!isEmpty(_arg1)) {\n            if (((tupledArg = head(_arg1), $007CListStart$007C_$007C(tupledArg[0], tupledArg[1]))) != null) {\n                pattern_matching_result = 0;\n            }\n            else if (((tupledArg_1 = head(_arg1), StringPosition_$007CUnindented$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null) {\n                pattern_matching_result = 0;\n            }\n            else if (((tupledArg_2 = head(_arg1), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_2[0], tupledArg_2[1]))) != null) {\n                if (!isEmpty(tail(_arg1))) {\n                    if (((tupledArg_3 = head(tail(_arg1)), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) {\n                        pattern_matching_result = 0;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }, lines);\n}\n\nexport function $007CListItem$007C_$007C(prevSimple, lines) {\n    let activePatternResult2107, matchValue, tupledArg_1, tupledArg_2, tupledArg_3, tupledArg_4, tupledArg_5, tupledArg_6, tupledArg_7;\n    let pattern_matching_result, continued, endIndent, item, kind, more, next, rest, startIndent, takenLine;\n    if (!isEmpty(lines)) {\n        let activePatternResult2113;\n        const tupledArg = head(lines);\n        activePatternResult2113 = $007CListStart$007C_$007C(tupledArg[0], tupledArg[1]);\n        if (activePatternResult2113 != null) {\n            const activePatternResult2114 = $007CLinesUntilListOrWhite$007C(tail(lines));\n            const activePatternResult2115 = $007CLinesUntilListOrUnindented$007C(activePatternResult2114[1]);\n            pattern_matching_result = 0;\n            continued = activePatternResult2114[0];\n            endIndent = activePatternResult2113[2];\n            item = activePatternResult2113[3];\n            kind = activePatternResult2113[0];\n            more = activePatternResult2115[0];\n            next = activePatternResult2114[1];\n            rest = activePatternResult2115[1];\n            startIndent = activePatternResult2113[1];\n            takenLine = head(lines);\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [startIndent, [(activePatternResult2107 = StringPosition_$007CTrimStartAndCount$007C(item[0], item[1]), (activePatternResult2107[1] >= 4) ? false : ((matchValue = [next, rest], (!isEmpty(matchValue[0])) ? ((((tupledArg_1 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null) ? ((!isEmpty(matchValue[1])) ? ((((tupledArg_2 = head(matchValue[1]), $007CListStart$007C_$007C(tupledArg_2[0], tupledArg_2[1]))) != null) ? false : ((!isEmpty(matchValue[0])) ? ((((tupledArg_3 = head(matchValue[0]), $007CListStart$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true)) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_3 = head(matchValue[0]), $007CListStart$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true)) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_3 = head(matchValue[0]), $007CListStart$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true)) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_3 = head(matchValue[0]), $007CListStart$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true)) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_4 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_4[0], tupledArg_4[1]))) != null) ? (isEmpty(tail(matchValue[0])) ? true : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : ((!isEmpty(matchValue[0])) ? ((((tupledArg_5 = head(matchValue[0]), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_5[0], tupledArg_5[1]))) != null) ? ((!isEmpty(tail(matchValue[0]))) ? ((((tupledArg_6 = head(tail(matchValue[0])), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_6[0], tupledArg_6[1]))) != null) ? true : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple))) : ((!isEmpty(matchValue[1])) && ((((tupledArg_7 = head(matchValue[1]), StringPosition_$007CUnindented$007C_$007C(tupledArg_7[0], tupledArg_7[1]))) != null) && prevSimple)))) : true))))), kind, toList(delay(() => append(singleton_1(item), delay(() => append(collect((matchValue_1) => singleton_1([matchValue_1[0].trim(), matchValue_1[1]]), continued), delay(() => collect((matchValue_2) => {\n                let inputRecord;\n                const n_2 = matchValue_2[1];\n                const line_1 = matchValue_2[0];\n                const trimmed = trimSpaces(endIndent, line_1);\n                return singleton_1([trimmed, (inputRecord = (new FSharpRef(n_2)), new MarkdownRange(inputRecord.contents.StartLine, (n_2.StartColumn + line_1.length) - trimmed.length, inputRecord.contents.EndLine, inputRecord.contents.EndColumn))]);\n            }, more)))))))], append_1(cons(takenLine, continued), more), rest];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CListItems$007C_$007C(prevSimple, lines) {\n    let tupledArg;\n    const activePatternResult2122 = $007CListItem$007C_$007C(prevSimple, lines);\n    if (activePatternResult2122 != null) {\n        const indent = activePatternResult2122[0] | 0;\n        const info = activePatternResult2122[1];\n        const nextSimple = activePatternResult2122[1][0];\n        const rest = activePatternResult2122[3];\n        const takenLines = activePatternResult2122[2];\n        let pattern_matching_result, takenLine2;\n        if (!isEmpty(rest)) {\n            if (((tupledArg = head(rest), $007CHorizontalRule$007C_$007C(tupledArg[0], tupledArg[1]))) != null) {\n                pattern_matching_result = 0;\n                takenLine2 = head(rest);\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [singleton([indent, info]), append_1(takenLines, singleton(takenLine2)), rest];\n            }\n            case 1: {\n                const activePatternResult2119 = $007CListItems$007C_$007C(nextSimple, rest);\n                if (activePatternResult2119 != null) {\n                    const items = activePatternResult2119[0];\n                    const rest_1 = activePatternResult2119[2];\n                    const takenLines2 = activePatternResult2119[1];\n                    return [cons([indent, info], items), append_1(takenLines, takenLines2), rest_1];\n                }\n                else {\n                    return [singleton([indent, info]), takenLines, rest];\n                }\n            }\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function pipeTableFindSplits(delim, line) {\n    let _x;\n    const cLstToStr = (x) => join(\"\", toArray(x));\n    const ptfs = (delim_1_mut, line_1_mut) => {\n        let loop, loop_1;\n        ptfs:\n        while (true) {\n            const delim_1 = delim_1_mut, line_1 = line_1_mut;\n            const activePatternResult2134 = $007CDelimitedLatexDisplayMath$007C_$007C(ofArray([\"$\", \"$\"]), line_1);\n            if (activePatternResult2134 != null) {\n                const _body = activePatternResult2134[0];\n                const rest = activePatternResult2134[1];\n                delim_1_mut = delim_1;\n                line_1_mut = rest;\n                continue ptfs;\n            }\n            else {\n                const activePatternResult2132 = $007CDelimitedLatexInlineMath$007C_$007C(singleton(\"$\"), line_1);\n                if (activePatternResult2132 != null) {\n                    const _body_1 = activePatternResult2132[0];\n                    const rest_1 = activePatternResult2132[1];\n                    delim_1_mut = delim_1;\n                    line_1_mut = rest_1;\n                    continue ptfs;\n                }\n                else {\n                    let activePatternResult2130;\n                    const startl = ofArray([\"`\", \" \"]);\n                    const endl = ofArray([\" \", \"`\"]);\n                    const input = line_1;\n                    if ((loop = ((start_1_mut, list_2_mut) => {\n                        loop:\n                        while (true) {\n                            const start_1 = start_1_mut, list_2 = list_2_mut;\n                            const matchValue = [start_1, list_2];\n                            let pattern_matching_result, x_2, xs_1, y_1, ys_1;\n                            if (!isEmpty(matchValue[0])) {\n                                if (!isEmpty(matchValue[1])) {\n                                    if (head(matchValue[0]) === head(matchValue[1])) {\n                                        pattern_matching_result = 0;\n                                        x_2 = head(matchValue[0]);\n                                        xs_1 = tail(matchValue[0]);\n                                        y_1 = head(matchValue[1]);\n                                        ys_1 = tail(matchValue[1]);\n                                    }\n                                    else {\n                                        pattern_matching_result = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                            switch (pattern_matching_result) {\n                                case 0: {\n                                    start_1_mut = xs_1;\n                                    list_2_mut = ys_1;\n                                    continue loop;\n                                }\n                                case 1: {\n                                    if (isEmpty(matchValue[0])) {\n                                        return true;\n                                    }\n                                    else {\n                                        return false;\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                    }), loop(startl, input))) {\n                        const matchValue_1 = List_partitionUntilEquals(endl, skip(length(startl), input));\n                        if (matchValue_1 == null) {\n                            activePatternResult2130 = (void 0);\n                        }\n                        else {\n                            const post = matchValue_1[1];\n                            activePatternResult2130 = [matchValue_1[0], skip(length(endl), post), length(startl), length(endl)];\n                        }\n                    }\n                    else {\n                        activePatternResult2130 = (void 0);\n                    }\n                    if (activePatternResult2130 != null) {\n                        const _body_2 = activePatternResult2130[0];\n                        const _e = activePatternResult2130[3] | 0;\n                        const _s = activePatternResult2130[2] | 0;\n                        const rest_2 = activePatternResult2130[1];\n                        delim_1_mut = delim_1;\n                        line_1_mut = rest_2;\n                        continue ptfs;\n                    }\n                    else {\n                        let activePatternResult2128;\n                        const str = \"`\";\n                        const input_1 = line_1;\n                        const strs = List_partitionWhile((i) => (i === str), input_1)[0];\n                        if (!isEmpty(strs)) {\n                            const str_1 = initialize(length(strs), (_arg1) => str);\n                            const startl_1 = str_1;\n                            const endl_1 = str_1;\n                            const input_3 = input_1;\n                            if ((loop_1 = ((start_3_mut, list_4_mut) => {\n                                loop_1:\n                                while (true) {\n                                    const start_3 = start_3_mut, list_4 = list_4_mut;\n                                    const matchValue_2 = [start_3, list_4];\n                                    let pattern_matching_result_1, x_4, xs_3, y_3, ys_3;\n                                    if (!isEmpty(matchValue_2[0])) {\n                                        if (!isEmpty(matchValue_2[1])) {\n                                            if (head(matchValue_2[0]) === head(matchValue_2[1])) {\n                                                pattern_matching_result_1 = 0;\n                                                x_4 = head(matchValue_2[0]);\n                                                xs_3 = tail(matchValue_2[0]);\n                                                y_3 = head(matchValue_2[1]);\n                                                ys_3 = tail(matchValue_2[1]);\n                                            }\n                                            else {\n                                                pattern_matching_result_1 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_1 = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_1 = 1;\n                                    }\n                                    switch (pattern_matching_result_1) {\n                                        case 0: {\n                                            start_3_mut = xs_3;\n                                            list_4_mut = ys_3;\n                                            continue loop_1;\n                                        }\n                                        case 1: {\n                                            if (isEmpty(matchValue_2[0])) {\n                                                return true;\n                                            }\n                                            else {\n                                                return false;\n                                            }\n                                        }\n                                    }\n                                    break;\n                                }\n                            }), loop_1(startl_1, input_3))) {\n                                const matchValue_3 = List_partitionUntilEquals(endl_1, skip(length(startl_1), input_3));\n                                if (matchValue_3 == null) {\n                                    activePatternResult2128 = (void 0);\n                                }\n                                else {\n                                    const post_1 = matchValue_3[1];\n                                    activePatternResult2128 = [matchValue_3[0], skip(length(endl_1), post_1), length(startl_1), length(endl_1)];\n                                }\n                            }\n                            else {\n                                activePatternResult2128 = (void 0);\n                            }\n                        }\n                        else {\n                            activePatternResult2128 = (void 0);\n                        }\n                        if (activePatternResult2128 != null) {\n                            const _body_3 = activePatternResult2128[0];\n                            const _e_1 = activePatternResult2128[3] | 0;\n                            const _s_1 = activePatternResult2128[2] | 0;\n                            const rest_3 = activePatternResult2128[1];\n                            delim_1_mut = delim_1;\n                            line_1_mut = rest_3;\n                            continue ptfs;\n                        }\n                        else {\n                            let pattern_matching_result_2, rest_5, x_6;\n                            if (!isEmpty(line_1)) {\n                                if (delim_1.some((y_4) => (head(line_1) === y_4))) {\n                                    pattern_matching_result_2 = 0;\n                                    rest_5 = tail(line_1);\n                                    x_6 = head(line_1);\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    return rest_5;\n                                }\n                                case 1: {\n                                    let pattern_matching_result_3, rest_6;\n                                    if (isEmpty(line_1)) {\n                                        pattern_matching_result_3 = 1;\n                                    }\n                                    else if (head(line_1) === \"\\\\\") {\n                                        if (!isEmpty(tail(line_1))) {\n                                            pattern_matching_result_3 = 0;\n                                            rest_6 = tail(tail(line_1));\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 0;\n                                            rest_6 = tail(line_1);\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_3 = 0;\n                                        rest_6 = tail(line_1);\n                                    }\n                                    switch (pattern_matching_result_3) {\n                                        case 0: {\n                                            delim_1_mut = delim_1;\n                                            line_1_mut = rest_6;\n                                            continue ptfs;\n                                        }\n                                        case 1: {\n                                            return void 0;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            break;\n        }\n    };\n    const rest_7 = ptfs(delim, line);\n    if (rest_7 != null) {\n        if ((_x = rest_7, equals(line, empty()))) {\n            const _x_1 = rest_7;\n            return singleton(\"\");\n        }\n        else if (rest_7 != null) {\n            const x_7 = rest_7;\n            return cons(cLstToStr(toList(take((length(line) - length(x_7)) - 1, line))), pipeTableFindSplits(delim, x_7));\n        }\n        else {\n            throw (new Error(\"Match failure\"));\n        }\n    }\n    else {\n        return singleton(cLstToStr(line));\n    }\n}\n\nexport function $007CTableCellSeparator$007C_$007C(_arg1_0, _arg1_1) {\n    let tupledArg_2, tupledArg_1, tupledArg;\n    const _arg1 = [_arg1_0, _arg1_1];\n    let pattern_matching_result;\n    const activePatternResult2150 = StringPosition_$007CStartsAndEndsWith$007C_$007C(\":\", \":\", _arg1[0], _arg1[1]);\n    if (activePatternResult2150 != null) {\n        if (((tupledArg = activePatternResult2150, StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, tupledArg[0], tupledArg[1]))) != null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return new MarkdownColumnAlignment(2);\n        }\n        case 1: {\n            let pattern_matching_result_1;\n            const activePatternResult2146 = StringPosition_$007CStartsWith$007C_$007C(\":\", _arg1[0], _arg1[1]);\n            if (activePatternResult2146 != null) {\n                if (((tupledArg_1 = activePatternResult2146, StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, tupledArg_1[0], tupledArg_1[1]))) != null) {\n                    pattern_matching_result_1 = 0;\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    return new MarkdownColumnAlignment(0);\n                }\n                case 1: {\n                    let pattern_matching_result_2;\n                    const activePatternResult2142 = StringPosition_$007CStartsAndEndsWith$007C_$007C(\"\", \":\", _arg1[0], _arg1[1]);\n                    if (activePatternResult2142 != null) {\n                        if (((tupledArg_2 = activePatternResult2142, StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, tupledArg_2[0], tupledArg_2[1]))) != null) {\n                            pattern_matching_result_2 = 0;\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            return new MarkdownColumnAlignment(1);\n                        }\n                        case 1: {\n                            if (StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, _arg1[0], _arg1[1]) != null) {\n                                return new MarkdownColumnAlignment(3);\n                            }\n                            else {\n                                return void 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function $007CPipeTableRow$007C_$007C(size, delimiters, line, n) {\n    const parts = map_1((s) => [s.trim(), n], toArray(pipeTableFindSplits(delimiters, ofArray(line.split(\"\")))));\n    const n_1 = parts.length | 0;\n    const m = ((size == null) ? 1 : value_14(size)) | 0;\n    const x = ((isNullOrEmpty(parts[0][0]) && (n_1 > m)) ? 1 : 0) | 0;\n    const y = ((isNullOrEmpty(parts[n_1 - 1][0]) && ((n_1 - x) > m)) ? (n_1 - 2) : (n_1 - 1)) | 0;\n    if ((n_1 === 1) ? true : ((size != null) && (((y - x) + 1) !== m))) {\n        return void 0;\n    }\n    else {\n        return ofArray(parts.slice(x, y + 1));\n    }\n}\n\nexport function $007CPipeSeparatorRow$007C_$007C(size, _arg1_0, _arg1_1) {\n    const _arg1 = [_arg1_0, _arg1_1];\n    const activePatternResult2159 = $007CPipeTableRow$007C_$007C(size, [\"|\", \"+\"], _arg1[0], _arg1[1]);\n    if (activePatternResult2159 != null) {\n        const parts = activePatternResult2159;\n        const alignments = choose((tupledArg) => $007CTableCellSeparator$007C_$007C(tupledArg[0], tupledArg[1]), parts);\n        if (length(parts) !== length(alignments)) {\n            return void 0;\n        }\n        else {\n            return alignments;\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CPipeTableBlock$007C_$007C(input) {\n    const getTableRows = (size_mut, acc_mut, takenLinesAcc_mut, lines_mut) => {\n        getTableRows:\n        while (true) {\n            const size = size_mut, acc = acc_mut, takenLinesAcc = takenLinesAcc_mut, lines = lines_mut;\n            let pattern_matching_result, columns, rest, takenLine;\n            if (!isEmpty(lines)) {\n                let activePatternResult2164;\n                const tupledArg = head(lines);\n                activePatternResult2164 = $007CPipeTableRow$007C_$007C(size, [\"|\"], tupledArg[0], tupledArg[1]);\n                if (activePatternResult2164 != null) {\n                    pattern_matching_result = 0;\n                    columns = activePatternResult2164;\n                    rest = tail(lines);\n                    takenLine = head(lines);\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    size_mut = size;\n                    acc_mut = cons(map((l) => singleton(l), columns), acc);\n                    takenLinesAcc_mut = cons(takenLine, takenLinesAcc);\n                    lines_mut = rest;\n                    continue getTableRows;\n                }\n                case 1: {\n                    return [reverse(acc), reverse(takenLinesAcc), lines];\n                }\n            }\n            break;\n        }\n    };\n    let pattern_matching_result_1, alignments, rest_2, takenLine_1;\n    if (!isEmpty(input)) {\n        let activePatternResult2175;\n        const tupledArg_1 = head(input);\n        activePatternResult2175 = $007CPipeSeparatorRow$007C_$007C(void 0, tupledArg_1[0], tupledArg_1[1]);\n        if (activePatternResult2175 != null) {\n            pattern_matching_result_1 = 0;\n            alignments = activePatternResult2175;\n            rest_2 = tail(input);\n            takenLine_1 = head(input);\n        }\n        else {\n            pattern_matching_result_1 = 1;\n        }\n    }\n    else {\n        pattern_matching_result_1 = 1;\n    }\n    switch (pattern_matching_result_1) {\n        case 0: {\n            const patternInput = getTableRows(length(alignments), empty(), empty(), rest_2);\n            return [[void 0, alignments, patternInput[0]], cons(takenLine_1, patternInput[1]), patternInput[2]];\n        }\n        case 1: {\n            let pattern_matching_result_2, headers, rest_3, takenLine_2;\n            if (!isEmpty(input)) {\n                let activePatternResult2173;\n                const tupledArg_2 = head(input);\n                activePatternResult2173 = $007CPipeTableRow$007C_$007C(void 0, [\"|\"], tupledArg_2[0], tupledArg_2[1]);\n                if (activePatternResult2173 != null) {\n                    pattern_matching_result_2 = 0;\n                    headers = activePatternResult2173;\n                    rest_3 = tail(input);\n                    takenLine_2 = head(input);\n                }\n                else {\n                    pattern_matching_result_2 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_2 = 1;\n            }\n            switch (pattern_matching_result_2) {\n                case 0: {\n                    let pattern_matching_result_3, alignments_1, rest_4, takenLine2;\n                    if (!isEmpty(rest_3)) {\n                        let activePatternResult2171;\n                        const tupledArg_3 = head(rest_3);\n                        activePatternResult2171 = $007CPipeSeparatorRow$007C_$007C(length(headers), tupledArg_3[0], tupledArg_3[1]);\n                        if (activePatternResult2171 != null) {\n                            pattern_matching_result_3 = 0;\n                            alignments_1 = activePatternResult2171;\n                            rest_4 = tail(rest_3);\n                            takenLine2 = head(rest_3);\n                        }\n                        else {\n                            pattern_matching_result_3 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_3 = 1;\n                    }\n                    switch (pattern_matching_result_3) {\n                        case 0: {\n                            const patternInput_1 = getTableRows(length(headers), empty(), empty(), rest_4);\n                            return [[map((l_1) => singleton(l_1), headers), alignments_1, patternInput_1[0]], ofArrayWithTail([takenLine_2, takenLine2], patternInput_1[1]), patternInput_1[2]];\n                        }\n                        case 1: {\n                            return void 0;\n                        }\n                    }\n                }\n                case 1: {\n                    return void 0;\n                }\n            }\n        }\n    }\n}\n\nexport function $007CEmacsTableLine$007C_$007C(grid, c, check, line, _n) {\n    const p = (grid != null) ? value_14(grid) : toArray_1(rangeDouble(0, 1, line.length - 1)).filter((i) => (line[i] === c));\n    const n = (p.length - 1) | 0;\n    if (((n < 2) ? true : (line.length <= p[n])) ? true : p.some((i_1) => (line[i_1] !== c))) {\n        return void 0;\n    }\n    else {\n        const parts = map((i_2) => {\n            const rng = new MarkdownRange(n, 0, n, (p[i_2] - p[i_2 - 1]) - 1);\n            return [substring(line, p[i_2 - 1] + 1, (p[i_2] - p[i_2 - 1]) - 1), rng];\n        }, toList(rangeDouble(1, 1, n)));\n        if (forAll_1(check, parts)) {\n            return [p, parts];\n        }\n        else {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CEmacsTableBlock$007C_$007C(lines) {\n    let pattern_matching_result, grid_1, parts, rest, takenLine;\n    if (!isEmpty(lines)) {\n        let activePatternResult2199;\n        const tupledArg_4 = head(lines);\n        activePatternResult2199 = $007CEmacsTableLine$007C_$007C(void 0, \"+\", (arg_1) => {\n            let tupledArg_1;\n            return ((tupledArg_1 = arg_1, $007CTableCellSeparator$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null;\n        }, tupledArg_4[0], tupledArg_4[1]);\n        if (activePatternResult2199 != null) {\n            pattern_matching_result = 0;\n            grid_1 = activePatternResult2199[0];\n            parts = activePatternResult2199[1];\n            rest = tail(lines);\n            takenLine = head(lines);\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const alignments = choose((tupledArg_5) => $007CTableCellSeparator$007C_$007C(tupledArg_5[0], tupledArg_5[1]), parts);\n            const emptyCur = replicate_1(grid_1.length - 1, empty());\n            const loop = (flag_mut, takenLines2_mut, headers_mut, prevRows_mut, cur_mut, lines_1_mut) => {\n                let tupledArg_9, tupledArg_8;\n                loop:\n                while (true) {\n                    const flag = flag_mut, takenLines2 = takenLines2_mut, headers = headers_mut, prevRows = prevRows_mut, cur = cur_mut, lines_1 = lines_1_mut;\n                    let pattern_matching_result_1, others, parts_1, takenLine2;\n                    if (!isEmpty(lines_1)) {\n                        let activePatternResult2191;\n                        const tupledArg_6 = head(lines_1);\n                        activePatternResult2191 = $007CEmacsTableLine$007C_$007C(grid_1, \"|\", (tupledArg_3) => true, tupledArg_6[0], tupledArg_6[1]);\n                        if (activePatternResult2191 != null) {\n                            pattern_matching_result_1 = 0;\n                            others = tail(lines_1);\n                            parts_1 = activePatternResult2191[1];\n                            takenLine2 = head(lines_1);\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            flag_mut = false;\n                            takenLines2_mut = cons(takenLine2, takenLines2);\n                            headers_mut = headers;\n                            prevRows_mut = prevRows;\n                            cur_mut = map((tupledArg_7) => {\n                                const _arg1 = tupledArg_7[0];\n                                return cons([_arg1[0].trimEnd(), _arg1[1]], tupledArg_7[1]);\n                            }, zip(parts_1, cur));\n                            lines_1_mut = others;\n                            continue loop;\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, others_1, takenLine2_1;\n                            if (!isEmpty(lines_1)) {\n                                if (((tupledArg_8 = head(lines_1), $007CEmacsTableLine$007C_$007C(grid_1, \"+\", (arg) => {\n                                    let tupledArg;\n                                    return ((tupledArg = arg, StringPosition_$007CEqualsRepeated$007C_$007C(\"-\", MarkdownRangeModule_zero, tupledArg[0], tupledArg[1]))) != null;\n                                }, tupledArg_8[0], tupledArg_8[1]))) != null) {\n                                    pattern_matching_result_2 = 0;\n                                    others_1 = tail(lines_1);\n                                    takenLine2_1 = head(lines_1);\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    flag_mut = true;\n                                    takenLines2_mut = cons(takenLine2_1, takenLines2);\n                                    headers_mut = headers;\n                                    prevRows_mut = cons(map((list_1) => reverse(list_1), cur), prevRows);\n                                    cur_mut = emptyCur;\n                                    lines_1_mut = others_1;\n                                    continue loop;\n                                }\n                                case 1: {\n                                    let pattern_matching_result_3, others_3, takenLine2_3;\n                                    if (!isEmpty(lines_1)) {\n                                        if (((tupledArg_9 = head(lines_1), $007CEmacsTableLine$007C_$007C(grid_1, \"+\", (arg_2) => {\n                                            let tupledArg_2;\n                                            return ((tupledArg_2 = arg_2, StringPosition_$007CEqualsRepeated$007C_$007C(\"=\", MarkdownRangeModule_zero, tupledArg_2[0], tupledArg_2[1]))) != null;\n                                        }, tupledArg_9[0], tupledArg_9[1]))) != null) {\n                                            if (headers == null) {\n                                                pattern_matching_result_3 = 0;\n                                                others_3 = tail(lines_1);\n                                                takenLine2_3 = head(lines_1);\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_3 = 1;\n                                    }\n                                    switch (pattern_matching_result_3) {\n                                        case 0: {\n                                            flag_mut = true;\n                                            takenLines2_mut = cons(takenLine2_3, takenLines2);\n                                            headers_mut = map((list_2) => reverse(list_2), cur);\n                                            prevRows_mut = prevRows;\n                                            cur_mut = emptyCur;\n                                            lines_1_mut = others_3;\n                                            continue loop;\n                                        }\n                                        case 1: {\n                                            if (flag) {\n                                                return [[headers, alignments, reverse(prevRows)], cons(takenLine, reverse(takenLines2)), lines_1];\n                                            }\n                                            else {\n                                                return void 0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            };\n            return loop(true, empty(), void 0, empty(), emptyCur, rest);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CBlockquoteStart$007C_$007C(line, n) {\n    let inputRecord;\n    const match$0027 = match(create(\"(^ {0,3})\\u003e(\\\\s?)(.*)\"), line);\n    if (match$0027 != null) {\n        const group = match$0027[3];\n        const index = (match$0027[1].length + match$0027[2].length) | 0;\n        return [group || \"\", (inputRecord = (new FSharpRef(n)), new MarkdownRange(inputRecord.contents.StartLine, n.StartColumn + index, inputRecord.contents.EndLine, (n.StartColumn + index) + group.length))];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CTakeParagraphLines$007C_$007C(input) {\n    const matchValue = List_partitionWhileLookahead((_arg1) => {\n        let tupledArg, tupledArg_1;\n        return ($007CHeading$007C_$007C(_arg1) != null) ? false : (($007CFencedCodeBlock$007C_$007C(_arg1) != null) ? false : ((!isEmpty(_arg1)) ? ((((tupledArg = head(_arg1), $007CBlockquoteStart$007C_$007C(tupledArg[0], tupledArg[1]))) != null) ? false : ((!isEmpty(_arg1)) ? (!(((tupledArg_1 = head(_arg1), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null)) : true)) : ((!isEmpty(_arg1)) ? (!(((tupledArg_1 = head(_arg1), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null)) : true)));\n    }, input);\n    if (!equals(matchValue[0], empty())) {\n        return [matchValue[0], matchValue[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CHtmlBlock$007C_$007C(lines) {\n    let rest, html;\n    let pattern_matching_result, _n_1, first_1, html_1, rest_1, takenLine_1;\n    if (!isEmpty(lines)) {\n        const activePatternResult2208 = $007CTakeParagraphLines$007C_$007C(lines);\n        if (activePatternResult2208 != null) {\n            if ((rest = activePatternResult2208[1], (html = activePatternResult2208[0], head(lines)[0].indexOf(\"\\u003c\") === 0))) {\n                pattern_matching_result = 0;\n                _n_1 = head(lines)[1];\n                first_1 = head(lines)[0];\n                html_1 = activePatternResult2208[0];\n                rest_1 = activePatternResult2208[1];\n                takenLine_1 = head(lines);\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [html_1, cons(takenLine_1, html_1), rest_1];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CLinesUntilBlockquoteEnds$007C(input) {\n    return List_partitionUntilLookahead((next) => {\n        let tupledArg_1, tupledArg;\n        let pattern_matching_result;\n        if (!isEmpty(next)) {\n            if (((tupledArg = head(next), $007CBlockquoteStart$007C_$007C(tupledArg[0], tupledArg[1]))) != null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                if ($007CHeading$007C_$007C(next) != null) {\n                    return true;\n                }\n                else {\n                    let pattern_matching_result_1;\n                    if (!isEmpty(next)) {\n                        if (((tupledArg_1 = head(next), StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null) {\n                            pattern_matching_result_1 = 0;\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            return true;\n                        }\n                        case 1: {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }, input);\n}\n\nexport function $007CBlockquote$007C_$007C(lines) {\n    let activePatternResult2215, lines_1, rest_2, takenLines_1;\n    const activePatternResult2219 = $007CEmptyBlockquote$007C_$007C(lines);\n    if (activePatternResult2219 != null) {\n        const activePatternResult2220 = Lines_$007CTrimBlankStart$007C(activePatternResult2219[1]);\n        const takenLines = activePatternResult2219[0];\n        return [singleton([\"\", MarkdownRangeModule_zero]), append_1(takenLines, activePatternResult2220[0]), activePatternResult2220[1]];\n    }\n    else {\n        let pattern_matching_result, continued, quoteLine, rest_1, takenLine, takenLines2_1;\n        if (!isEmpty(lines)) {\n            let activePatternResult2216;\n            const tupledArg = head(lines);\n            activePatternResult2216 = $007CBlockquoteStart$007C_$007C(tupledArg[0], tupledArg[1]);\n            if (activePatternResult2216 != null) {\n                const activePatternResult2217 = $007CLinesUntilBlockquoteEnds$007C(tail(lines));\n                const activePatternResult2218 = Lines_$007CTrimBlankStart$007C(activePatternResult2217[1]);\n                pattern_matching_result = 0;\n                continued = activePatternResult2217[0];\n                quoteLine = activePatternResult2216;\n                rest_1 = activePatternResult2218[1];\n                takenLine = head(lines);\n                takenLines2_1 = activePatternResult2218[0];\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                const patternInput = (activePatternResult2215 = $007CBlockquote$007C_$007C(rest_1), (activePatternResult2215 != null) ? ((lines_1 = activePatternResult2215[0], (rest_2 = activePatternResult2215[2], (takenLines_1 = activePatternResult2215[1], [lines_1, takenLines_1, rest_2])))) : [empty(), empty(), rest_1]);\n                return [append_1(cons(quoteLine, continued), patternInput[0]), append_1(cons(takenLine, continued), append_1(takenLines2_1, patternInput[1])), patternInput[2]];\n            }\n            case 1: {\n                return void 0;\n            }\n        }\n    }\n}\n\nexport function $007CEmptyBlockquote$007C_$007C(lines) {\n    let tupledArg_3, tupledArg_1;\n    let pattern_matching_result;\n    if (!isEmpty(lines)) {\n        let activePatternResult2224;\n        const tupledArg = head(lines);\n        activePatternResult2224 = $007CBlockquoteStart$007C_$007C(tupledArg[0], tupledArg[1]);\n        if (activePatternResult2224 != null) {\n            if (((tupledArg_1 = activePatternResult2224, StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_1[0], tupledArg_1[1]))) != null) {\n                if ($007CBlockquote$007C_$007C(tail(lines)) != null) {\n                    pattern_matching_result = 0;\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return void 0;\n        }\n        case 1: {\n            let pattern_matching_result_1, rest, takenLine;\n            if (!isEmpty(lines)) {\n                let activePatternResult2222;\n                const tupledArg_2 = head(lines);\n                activePatternResult2222 = $007CBlockquoteStart$007C_$007C(tupledArg_2[0], tupledArg_2[1]);\n                if (activePatternResult2222 != null) {\n                    if (((tupledArg_3 = activePatternResult2222, StringPosition_$007CWhiteSpace$007C_$007C(tupledArg_3[0], tupledArg_3[1]))) != null) {\n                        pattern_matching_result_1 = 0;\n                        rest = tail(lines);\n                        takenLine = head(lines);\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    return [singleton(takenLine), rest];\n                }\n                case 1: {\n                    return void 0;\n                }\n            }\n        }\n    }\n}\n\nexport function $007CLatexBlock$007C_$007C(lines) {\n    let first_2;\n    let pattern_matching_result, _takenLine1_1, first_1, n_1, rest_1;\n    if (!isEmpty(lines)) {\n        if (head(lines)[0].trimEnd() === \"$$$\") {\n            pattern_matching_result = 0;\n            _takenLine1_1 = head(lines);\n            first_1 = head(lines)[0];\n            n_1 = head(lines)[1];\n            rest_1 = tail(lines);\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const activePatternResult2228 = $007CTakeParagraphLines$007C_$007C(rest_1);\n            if (activePatternResult2228 != null) {\n                const body = activePatternResult2228[0];\n                const rest_2 = activePatternResult2228[1];\n                return [\"equation\", body, append_1(cons([\"\\\\begin{equation}\", n_1], body), singleton([\"\\\\end{equation}\", n_1])), rest_2];\n            }\n            else {\n                return void 0;\n            }\n        }\n        case 1: {\n            let pattern_matching_result_1, first_3, n_3, rest_4, takenLine_1;\n            if (!isEmpty(lines)) {\n                if ((first_2 = head(lines)[0], ((first_2.trimEnd().indexOf(\"$$\") === 0) && endsWith(first_2.trimEnd(), \"$$\")) && (first_2.trimEnd().length >= 4))) {\n                    pattern_matching_result_1 = 0;\n                    first_3 = head(lines)[0];\n                    n_3 = head(lines)[1];\n                    rest_4 = tail(lines);\n                    takenLine_1 = head(lines);\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    const text = first_3.trimEnd();\n                    return [\"equation\", singleton([text.slice(2, (text.length - 3) + 1), n_3]), singleton(takenLine_1), rest_4];\n                }\n                case 1: {\n                    let pattern_matching_result_2, _n_1, first_5, rest_6, takenLine_3;\n                    if (!isEmpty(lines)) {\n                        if (head(lines)[0].trimEnd() === \"\\\\begin{equation}\") {\n                            pattern_matching_result_2 = 0;\n                            _n_1 = head(lines)[1];\n                            first_5 = head(lines)[0];\n                            rest_6 = tail(lines);\n                            takenLine_3 = head(lines);\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            const body_1 = takeWhile((s) => (s[0] !== \"\\\\end{equation}\"), rest_6);\n                            const res = skipWhile((s_1) => (s_1[0] !== \"\\\\end{equation}\"), rest_6);\n                            if (isEmpty(res)) {\n                                return void 0;\n                            }\n                            else {\n                                return [\"equation\", body_1, cons(takenLine_3, body_1), tail(res)];\n                            }\n                        }\n                        case 1: {\n                            let pattern_matching_result_3, _n_3, first_7, rest_9, takenLine_5;\n                            if (!isEmpty(lines)) {\n                                if (head(lines)[0].trimEnd() === \"\\\\begin{align}\") {\n                                    pattern_matching_result_3 = 0;\n                                    _n_3 = head(lines)[1];\n                                    first_7 = head(lines)[0];\n                                    rest_9 = tail(lines);\n                                    takenLine_5 = head(lines);\n                                }\n                                else {\n                                    pattern_matching_result_3 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_3 = 1;\n                            }\n                            switch (pattern_matching_result_3) {\n                                case 0: {\n                                    const body_2 = takeWhile((s_2) => (s_2[0] !== \"\\\\end{align}\"), rest_9);\n                                    const res_1 = skipWhile((s_3) => (s_3[0] !== \"\\\\end{align}\"), rest_9);\n                                    if (isEmpty(res_1)) {\n                                        return void 0;\n                                    }\n                                    else {\n                                        return [\"align\", body_2, cons(takenLine_5, body_2), tail(res_1)];\n                                    }\n                                }\n                                case 1: {\n                                    return void 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function $007CLinkDefinition$007C_$007C(s) {\n    let pattern_matching_result, line, link, rest, wrapped;\n    if (!isEmpty(s)) {\n        let activePatternResult2238;\n        const tupledArg = head(s);\n        activePatternResult2238 = StringPosition_$007CStartsWithWrapped$007C_$007C(\"[\", \"]:\", tupledArg[0], tupledArg[1]);\n        if (activePatternResult2238 != null) {\n            let activePatternResult2239;\n            const tupledArg_1 = activePatternResult2238[1];\n            activePatternResult2239 = StringPosition_$007CTrimBoth$007C(tupledArg_1[0], tupledArg_1[1]);\n            pattern_matching_result = 0;\n            line = head(s);\n            link = activePatternResult2239;\n            rest = tail(s);\n            wrapped = activePatternResult2238[0];\n        }\n        else {\n            let activePatternResult2240;\n            const tupledArg_2 = head(s);\n            activePatternResult2240 = StringPosition_$007CStartsWithWrapped$007C_$007C(\" [\", \"]:\", tupledArg_2[0], tupledArg_2[1]);\n            if (activePatternResult2240 != null) {\n                let activePatternResult2241;\n                const tupledArg_3 = activePatternResult2240[1];\n                activePatternResult2241 = StringPosition_$007CTrimBoth$007C(tupledArg_3[0], tupledArg_3[1]);\n                pattern_matching_result = 0;\n                line = head(s);\n                link = activePatternResult2241;\n                rest = tail(s);\n                wrapped = activePatternResult2240[0];\n            }\n            else {\n                let activePatternResult2242;\n                const tupledArg_4 = head(s);\n                activePatternResult2242 = StringPosition_$007CStartsWithWrapped$007C_$007C(\"  [\", \"]:\", tupledArg_4[0], tupledArg_4[1]);\n                if (activePatternResult2242 != null) {\n                    let activePatternResult2243;\n                    const tupledArg_5 = activePatternResult2242[1];\n                    activePatternResult2243 = StringPosition_$007CTrimBoth$007C(tupledArg_5[0], tupledArg_5[1]);\n                    pattern_matching_result = 0;\n                    line = head(s);\n                    link = activePatternResult2243;\n                    rest = tail(s);\n                    wrapped = activePatternResult2242[0];\n                }\n                else {\n                    let activePatternResult2244;\n                    const tupledArg_6 = head(s);\n                    activePatternResult2244 = StringPosition_$007CStartsWithWrapped$007C_$007C(\"   [\", \"]:\", tupledArg_6[0], tupledArg_6[1]);\n                    if (activePatternResult2244 != null) {\n                        let activePatternResult2245;\n                        const tupledArg_7 = activePatternResult2244[1];\n                        activePatternResult2245 = StringPosition_$007CTrimBoth$007C(tupledArg_7[0], tupledArg_7[1]);\n                        pattern_matching_result = 0;\n                        line = head(s);\n                        link = activePatternResult2245;\n                        rest = tail(s);\n                        wrapped = activePatternResult2244[0];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [[wrapped, link], singleton(line), rest];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function updateCurrentRange(lines) {\n    if (!isEmpty(lines)) {\n        return some(head(lines)[1]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function parseParagraphs(ctx, lines) {\n    return delay(() => {\n        let activePatternResult2249, loc, rest, yaml;\n        const ctx_1 = new ParsingContext(ctx.Links, ctx.Newline, ctx.IsFirst, updateCurrentRange(lines), ctx.ParseOptions);\n        const patternInput = (ctx_1.IsFirst && ParsingContext__get_AllowYamlFrontMatter(ctx_1)) ? ((activePatternResult2249 = $007CYamlFrontmatter$007C_$007C(lines), (activePatternResult2249 != null) ? ((loc = activePatternResult2249[1], (rest = activePatternResult2249[2], (yaml = activePatternResult2249[0], [new MarkdownParagraph(12, yaml, loc), rest])))) : [void 0, lines])) : [void 0, lines];\n        const moreLines = Lines_$007CTrimBlankStart$007C(patternInput[1])[1];\n        const frontMatter = patternInput[0];\n        return append((frontMatter != null) ? singleton_1(frontMatter) : ((empty_1())), delay(() => {\n            let tree, nestUnmatchingItems, formatTree, unifySimpleProperty, takenLines_7, all;\n            const ctx_2 = new ParsingContext(ctx_1.Links, ctx_1.Newline, ctx_1.IsFirst, updateCurrentRange(moreLines), ctx_1.ParseOptions);\n            const ctx_3 = new ParsingContext(ctx_2.Links, ctx_2.Newline, false, ctx_2.CurrentRange, ctx_2.ParseOptions);\n            const activePatternResult2302 = $007CLinkDefinition$007C_$007C(moreLines);\n            if (activePatternResult2302 != null) {\n                const activePatternResult2303 = Lines_$007CTrimBlankStart$007C(activePatternResult2302[2]);\n                const key = activePatternResult2302[0][0];\n                const link = activePatternResult2302[0][1];\n                const takenLines = activePatternResult2302[1];\n                return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines, activePatternResult2303[0]), ctx_3.CurrentRange)) : append(ctx_3.Links.has(key) ? ((toFail(printf(\"Cannot define a link to the reference %s twice.\"))(key), empty_1())) : empty_1(), delay(() => {\n                    addToDict(ctx_3.Links, key, getLinkAndTitle(link[0], link[1]));\n                    return empty_1();\n                })), delay(() => parseParagraphs(ctx_3, activePatternResult2303[1])));\n            }\n            else {\n                let pattern_matching_result, code, ignoredLine, langString, lines_2, takenLines_1, takenLines2_1;\n                const activePatternResult2298 = $007CNestedCodeBlock$007C_$007C(moreLines);\n                if (activePatternResult2298 != null) {\n                    const activePatternResult2299 = Lines_$007CTrimBlankStart$007C(activePatternResult2298[2]);\n                    pattern_matching_result = 0;\n                    code = activePatternResult2298[0];\n                    ignoredLine = activePatternResult2298[4];\n                    langString = activePatternResult2298[3];\n                    lines_2 = activePatternResult2299[1];\n                    takenLines_1 = activePatternResult2298[1];\n                    takenLines2_1 = activePatternResult2299[0];\n                }\n                else {\n                    const activePatternResult2300 = $007CFencedCodeBlock$007C_$007C(moreLines);\n                    if (activePatternResult2300 != null) {\n                        const activePatternResult2301 = Lines_$007CTrimBlankStart$007C(activePatternResult2300[2]);\n                        pattern_matching_result = 0;\n                        code = activePatternResult2300[0];\n                        ignoredLine = activePatternResult2300[4];\n                        langString = activePatternResult2300[3];\n                        lines_2 = activePatternResult2301[1];\n                        takenLines_1 = activePatternResult2300[1];\n                        takenLines2_1 = activePatternResult2301[0];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return append(ParsingContext__get_ParseCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_1, takenLines2_1), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(2, join(ctx_3.Newline, code), void 0, langString, ignoredLine, ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, lines_2)));\n                    }\n                    case 1: {\n                        const activePatternResult2296 = $007CBlockquote$007C_$007C(moreLines);\n                        if (activePatternResult2296 != null) {\n                            const activePatternResult2297 = Lines_$007CTrimBlankStart$007C(activePatternResult2296[2]);\n                            const body = activePatternResult2296[0];\n                            const takenLines_2 = activePatternResult2296[1];\n                            return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_2, activePatternResult2297[0]), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(5, ofSeq(parseParagraphs(ctx_3, append_1(body, singleton([\"\", MarkdownRangeModule_zero])))), ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, activePatternResult2297[1])));\n                        }\n                        else {\n                            let pattern_matching_result_1, alignments, headers, rest_2, rows, takenLines_3, takenLines2_3;\n                            const activePatternResult2292 = $007CEmacsTableBlock$007C_$007C(moreLines);\n                            if (activePatternResult2292 != null) {\n                                const activePatternResult2293 = Lines_$007CTrimBlankStart$007C(activePatternResult2292[2]);\n                                pattern_matching_result_1 = 0;\n                                alignments = activePatternResult2292[0][1];\n                                headers = activePatternResult2292[0][0];\n                                rest_2 = activePatternResult2293[1];\n                                rows = activePatternResult2292[0][2];\n                                takenLines_3 = activePatternResult2292[1];\n                                takenLines2_3 = activePatternResult2293[0];\n                            }\n                            else {\n                                const activePatternResult2294 = $007CPipeTableBlock$007C_$007C(moreLines);\n                                if (activePatternResult2294 != null) {\n                                    const activePatternResult2295 = Lines_$007CTrimBlankStart$007C(activePatternResult2294[2]);\n                                    pattern_matching_result_1 = 0;\n                                    alignments = activePatternResult2294[0][1];\n                                    headers = activePatternResult2294[0][0];\n                                    rest_2 = activePatternResult2295[1];\n                                    rows = activePatternResult2294[0][2];\n                                    takenLines_3 = activePatternResult2294[1];\n                                    takenLines2_3 = activePatternResult2295[0];\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            switch (pattern_matching_result_1) {\n                                case 0: {\n                                    return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_3, takenLines2_3), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(9, (headers == null) ? (void 0) : map((i) => ofSeq(parseParagraphs(ctx_3, i)), value_14(headers)), alignments, map((list_1) => map((i_1) => ofSeq(parseParagraphs(ctx_3, i_1)), list_1), rows), ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, rest_2)));\n                                }\n                                case 1: {\n                                    let pattern_matching_result_2, c, lines_3, takenLine, takenLines2_4;\n                                    if (!isEmpty(moreLines)) {\n                                        let activePatternResult2290;\n                                        const tupledArg = head(moreLines);\n                                        activePatternResult2290 = $007CHorizontalRule$007C_$007C(tupledArg[0], tupledArg[1]);\n                                        if (activePatternResult2290 != null) {\n                                            const activePatternResult2291 = Lines_$007CTrimBlankStart$007C(tail(moreLines));\n                                            pattern_matching_result_2 = 0;\n                                            c = activePatternResult2290;\n                                            lines_3 = activePatternResult2291[1];\n                                            takenLine = head(moreLines);\n                                            takenLines2_4 = activePatternResult2291[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_2 = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 1;\n                                    }\n                                    switch (pattern_matching_result_2) {\n                                        case 0: {\n                                            return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, cons(takenLine, takenLines2_4), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(8, c, ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, lines_3)));\n                                        }\n                                        case 1: {\n                                            const activePatternResult2288 = $007CLatexBlock$007C_$007C(moreLines);\n                                            if (activePatternResult2288 != null) {\n                                                const activePatternResult2289 = Lines_$007CTrimBlankStart$007C(activePatternResult2288[3]);\n                                                const body_1 = activePatternResult2288[1];\n                                                const env = activePatternResult2288[0];\n                                                const takenLines_4 = activePatternResult2288[2];\n                                                return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_4, activePatternResult2289[0]), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(7, env, map((tuple) => tuple[0], body_1), ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, activePatternResult2289[1])));\n                                            }\n                                            else {\n                                                const activePatternResult2286 = $007CListItems$007C_$007C(true, moreLines);\n                                                if (activePatternResult2286 != null) {\n                                                    const activePatternResult2287 = Lines_$007CTrimBlankStart$007C(activePatternResult2286[2]);\n                                                    const items = activePatternResult2286[0];\n                                                    const takenLines_5 = activePatternResult2286[1];\n                                                    return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_5, activePatternResult2287[0]), ctx_3.CurrentRange)) : ((tree = Tree_ofIndentedList(items), (nestUnmatchingItems = ((items_1) => {\n                                                        if (isEmpty(items_1)) {\n                                                            return empty();\n                                                        }\n                                                        else {\n                                                            return map((tupledArg_1) => {\n                                                                const _arg2 = tupledArg_1[0];\n                                                                return new Tree$1(0, _arg2.fields[0], append_1(nestUnmatchingItems(_arg2.fields[1]), tupledArg_1[1]));\n                                                            }, List_nestUnderLastMatching((_arg1) => equals(_arg1.fields[0][1], head(items_1).fields[0][1]), items_1));\n                                                        }\n                                                    }), (formatTree = ((nodes) => (new MarkdownParagraph(4, (!isEmpty(nodes)) ? head(nodes).fields[0][1] : (new MarkdownListKind(1)), toList(delay(() => collect((matchValue) => {\n                                                        const nested_1 = matchValue.fields[1];\n                                                        const body_2 = matchValue.fields[0][2];\n                                                        return singleton_1(toList(delay(() => {\n                                                            const rng = MarkdownRangeModule_mergeRanges(map((tuple_1) => tuple_1[1], body_2));\n                                                            return append((!matchValue.fields[0][0]) ? parseParagraphs(ctx_3, body_2) : singleton_1(new MarkdownParagraph(6, parseSpans(join(ctx_3.Newline, map((tuple_2) => tuple_2[0], body_2)), rng, ctx_3), ctx_3.CurrentRange)), delay(() => ((!equals(nested_1, empty())) ? singleton_1(formatTree(nested_1)) : empty_1())));\n                                                        })));\n                                                    }, nodes))), ctx_3.CurrentRange))), (unifySimpleProperty = ((nodes_1) => {\n                                                        if (exists((_arg1_1) => {\n                                                            if (_arg1_1.fields[0][0]) {\n                                                                return false;\n                                                            }\n                                                            else {\n                                                                return true;\n                                                            }\n                                                        }, tree)) {\n                                                            return map((_arg2_1) => (new Tree$1(0, [false, _arg2_1.fields[0][1], _arg2_1.fields[0][2]], unifySimpleProperty(_arg2_1.fields[1]))), nodes_1);\n                                                        }\n                                                        else {\n                                                            return nodes_1;\n                                                        }\n                                                    }), singleton_1(formatTree(unifySimpleProperty(tree)))))))), delay(() => parseParagraphs(ctx_3, activePatternResult2287[1])));\n                                                }\n                                                else {\n                                                    const activePatternResult2283 = $007CHeading$007C_$007C(moreLines);\n                                                    if (activePatternResult2283 != null) {\n                                                        const activePatternResult2284 = Lines_$007CTrimBlankStart$007C(activePatternResult2283[3]);\n                                                        const body_3 = activePatternResult2283[1];\n                                                        const n = activePatternResult2283[0] | 0;\n                                                        const takenLines_6 = activePatternResult2283[2];\n                                                        return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_6, activePatternResult2284[0]), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(0, n, parseSpans(body_3[0], body_3[1], ctx_3), ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, activePatternResult2284[1])));\n                                                    }\n                                                    else {\n                                                        let pattern_matching_result_3, code_3, lines_6, takenLines_8, takenLines2_9;\n                                                        const activePatternResult2281 = $007CHtmlBlock$007C_$007C(moreLines);\n                                                        if (activePatternResult2281 != null) {\n                                                            const activePatternResult2282 = Lines_$007CTrimBlankStart$007C(activePatternResult2281[2]);\n                                                            if ((takenLines_7 = activePatternResult2281[1], (all = join(ctx_3.Newline, map((tuple_3) => tuple_3[0], activePatternResult2281[0])), ((!(all.indexOf(\"\\u003chttp://\") === 0)) && (!(all.indexOf(\"\\u003cftp://\") === 0))) && (!(all.indexOf(\"@\") >= 0))))) {\n                                                                pattern_matching_result_3 = 0;\n                                                                code_3 = activePatternResult2281[0];\n                                                                lines_6 = activePatternResult2282[1];\n                                                                takenLines_8 = activePatternResult2281[1];\n                                                                takenLines2_9 = activePatternResult2282[0];\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_3 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_3 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_3) {\n                                                            case 0: {\n                                                                return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_8, takenLines2_9), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(3, join(ctx_3.Newline, map((tuple_4) => tuple_4[0], code_3)), void 0, ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, lines_6)));\n                                                            }\n                                                            case 1: {\n                                                                const activePatternResult2278 = $007CTakeParagraphLines$007C_$007C(moreLines);\n                                                                if (activePatternResult2278 != null) {\n                                                                    const activePatternResult2279 = Lines_$007CTrimParagraphLines$007C(activePatternResult2278[0]);\n                                                                    const activePatternResult2280 = Lines_$007CTrimBlankStart$007C(activePatternResult2278[1]);\n                                                                    const takenLines_9 = activePatternResult2278[0];\n                                                                    return append(ParsingContext__get_ParseNonCodeAsOther(ctx_3) ? singleton_1(new MarkdownParagraph(10, append_1(takenLines_9, activePatternResult2280[0]), ctx_3.CurrentRange)) : singleton_1(new MarkdownParagraph(1, parseSpans(join(ctx_3.Newline, map((tuple_5) => tuple_5[0], activePatternResult2279)), MarkdownRangeModule_mergeRanges(map((tuple_6) => tuple_6[1], activePatternResult2279)), ctx_3), ctx_3.CurrentRange)), delay(() => parseParagraphs(ctx_3, activePatternResult2280[1])));\n                                                                }\n                                                                else {\n                                                                    const activePatternResult2277 = Lines_$007CTrimBlankStart$007C(moreLines);\n                                                                    if (isEmpty(activePatternResult2277[1])) {\n                                                                        return empty_1();\n                                                                    }\n                                                                    else {\n                                                                        toFail(printf(\"Unexpectedly stopped!\\n%A\"))(moreLines);\n                                                                        return empty_1();\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n    });\n}\n\n","import { record_type, lambda_type, list_type, tuple_type, option_type, union_type, string_type, class_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { FSharpRef, Record, Union } from \"../fable-library.3.6.3/Types.js\";\nimport { singleton as singleton_1, ofArray, filter, collect, skipWhile, takeWhile, map, getSlice, item, tryFindIndex } from \"../fable-library.3.6.3/List.js\";\nimport { FSharpChoice$2 } from \"../fable-library.3.6.3/Choice.js\";\nimport { choose, collect as collect_1, empty, map as map_1, singleton, append, delay, toList, tryPick } from \"../fable-library.3.6.3/Seq.js\";\nimport { tryGetValue } from \"../fable-library.3.6.3/MapUtil.js\";\nimport { map as map_2, some } from \"../fable-library.3.6.3/Option.js\";\nimport { split, replicate, join, printf, toText, replace } from \"../fable-library.3.6.3/String.js\";\nimport { partialApply } from \"../fable-library.3.6.3/Util.js\";\nimport { MarkdownParagraph, MarkdownSpan } from \"./MarkdownModel.fs.js\";\n\nexport class FableTextWriter {\n    constructor() {\n        this.buffer = \"\";\n    }\n    toString() {\n        const _ = this;\n        return _.buffer;\n    }\n    Dispose() {\n    }\n}\n\nexport function FableTextWriter$reflection() {\n    return class_type(\"Fable.Formatting.Markdown.FableTextWriter\", void 0, FableTextWriter);\n}\n\nexport function FableTextWriter_$ctor() {\n    return new FableTextWriter();\n}\n\nexport class ParamKey extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"ParamKey\"];\n    }\n    toString() {\n        const x = this;\n        return x.fields[0];\n    }\n}\n\nexport function ParamKey$reflection() {\n    return union_type(\"Fable.Formatting.Markdown.ParamKey\", [], ParamKey, () => [[[\"Item\", string_type]]]);\n}\n\nexport function FableTextWriter__Write_Z721C83C5(_, s) {\n    _.buffer = (_.buffer + s);\n}\n\nexport class MarkdownUtils_FormattingContext extends Record {\n    constructor(Links, Newline, Substitutions, ResolveApiDocReference, DefineSymbol) {\n        super();\n        this.Links = Links;\n        this.Newline = Newline;\n        this.Substitutions = Substitutions;\n        this.ResolveApiDocReference = ResolveApiDocReference;\n        this.DefineSymbol = DefineSymbol;\n    }\n}\n\nexport function MarkdownUtils_FormattingContext$reflection() {\n    return record_type(\"Fable.Formatting.Markdown.MarkdownUtils.FormattingContext\", [], MarkdownUtils_FormattingContext, () => [[\"Links\", class_type(\"System.Collections.Generic.IDictionary`2\", [string_type, tuple_type(string_type, option_type(string_type))])], [\"Newline\", string_type], [\"Substitutions\", list_type(tuple_type(ParamKey$reflection(), string_type))], [\"ResolveApiDocReference\", lambda_type(string_type, option_type(tuple_type(string_type, string_type)))], [\"DefineSymbol\", string_type]]);\n}\n\nexport function MarkdownUtils_isCode(_arg3) {\n    switch (_arg3.tag) {\n        case 2:\n        case 3: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\n\nexport function MarkdownUtils_isCodeOutput(_arg4) {\n    if (_arg4.tag === 13) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function MarkdownUtils_getExecutionCount(_arg5) {\n    let pattern_matching_result, executionCount;\n    switch (_arg5.tag) {\n        case 2: {\n            pattern_matching_result = 0;\n            executionCount = _arg5.fields[1];\n            break;\n        }\n        case 3: {\n            pattern_matching_result = 0;\n            executionCount = _arg5.fields[1];\n            break;\n        }\n        default: pattern_matching_result = 1}\n    switch (pattern_matching_result) {\n        case 0: {\n            return executionCount;\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function MarkdownUtils_getCode(_arg6) {\n    switch (_arg6.tag) {\n        case 2: {\n            return _arg6.fields[0];\n        }\n        case 3: {\n            return _arg6.fields[0];\n        }\n        default: {\n            throw (new Error(\"unreachable\"));\n        }\n    }\n}\n\nexport function MarkdownUtils_getCodeOutput(_arg7) {\n    if (_arg7.tag === 13) {\n        return [_arg7.fields[0], _arg7.fields[1]];\n    }\n    else {\n        throw (new Error(\"unreachable\"));\n    }\n}\n\nexport function MarkdownUtils_splitParagraphs(paragraphs) {\n    const firstCode = tryFindIndex((_arg3) => MarkdownUtils_isCode(_arg3), paragraphs);\n    let pattern_matching_result;\n    if (firstCode == null) {\n        pattern_matching_result = 1;\n    }\n    else if (firstCode === 0) {\n        pattern_matching_result = 0;\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const code = item(0, paragraphs);\n            const codeLines = MarkdownUtils_getCode(code);\n            const otherParagraphs = getSlice(1, void 0, paragraphs);\n            const codeOutput = map((_arg7) => MarkdownUtils_getCodeOutput(_arg7), takeWhile((_arg4) => MarkdownUtils_isCodeOutput(_arg4), otherParagraphs));\n            const otherParagraphs_1 = skipWhile((_arg4_1) => MarkdownUtils_isCodeOutput(_arg4_1), otherParagraphs);\n            return [new FSharpChoice$2(0, [codeLines, codeOutput, MarkdownUtils_getExecutionCount(code)]), otherParagraphs_1];\n        }\n        case 1: {\n            return [new FSharpChoice$2(1, takeWhile((arg) => (!MarkdownUtils_isCode(arg)), paragraphs)), skipWhile((arg_1) => (!MarkdownUtils_isCode(arg_1)), paragraphs)];\n        }\n    }\n}\n\nexport function MarkdownUtils_$007CLookupKey$007C_$007C(dict, key) {\n    return tryPick((key_1) => {\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return some(matchValue[1]);\n        }\n        else {\n            return void 0;\n        }\n    }, [key, replace(key, \"\\r\\n\", \"\"), replace(key, \"\\r\\n\", \" \"), replace(key, \"\\n\", \"\"), replace(key, \"\\n\", \" \")]);\n}\n\nexport function MarkdownUtils_formatSpan(ctx, span) {\n    let pattern_matching_result, body, body_1, cmd, str, body_2, link;\n    if (span.tag === 10) {\n        pattern_matching_result = 0;\n        body = span.fields[0];\n    }\n    else if (span.tag === 11) {\n        pattern_matching_result = 1;\n        body_1 = span.fields[0];\n    }\n    else if (span.tag === 12) {\n        pattern_matching_result = 2;\n        cmd = span.fields[0];\n    }\n    else if (span.tag === 0) {\n        pattern_matching_result = 3;\n        str = span.fields[0];\n    }\n    else if (span.tag === 9) {\n        pattern_matching_result = 4;\n    }\n    else if (span.tag === 4) {\n        pattern_matching_result = 5;\n    }\n    else if (span.tag === 6) {\n        const activePatternResult2340 = MarkdownUtils_$007CLookupKey$007C_$007C(ctx.Links, span.fields[2]);\n        if (activePatternResult2340 != null) {\n            pattern_matching_result = 6;\n            body_2 = span.fields[0];\n            link = activePatternResult2340[0];\n        }\n        else {\n            pattern_matching_result = 6;\n            body_2 = span.fields[0];\n            link = span.fields[1];\n        }\n    }\n    else if (span.tag === 5) {\n        pattern_matching_result = 6;\n        body_2 = span.fields[0];\n        link = span.fields[1];\n    }\n    else {\n        pattern_matching_result = 7;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return toText(printf(\"$%s$\"))(body);\n        }\n        case 1: {\n            return toText(printf(\"$$%s$$\"))(body_1);\n        }\n        case 2: {\n            return MarkdownUtils_formatSpans(ctx, cmd.Render());\n        }\n        case 3: {\n            return str;\n        }\n        case 4: {\n            return \"\\n\";\n        }\n        case 5: {\n            return \"\";\n        }\n        case 6: {\n            return (((\"[\" + MarkdownUtils_formatSpans(ctx, body_2)) + \"](\") + link) + \")\";\n        }\n        case 7: {\n            let pattern_matching_result_1;\n            if (span.tag === 8) {\n                const activePatternResult2338 = MarkdownUtils_$007CLookupKey$007C_$007C(ctx.Links, span.fields[2]);\n                if (activePatternResult2338 != null) {\n                    pattern_matching_result_1 = 0;\n                }\n                else {\n                    pattern_matching_result_1 = 0;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    throw (new Error(\"tbd - IndirectImage\"));\n                }\n                case 1: {\n                    switch (span.tag) {\n                        case 7: {\n                            return toText(printf(\"![%s](%s)\"))(span.fields[0])(span.fields[1]);\n                        }\n                        case 2: {\n                            return (\"**\" + MarkdownUtils_formatSpans(ctx, span.fields[0])) + \"**\";\n                        }\n                        case 1: {\n                            return (\"`\" + span.fields[0]) + \"`\";\n                        }\n                        case 3: {\n                            return (\"**\" + MarkdownUtils_formatSpans(ctx, span.fields[0])) + \"**\";\n                        }\n                        default: {\n                            throw (new Error(\"Match failure: Fable.Formatting.Markdown.MarkdownSpan\"));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function MarkdownUtils_formatSpans(ctx, spans) {\n    return join(\"\", map((span) => MarkdownUtils_formatSpan(ctx, span), spans));\n}\n\nexport function MarkdownUtils_formatParagraph(ctx, paragraph) {\n    return toList(delay(() => ((paragraph.tag === 7) ? append(singleton(toText(printf(\"\\\\begin{%s}\"))(paragraph.fields[0])), delay(() => append(map_1((line) => line, paragraph.fields[1]), delay(() => append(singleton(toText(printf(\"\\\\end{%s}\"))(paragraph.fields[0])), delay(() => singleton(\"\"))))))) : ((paragraph.tag === 0) ? append(singleton((replicate(paragraph.fields[0], \"#\") + \" \") + MarkdownUtils_formatSpans(ctx, paragraph.fields[1])), delay(() => singleton(\"\"))) : ((paragraph.tag === 1) ? append(singleton(join(\"\", toList(delay(() => map_1((span) => MarkdownUtils_formatSpan(ctx, span), paragraph.fields[0]))))), delay(() => singleton(\"\"))) : ((paragraph.tag === 8) ? append(singleton(\"-----------------------\"), delay(() => singleton(\"\"))) : ((paragraph.tag === 2) ? append(singleton(paragraph.fields[0]), delay(() => singleton(\"\"))) : ((paragraph.tag === 4) ? ((paragraph.fields[0].tag === 1) ? singleton(join(\"\\n\", collect((ps) => toList(delay(() => map_1((p) => join(\"\", MarkdownUtils_formatParagraph(ctx, p)), ps))), paragraph.fields[1]))) : append(singleton(toText(printf(\"// can\\u0027t yet format %0A to pynb markdown\"))(paragraph)), delay(() => singleton(\"\")))) : ((paragraph.tag === 9) ? append((paragraph.fields[0] == null) ? ((empty())) : singleton(join(\" | \", collect((hs) => toList(delay(() => map_1((h) => join(\"\", MarkdownUtils_formatParagraph(ctx, h)), hs))), paragraph.fields[0]))), delay(() => append(singleton(join(\" | \", toList(delay(() => map_1((a) => ((a.tag === 2) ? \":---:\" : ((a.tag === 1) ? \"---:\" : ((a.tag === 3) ? \"---\" : \":---\"))), paragraph.fields[1]))))), delay(() => {\n        const replaceEmptyWith = (x, s) => {\n            switch (s) {\n                case \"\":\n                case null: {\n                    return x;\n                }\n                default: {\n                    return s;\n                }\n            }\n        };\n        return append(singleton(join(\"\\n\", toList(delay(() => map_1((r) => {\n            let source_2;\n            return join(\" | \", (source_2 = toList(delay(() => collect_1((ps_1) => {\n                const x_1 = toList(delay(() => map_1((p_1) => {\n                    let source;\n                    return join(\"\", (source = MarkdownUtils_formatParagraph(ctx, p_1), choose(partialApply(1, replaceEmptyWith, [\"\"]), source)));\n                }, ps_1)));\n                return singleton(join(\"\\u003cbr /\\u003e\", choose(partialApply(1, replaceEmptyWith, [\"\"]), x_1)));\n            }, r))), choose(partialApply(1, replaceEmptyWith, [\"\\u0026#32;\"]), source_2)));\n        }, paragraph.fields[2]))))), delay(() => singleton(\"\\n\")));\n    })))) : ((paragraph.tag === 13) ? ((paragraph.fields[1] === \"text/html\") ? append(singleton(paragraph.fields[0].trim()), delay(() => singleton(\"\"))) : append(singleton(\"```\"), delay(() => append(singleton(paragraph.fields[0]), delay(() => append(singleton(\"```\"), delay(() => singleton(\"\")))))))) : ((paragraph.tag === 10) ? map((tuple) => tuple[0], paragraph.fields[0]) : append(singleton(toText(printf(\"// can\\u0027t yet format %0A to pynb markdown\"))(paragraph)), delay(() => singleton(\"\"))))))))))))));\n}\n\nexport function MarkdownUtils_formatFsxCode(ctx, code) {\n    const sym = ctx.DefineSymbol;\n    const sym1 = toText(printf(\"#if %s\"))(sym);\n    const sym2 = toText(printf(\"#endif // %s\"))(sym);\n    return join(ctx.Newline, filter((line) => {\n        if (line.trim() !== sym1) {\n            return line.trim() !== sym2;\n        }\n        else {\n            return false;\n        }\n    }, ofArray(split(replace(code, \"\\r\\n\", \"\\n\"), [\"\\n\"], null, 0))));\n}\n\nexport function MarkdownUtils_applySubstitutionsInText(ctx, text) {\n    return text;\n}\n\nexport function MarkdownUtils_applyCodeReferenceResolver(ctx, code, range) {\n    const matchValue = ctx.ResolveApiDocReference(code);\n    if (matchValue != null) {\n        return new MarkdownSpan(5, singleton_1(new MarkdownSpan(0, matchValue[0], range)), matchValue[1], void 0, range);\n    }\n    else {\n        return new MarkdownSpan(1, code, range);\n    }\n}\n\nexport function MarkdownUtils_mapText(f, _arg1, text) {\n    return f(text);\n}\n\nexport function MarkdownUtils_mapInlineCode(_arg2, f, code, range) {\n    return f([code, range]);\n}\n\nexport function MarkdownUtils_mapSpans(f_0, f_1, md) {\n    const f = [f_0, f_1];\n    return map((_arg8) => {\n        switch (_arg8.tag) {\n            case 2: {\n                return new MarkdownSpan(2, MarkdownUtils_mapSpans(f[0], f[1], _arg8.fields[0]), _arg8.fields[1]);\n            }\n            case 3: {\n                return new MarkdownSpan(3, MarkdownUtils_mapSpans(f[0], f[1], _arg8.fields[0]), _arg8.fields[1]);\n            }\n            case 4: {\n                return new MarkdownSpan(4, MarkdownUtils_mapText(f[0], f[1], _arg8.fields[0]), _arg8.fields[1]);\n            }\n            case 5: {\n                return new MarkdownSpan(5, MarkdownUtils_mapSpans(f[0], f[1], _arg8.fields[0]), MarkdownUtils_mapText(f[0], f[1], _arg8.fields[1]), map_2((text_1) => MarkdownUtils_mapText(f[0], f[1], text_1), _arg8.fields[2]), _arg8.fields[3]);\n            }\n            case 6: {\n                return new MarkdownSpan(6, MarkdownUtils_mapSpans(f[0], f[1], _arg8.fields[0]), _arg8.fields[1], _arg8.fields[2], _arg8.fields[3]);\n            }\n            case 7: {\n                return new MarkdownSpan(7, MarkdownUtils_mapText(f[0], f[1], _arg8.fields[0]), MarkdownUtils_mapText(f[0], f[1], _arg8.fields[1]), map_2((text_2) => MarkdownUtils_mapText(f[0], f[1], text_2), _arg8.fields[2]), _arg8.fields[3]);\n            }\n            case 8: {\n                return new MarkdownSpan(8, MarkdownUtils_mapText(f[0], f[1], _arg8.fields[0]), _arg8.fields[1], _arg8.fields[2], _arg8.fields[3]);\n            }\n            case 9: {\n                return new MarkdownSpan(9, _arg8.fields[0]);\n            }\n            case 1: {\n                return MarkdownUtils_mapInlineCode(f[0], f[1], _arg8.fields[0], _arg8.fields[1]);\n            }\n            case 10: {\n                return new MarkdownSpan(10, _arg8.fields[0], _arg8.fields[1]);\n            }\n            case 11: {\n                return new MarkdownSpan(11, _arg8.fields[0], _arg8.fields[1]);\n            }\n            case 12: {\n                return new MarkdownSpan(12, _arg8.fields[0], _arg8.fields[1]);\n            }\n            default: {\n                return new MarkdownSpan(0, MarkdownUtils_mapText(f[0], f[1], _arg8.fields[0]), _arg8.fields[1]);\n            }\n        }\n    }, md);\n}\n\nexport function MarkdownUtils_mapParagraphs(f_0, f_1, md) {\n    const f = [f_0, f_1];\n    return map((_arg9) => {\n        switch (_arg9.tag) {\n            case 1: {\n                return new MarkdownParagraph(1, MarkdownUtils_mapSpans(f[0], f[1], _arg9.fields[0]), _arg9.fields[1]);\n            }\n            case 2: {\n                return new MarkdownParagraph(2, MarkdownUtils_mapText(f[0], f[1], _arg9.fields[0]), _arg9.fields[1], _arg9.fields[2], _arg9.fields[3], _arg9.fields[4]);\n            }\n            case 13: {\n                return new MarkdownParagraph(13, _arg9.fields[0], _arg9.fields[1], _arg9.fields[2]);\n            }\n            case 4: {\n                return new MarkdownParagraph(4, _arg9.fields[0], map((md_1) => MarkdownUtils_mapParagraphs(f[0], f[1], md_1), _arg9.fields[1]), _arg9.fields[2]);\n            }\n            case 5: {\n                return new MarkdownParagraph(5, MarkdownUtils_mapParagraphs(f[0], f[1], _arg9.fields[0]), _arg9.fields[1]);\n            }\n            case 6: {\n                return new MarkdownParagraph(6, MarkdownUtils_mapSpans(f[0], f[1], _arg9.fields[0]), _arg9.fields[1]);\n            }\n            case 7: {\n                return new MarkdownParagraph(7, _arg9.fields[0], map((text) => MarkdownUtils_mapText(f[0], f[1], text), _arg9.fields[1]), _arg9.fields[2]);\n            }\n            case 8: {\n                return new MarkdownParagraph(8, _arg9.fields[0], _arg9.fields[1]);\n            }\n            case 12: {\n                return new MarkdownParagraph(12, map((text_1) => MarkdownUtils_mapText(f[0], f[1], text_1), _arg9.fields[0]), _arg9.fields[1]);\n            }\n            case 9: {\n                return new MarkdownParagraph(9, map_2((list) => map((md_2) => MarkdownUtils_mapParagraphs(f[0], f[1], md_2), list), _arg9.fields[0]), _arg9.fields[1], map((list_1) => map((md_3) => MarkdownUtils_mapParagraphs(f[0], f[1], md_3), list_1), _arg9.fields[2]), _arg9.fields[3]);\n            }\n            case 10: {\n                return new MarkdownParagraph(10, map((tupledArg) => [MarkdownUtils_mapText(f[0], f[1], tupledArg[0]), tupledArg[1]], _arg9.fields[0]), _arg9.fields[1]);\n            }\n            case 3: {\n                return new MarkdownParagraph(3, MarkdownUtils_mapText(f[0], f[1], _arg9.fields[0]), _arg9.fields[1], _arg9.fields[2]);\n            }\n            case 11: {\n                return new MarkdownParagraph(11, _arg9.fields[0], _arg9.fields[1]);\n            }\n            default: {\n                return new MarkdownParagraph(0, _arg9.fields[0], MarkdownUtils_mapSpans(f[0], f[1], _arg9.fields[1]), _arg9.fields[2]);\n            }\n        }\n    }, md);\n}\n\nexport function MarkdownUtils_applySubstitutionsInMarkdown(ctx, md) {\n    return MarkdownUtils_mapParagraphs((text) => MarkdownUtils_applySubstitutionsInText(ctx, text), (tupledArg) => MarkdownUtils_applyCodeReferenceResolver(ctx, tupledArg[0], tupledArg[1]), md);\n}\n\n","import { isNullOrWhiteSpace, join, printf, toText, replace } from \"../fable-library.3.6.3/String.js\";\nimport { mapIndexed as mapIndexed_1, zip, collect, empty, map, delay, tryPick } from \"../fable-library.3.6.3/Seq.js\";\nimport { tryGetValue } from \"../fable-library.3.6.3/MapUtil.js\";\nimport { toString, Record, FSharpRef } from \"../fable-library.3.6.3/Types.js\";\nimport { value as value_2, some } from \"../fable-library.3.6.3/Option.js\";\nimport { record_type, bool_type, tuple_type, option_type, string_type, lambda_type, unit_type, class_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { MarkdownUtils_FormattingContext, MarkdownUtils_applySubstitutionsInMarkdown, FableTextWriter_$ctor, FableTextWriter__Write_Z721C83C5, FableTextWriter$reflection } from \"./MarkdownUtils.fs.js\";\nimport { length as length_1, tail, head, isEmpty, mapIndexed, map as map_1, iterate } from \"../fable-library.3.6.3/List.js\";\nimport { matches } from \"../fable-library.3.6.3/RegExp.js\";\nimport { equals, getEnumerator, int32ToString } from \"../fable-library.3.6.3/Util.js\";\nimport { MarkdownListKind } from \"./MarkdownModel.fs.js\";\nimport { List_iterInterleaved } from \"./Collections.fs.js\";\n\nexport function htmlEncode(code) {\n    return replace(replace(replace(code, \"\\u0026\", \"\\u0026amp;\"), \"\\u003c\", \"\\u0026lt;\"), \"\\u003e\", \"\\u0026gt;\");\n}\n\nexport function htmlEncodeQuotes(code) {\n    return replace(htmlEncode(code), \"\\\"\", \"\\u0026quot;\");\n}\n\nexport function $007CLookupKey$007C_$007C(dict, key) {\n    return tryPick((key_1) => {\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return some(matchValue[1]);\n        }\n        else {\n            return void 0;\n        }\n    }, [key, replace(key, \"\\r\\n\", \"\"), replace(key, \"\\r\\n\", \" \"), replace(key, \"\\n\", \"\"), replace(key, \"\\n\", \" \")]);\n}\n\nexport class UniqueNameGenerator {\n    constructor() {\n        this.generated = (new Map([]));\n    }\n}\n\nexport function UniqueNameGenerator$reflection() {\n    return class_type(\"Fable.Formatting.Markdown.HtmlFormatting.UniqueNameGenerator\", void 0, UniqueNameGenerator);\n}\n\nexport function UniqueNameGenerator_$ctor() {\n    return new UniqueNameGenerator();\n}\n\nexport function UniqueNameGenerator__GetName_Z721C83C5(__, name) {\n    let patternInput;\n    let outArg = 0;\n    patternInput = [tryGetValue(__.generated, name, new FSharpRef(() => outArg, (v) => {\n        outArg = (v | 0);\n    })), outArg];\n    const i = patternInput[1] | 0;\n    if (patternInput[0]) {\n        __.generated.set(name, i + 1);\n        return toText(printf(\"%s-%d\"))(name)(i);\n    }\n    else {\n        __.generated.set(name, 1);\n        return name;\n    }\n}\n\nexport class FormattingContext extends Record {\n    constructor(LineBreak, Newline, Writer, Links, WrapCodeSnippets, GenerateHeaderAnchors, UniqueNameGenerator, ParagraphIndent) {\n        super();\n        this.LineBreak = LineBreak;\n        this.Newline = Newline;\n        this.Writer = Writer;\n        this.Links = Links;\n        this.WrapCodeSnippets = WrapCodeSnippets;\n        this.GenerateHeaderAnchors = GenerateHeaderAnchors;\n        this.UniqueNameGenerator = UniqueNameGenerator;\n        this.ParagraphIndent = ParagraphIndent;\n    }\n}\n\nexport function FormattingContext$reflection() {\n    return record_type(\"Fable.Formatting.Markdown.HtmlFormatting.FormattingContext\", [], FormattingContext, () => [[\"LineBreak\", lambda_type(unit_type, unit_type)], [\"Newline\", string_type], [\"Writer\", FableTextWriter$reflection()], [\"Links\", class_type(\"System.Collections.Generic.IDictionary`2\", [string_type, tuple_type(string_type, option_type(string_type))])], [\"WrapCodeSnippets\", bool_type], [\"GenerateHeaderAnchors\", bool_type], [\"UniqueNameGenerator\", UniqueNameGenerator$reflection()], [\"ParagraphIndent\", lambda_type(unit_type, unit_type)]]);\n}\n\nexport function bigBreak(ctx, unitVar1) {\n    FableTextWriter__Write_Z721C83C5(ctx.Writer, ctx.Newline);\n}\n\nexport function smallBreak(ctx, unitVar1) {\n    FableTextWriter__Write_Z721C83C5(ctx.Writer, ctx.Newline);\n}\n\nexport function noBreak(_ctx, unitVar1) {\n}\n\nexport function formatSpan(ctx, span) {\n    let pattern_matching_result, body, body_1, id, cmd, str, body_2, link, title;\n    if (span.tag === 11) {\n        pattern_matching_result = 0;\n        body = span.fields[0];\n    }\n    else if (span.tag === 10) {\n        pattern_matching_result = 1;\n        body_1 = span.fields[0];\n    }\n    else if (span.tag === 4) {\n        pattern_matching_result = 2;\n        id = span.fields[0];\n    }\n    else if (span.tag === 12) {\n        pattern_matching_result = 3;\n        cmd = span.fields[0];\n    }\n    else if (span.tag === 0) {\n        pattern_matching_result = 4;\n        str = span.fields[0];\n    }\n    else if (span.tag === 9) {\n        pattern_matching_result = 5;\n    }\n    else if (span.tag === 6) {\n        const activePatternResult2497 = $007CLookupKey$007C_$007C(ctx.Links, span.fields[2]);\n        if (activePatternResult2497 != null) {\n            pattern_matching_result = 6;\n            body_2 = span.fields[0];\n            link = activePatternResult2497[0];\n            title = activePatternResult2497[1];\n        }\n        else {\n            pattern_matching_result = 7;\n        }\n    }\n    else if (span.tag === 5) {\n        pattern_matching_result = 6;\n        body_2 = span.fields[0];\n        link = span.fields[1];\n        title = span.fields[2];\n    }\n    else {\n        pattern_matching_result = 7;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003cspan class=\\\"math\\\"\\u003e\\\\[\" + htmlEncode(body)) + \"\\\\]\\u003c/span\\u003e\");\n            break;\n        }\n        case 1: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003cspan class=\\\"math\\\"\\u003e\\\\(\" + htmlEncode(body_1)) + \"\\\\)\\u003c/span\\u003e\");\n            break;\n        }\n        case 2: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003ca name=\\\"\" + id) + \"\\\"\\u003e\\u0026#160;\\u003c/a\\u003e\");\n            break;\n        }\n        case 3: {\n            formatSpans(ctx)(cmd.Render());\n            break;\n        }\n        case 4: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, str);\n            break;\n        }\n        case 5: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cbr /\\u003e\" + ctx.Newline);\n            break;\n        }\n        case 6: {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ca href=\\\"\");\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncode(link));\n            if (title != null) {\n                const title_1 = title;\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\\" title=\\\"\");\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncodeQuotes(title_1));\n            }\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\\"\\u003e\");\n            formatSpans(ctx)(body_2);\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/a\\u003e\");\n            break;\n        }\n        case 7: {\n            let pattern_matching_result_1, body_3, original, body_4, link_1, title_2;\n            if (span.tag === 6) {\n                pattern_matching_result_1 = 0;\n                body_3 = span.fields[0];\n                original = span.fields[1];\n            }\n            else if (span.tag === 8) {\n                const activePatternResult2495 = $007CLookupKey$007C_$007C(ctx.Links, span.fields[2]);\n                if (activePatternResult2495 != null) {\n                    pattern_matching_result_1 = 1;\n                    body_4 = span.fields[0];\n                    link_1 = activePatternResult2495[0];\n                    title_2 = activePatternResult2495[1];\n                }\n                else {\n                    pattern_matching_result_1 = 2;\n                }\n            }\n            else if (span.tag === 7) {\n                pattern_matching_result_1 = 1;\n                body_4 = span.fields[0];\n                link_1 = span.fields[1];\n                title_2 = span.fields[2];\n            }\n            else {\n                pattern_matching_result_1 = 2;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"[\");\n                    formatSpans(ctx)(body_3);\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"]\");\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, original);\n                    break;\n                }\n                case 1: {\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cimg src=\\\"\");\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncodeQuotes(link_1));\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\\" alt=\\\"\");\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncodeQuotes(body_4));\n                    if (title_2 != null) {\n                        const title_3 = title_2;\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\\" title=\\\"\");\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncodeQuotes(title_3));\n                    }\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\\" /\\u003e\");\n                    break;\n                }\n                case 2: {\n                    switch (span.tag) {\n                        case 8: {\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"[\");\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, span.fields[0]);\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"]\");\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, span.fields[1]);\n                            break;\n                        }\n                        case 2: {\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cstrong\\u003e\");\n                            formatSpans(ctx)(span.fields[0]);\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/strong\\u003e\");\n                            break;\n                        }\n                        case 1: {\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ccode\\u003e\");\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncode(span.fields[0]));\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/code\\u003e\");\n                            break;\n                        }\n                        case 3: {\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cem\\u003e\");\n                            formatSpans(ctx)(span.fields[0]);\n                            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/em\\u003e\");\n                            break;\n                        }\n                        default: {\n                            throw (new Error(\"Match failure: Fable.Formatting.Markdown.MarkdownSpan\"));\n                        }\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n    }\n}\n\nexport function formatSpans(ctx) {\n    return (list) => {\n        iterate((span) => {\n            formatSpan(ctx, span);\n        }, list);\n    };\n}\n\nexport function formatAnchor(ctx, spans) {\n    let name;\n    const gather = (span) => delay(() => {\n        switch (span.tag) {\n            case 0: {\n                return map((m) => m[0], matches(/\\w+/g, span.fields[0]));\n            }\n            case 2: {\n                return gathers(span.fields[0]);\n            }\n            case 3: {\n                return gathers(span.fields[0]);\n            }\n            case 5: {\n                return gathers(span.fields[0]);\n            }\n            default: {\n                return empty();\n            }\n        }\n    });\n    const gathers = (spans_1) => collect(gather, spans_1);\n    return UniqueNameGenerator__GetName_Z721C83C5(ctx.UniqueNameGenerator, (name = join(\"-\", gathers(spans)), isNullOrWhiteSpace(name) ? \"header\" : name));\n}\n\nexport function withInner(ctx, f) {\n    const sb = FableTextWriter_$ctor();\n    try {\n        f(new FormattingContext(ctx.LineBreak, ctx.Newline, sb, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, ctx.ParagraphIndent));\n        return toString(sb);\n    }\n    finally {\n        sb.Dispose();\n    }\n}\n\nexport function formatParagraph(ctx, paragraph) {\n    if (paragraph.tag === 11) {\n        formatParagraphs(ctx, paragraph.fields[0].Render());\n    }\n    else if (paragraph.tag === 0) {\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003ch\" + int32ToString(paragraph.fields[0])) + \"\\u003e\");\n        if (ctx.GenerateHeaderAnchors) {\n            const anchorName = formatAnchor(ctx, paragraph.fields[1]);\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, toText(printf(\"\\u003ca name=\\\"%s\\\" class=\\\"anchor\\\" href=\\\"#%s\\\"\\u003e\"))(anchorName)(anchorName));\n            formatSpans(ctx)(paragraph.fields[1]);\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/a\\u003e\");\n        }\n        else {\n            formatSpans(ctx)(paragraph.fields[1]);\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003c/h\" + int32ToString(paragraph.fields[0])) + \"\\u003e\");\n    }\n    else if (paragraph.tag === 1) {\n        ctx.ParagraphIndent();\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cp\\u003e\");\n        const enumerator = getEnumerator(paragraph.fields[0]);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                formatSpan(ctx, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/p\\u003e\");\n    }\n    else if (paragraph.tag === 8) {\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003chr /\\u003e\");\n    }\n    else if (paragraph.tag === 2) {\n        if (ctx.WrapCodeSnippets) {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ctable class=\\\"pre\\\"\\u003e\\u003ctr\\u003e\\u003ctd\\u003e\");\n        }\n        if (isNullOrWhiteSpace(paragraph.fields[2])) {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, toText(printf(\"\\u003cpre\\u003e\\u003ccode\\u003e\")));\n        }\n        else {\n            const langCode = toText(printf(\"language-%s\"))(paragraph.fields[2]);\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, toText(printf(\"\\u003cpre\\u003e\\u003ccode class=\\\"%s\\\"\\u003e\"))(langCode));\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncode(paragraph.fields[0]));\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/code\\u003e\\u003c/pre\\u003e\");\n        if (ctx.WrapCodeSnippets) {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/td\\u003e\\u003c/tr\\u003e\\u003c/table\\u003e\");\n        }\n    }\n    else if (paragraph.tag === 13) {\n        if (paragraph.fields[1] === \"text/html\") {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, paragraph.fields[0]);\n        }\n        else {\n            if (ctx.WrapCodeSnippets) {\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ctable class=\\\"pre\\\"\\u003e\\u003ctr\\u003e\\u003ctd\\u003e\");\n            }\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, toText(printf(\"\\u003cpre\\u003e\\u003ccode\\u003e\")));\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncode(paragraph.fields[0]));\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/code\\u003e\\u003c/pre\\u003e\");\n            if (ctx.WrapCodeSnippets) {\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/td\\u003e\\u003c/tr\\u003e\\u003c/table\\u003e\");\n            }\n        }\n    }\n    else if (paragraph.tag === 9) {\n        const aligns = map_1((_arg1) => {\n            switch (_arg1.tag) {\n                case 1: {\n                    return \" align=\\\"right\\\"\";\n                }\n                case 2: {\n                    return \" align=\\\"center\\\"\";\n                }\n                case 3: {\n                    return \"\";\n                }\n                default: {\n                    return \" align=\\\"left\\\"\";\n                }\n            }\n        }, paragraph.fields[1]);\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ctable\\u003e\");\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, ctx.Newline);\n        if (paragraph.fields[0] != null) {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, ((\"\\u003cthead\\u003e\" + ctx.Newline) + \"\\u003ctr class=\\\"header\\\"\\u003e\") + ctx.Newline);\n            const enumerator_1 = getEnumerator(zip(value_2(paragraph.fields[0]), aligns));\n            try {\n                while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const forLoopVar = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003cth\" + forLoopVar[1]) + \"\\u003e\");\n                    const enumerator_2 = getEnumerator(forLoopVar[0]);\n                    try {\n                        while (enumerator_2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            formatParagraph(new FormattingContext(() => {\n                                noBreak(ctx, void 0);\n                            }, ctx.Newline, ctx.Writer, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, ctx.ParagraphIndent), enumerator_2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                        }\n                    }\n                    finally {\n                        enumerator_2.Dispose();\n                    }\n                    FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/th\\u003e\" + ctx.Newline);\n                }\n            }\n            finally {\n                enumerator_1.Dispose();\n            }\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, ((\"\\u003c/tr\\u003e\" + ctx.Newline) + \"\\u003c/thead\\u003e\") + ctx.Newline);\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ctbody\\u003e\" + ctx.Newline);\n        const enumerator_3 = getEnumerator(mapIndexed((i, r) => [i + 1, r], paragraph.fields[2]));\n        try {\n            while (enumerator_3[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const forLoopVar_1 = enumerator_3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, ((\"\\u003ctr class=\\\"\" + (((forLoopVar_1[0] % 2) === 1) ? \"odd\" : \"even\")) + \"\\\"\\u003e\") + ctx.Newline);\n                const enumerator_4 = getEnumerator(zip(forLoopVar_1[1], aligns));\n                try {\n                    while (enumerator_4[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        const forLoopVar_2 = enumerator_4[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003ctd\" + forLoopVar_2[1]) + \"\\u003e\");\n                        const enumerator_5 = getEnumerator(forLoopVar_2[0]);\n                        try {\n                            while (enumerator_5[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                formatParagraph(new FormattingContext(() => {\n                                    noBreak(ctx, void 0);\n                                }, ctx.Newline, ctx.Writer, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, ctx.ParagraphIndent), enumerator_5[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                            }\n                        }\n                        finally {\n                            enumerator_5.Dispose();\n                        }\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/td\\u003e\" + ctx.Newline);\n                    }\n                }\n                finally {\n                    enumerator_4.Dispose();\n                }\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/tr\\u003e\" + ctx.Newline);\n            }\n        }\n        finally {\n            enumerator_3.Dispose();\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/tbody\\u003e\" + ctx.Newline);\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/table\\u003e\");\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, ctx.Newline);\n    }\n    else if (paragraph.tag === 4) {\n        const tag = equals(paragraph.fields[0], new MarkdownListKind(0)) ? \"ol\" : \"ul\";\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, ((\"\\u003c\" + tag) + \"\\u003e\") + ctx.Newline);\n        const enumerator_6 = getEnumerator(paragraph.fields[1]);\n        try {\n            while (enumerator_6[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const body_1 = enumerator_6[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cli\\u003e\");\n                let pattern_matching_result, s_1;\n                if (!isEmpty(body_1)) {\n                    if (head(body_1).tag === 1) {\n                        if (!isEmpty(head(body_1).fields[0])) {\n                            if (head(head(body_1).fields[0]).tag === 0) {\n                                if (isEmpty(tail(head(body_1).fields[0]))) {\n                                    if (isEmpty(tail(body_1))) {\n                                        if (!(head(head(body_1).fields[0]).fields[0].indexOf(ctx.Newline) >= 0)) {\n                                            pattern_matching_result = 0;\n                                            s_1 = head(head(body_1).fields[0]).fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, s_1);\n                        break;\n                    }\n                    case 1: {\n                        const inner = withInner(ctx, (ctx_1) => {\n                            let ctx_2;\n                            List_iterInterleaved((ctx_2 = (new FormattingContext(() => {\n                                noBreak(ctx_1, void 0);\n                            }, ctx_1.Newline, ctx_1.Writer, ctx_1.Links, ctx_1.WrapCodeSnippets, ctx_1.GenerateHeaderAnchors, ctx_1.UniqueNameGenerator, ctx_1.ParagraphIndent)), (paragraph_3) => {\n                                formatParagraph(ctx_2, paragraph_3);\n                            }), () => {\n                                FableTextWriter__Write_Z721C83C5(ctx_1.Writer, ctx_1.Newline);\n                            }, body_1);\n                        });\n                        FableTextWriter__Write_Z721C83C5(ctx.Writer, (inner.indexOf(ctx.Newline) >= 0) ? ((ctx.Newline + inner) + ctx.Newline) : inner);\n                        break;\n                    }\n                }\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/li\\u003e\" + ctx.Newline);\n            }\n        }\n        finally {\n            enumerator_6.Dispose();\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003c/\" + tag) + \"\\u003e\");\n    }\n    else if (paragraph.tag === 5) {\n        ctx.ParagraphIndent();\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003cblockquote\\u003e\" + ctx.Newline);\n        formatParagraphs(new FormattingContext(ctx.LineBreak, ctx.Newline, ctx.Writer, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, () => {\n            ctx.ParagraphIndent();\n        }), paragraph.fields[0]);\n        ctx.ParagraphIndent();\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/blockquote\\u003e\");\n    }\n    else if (paragraph.tag === 6) {\n        formatSpans(ctx)(paragraph.fields[0]);\n    }\n    else if (paragraph.tag === 3) {\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, paragraph.fields[0]);\n    }\n    else if (paragraph.tag === 10) {\n        if (ctx.WrapCodeSnippets) {\n            FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003ctable class=\\\"pre\\\"\\u003e\\u003ctr\\u003e\\u003ctd\\u003e\");\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, toText(printf(\"\\u003cpre\\u003e\\u003ccode\\u003e\")));\n        const enumerator_7 = getEnumerator(paragraph.fields[0]);\n        try {\n            while (enumerator_7[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                FableTextWriter__Write_Z721C83C5(ctx.Writer, htmlEncode(enumerator_7[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()[0]));\n            }\n        }\n        finally {\n            enumerator_7.Dispose();\n        }\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, \"\\u003c/code\\u003e\\u003c/pre\\u003e\");\n    }\n    else if (paragraph.tag === 12) {\n    }\n    else {\n        FableTextWriter__Write_Z721C83C5(ctx.Writer, (\"\\u003cp\\u003e\\u003cspan class=\\\"math\\\"\\u003e\\\\[\" + htmlEncode(join(ctx.Newline, paragraph.fields[1]))) + \"\\\\]\\u003c/span\\u003e\\u003c/p\\u003e\");\n    }\n    ctx.LineBreak();\n}\n\nexport function formatParagraphs(ctx, paragraphs) {\n    const length = length_1(paragraphs) | 0;\n    const smallCtx = new FormattingContext(() => {\n        smallBreak(ctx, void 0);\n    }, ctx.Newline, ctx.Writer, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, ctx.ParagraphIndent);\n    const bigCtx = new FormattingContext(() => {\n        bigBreak(ctx, void 0);\n    }, ctx.Newline, ctx.Writer, ctx.Links, ctx.WrapCodeSnippets, ctx.GenerateHeaderAnchors, ctx.UniqueNameGenerator, ctx.ParagraphIndent);\n    const enumerator = getEnumerator(mapIndexed_1((i, v) => [i === (length - 1), v], paragraphs));\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            formatParagraph(forLoopVar[0] ? smallCtx : bigCtx, forLoopVar[1]);\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function formatMarkdown(writer, generateAnchors, wrap, links, substitutions, newline, crefResolver, paragraphs) {\n    const paragraphs_1 = MarkdownUtils_applySubstitutionsInMarkdown(new MarkdownUtils_FormattingContext(links, newline, substitutions, crefResolver, \"HTML\"), paragraphs);\n    formatParagraphs(new FormattingContext(() => {\n    }, newline, writer, links, wrap, generateAnchors, UniqueNameGenerator_$ctor(), () => {\n    }), paragraphs_1);\n}\n\n","import { class_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { defaultArg } from \"../fable-library.3.6.3/Option.js\";\nimport { toList } from \"../fable-library.3.6.3/Seq.js\";\nimport { mapIndexed } from \"../fable-library.3.6.3/Array.js\";\nimport { MarkdownRangeModule_zero, MarkdownRange } from \"./Range.fs.js\";\nimport { isNullOrWhiteSpace, replace, split } from \"../fable-library.3.6.3/String.js\";\nimport { empty, skipWhile, ofSeq } from \"../fable-library.3.6.3/List.js\";\nimport { ParsingContext, parseParagraphs } from \"./MarkdownParser.fs.js\";\nimport { formatMarkdown } from \"./HtmlFormatting.fs.js\";\nimport { FableTextWriter_$ctor } from \"./MarkdownUtils.fs.js\";\nimport { toString } from \"../fable-library.3.6.3/Types.js\";\nimport { formatAsMd } from \"./MarkdownFormatting.fs.js\";\n\nexport class MarkdownDocument {\n    constructor(paragraphs, links) {\n        this.paragraphs = paragraphs;\n        this.links = links;\n    }\n}\n\nexport function MarkdownDocument$reflection() {\n    return class_type(\"Fable.Formatting.Markdown.MarkdownDocument\", void 0, MarkdownDocument);\n}\n\nexport function MarkdownDocument_$ctor_Z1468BDFA(paragraphs, links) {\n    return new MarkdownDocument(paragraphs, links);\n}\n\nexport function MarkdownDocument__get_Paragraphs(x) {\n    return x.paragraphs;\n}\n\nexport function MarkdownDocument__get_DefinedLinks(x) {\n    return x.links;\n}\n\nexport class Markdown {\n    constructor() {\n    }\n}\n\nexport function Markdown$reflection() {\n    return class_type(\"Fable.Formatting.Markdown.Markdown\", void 0, Markdown);\n}\n\nexport function Markdown_$ctor() {\n    return new Markdown();\n}\n\nexport function Markdown_Parse_Z33F6198B(text, newline, parseOptions) {\n    const newline_1 = defaultArg(newline, \"\\n\");\n    const parseOptions_1 = defaultArg(parseOptions, 0) | 0;\n    const lines = toList(mapIndexed((i, s) => [s, new MarkdownRange(i + 1, 0, i + 1, s.length)], split(replace(text, \"\\r\\n\", \"\\n\"), [\"\\n\", \"\\r\"])));\n    const links = new Map([]);\n    return MarkdownDocument_$ctor_Z1468BDFA(ofSeq(parseParagraphs(new ParsingContext(links, newline_1, true, MarkdownRangeModule_zero, parseOptions_1), skipWhile((tupledArg) => isNullOrWhiteSpace(tupledArg[0]), lines))), links);\n}\n\nexport function Markdown_WriteHtml_2ED819BE(doc, writer, newline, substitutions, crefResolver) {\n    const newline_1 = defaultArg(newline, \"\\n\");\n    const substitutions_1 = defaultArg(substitutions, empty());\n    const crefResolver_1 = defaultArg(crefResolver, (_arg1) => (void 0));\n    formatMarkdown(writer, false, false, MarkdownDocument__get_DefinedLinks(doc), substitutions_1, newline_1, crefResolver_1, MarkdownDocument__get_Paragraphs(doc));\n}\n\nexport function Markdown_WriteHtml_4F81CA1A(markdownText, writer, newline, substitutions, crefResolver) {\n    Markdown_WriteHtml_2ED819BE(Markdown_Parse_Z33F6198B(markdownText, newline), writer, newline, substitutions, crefResolver);\n}\n\nexport function Markdown_ToHtml_Z6BE9E069(doc, newline, substitutions, crefResolver) {\n    const wr = FableTextWriter_$ctor();\n    try {\n        Markdown_WriteHtml_2ED819BE(doc, wr, newline, substitutions, crefResolver);\n        return toString(wr);\n    }\n    finally {\n        wr.Dispose();\n    }\n}\n\nexport function Markdown_ToHtml_Z3EA62BCD(markdownText, newline, substitutions, crefResolver) {\n    return Markdown_ToHtml_Z6BE9E069(Markdown_Parse_Z33F6198B(markdownText, newline), newline, substitutions, crefResolver);\n}\n\nexport function Markdown_ToMd_Z6BE9E069(doc, newline, substitutions, crefResolver) {\n    const newline_1 = defaultArg(newline, \"\\n\");\n    const substitutions_1 = defaultArg(substitutions, empty());\n    const crefResolver_1 = defaultArg(crefResolver, (_arg2) => (void 0));\n    return formatAsMd(MarkdownDocument__get_DefinedLinks(doc), substitutions_1, newline_1, crefResolver_1, MarkdownDocument__get_Paragraphs(doc));\n}\n\n","// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v6.0.3\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2020 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n */\nPE = 29, // 0 to 1000000\n/*\n * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n * primitive number without a loss of precision.\n */\nSTRICT = false, // true or false\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            if (typeof n !== 'string') {\n                if (Big.strict === true) {\n                    throw TypeError(INVALID + 'number');\n                }\n                // Minus zero?\n                n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n            }\n            parse(x, n);\n        }\n        // Retain a reference to this Big constructor.\n        // Shadow Big.prototype.constructor which points to Object.\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    return Big;\n}\nfunction normalize(x) {\n    // x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    if (!NUMERIC.test(n)) {\n        throw Error(INVALID + 'number');\n    }\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // original version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP + 1, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\n *\n * x {Big} The Big to round.\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, sd, rm, more) {\n    var xc = x.c;\n    if (rm === UNDEFINED)\n        rm = Big.RM;\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n        throw Error(INVALID_RM);\n    }\n    if (sd < 1) {\n        more =\n            rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 ||\n                rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n        xc.length = 1;\n        if (more) {\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            x.e = x.e - sd + 1;\n            xc[0] = 1;\n        }\n        else {\n            // Zero.\n            xc[0] = x.e = 0;\n        }\n    }\n    else if (sd < xc.length) {\n        // xc[sd] is the digit after the digit that may be rounded up.\n        const isZero = xc.findIndex((xci, idx) => idx >= sd && xci > 0) < 0;\n        more =\n            rm === 1 && xc[sd] >= 5 ||\n                rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\n                    (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\n                rm === 3 && (more || !isZero);\n        // Remove any digits after the required precision.\n        xc.length = sd--;\n        // Round up?\n        if (more) {\n            // Rounding up may mean the previous digit has to be rounded up.\n            for (; ++xc[sd] > 9;) {\n                xc[sd] = 0;\n                if (!sd--) {\n                    ++x.e;\n                    xc.unshift(1);\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for (sd = xc.length; !xc[--sd];)\n            xc.pop();\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n */\nfunction stringify(x, doExponential, isNonzero) {\n    var e = x.e, s = x.c.join(''), n = s.length;\n    // Exponential notation?\n    if (doExponential) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n) {\n            for (e -= n; e--;)\n                s += '0';\n        }\n        else if (e < n) {\n            s = s.slice(0, e) + '.' + s.slice(e);\n        }\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && isNonzero ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n */\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // original version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    // Divisor is zero?\n    if (!b[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    // Dividend is 0? Return +-0.\n    if (!a[0]) {\n        y.s = k;\n        y.c = [y.e = 0];\n        return y;\n    }\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n    q.s = k;\n    k = p < 0 ? 0 : p;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n        p--;\n    }\n    // Round?\n    if (qi > p)\n        round(q, p, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return this.cmp(y) === 0;\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (yc[0]) {\n            y.s = -b;\n        }\n        else if (xc[0]) {\n            y = new Big(x);\n        }\n        else {\n            y.s = 1;\n        }\n        return y;\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var e, k, t, Big = this.constructor, x = new Big(this), y = new Big(y);\n    // Signs differ?\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (!yc[0]) {\n            if (xc[0]) {\n                y = new Big(x);\n            }\n            else {\n                y.s = x.s;\n            }\n        }\n        return y;\n    }\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (e = xe - ye) {\n        if (e > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            e = -e;\n            t = xc;\n        }\n        t.reverse();\n        for (; e--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    e = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (k = 0; e; xc[e] %= 10)\n        k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (k) {\n        xc.unshift(k);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (e = xc.length; xc[--e] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big('1'), one = new Big('1'), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n        throw Error(INVALID + 'exponent');\n    }\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n    }\n    return round(new this.constructor(this), sd, rm);\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n * using rounding mode rm, or Big.RM if rm is not specified.\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.round = function (dp, rm) {\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big('0.5');\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0) {\n        throw Error(NAME + 'No square root');\n    }\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s + '');\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) {\n        y.c = [y.e = 0];\n        return y;\n    }\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = b;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toExponential = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), ++dp, rm);\n        for (; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, true, !!n);\n};\n/*\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), dp + x.e + 1, rm);\n        // x.e may have changed if the value is rounded up.\n        for (dp = dp + x.e + 1; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, false, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toJSON = P.toString = function () {\n    var x = this, Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n};\n/*\n * Return the value of this Big as a primitve number.\n */\nP.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n        throw Error(NAME + 'Imprecise conversion');\n    }\n    return n;\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * rounding mode rm, or Big.RM if rm is not specified.\n * Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toPrecision = function (sd, rm) {\n    var x = this, Big = x.constructor, n = x.c[0];\n    if (sd !== UNDEFINED) {\n        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n            throw Error(INVALID + 'precision');\n        }\n        x = round(new Big(x), sd, rm);\n        for (; x.c.length < sd;)\n            x.c.push(0);\n    }\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = function () {\n    var x = this, Big = x.constructor;\n    if (Big.strict === true) {\n        throw Error(NAME + 'valueOf disallowed');\n    }\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n};\n// Export\nexport var Big = _Big_();\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","import { Union, Record } from \"../fable_modules/fable-library.3.6.3/Types.js\";\nimport { list_type, option_type, bool_type, union_type, record_type, string_type, class_type } from \"../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { head, isEmpty, sortByDescending, sumBy } from \"../fable_modules/fable-library.3.6.3/List.js\";\nimport { op_Addition } from \"../fable_modules/fable-library.3.6.3/Decimal.js\";\nimport Decimal from \"../fable_modules/fable-library.3.6.3/Decimal.js\";\nimport { date, now, compare } from \"../fable_modules/fable-library.3.6.3/Date.js\";\n\nexport class LedgerEntry extends Record {\n    constructor(Date$, Amount, Balance, Text$) {\n        super();\n        this.Date = Date$;\n        this.Amount = Amount;\n        this.Balance = Balance;\n        this.Text = Text$;\n    }\n}\n\nexport function LedgerEntry$reflection() {\n    return record_type(\"Models.LedgerEntry\", [], LedgerEntry, () => [[\"Date\", class_type(\"System.DateTime\")], [\"Amount\", class_type(\"System.Decimal\")], [\"Balance\", class_type(\"System.Decimal\")], [\"Text\", string_type]]);\n}\n\nexport class MessageType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Plain\", \"Signature\"];\n    }\n}\n\nexport function MessageType$reflection() {\n    return union_type(\"Models.MessageType\", [], MessageType, () => [[], [[\"href\", string_type], [\"orderId\", string_type]]]);\n}\n\nexport class Message extends Record {\n    constructor(Id, Subject, Content, From, Date$, Unread, Type) {\n        super();\n        this.Id = Id;\n        this.Subject = Subject;\n        this.Content = Content;\n        this.From = From;\n        this.Date = Date$;\n        this.Unread = Unread;\n        this.Type = Type;\n    }\n}\n\nexport function Message$reflection() {\n    return record_type(\"Models.Message\", [], Message, () => [[\"Id\", string_type], [\"Subject\", string_type], [\"Content\", string_type], [\"From\", string_type], [\"Date\", class_type(\"System.DateTime\")], [\"Unread\", bool_type], [\"Type\", MessageType$reflection()]]);\n}\n\nexport class Document$ extends Record {\n    constructor(Name, Content, Reference) {\n        super();\n        this.Name = Name;\n        this.Content = Content;\n        this.Reference = Reference;\n    }\n}\n\nexport function Document$$reflection() {\n    return record_type(\"Models.Document\", [], Document$, () => [[\"Name\", string_type], [\"Content\", string_type], [\"Reference\", option_type(string_type)]]);\n}\n\nexport class Account extends Record {\n    constructor(Name, Ledger) {\n        super();\n        this.Name = Name;\n        this.Ledger = Ledger;\n    }\n}\n\nexport function Account$reflection() {\n    return record_type(\"Models.Account\", [], Account, () => [[\"Name\", string_type], [\"Ledger\", list_type(LedgerEntry$reflection())]]);\n}\n\nexport function Account__get_Balance(x) {\n    return sumBy((l) => l.Amount, x.Ledger, {\n        GetZero: () => (new Decimal(0)),\n        Add: (x_1, y) => op_Addition(x_1, y),\n    });\n}\n\nexport function Account__get_LatestMovement(x) {\n    const matchValue = sortByDescending((l) => l.Date, x.Ledger, {\n        Compare: (x_1, y) => compare(x_1, y),\n    });\n    if (!isEmpty(matchValue)) {\n        return head(matchValue).Date;\n    }\n    else {\n        let copyOfStruct = now();\n        return date(copyOfStruct);\n    }\n}\n\nexport class User extends Record {\n    constructor(Name, DateOfBirth, Accounts, Token) {\n        super();\n        this.Name = Name;\n        this.DateOfBirth = DateOfBirth;\n        this.Accounts = Accounts;\n        this.Token = Token;\n    }\n}\n\nexport function User$reflection() {\n    return record_type(\"Models.User\", [], User, () => [[\"Name\", string_type], [\"DateOfBirth\", string_type], [\"Accounts\", list_type(Account$reflection())], [\"Token\", string_type]]);\n}\n\n","import { Union, Record } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { class_type, union_type, string_type, record_type, lambda_type, obj_type, unit_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { bulmaAccordion } from \"../../../node_modules/bulma-extensions/dist/js/bulma-extensions.js\";\nimport { createElement } from \"react\";\nimport { equals, comparePrimitives, min, createObj } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { Markdown_ToHtml_Z3EA62BCD } from \"../../fable_modules/Fable.Formatting.Markdown.1.0.1/Markdown.fs.js\";\nimport { map, mapIndexed, ofArray, length, take, singleton } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { Message as Message_1 } from \"../Models.js\";\nimport { empty, singleton as singleton_1, append, delay, toList } from \"../../fable_modules/fable-library.3.6.3/Seq.js\";\nimport { toString } from \"../../fable_modules/fable-library.3.6.3/Date.js\";\nimport { Types_View } from \"./Elements.js\";\n\nexport class Imports_Accordion extends Record {\n    constructor(attach) {\n        super();\n        this.attach = attach;\n    }\n}\n\nexport function Imports_Accordion$reflection() {\n    return record_type(\"App.Components.Imports.Accordion\", [], Imports_Accordion, () => [[\"attach\", lambda_type(unit_type, obj_type)]]);\n}\n\nexport function Imports_attach() {\n    bulmaAccordion.attach();\n}\n\nexport class ActionType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Link\", \"Action\"];\n    }\n}\n\nexport function ActionType$reflection() {\n    return union_type(\"App.Components.ActionType\", [], ActionType, () => [[[\"href\", string_type]], [[\"Item\", lambda_type(unit_type, unit_type)]]]);\n}\n\nexport class Message {\n    constructor() {\n    }\n}\n\nexport function Message$reflection() {\n    return class_type(\"App.Components.Message\", void 0, Message);\n}\n\nexport function Message_$ctor() {\n    return new Message();\n}\n\nexport function Message_MarkdownDiv_Z721C83C5(message_MarkdownDiv_Z721C83C5InputProps) {\n    let content;\n    const x = message_MarkdownDiv_Z721C83C5InputProps.x;\n    return createElement(\"div\", createObj(singleton((content = Markdown_ToHtml_Z3EA62BCD(x), [\"dangerouslySetInnerHTML\", {\n        __html: content,\n    }]))));\n}\n\nexport function Message_List_3D36A079(message_List_3D36A079InputProps) {\n    let elms_3, elms_1, elms, elms_2;\n    const cancelSignatureOrder = message_List_3D36A079InputProps.cancelSignatureOrder;\n    const maxCount = message_List_3D36A079InputProps.maxCount;\n    const setView = message_List_3D36A079InputProps.setView;\n    const setMessages = message_List_3D36A079InputProps.setMessages;\n    const messages = message_List_3D36A079InputProps.messages;\n    const title = message_List_3D36A079InputProps.title;\n    let msgs;\n    if (maxCount != null) {\n        const maxCount_1 = maxCount | 0;\n        msgs = take(min((x, y) => comparePrimitives(x, y), length(messages), maxCount_1), messages);\n    }\n    else {\n        msgs = messages;\n    }\n    const actionButton = (actionText, action) => {\n        const props_2 = ofArray([(action.tag === 1) ? [\"onClick\", (_arg1) => {\n            action.fields[0]();\n        }] : [\"href\", action.fields[0]], [\"className\", \"reply\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"span\", {\n            children: [actionText],\n        }), createElement(\"div\", {\n            className: \"icon reply\",\n        })])]]);\n        return createElement(\"a\", createObj(Helpers_combineClasses(\"button\", props_2)));\n    };\n    const messageViews = mapIndexed((i, message) => {\n        let children;\n        let buttons;\n        const matchValue = message.Type;\n        buttons = ((matchValue.tag === 1) ? ofArray([actionButton(\"Sign \", new ActionType(0, matchValue.fields[0])), actionButton(\"Reject \", new ActionType(1, cancelSignatureOrder(matchValue.fields[1])))]) : singleton(actionButton(\"Reply \", new ActionType(0, toText(printf(\"mailto:support@criipto.com?subject=%s\\u0026body=%s\"))(message.Subject)(message.Content)))));\n        return createElement(\"article\", {\n            className: \"accordion message-item\",\n            children: Interop_reactApi.Children.toArray([createElement(\"div\", {\n                className: toText(printf(\"accordion-header toggle message-item message-item-%d\"))(i),\n                onClick: (_arg2) => {\n                    const messageHeader = document.getElementsByClassName(toText(printf(\"message-item-%d\"))(i))[0];\n                    messageHeader.parentElement.classList.toggle(\"is-active\");\n                    const dot = messageHeader.getElementsByClassName(\"dot\")[0];\n                    if ((!(dot == null)) && (!dot.classList.contains(\"read\"))) {\n                        const value_17 = dot.classList.add(\"read\");\n                    }\n                    setMessages(map((m) => {\n                        if (equals(m, message)) {\n                            return new Message_1(m.Id, m.Subject, m.Content, m.From, m.Date, false, m.Type);\n                        }\n                        else {\n                            return m;\n                        }\n                    }, messages));\n                },\n                children: Interop_reactApi.Children.toArray([(children = ofArray([createElement(\"div\", {\n                    className: \"message-item from\",\n                    children: Interop_reactApi.Children.toArray(Array.from(toList(delay(() => append(message.Unread ? singleton_1(createElement(\"div\", {\n                        style: {\n                            marginRight: 12,\n                        },\n                        className: \"icon dot\",\n                    })) : empty(), delay(() => {\n                        let arg00_2;\n                        return singleton_1((arg00_2 = ((message.From + \" \") + toString(message.Date, \"yyyy-MM-dd\")), createElement(\"span\", {\n                            children: [arg00_2],\n                        })));\n                    })))))),\n                }), createElement(\"span\", {\n                    className: \"message-item subject\",\n                    children: message.Subject,\n                })]), createElement(\"div\", {\n                    children: Interop_reactApi.Children.toArray(Array.from(children)),\n                }))]),\n            }), createElement(\"div\", {\n                className: \"accordion-body\",\n                children: Interop_reactApi.Children.toArray([createElement(\"div\", {\n                    className: \"accordion-content message-item\",\n                    children: Interop_reactApi.Children.toArray([createElement(Message_MarkdownDiv_Z721C83C5, {\n                        x: message.Content,\n                    })]),\n                }), createElement(\"section\", {\n                    children: Interop_reactApi.Children.toArray(Array.from(buttons)),\n                })]),\n            })]),\n        });\n    }, msgs);\n    const props_24 = ofArray([[\"style\", {\n        boxShadow: \"none\",\n        backgroundColor: \"#FFFFFF\",\n    }], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton(createElement(\"figure\", createObj(Helpers_combineClasses(\"image\", singleton([\"className\", \"is-32x32 icon envelope\"]))))), createElement(\"div\", {\n        className: \"media-left\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"article\", {\n        className: \"media\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    })), (elms_2 = toList(delay(() => append(singleton_1(createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", singleton([\"children\", title]))))), delay(() => append(singleton_1(createElement(\"section\", {\n        className: \"accordions\",\n        children: Interop_reactApi.Children.toArray(Array.from(messageViews)),\n    })), delay(() => ((length(msgs) < length(messages)) ? singleton_1(createElement(\"a\", {\n        onClick: (_arg3) => {\n            setView(new Types_View(5));\n        },\n        children: \"Show all messages\",\n    })) : empty()))))))), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n    }))]), createElement(\"div\", {\n        className: \"card-content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"card\", props_24)));\n}\n\n","import { class_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { ofArrayWithTail, singleton, ofArray, map } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { createElement } from \"react\";\nimport { createObj } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { toShortDateString } from \"../../fable_modules/fable-library.3.6.3/Date.js\";\nimport { empty, singleton as singleton_1, append, delay, toList } from \"../../fable_modules/fable-library.3.6.3/Seq.js\";\nimport { fromParts, compare } from \"../../fable_modules/fable-library.3.6.3/Decimal.js\";\nimport { Account__get_LatestMovement, Account__get_Balance } from \"../Models.js\";\n\nexport class Account {\n    constructor() {\n    }\n}\n\nexport function Account$reflection() {\n    return class_type(\"App.Components.Account\", void 0, Account);\n}\n\nexport function Account_Transactions_Z2F12D0CA(account) {\n    let elms_3, elms_1, elms, arg00_3;\n    let header;\n    const props_2 = ofArray([[\"className\", \"account header\"], [\"children\", Interop_reactApi.Children.toArray(Array.from(map((name) => createElement(\"div\", createObj(Helpers_combineClasses(\"column\", ofArray([[\"className\", name], [\"className\", \"is-4\"], [\"children\", name]])))), ofArray([\"Date\", \"Message\", \"Amount\"]))))]]);\n    header = createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_2)));\n    const transactions = map((ledgerEntry) => {\n        let props_4, props_10;\n        let formatCurrency;\n        const clo1 = toText(printf(\"%.2f\"));\n        formatCurrency = ((arg10) => clo1(arg10));\n        const props_12 = ofArray([[\"className\", \"transaction\"], [\"children\", Interop_reactApi.Children.toArray([(props_4 = ofArray([[\"className\", \"is-4\"], [\"children\", toShortDateString(ledgerEntry.Date)]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_4)))), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", singleton([\"children\", ledgerEntry.Text])))), (props_10 = ofArray([[\"className\", \"is-4\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"div\", {\n            className: \"ledger-entry amount\",\n            children: formatCurrency(ledgerEntry.Amount),\n        }), createElement(\"div\", {\n            className: \"ledger-entry balance\",\n            children: formatCurrency(ledgerEntry.Balance),\n        })])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_10))))])]]);\n        return createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_12)));\n    }, account.Ledger);\n    const props_22 = ofArray([[\"style\", {\n        boxShadow: \"none\",\n        backgroundColor: \"#FFFFFF\",\n    }], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton(createElement(\"figure\", createObj(Helpers_combineClasses(\"image\", singleton([\"className\", \"is-32x32 icon vbars\"]))))), createElement(\"div\", {\n        className: \"media-left\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"article\", {\n        className: \"media\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    })), (arg00_3 = ofArrayWithTail([createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", singleton([\"children\", account.Name])))), header], transactions), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi.Children.toArray(Array.from(arg00_3)),\n    }))]), createElement(\"div\", {\n        className: \"card-content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"card\", props_22)));\n}\n\nexport function Account_Box_130DA4ED(account_Box_130DA4EDInputProps) {\n    let elms_3, elms_1, elms, arg00_1;\n    const viewAccount = account_Box_130DA4EDInputProps.viewAccount;\n    const accounts = account_Box_130DA4EDInputProps.accounts;\n    let header;\n    const props_2 = ofArray([[\"className\", \"account header\"], [\"children\", Interop_reactApi.Children.toArray(Array.from(map((name) => createElement(\"div\", createObj(Helpers_combineClasses(\"column\", ofArray([[\"className\", \"is-4\"], [\"children\", name]])))), ofArray([\"Name\", \"Balance\", \"Recent transactions\"]))))]]);\n    header = createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_2)));\n    const accounts_1 = map((account) => {\n        let props_6, props_8, copyOfStruct;\n        const props_10 = ofArray([[\"onClick\", (_arg1) => {\n            window.location.href = toText(printf(\"#%s\"))(account.Name);\n            viewAccount(account.Name);\n        }], [\"className\", \"account\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"div\", createObj(Helpers_combineClasses(\"column\", ofArray([[\"className\", \"is-4\"], [\"children\", account.Name]])))), (props_6 = toList(delay(() => append(singleton_1([\"className\", \"is-4\"]), delay(() => append((compare(Account__get_Balance(account), fromParts(0, 0, 0, false, 0)) < 0) ? singleton_1([\"style\", {\n            color: \"#CD5C5C\",\n        }]) : empty(), delay(() => {\n            let arg10_1;\n            return singleton_1([\"children\", (arg10_1 = Account__get_Balance(account), toText(printf(\"%.2f\"))(arg10_1))]);\n        })))))), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_6)))), (props_8 = ofArray([[\"className\", \"is-4\"], [\"children\", (copyOfStruct = Account__get_LatestMovement(account), toShortDateString(copyOfStruct))]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_8))))])]]);\n        return createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_10)));\n    }, accounts);\n    const props_20 = ofArray([[\"style\", {\n        boxShadow: \"none\",\n        backgroundColor: \"#FFFFFF\",\n    }], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton(createElement(\"figure\", createObj(Helpers_combineClasses(\"image\", singleton([\"className\", \"is-32x32 icon vbars\"]))))), createElement(\"div\", {\n        className: \"media-left\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"article\", {\n        className: \"media\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    })), (arg00_1 = ofArrayWithTail([createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", singleton([\"children\", \"Accounts\"])))), header], accounts_1), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi.Children.toArray(Array.from(arg00_1)),\n    }))]), createElement(\"div\", {\n        className: \"card-content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"card\", props_20)));\n}\n\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { TimeoutException } from \"./SystemException.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// see AsyncBuilder.Delay\nfunction delay(generator) {\n    return protectedCont((ctx) => generator()(ctx));\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nfunction throwAfter(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onError(new TimeoutException());\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function startChild(computation, ms) {\n    if (ms) {\n        const computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), xs => protectedReturn(xs[0]));\n        return startChild(computationWithTimeout);\n    }\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return delay(() => awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w)))));\n}\nfunction parallel2(a, b) {\n    return delay(() => awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)])));\n}\nexport function sequential(computations) {\n    function _sequential(computations) {\n        let pr = Promise.resolve([]);\n        for (const c of computations) {\n            pr = pr.then(results => startAsPromise(c).then(r => results.concat([r])));\n        }\n        return pr;\n    }\n    return delay(() => awaitPromise(_sequential(computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function runSynchronously() {\n    throw new Error(\"Asynchronous code cannot be run synchronously in JS\");\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\nimport { class_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { iterate } from \"../fable-library.3.6.3/Seq.js\";\nimport { defaultArg, toArray } from \"../fable-library.3.6.3/Option.js\";\nimport { Interop_reactApi } from \"./Interop.fs.js\";\nimport { curry, uncurry } from \"../fable-library.3.6.3/Util.js\";\nimport { useState } from \"react\";\nimport * as react from \"react\";\n\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\n\nexport const ReactInterop_useEffect = useEffect;\n\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\n\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\n\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\n\nexport class Internal {\n    constructor() {\n    }\n}\n\nexport function Internal$reflection() {\n    return class_type(\"Feliz.Internal\", void 0, Internal);\n}\n\nexport function Internal_$ctor() {\n    return new Internal();\n}\n\n\nexport function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    console.warn(\"Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\\u003cReactComponent\\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh\");\n    return (props) => Interop_reactApi.createElement(renderElement, Internal_propsWithKey(withKey, props));\n}\n\nexport function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry(2, defaultArg(curry(2, areEqual), null)));\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => Interop_reactApi.createElement(memoElementType, Internal_propsWithKey(withKey, props));\n}\n\nfunction Internal_propsWithKey(withKey, props) {\n    if (withKey == null) {\n        return props;\n    }\n    else {\n        const f = withKey;\n        props.key = f(props);\n        return props;\n    }\n}\n\nexport class React {\n    constructor() {\n    }\n}\n\nexport function React$reflection() {\n    return class_type(\"Feliz.React\", void 0, React);\n}\n\nexport function React_createDisposable_3A5B6456(dispose) {\n    return {\n        Dispose() {\n            dispose();\n        },\n    };\n}\n\nexport function useReact_useState_FCFD9EF(initializer) {\n    return Interop_reactApi.useState(initializer);\n}\n\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\n    return Interop_reactApi.useReducer(update, initialState);\n}\n\nexport function useReact_useEffect_Z5ECA432F(effect) {\n    ReactInterop_useEffect(effect);\n}\n\nexport function useReact_useEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\n    ReactInterop_useLayoutEffect(effect);\n}\n\nexport function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\n    ReactInterop_useLayoutEffect((_arg1) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps((_arg2) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useEffectOnce_3A5B6456(effect) {\n    useReact_useEffect_Z101E1A95(effect, []);\n}\n\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\n    useReact_useEffect_Z5234A374(effect, []);\n}\n\nexport function useReact_useEffectOnce_6E825304(effect) {\n    useReact_useEffect_Z5234A374(() => {\n        const disposeOption = effect();\n        return {\n            Dispose() {\n                iterate((d) => {\n                    let copyOfStruct = d;\n                    copyOfStruct.Dispose();\n                }, toArray(disposeOption));\n            },\n        };\n    }, []);\n}\n\nexport function useReact_useEffect_3A5B6456(effect) {\n    ReactInterop_useEffect((_arg3) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useEffectWithDeps((_arg4) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useDebugValue_Z721C83C5(value) {\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\n}\n\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\n}\n\nexport function useReact_useCallback_93353E(callbackFunction, dependencies) {\n    return Interop_reactApi.useCallback(callbackFunction, defaultArg(dependencies, []));\n}\n\nexport function useReact_useRef_1505(initialValue) {\n    return Interop_reactApi.useRef(initialValue);\n}\n\nexport function useReact_useInputRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useButtonRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useElementRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useMemo_CF4EA67(createFunction, dependencies) {\n    return Interop_reactApi.useMemo(createFunction, defaultArg(dependencies, []));\n}\n\nexport function React_functionComponent_2F9D7239(render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, void 0, withKey);\n}\n\nexport function React_functionComponent_Z4C5FE1BE(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, name, withKey);\n}\n\nexport function React_functionComponent_19A12FB2(render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, withKey);\n}\n\nexport function React_functionComponent_2E1DD889(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, withKey);\n}\n\nexport function React_memo_62A0F746(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);\n}\n\nexport function React_memo_6648A89D(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, name, areEqual, withKey);\n}\n\nexport function React_memo_C2C6BED(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, areEqual, withKey);\n}\n\nexport function React_memo_Z4FCC584A(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, areEqual, withKey);\n}\n\nexport function React_createContext_1AE444D8(name, defaultValue) {\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\n    iterate((name_1) => {\n        contextObject.displayName = name_1;\n    }, toArray(name));\n    return contextObject;\n}\n\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, child);\n}\n\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, ...children);\n}\n\nexport function React_contextConsumer_Z68910595(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, render);\n}\n\nexport function React_contextConsumer_56D53A40(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, (arg) => react.createElement(react.Fragment, {}, ...render(arg)));\n}\n\nexport function useReact_useContext_37FA55CF(contextObject) {\n    return Interop_reactApi.useContext(contextObject);\n}\n\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\n    const callbackRef = useReact_useCallback_93353E((arg) => lastRenderCallbackRef.current(arg), []);\n    useReact_useLayoutEffect_3A5B6456(() => {\n        lastRenderCallbackRef.current = callback;\n    });\n    return callbackRef;\n}\n\nexport const React_useStateWithUpdater_1505 = useState;\n\nexport function React_forwardRef_3790D881(render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_forwardRef_7DC3DB1A(name, render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    render.displayName = name;\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_strictMode_6E3A73D(children) {\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\n}\n\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(() => dynamicImport), props);\n}\n\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\n}\n\nexport function React_suspense_6E3A73D(children) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: null,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function React_suspense_Z3796A576(children, fallback) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: fallback,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\n}\n\nexport function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\n}\n\nexport function useFeliz_React__React_useState_Static_1505(initial) {\n    return Interop_reactApi.useState(initial);\n}\n\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\n\n","import { Record, Union } from \"../fable-library.3.6.3/Types.js\";\nimport { int32_type, obj_type, record_type, option_type, bool_type, list_type, class_type, string_type, union_type } from \"../fable-library.3.6.3/Reflection.js\";\n\nexport class HttpMethod extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\"];\n    }\n}\n\nexport function HttpMethod$reflection() {\n    return union_type(\"Fable.SimpleHttp.HttpMethod\", [], HttpMethod, () => [[], [], [], [], [], [], []]);\n}\n\nexport class Header extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Header\"];\n    }\n}\n\nexport function Header$reflection() {\n    return union_type(\"Fable.SimpleHttp.Header\", [], Header, () => [[[\"Item1\", string_type], [\"Item2\", string_type]]]);\n}\n\nexport class BodyContent extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Empty\", \"Text\", \"Binary\", \"Form\"];\n    }\n}\n\nexport function BodyContent$reflection() {\n    return union_type(\"Fable.SimpleHttp.BodyContent\", [], BodyContent, () => [[], [[\"Item\", string_type]], [[\"Item\", class_type(\"Browser.Types.Blob\")]], [[\"Item\", class_type(\"Browser.Types.FormData\")]]]);\n}\n\nexport class ResponseTypes extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Text\", \"Blob\", \"ArrayBuffer\"];\n    }\n}\n\nexport function ResponseTypes$reflection() {\n    return union_type(\"Fable.SimpleHttp.ResponseTypes\", [], ResponseTypes, () => [[], [], []]);\n}\n\nexport class HttpRequest extends Record {\n    constructor(url, method, headers, withCredentials, overridenMimeType, overridenResponseType, content) {\n        super();\n        this.url = url;\n        this.method = method;\n        this.headers = headers;\n        this.withCredentials = withCredentials;\n        this.overridenMimeType = overridenMimeType;\n        this.overridenResponseType = overridenResponseType;\n        this.content = content;\n    }\n}\n\nexport function HttpRequest$reflection() {\n    return record_type(\"Fable.SimpleHttp.HttpRequest\", [], HttpRequest, () => [[\"url\", string_type], [\"method\", HttpMethod$reflection()], [\"headers\", list_type(Header$reflection())], [\"withCredentials\", bool_type], [\"overridenMimeType\", option_type(string_type)], [\"overridenResponseType\", option_type(ResponseTypes$reflection())], [\"content\", BodyContent$reflection()]]);\n}\n\nexport class ResponseContent extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Text\", \"Blob\", \"ArrayBuffer\", \"Unknown\"];\n    }\n}\n\nexport function ResponseContent$reflection() {\n    return union_type(\"Fable.SimpleHttp.ResponseContent\", [], ResponseContent, () => [[[\"Item\", string_type]], [[\"Item\", class_type(\"Browser.Types.Blob\")]], [[\"Item\", class_type(\"Fable.Core.JS.ArrayBuffer\")]], [[\"Item\", obj_type]]]);\n}\n\nexport class HttpResponse extends Record {\n    constructor(statusCode, responseText, responseType, responseHeaders, content) {\n        super();\n        this.statusCode = (statusCode | 0);\n        this.responseText = responseText;\n        this.responseType = responseType;\n        this.responseHeaders = responseHeaders;\n        this.content = content;\n    }\n}\n\nexport function HttpResponse$reflection() {\n    return record_type(\"Fable.SimpleHttp.HttpResponse\", [], HttpResponse, () => [[\"statusCode\", int32_type], [\"responseText\", string_type], [\"responseType\", string_type], [\"responseHeaders\", class_type(\"Microsoft.FSharp.Collections.FSharpMap`2\", [string_type, string_type])], [\"content\", ResponseContent$reflection()]]);\n}\n\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, FSharpList, fold as fold_1, empty as empty_1, cons } from \"./List.js\";\r\nimport { fill } from \"./Array.js\";\r\nimport { structuralHash, compare, toIterator, equals, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\r\nimport { format, join } from \"./String.js\";\r\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\r\n\r\nexport class MapTreeLeaf$2 {\r\n    constructor(k, v) {\r\n        this.k = k;\r\n        this.v = v;\r\n    }\r\n}\r\n\r\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\r\n}\r\n\r\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\r\n    return new MapTreeLeaf$2(k, v);\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Value(_) {\r\n    return _.v;\r\n}\r\n\r\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\r\n    constructor(k, v, left, right, h) {\r\n        super(k, v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function MapTreeNode$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\r\n}\r\n\r\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\r\n    return new MapTreeNode$2(k, v, left, right, h);\r\n}\r\n\r\nexport function MapTreeNode$2__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function MapTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\r\n    MapTreeModule_sizeAux:\r\n    while (true) {\r\n        const acc = acc_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_sizeAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_size(x) {\r\n    return MapTreeModule_sizeAux(0, x);\r\n}\r\n\r\nexport function MapTreeModule_mk(l, k, v, r) {\r\n    let hl;\r\n    const m = l;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const m_1 = r;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\r\n    if (m_2 === 0) {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n    else {\r\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\r\n    let m_2, m2_2, m_3, m2_3;\r\n    let t1h;\r\n    const m = t1;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const m_1 = t2;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof MapTreeNode$2) {\r\n            if (((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? ((m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(matchValue));\r\n                if (matchValue_1 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof MapTreeNode$2) {\r\n            if (((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? ((m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_mk(t1, k, v, t2);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_add(comparer, k, v, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c < 0) {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n        }\r\n        else {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_tryFind:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c === 0) {\r\n                return some(MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n            else if (m2 instanceof MapTreeNode$2) {\r\n                comparer_mut = comparer;\r\n                k_mut = k;\r\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\r\n                continue MapTreeModule_tryFind;\r\n            }\r\n            else {\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_find(comparer, k, m) {\r\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\r\n    if (matchValue == null) {\r\n        throw (new Error());\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\r\n    if (f(k, v)) {\r\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\r\n    MapTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\r\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue MapTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition(comparer, f, m) {\r\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\r\n    if (f(k, v)) {\r\n        return MapTreeModule_add(comparer, k, v, acc);\r\n    }\r\n    else {\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\r\n    MapTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\r\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                acc_mut = acc_2;\r\n                continue MapTreeModule_filterAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filter(comparer, f, m) {\r\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_spliceOutSuccessor(m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (MapTreeNode$2__get_Left(m2) == null) {\r\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\r\n            }\r\n            else {\r\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\r\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\r\n            }\r\n        }\r\n        else {\r\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_remove(comparer, k, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeModule_empty();\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_change(comparer, k, u, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_1 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n                }\r\n                else if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c_1 < 0) {\r\n                const matchValue_2 = u(void 0);\r\n                if (matchValue_2 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n            else if (c_1 === 0) {\r\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_3 != null) {\r\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\r\n                }\r\n                else {\r\n                    return MapTreeModule_empty();\r\n                }\r\n            }\r\n            else {\r\n                const matchValue_4 = u(void 0);\r\n                if (matchValue_4 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const matchValue = u(void 0);\r\n        if (matchValue != null) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Left(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\r\n    MapTreeModule_iterOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_iterOpt;\r\n            }\r\n            else {\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iter(f, m) {\r\n    MapTreeModule_iterOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\r\n    MapTreeModule_tryPickOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\r\n                if (matchValue == null) {\r\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                    if (matchValue_1 == null) {\r\n                        f_mut = f;\r\n                        m_mut = MapTreeNode$2__get_Right(m2);\r\n                        continue MapTreeModule_tryPickOpt;\r\n                    }\r\n                    else {\r\n                        return matchValue_1;\r\n                    }\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryPick(f, m) {\r\n    return MapTreeModule_tryPickOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\r\n    MapTreeModule_existsOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_existsOpt;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_exists(f, m) {\r\n    return MapTreeModule_existsOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\r\n    MapTreeModule_forallOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) && f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_forallOpt;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_forall(f, m) {\r\n    return MapTreeModule_forallOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_map(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapiOpt(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapi(f, m) {\r\n    return MapTreeModule_mapiOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\r\n    MapTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut, x = x_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\r\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                x_mut = x_2;\r\n                continue MapTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldBack(f, m, x) {\r\n    return MapTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\r\n    MapTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                f_mut = f;\r\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_fold(f, x, m) {\r\n    return MapTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\r\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\r\n        foldFromTo:\r\n        while (true) {\r\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\r\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\r\n                    const x_3 = ((cLoKey <= 0) && (cKeyHi <= 0)) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\r\n                    if (cKeyHi < 0) {\r\n                        f_1_mut = f_1;\r\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\r\n                        x_1_mut = x_3;\r\n                        continue foldFromTo;\r\n                    }\r\n                    else {\r\n                        return x_3;\r\n                    }\r\n                }\r\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) && (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0)) {\r\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                }\r\n                else {\r\n                    return x_1;\r\n                }\r\n            }\r\n            else {\r\n                return x_1;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (comparer.Compare(lo, hi) === 1) {\r\n        return x;\r\n    }\r\n    else {\r\n        return foldFromTo(f, m, x);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\r\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_toList(m) {\r\n    const loop = (m_1_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const m_1 = m_1_mut, acc = acc_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\r\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(m, empty_1());\r\n}\r\n\r\nexport function MapTreeModule_copyToArray(m, arr, i) {\r\n    let j = i;\r\n    MapTreeModule_iter((x, y) => {\r\n        arr[j] = [x, y];\r\n        j = ((j + 1) | 0);\r\n    }, m);\r\n}\r\n\r\nexport function MapTreeModule_toArray(m) {\r\n    const n = MapTreeModule_size(m) | 0;\r\n    const res = fill(new Array(n), 0, n, [null, null]);\r\n    MapTreeModule_copyToArray(m, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofList(comparer, l) {\r\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\r\n}\r\n\r\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    MapTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            comparer_mut = comparer;\r\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\r\n            e_mut = e;\r\n            continue MapTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_ofArray(comparer, arr) {\r\n    let res = MapTreeModule_empty();\r\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\r\n        const forLoopVar = arr[idx];\r\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return MapTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return MapTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            ie.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport class MapTreeModule_MapIterator$2 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\r\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function MapTreeModule_collapseLHS(stack_mut) {\r\n    MapTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const rest = tail(stack);\r\n            const m = head(stack);\r\n            if (m != null) {\r\n                const m2 = m;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(m2), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), MapTreeNode$2__get_Right(m2)], rest);\r\n                    continue MapTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue MapTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIterator(m) {\r\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\r\n}\r\n\r\nexport function MapTreeModule_notStarted() {\r\n    throw (new Error(\"enumeration not started\"));\r\n}\r\n\r\nexport function MapTreeModule_alreadyFinished() {\r\n    throw (new Error(\"enumeration already finished\"));\r\n}\r\n\r\nexport function MapTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n                }\r\n                else {\r\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n            }\r\n        }\r\n        else {\r\n            return MapTreeModule_alreadyFinished();\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIEnumerator(m) {\r\n    let i = MapTreeModule_mkIterator(m);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return MapTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = MapTreeModule_mkIterator(m);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function MapTreeModule_toSeq(s) {\r\n    return unfold((en_1) => {\r\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, MapTreeModule_mkIEnumerator(s));\r\n}\r\n\r\nexport class FSharpMap {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpMap__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        if (that instanceof FSharpMap) {\r\n            const e1 = getEnumerator(this$);\r\n            try {\r\n                const e2 = getEnumerator(that);\r\n                try {\r\n                    const loop = () => {\r\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            if (!m1) {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                if (equals(e1c[0], e2c[0]) && equals(e1c[1], e2c[1])) {\r\n                                    return loop();\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    };\r\n                    return loop();\r\n                }\r\n                finally {\r\n                    e2.Dispose();\r\n                }\r\n            }\r\n            finally {\r\n                e1.Dispose();\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpMap\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    CompareTo(obj) {\r\n        const m = this;\r\n        if (obj instanceof FSharpMap) {\r\n            return compareWith((kvp1, kvp2) => {\r\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\r\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\r\n            }, m, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, x[0]) && equals(FSharpMap__get_Item(m, x[0]), x[1]);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const m = this;\r\n        MapTreeModule_copyToArray(m.tree, arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    get size() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    delete(_arg1) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return false;\r\n    }\r\n    entries() {\r\n        const m = this;\r\n        return map_1((p) => [p[0], p[1]], m);\r\n    }\r\n    get(k) {\r\n        const m = this;\r\n        return FSharpMap__get_Item(m, k);\r\n    }\r\n    has(k) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, k);\r\n    }\r\n    keys() {\r\n        const m = this;\r\n        return map_1((p) => p[0], m);\r\n    }\r\n    set(k, v) {\r\n        const m = this;\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return m;\r\n    }\r\n    values() {\r\n        const m = this;\r\n        return map_1((p) => p[1], m);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const m = this;\r\n        iterate_1((p) => {\r\n            f(p[1], p[0], m);\r\n        }, m);\r\n    }\r\n}\r\n\r\nexport function FSharpMap$reflection(gen0, gen1) {\r\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\r\n}\r\n\r\nexport function FSharpMap_$ctor(comparer, tree) {\r\n    return new FSharpMap(comparer, tree);\r\n}\r\n\r\n(() => {\r\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\r\n})();\r\n\r\nexport function FSharpMap_get_Empty() {\r\n    return FSharpMap.empty;\r\n}\r\n\r\nexport function FSharpMap_Create(ie) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\r\n}\r\n\r\nexport function FSharpMap__get_Comparer(m) {\r\n    return m.comparer;\r\n}\r\n\r\nexport function FSharpMap__get_Tree(m) {\r\n    return m.tree;\r\n}\r\n\r\nexport function FSharpMap__Add(m, key, value) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Change(m, key, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__get_IsEmpty(m) {\r\n    return m.tree == null;\r\n}\r\n\r\nexport function FSharpMap__get_Item(m, key) {\r\n    return MapTreeModule_find(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__TryPick(m, f) {\r\n    return MapTreeModule_tryPick(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Exists(m, predicate) {\r\n    return MapTreeModule_exists(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Filter(m, predicate) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\r\n}\r\n\r\nexport function FSharpMap__ForAll(m, predicate) {\r\n    return MapTreeModule_forall(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Fold(m, f, acc) {\r\n    return MapTreeModule_foldBack(f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\r\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__Iterate(m, f) {\r\n    MapTreeModule_iter(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__MapRange(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Map(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Partition(m, predicate) {\r\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\r\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\r\n}\r\n\r\nexport function FSharpMap__get_Count(m) {\r\n    return MapTreeModule_size(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ContainsKey(m, key) {\r\n    return MapTreeModule_mem(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Remove(m, key) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\r\n}\r\n\r\nexport function FSharpMap__TryGetValue(__, key, value) {\r\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\r\n    if (matchValue == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        const v = value_1(matchValue);\r\n        value.contents = v;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function FSharpMap__get_Keys(__) {\r\n    return Array.from(map_1((kvp) => kvp[0], MapTreeModule_toSeq(__.tree)));\r\n}\r\n\r\nexport function FSharpMap__get_Values(__) {\r\n    return Array.from(map_1((kvp) => kvp[1], MapTreeModule_toSeq(__.tree)));\r\n}\r\n\r\nexport function FSharpMap__TryFind(m, key) {\r\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToList(m) {\r\n    return MapTreeModule_toList(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToArray(m) {\r\n    return MapTreeModule_toArray(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ComputeHashCode(this$) {\r\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const activePatternResult5790 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (combineHash(res, structuralHash(activePatternResult5790[0])) | 0);\r\n            res = (combineHash(res, structuralHash(activePatternResult5790[1])) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function isEmpty(table) {\r\n    return FSharpMap__get_IsEmpty(table);\r\n}\r\n\r\nexport function add(key, value, table) {\r\n    return FSharpMap__Add(table, key, value);\r\n}\r\n\r\nexport function change(key, f, table) {\r\n    return FSharpMap__Change(table, key, f);\r\n}\r\n\r\nexport function find(key, table) {\r\n    return FSharpMap__get_Item(table, key);\r\n}\r\n\r\nexport function tryFind(key, table) {\r\n    return FSharpMap__TryFind(table, key);\r\n}\r\n\r\nexport function remove(key, table) {\r\n    return FSharpMap__Remove(table, key);\r\n}\r\n\r\nexport function containsKey(key, table) {\r\n    return FSharpMap__ContainsKey(table, key);\r\n}\r\n\r\nexport function iterate(action, table) {\r\n    FSharpMap__Iterate(table, action);\r\n}\r\n\r\nexport function tryPick(chooser, table) {\r\n    return FSharpMap__TryPick(table, chooser);\r\n}\r\n\r\nexport function pick(chooser, table) {\r\n    const matchValue = tryPick(chooser, table);\r\n    if (matchValue != null) {\r\n        return value_1(matchValue);\r\n    }\r\n    else {\r\n        throw (new Error());\r\n    }\r\n}\r\n\r\nexport function exists(predicate, table) {\r\n    return FSharpMap__Exists(table, predicate);\r\n}\r\n\r\nexport function filter(predicate, table) {\r\n    return FSharpMap__Filter(table, predicate);\r\n}\r\n\r\nexport function partition(predicate, table) {\r\n    return FSharpMap__Partition(table, predicate);\r\n}\r\n\r\nexport function forAll(predicate, table) {\r\n    return FSharpMap__ForAll(table, predicate);\r\n}\r\n\r\nexport function map(mapping, table) {\r\n    return FSharpMap__Map(table, mapping);\r\n}\r\n\r\nexport function fold(folder, state, table) {\r\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\r\n}\r\n\r\nexport function foldBack(folder, table, state) {\r\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\r\n}\r\n\r\nexport function toSeq(table) {\r\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\r\n}\r\n\r\nexport function findKey(predicate, table) {\r\n    return pick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function tryFindKey(predicate, table) {\r\n    return tryPick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function ofList(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofSeq(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofArray(elements) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\r\n}\r\n\r\nexport function toList(table) {\r\n    return FSharpMap__ToList(table);\r\n}\r\n\r\nexport function toArray(table) {\r\n    return FSharpMap__ToArray(table);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpMap_get_Empty();\r\n}\r\n\r\nexport function count(table) {\r\n    return FSharpMap__get_Count(table);\r\n}\r\n\r\n","import { fromContinuations } from \"../fable-library.3.6.3/Async.js\";\nimport { HttpResponse, ResponseContent, HttpRequest, BodyContent, HttpMethod, Header } from \"./Types.fs.js\";\nimport { tail, head, isEmpty, ofArray as ofArray_1, singleton, append, empty } from \"../fable-library.3.6.3/List.js\";\nimport { ofArray, empty as empty_1 } from \"../fable-library.3.6.3/Map.js\";\nimport { join, split, isNullOrEmpty } from \"../fable-library.3.6.3/String.js\";\nimport { choose } from \"../fable-library.3.6.3/Array.js\";\nimport { getEnumerator } from \"../fable-library.3.6.3/Util.js\";\nimport { some } from \"../fable-library.3.6.3/Option.js\";\nimport { singleton as singleton_1 } from \"../fable-library.3.6.3/AsyncBuilder.js\";\n\nexport function FileReader_readBlobAsText(blob) {\n    return fromContinuations((tupledArg) => {\n        const reader = new FileReader();\n        reader.onload = ((_arg1) => {\n            if (reader.readyState === 2) {\n                tupledArg[0](reader.result);\n            }\n        });\n        reader.readAsText(blob);\n    });\n}\n\nexport function FileReader_readFileAsText(file) {\n    return fromContinuations((tupledArg) => {\n        const reader = new FileReader();\n        reader.onload = ((_arg1) => {\n            if (reader.readyState === 2) {\n                tupledArg[0](reader.result);\n            }\n        });\n        reader.readAsText(file);\n    });\n}\n\nexport function FormData_append(key, value, form) {\n    form.append(key, value);\n    return form;\n}\n\nexport function FormData_appendFile(key, file, form) {\n    form.append(key, file);\n    return form;\n}\n\nexport function FormData_appendNamedFile(key, fileName, file, form) {\n    form.append(key, file, fileName);\n    return form;\n}\n\nexport function FormData_appendBlob(key, blob, form) {\n    form.append(key, blob);\n    return form;\n}\n\nexport function FormData_appendNamedBlob(key, fileName, blob, form) {\n    form.append(key, blob, fileName);\n    return form;\n}\n\nexport function Headers_contentType(value) {\n    return new Header(0, \"Content-Type\", value);\n}\n\nexport function Headers_accept(value) {\n    return new Header(0, \"Accept\", value);\n}\n\nexport function Headers_acceptCharset(value) {\n    return new Header(0, \"Accept-Charset\", value);\n}\n\nexport function Headers_acceptEncoding(value) {\n    return new Header(0, \"Accept-Encoding\", value);\n}\n\nexport function Headers_acceptLanguage(value) {\n    return new Header(0, \"Accept-Language\", value);\n}\n\nexport function Headers_acceptDateTime(value) {\n    return new Header(0, \"Accept-Datetime\", value);\n}\n\nexport function Headers_authorization(value) {\n    return new Header(0, \"Authorization\", value);\n}\n\nexport function Headers_cacheControl(value) {\n    return new Header(0, \"Cache-Control\", value);\n}\n\nexport function Headers_connection(value) {\n    return new Header(0, \"Connection\", value);\n}\n\nexport function Headers_cookie(value) {\n    return new Header(0, \"Cookie\", value);\n}\n\nexport function Headers_contentMD5(value) {\n    return new Header(0, \"Content-MD5\", value);\n}\n\nexport function Headers_date(value) {\n    return new Header(0, \"Date\", value);\n}\n\nexport function Headers_expect(value) {\n    return new Header(0, \"Expect\", value);\n}\n\nexport function Headers_ifMatch(value) {\n    return new Header(0, \"If-Match\", value);\n}\n\nexport function Headers_ifModifiedSince(value) {\n    return new Header(0, \"If-Modified-Since\", value);\n}\n\nexport function Headers_ifNoneMatch(value) {\n    return new Header(0, \"If-None-Match\", value);\n}\n\nexport function Headers_ifRange(value) {\n    return new Header(0, \"If-Range\", value);\n}\n\nexport function Headers_IfUnmodifiedSince(value) {\n    return new Header(0, \"If-Unmodified-Since\", value);\n}\n\nexport function Headers_maxForwards(value) {\n    return new Header(0, \"Max-Forwards\", value);\n}\n\nexport function Headers_origin(value) {\n    return new Header(0, \"Origin\", value);\n}\n\nexport function Headers_pragma(value) {\n    return new Header(0, \"Pragma\", value);\n}\n\nexport function Headers_proxyAuthorization(value) {\n    return new Header(0, \"Proxy-Authorization\", value);\n}\n\nexport function Headers_range(value) {\n    return new Header(0, \"Range\", value);\n}\n\nexport function Headers_referer(value) {\n    return new Header(0, \"Referer\", value);\n}\n\nexport function Headers_userAgent(value) {\n    return new Header(0, \"User-Agent\", value);\n}\n\nexport function Headers_create(key, value) {\n    return new Header(0, key, value);\n}\n\nconst Http_defaultRequest = new HttpRequest(\"\", new HttpMethod(0), empty(), false, void 0, void 0, new BodyContent(0));\n\nconst Http_emptyResponse = new HttpResponse(0, \"\", \"\", empty_1(), new ResponseContent(0, \"\"));\n\nfunction Http_splitAt(delimiter, input) {\n    if (isNullOrEmpty(input)) {\n        return [input];\n    }\n    else {\n        return split(input, [delimiter], null, 0);\n    }\n}\n\nfunction Http_serializeMethod(_arg1) {\n    switch (_arg1.tag) {\n        case 1: {\n            return \"POST\";\n        }\n        case 3: {\n            return \"PATCH\";\n        }\n        case 2: {\n            return \"PUT\";\n        }\n        case 4: {\n            return \"DELETE\";\n        }\n        case 6: {\n            return \"OPTIONS\";\n        }\n        case 5: {\n            return \"HEAD\";\n        }\n        default: {\n            return \"GET\";\n        }\n    }\n}\n\nexport function Http_request(url) {\n    return new HttpRequest(url, Http_defaultRequest.method, Http_defaultRequest.headers, Http_defaultRequest.withCredentials, Http_defaultRequest.overridenMimeType, Http_defaultRequest.overridenResponseType, Http_defaultRequest.content);\n}\n\nexport function Http_method(httpVerb, req) {\n    return new HttpRequest(req.url, httpVerb, req.headers, req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.content);\n}\n\nexport function Http_header(singleHeader, req) {\n    return new HttpRequest(req.url, req.method, append(req.headers, singleton(singleHeader)), req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.content);\n}\n\nexport function Http_headers(values, req) {\n    return new HttpRequest(req.url, req.method, append(req.headers, values), req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.content);\n}\n\nexport function Http_withCredentials(enabled, req) {\n    return new HttpRequest(req.url, req.method, req.headers, enabled, req.overridenMimeType, req.overridenResponseType, req.content);\n}\n\nexport function Http_overrideMimeType(value, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, value, req.overridenResponseType, req.content);\n}\n\nexport function Http_overrideResponseType(value, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, req.overridenMimeType, value, req.content);\n}\n\nexport function Http_content(bodyContent, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, req.overridenMimeType, req.overridenResponseType, bodyContent);\n}\n\nexport function Http_send(req) {\n    return fromContinuations((tupledArg) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(Http_serializeMethod(req.method), req.url);\n        xhr.onreadystatechange = (() => {\n            let responseText, matchValue, statusCode, responseType, content, matchValue_1;\n            if (xhr.readyState === 4) {\n                tupledArg[0]((responseText = ((matchValue = xhr.responseType, (matchValue === \"\") ? xhr.responseText : ((matchValue === \"text\") ? xhr.responseText : \"\"))), (statusCode = (xhr.status | 0), (responseType = xhr.responseType, (content = ((matchValue_1 = xhr.responseType, (matchValue_1 === \"\") ? (new ResponseContent(0, xhr.responseText)) : ((matchValue_1 === \"text\") ? (new ResponseContent(0, xhr.responseText)) : ((matchValue_1 === \"arraybuffer\") ? (new ResponseContent(2, xhr.response)) : ((matchValue_1 === \"blob\") ? (new ResponseContent(1, xhr.response)) : (new ResponseContent(3, xhr.response))))))), new HttpResponse(statusCode, responseText, responseType, ofArray(choose((headerLine) => {\n                    const matchValue_2 = ofArray_1(Http_splitAt(\":\", headerLine));\n                    if (!isEmpty(matchValue_2)) {\n                        return [head(matchValue_2).toLocaleLowerCase(), join(\":\", tail(matchValue_2)).trim()];\n                    }\n                    else {\n                        return void 0;\n                    }\n                }, Http_splitAt(\"\\r\\n\", xhr.getAllResponseHeaders()))), content))))));\n            }\n        });\n        const enumerator = getEnumerator(req.headers);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                xhr.setRequestHeader(forLoopVar.fields[0], forLoopVar.fields[1]);\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n        xhr.withCredentials = req.withCredentials;\n        const matchValue_3 = req.overridenMimeType;\n        if (matchValue_3 == null) {\n        }\n        else {\n            xhr.overrideMimeType(matchValue_3);\n        }\n        const matchValue_4 = req.overridenResponseType;\n        if (matchValue_4 == null) {\n        }\n        else if (matchValue_4.tag === 1) {\n            xhr.responseType = \"blob\";\n        }\n        else if (matchValue_4.tag === 2) {\n            xhr.responseType = \"arraybuffer\";\n        }\n        else {\n            xhr.responseType = \"text\";\n        }\n        const matchValue_5 = [req.method, req.content];\n        if (matchValue_5[0].tag === 0) {\n            xhr.send(some(void 0));\n        }\n        else if (matchValue_5[1].tag === 1) {\n            xhr.send(some(matchValue_5[1].fields[0]));\n        }\n        else if (matchValue_5[1].tag === 3) {\n            xhr.send(some(matchValue_5[1].fields[0]));\n        }\n        else if (matchValue_5[1].tag === 2) {\n            xhr.send(some(matchValue_5[1].fields[0]));\n        }\n        else {\n            xhr.send(some(void 0));\n        }\n    });\n}\n\nexport function Http_get(url) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_method(new HttpMethod(0), Http_request(url))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_put(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(2), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_delete(url) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_method(new HttpMethod(4), Http_request(url))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_patch(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(3), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_post(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(1), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\n","import { comparePrimitives, compareArrays, createAtom } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { fold, collect, map, empty, isEmpty, mapIndexed, ofArray } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { parallel, startImmediate } from \"../../fable_modules/fable-library.3.6.3/Async.js\";\nimport { singleton } from \"../../fable_modules/fable-library.3.6.3/AsyncBuilder.js\";\nimport { Http_get } from \"../../fable_modules/Fable.SimpleHttp.3.0.0/Http.fs.js\";\nimport { sortBy, map as map_1, mapIndexed as mapIndexed_1, sortByDescending } from \"../../fable_modules/fable-library.3.6.3/Array.js\";\nimport { parse } from \"../../fable_modules/fable-library.3.6.3/Date.js\";\nimport { Message, MessageType } from \"../Models.js\";\nimport { printf, toConsoleError, isNullOrWhiteSpace } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { empty as empty_1, FSharpMap__Add, toList } from \"../../fable_modules/fable-library.3.6.3/Map.js\";\nimport { value as value_2 } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\n\nexport let messages = createAtom(void 0);\n\nexport const sources = ofArray([\"https://criipto-bank.netlify.app/feliz/messages.json\", \"/messages.json\"]);\n\nexport function fetch$(setMessages) {\n    if (messages() == null) {\n        startImmediate(singleton.Delay(() => singleton.Bind(parallel(mapIndexed((priority, src) => singleton.Delay(() => singleton.Bind(Http_get(src), (_arg1) => {\n            const statusCode = _arg1[0] | 0;\n            const messagesRaw = _arg1[1];\n            if (statusCode === 200) {\n                const messages_1 = ofArray(sortByDescending((m_2) => [m_2.Unread ? 1 : 0, m_2.Date], mapIndexed_1((i, m_1) => (new Message(m_1[\"id\"], m_1[\"title\"], m_1[\"content\"], m_1[\"from\"], parse(m_1[\"date\"], {}), (i % 5) !== 1, new MessageType(0))), ((JSON.parse(messagesRaw))[\"messages\"]).filter((m) => (!isNullOrWhiteSpace(m[\"id\"])))), {\n                    Compare: (x, y) => compareArrays(x, y),\n                }));\n                if (!isEmpty(messages_1)) {\n                    return singleton.Return([priority, messages_1]);\n                }\n                else {\n                    toConsoleError(printf(\"Failed retrieving from %s got %d - %s\"))(src)(statusCode)(messagesRaw);\n                    return singleton.Return([priority, empty()]);\n                }\n            }\n            else {\n                toConsoleError(printf(\"Failed to retrieve messages %d %s from %s\"))(statusCode)(messagesRaw)(src);\n                return singleton.Return([priority, empty()]);\n            }\n        })), sources)), (_arg2) => {\n            let list_3;\n            messages(map((tuple_2) => tuple_2[1], toList((list_3 = collect((x_2) => x_2, ofArray(map_1((tuple_1) => tuple_1[1], sortBy((tuple) => tuple[0], _arg2, {\n                Compare: (x_1, y_1) => comparePrimitives(x_1, y_1),\n            })))), fold((res, m_3) => FSharpMap__Add(res, m_3.Id, m_3), empty_1(), list_3)))), true);\n            setMessages(value_2(messages()));\n            return singleton.Zero();\n        })));\n    }\n}\n\n","import { comparePrimitives, createAtom } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { fold, collect, map as map_2, empty, isEmpty, mapIndexed, ofArray } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { parallel, startImmediate } from \"../../fable_modules/fable-library.3.6.3/Async.js\";\nimport { singleton } from \"../../fable_modules/fable-library.3.6.3/AsyncBuilder.js\";\nimport { Http_request, Http_method, Http_send, Http_get } from \"../../fable_modules/Fable.SimpleHttp.3.0.0/Http.fs.js\";\nimport { sortBy, map } from \"../../fable_modules/fable-library.3.6.3/Array.js\";\nimport { HttpMethod } from \"../../fable_modules/Fable.SimpleHttp.3.0.0/Types.fs.js\";\nimport { value as value_2, map as map_1 } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\nimport { Document$ } from \"../Models.js\";\nimport { toConsoleError, printf, toConsole } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { empty as empty_1, FSharpMap__Add, toList } from \"../../fable_modules/fable-library.3.6.3/Map.js\";\n\nexport let documents = createAtom(void 0);\n\nexport const sources = ofArray([\"https://criipto-bank.netlify.app/feliz/documents.json\", \"/documents.json\"]);\n\nexport function fetch$(setDocuments) {\n    if (documents() == null) {\n        startImmediate(singleton.Delay(() => singleton.Bind(parallel(mapIndexed((priority, src) => singleton.Delay(() => singleton.Bind(Http_get(src), (_arg2) => {\n            const statusCode = _arg2[0] | 0;\n            const documentsRaw = _arg2[1];\n            if (statusCode === 200) {\n                return singleton.Bind(parallel(map((doc_2) => {\n                    const doc = doc_2;\n                    return singleton.Delay(() => singleton.Bind(Http_send(Http_method(new HttpMethod(0), Http_request(doc[\"documentUrl\"]))), (_arg1) => {\n                        const response = _arg1;\n                        return singleton.Return(map_1((content_1) => (new Document$(doc[\"name\"], content_1, ((doc[\"reference\"]) == null) ? (void 0) : (doc[\"reference\"]))), (response.statusCode === 200) ? response.responseText : ((toConsole(printf(\"Error retrieving document: %s\"))(response.responseText), void 0))));\n                    }));\n                }, (JSON.parse(documentsRaw))[\"documents\"])), (_arg3) => {\n                    const documents_1 = ofArray(map((option_2) => value_2(option_2), _arg3.filter((option_1) => (option_1 != null))));\n                    if (!isEmpty(documents_1)) {\n                        return singleton.Return([priority, documents_1]);\n                    }\n                    else {\n                        toConsoleError(printf(\"Failed retrieving from %s got %d - %s\"))(src)(statusCode)(documentsRaw);\n                        return singleton.Return([priority, empty()]);\n                    }\n                });\n            }\n            else {\n                toConsoleError(printf(\"Failed to retrieve documents %d %s from %s\"))(statusCode)(documentsRaw)(src);\n                return singleton.Return([priority, empty()]);\n            }\n        })), sources)), (_arg4) => {\n            let list_3;\n            documents(map_2((tuple_2) => tuple_2[1], toList((list_3 = collect((x_1) => x_1, ofArray(map((tuple_1) => tuple_1[1], sortBy((tuple) => tuple[0], _arg4, {\n                Compare: (x, y) => comparePrimitives(x, y),\n            })))), fold((res, doc_3) => FSharpMap__Add(res, doc_3.Name, doc_3), empty_1(), list_3)))), true);\n            setDocuments(value_2(documents()));\n            return singleton.Zero();\n        })));\n    }\n}\n\n","import { class_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { singleton as singleton_1, ofArray, collect } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { createObj, equals } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { empty, singleton, delay, toList } from \"../../fable_modules/fable-library.3.6.3/Seq.js\";\nimport { createElement } from \"react\";\nimport { Elements_IconButton_62C67EE5, Types_View, Types_View__get_IconName } from \"./Elements.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { value as value_28 } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\nimport { toString } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\n\nexport class Navigation {\n    constructor() {\n    }\n}\n\nexport function Navigation$reflection() {\n    return class_type(\"App.Components.Navigation\", void 0, Navigation);\n}\n\nexport function Navigation_SidePanel_AB71DB6(navigation_SidePanel_AB71DB6InputProps) {\n    const setView = navigation_SidePanel_AB71DB6InputProps.setView;\n    const activeView = navigation_SidePanel_AB71DB6InputProps.activeView;\n    const messageCount = navigation_SidePanel_AB71DB6InputProps.messageCount;\n    const props_7 = ofArray([[\"style\", {\n        boxShadow: \"none\",\n    }], [\"children\", Interop_reactApi.Children.toArray(Array.from(collect((tupledArg) => {\n        let props_4, count, view, elms;\n        const view_1 = tupledArg[0];\n        return ofArray([(props_4 = ofArray([[\"className\", equals(activeView, view_1) ? \"is-active menu-item\" : \"menu-item\"], [\"onClick\", (_arg1) => {\n            setView(view_1);\n        }], (count = tupledArg[1], (view = view_1, [\"children\", Interop_reactApi.Children.toArray([(elms = toList(delay(() => {\n            let arg10;\n            return singleton(createElement(\"div\", {\n                className: (arg10 = Types_View__get_IconName(view), toText(printf(\"icon %s\"))(arg10)),\n                children: Interop_reactApi.Children.toArray(Array.from(toList(delay(() => ((count != null) ? singleton(createElement(\"span\", {\n                    className: \"badge is-danger\",\n                    children: value_28(count),\n                })) : empty()))))),\n            }));\n        })), createElement(\"span\", {\n            className: \"panel-icon\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms)),\n        })), createElement(\"span\", {\n            children: toString(view),\n        })])]))]), createElement(\"div\", createObj(Helpers_combineClasses(\"panel-block\", props_4)))), createElement(\"br\", {})]);\n    }, ofArray([[new Types_View(0), void 0], [new Types_View(8), void 0], [new Types_View(2), void 0], [new Types_View(3), void 0], [new Types_View(4), void 0], [new Types_View(5), (messageCount > 0) ? messageCount : (void 0)], [new Types_View(6), void 0], [new Types_View(7), void 0]]))))]]);\n    return createElement(\"nav\", createObj(Helpers_combineClasses(\"panel\", props_7)));\n}\n\nexport function Navigation_Topbar_700867CD(navigation_Topbar_700867CDInputProps) {\n    let elms, props_4, elms_3, elms_2, elms_1, tupledArg;\n    const action = navigation_Topbar_700867CDInputProps.action;\n    const userButtonText = navigation_Topbar_700867CDInputProps.userButtonText;\n    const elms_4 = ofArray([(elms = ofArray([createElement(\"div\", createObj(Helpers_combineClasses(\"navbar-item\", singleton_1([\"className\", \"icon credit-card-logo\"])))), (props_4 = ofArray([[\"className\", \"logo-text\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"span\", {\n        className: \"app-name\",\n        children: \"Criipto\",\n    }), createElement(\"span\", {\n        className: \"bank\",\n        children: \"Bank\",\n    })])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"navbar-item\", props_4))))]), createElement(\"div\", {\n        className: \"navbar-start\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    })), (elms_3 = singleton_1((elms_2 = singleton_1((elms_1 = singleton_1((tupledArg = [userButtonText, \"power-off-white\", (_arg2) => {\n        action();\n    }], createElement(Elements_IconButton_62C67EE5, {\n        label: tupledArg[0],\n        iconName: tupledArg[1],\n        action: tupledArg[2],\n    }))), createElement(\"div\", {\n        className: \"buttons\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    }))), createElement(\"div\", {\n        className: \"navbar-item\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n    }))), createElement(\"div\", {\n        className: \"navbar-end\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"navbar-menu\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_4)),\n    });\n}\n\n","import { Record } from \"../fable_modules/fable-library.3.6.3/Types.js\";\nimport { float64_type, record_type, int32_type, string_type } from \"../fable_modules/fable-library.3.6.3/Reflection.js\";\n\nexport class UserProfile extends Record {\n    constructor(identityscheme, authenticationtype, authenticationmethod, authenticationinstant, nameidentifier, sub, sessionindex, loA, ial, aal, fal, uuid, cprNumberIdentifier, birthdate, dateofbirth, age, name, country) {\n        super();\n        this.identityscheme = identityscheme;\n        this.authenticationtype = authenticationtype;\n        this.authenticationmethod = authenticationmethod;\n        this.authenticationinstant = authenticationinstant;\n        this.nameidentifier = nameidentifier;\n        this.sub = sub;\n        this.sessionindex = sessionindex;\n        this.loA = loA;\n        this.ial = ial;\n        this.aal = aal;\n        this.fal = fal;\n        this.uuid = uuid;\n        this.cprNumberIdentifier = cprNumberIdentifier;\n        this.birthdate = birthdate;\n        this.dateofbirth = dateofbirth;\n        this.age = (age | 0);\n        this.name = name;\n        this.country = country;\n    }\n}\n\nexport function UserProfile$reflection() {\n    return record_type(\"Oidc.UserProfile\", [], UserProfile, () => [[\"identityscheme\", string_type], [\"authenticationtype\", string_type], [\"authenticationmethod\", string_type], [\"authenticationinstant\", string_type], [\"nameidentifier\", string_type], [\"sub\", string_type], [\"sessionindex\", string_type], [\"loA\", string_type], [\"ial\", string_type], [\"aal\", string_type], [\"fal\", string_type], [\"uuid\", string_type], [\"cprNumberIdentifier\", string_type], [\"birthdate\", string_type], [\"dateofbirth\", string_type], [\"age\", int32_type], [\"name\", string_type], [\"country\", string_type]]);\n}\n\nexport class UserInfo extends Record {\n    constructor(code, id_token, access_token, token_type, scope, profile, expires_at) {\n        super();\n        this.code = code;\n        this.id_token = id_token;\n        this.access_token = access_token;\n        this.token_type = token_type;\n        this.scope = scope;\n        this.profile = profile;\n        this.expires_at = expires_at;\n    }\n}\n\nexport function UserInfo$reflection() {\n    return record_type(\"Oidc.UserInfo\", [], UserInfo, () => [[\"code\", string_type], [\"id_token\", string_type], [\"access_token\", string_type], [\"token_type\", string_type], [\"scope\", string_type], [\"profile\", UserProfile$reflection()], [\"expires_at\", float64_type]]);\n}\n\nexport function UserInfo_Parse_Z721C83C5(json) {\n    const info = JSON.parse(json);\n    const p = info[\"profile\"];\n    const profile = new UserProfile(p[\"identityscheme\"], p[\"authenticationtype\"], p[\"authenticationmethod\"], p[\"authenticationinstant\"], p[\"nameidentifier\"], p[\"sub\"], p[\"sessionindex\"], p[\"loA\"], p[\"ial\"], p[\"aal\"], p[\"fal\"], p[\"uuid\"], p[\"cprNumberIdentifier\"], p[\"birthdate\"], p[\"dateofbirth\"], ~(~(p[\"age\"])), p[\"name\"], p[\"country\"]);\n    return new UserInfo(info[\"code\"], info[\"id_token\"], info[\"access_token\"], info[\"token_type\"], info[\"scope\"], profile, info[\"expires_at\"]);\n}\n\nexport class Options extends Record {\n    constructor(authority, client_id, redirect_uri, response_type, post_logout_redirect_uri, acr_values) {\n        super();\n        this.authority = authority;\n        this.client_id = client_id;\n        this.redirect_uri = redirect_uri;\n        this.response_type = response_type;\n        this.post_logout_redirect_uri = post_logout_redirect_uri;\n        this.acr_values = acr_values;\n    }\n}\n\nexport function Options$reflection() {\n    return record_type(\"Oidc.Options\", [], Options, () => [[\"authority\", string_type], [\"client_id\", string_type], [\"redirect_uri\", string_type], [\"response_type\", string_type], [\"post_logout_redirect_uri\", string_type], [\"acr_values\", string_type]]);\n}\n\n","import { head } from \"../fable_modules/fable-library.3.6.3/Array.js\";\nimport { toConsoleError, toConsole, printf, toText, split } from \"../fable_modules/fable-library.3.6.3/String.js\";\nimport { UserInfo_Parse_Z721C83C5, Options } from \"./OidcClient.js\";\nimport { UserManager } from \"oidc-client\";\nimport { bind } from \"../fable_modules/fable-library.3.6.3/Option.js\";\nimport { create, now, op_Subtraction } from \"../fable_modules/fable-library.3.6.3/Date.js\";\nimport { totalSeconds } from \"../fable_modules/fable-library.3.6.3/TimeSpan.js\";\n\nconst options = (() => {\n    const url = head(split(window.location.href, [\"?\", \"#\"]));\n    return new Options(\"https://fablecriipto-test.criipto.id\", \"urn:my:application:identifier:1744\", url, \"code\", url, \"urn:grn:authn:dk:mitid:low\");\n})();\n\nconst userManager = new UserManager(options);\n\nexport const storageKey = toText(printf(\"oidc.user:%s:%s\"))(options.authority)(options.client_id);\n\nexport const storage = sessionStorage;\n\nexport function tryGetUserProfileFromStorage() {\n    const userInfo = storage.getItem(storageKey);\n    if (userInfo == null) {\n        return void 0;\n    }\n    else {\n        return UserInfo_Parse_Z721C83C5(userInfo);\n    }\n}\n\nexport function tryGetUserProfile(cont) {\n    const matchValue = tryGetUserProfileFromStorage();\n    if (matchValue == null) {\n        userManager.processSigninResponse().then((userInfo) => {\n            const json = JSON.stringify(userInfo);\n            storage.setItem(storageKey, toText(printf(\"%A\"))(json));\n            cont(userInfo);\n        }).catch((err) => {\n            console.error(\"Error processing signin:\", err);\n            cont(void 0);\n        });\n    }\n    else {\n        cont(matchValue);\n    }\n}\n\nexport function hasRequestedAuthentication() {\n    return window.location.href.indexOf(\"code=\") >= 0;\n}\n\nexport function isAuthenticated(updateUserProfile) {\n    tryGetUserProfile((arg) => {\n        updateUserProfile(bind((userProfile_1) => {\n            let userProfile, nowInUnixTime, copyOfStruct, arg30;\n            toConsole(printf(\"Expires at: %A\"))(userProfile_1.expires_at);\n            if ((userProfile = userProfile_1, (nowInUnixTime = ((copyOfStruct = op_Subtraction(now(), create(1970, 1, 1, 0, 0, 0, 0, 1)), totalSeconds(copyOfStruct))), ((arg30 = (userProfile.expires_at - nowInUnixTime), toConsole(printf(\"Expires at: %.0f it is now %.0f. Valid another %.0fs\"))(userProfile.expires_at)(nowInUnixTime)(arg30)), userProfile.expires_at < nowInUnixTime)))) {\n                storage.removeItem(storageKey);\n                window.location.href = split(window.location.href, [\"?\"], null, 0)[0];\n                return void 0;\n            }\n            else {\n                return userProfile_1;\n            }\n        }, arg));\n    });\n}\n\nexport function logOut() {\n    try {\n        storage.removeItem(storageKey);\n        userManager.signoutRedirect();\n    }\n    catch (e) {\n        const arg10 = e.message;\n        toConsoleError(printf(\"Eror when logging out: %s\"))(arg10);\n    }\n}\n\nexport function logIn() {\n    return userManager.signinRedirect();\n}\n\n","// tslint:disable:max-line-length\nimport { fromNumber as Long_fromNumber, op_Division as Long_op_Division, op_Multiply as Long_op_Multiply, toNumber as Long_toNumber } from \"./Long.js\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util.js\";\n// TimeSpan in runtime just becomes a number representing milliseconds\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return Long_toNumber(Long_op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return Long_op_Multiply(Long_fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport function multiply(ts, factor) {\n    return ts * factor;\n}\nexport function divide(ts, b) {\n    return ts / b;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const op_Multiply = multiply;\nexport const op_Division = divide;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\", _provider) {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","const littleEndian = true;\nfunction utf16le_encode(str) {\n    const bytes = new Uint8Array(str.length * 2);\n    const view = new DataView(bytes.buffer);\n    for (let i = 0; i < str.length; i++) {\n        const code = str.charCodeAt(i);\n        view.setUint16(i * 2, code, littleEndian);\n    }\n    return bytes;\n}\nfunction utf16le_decode(bytes) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    const chars = new Array(view.byteLength / 2);\n    for (let i = 0; i < chars.length; i++) {\n        const code = view.getUint16(i * 2, littleEndian);\n        chars[i] = String.fromCharCode(code);\n    }\n    return chars.join(\"\");\n}\nfunction utf8_encode(str) {\n    let pos = 0;\n    let buf = new Uint8Array(str.length * 3);\n    for (let i = 0; i < str.length; i++) {\n        let code = str.charCodeAt(i);\n        if (code >= 0xD800 && code <= 0xDBFF) {\n            const nextCode = (i < str.length) ? str.charCodeAt(i + 1) : 0;\n            if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n                i += 1;\n                code = (code - 0xD800) * 0x400 + nextCode - 0xDC00 + 0x10000;\n                if (code > 0xFFFF) {\n                    buf[pos++] = (0x1E << 3) | (code >>> 18);\n                    buf[pos++] = (0x2 << 6) | ((code >>> 12) & 0x3F);\n                    buf[pos++] = (0x2 << 6) | ((code >>> 6) & 0x3F);\n                    buf[pos++] = (0x2 << 6) | (code & 0x3F);\n                }\n            }\n            else {\n                buf[pos++] = 0xEF;\n                buf[pos++] = 0xBF;\n                buf[pos++] = 0xBD;\n            }\n        }\n        else if (code <= 0x007F) {\n            buf[pos++] = (0x0 << 7) | code;\n        }\n        else if (code <= 0x07FF) {\n            buf[pos++] = (0x6 << 5) | (code >>> 6);\n            buf[pos++] = (0x2 << 6) | (code & 0x3F);\n        }\n        else {\n            buf[pos++] = (0xE << 4) | (code >>> 12);\n            buf[pos++] = (0x2 << 6) | ((code >>> 6) & 0x3F);\n            buf[pos++] = (0x2 << 6) | (code & 0x3F);\n        }\n    }\n    buf = new Uint8Array(buf.buffer.slice(0, pos));\n    return buf;\n}\nfunction utf8_decode(bytes) {\n    let pos = 0;\n    const decodeUtf8 = () => {\n        const i1 = bytes[pos++];\n        if ((i1 & 0x80) === 0) {\n            return i1;\n        }\n        else if ((i1 & 0xE0) === 0xC0) {\n            const i2 = bytes[pos++];\n            return ((i1 & 0x1F) << 6) | (i2 & 0x3F);\n        }\n        else if ((i1 & 0xF0) === 0xE0) {\n            const i2 = bytes[pos++];\n            const i3 = bytes[pos++];\n            return ((i1 & 0x0F) << 12) | ((i2 & 0x3F) << 6) | (i3 & 0x3F);\n        }\n        else if ((i1 & 0xF8) === 0xF0) {\n            const i2 = bytes[pos++];\n            const i3 = bytes[pos++];\n            const i4 = bytes[pos++];\n            return ((i1 & 0x07) << 18) | ((i2 & 0x3F) << 12) | ((i3 & 0x3F) << 6) | (i4 & 0x3F);\n        }\n        else {\n            throw new RangeError(\"Invalid UTF8 byte: \" + i1);\n        }\n    };\n    const chars = new Array();\n    while (pos < bytes.length) {\n        const code = decodeUtf8();\n        chars.push(String.fromCodePoint(code));\n    }\n    return chars.join(\"\");\n}\nclass UTF16LE {\n    getBytes(str, index, count) {\n        str = Array.isArray(str) ? str.join(\"\") : str;\n        if (index != null && count != null) {\n            str = str.substring(index, index + count);\n        }\n        else if (index != null) {\n            str = str.substring(index);\n        }\n        if (typeof Buffer !== \"undefined\") {\n            const bytes = Buffer.from(str, \"utf16le\");\n            return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n        }\n        else {\n            return utf16le_encode(str); // polyfill\n        }\n    }\n    getString(bytes, index, count) {\n        const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n        let buffer = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        if (index != null && count != null) {\n            buffer = buffer.subarray(index, index + count);\n        }\n        else if (index != null) {\n            buffer = buffer.subarray(index);\n        }\n        if (typeof TextDecoder !== \"undefined\") {\n            return new TextDecoder(\"utf-16le\").decode(buffer);\n        }\n        else if (typeof Buffer !== \"undefined\") {\n            return Buffer.from(buffer).toString(\"utf16le\");\n        }\n        else {\n            return utf16le_decode(buffer); // polyfill\n        }\n    }\n}\nclass UTF8 {\n    getBytes(str, index, count) {\n        str = Array.isArray(str) ? str.join(\"\") : str;\n        if (index != null && count != null) {\n            str = str.substring(index, index + count);\n        }\n        else if (index != null) {\n            str = str.substring(index);\n        }\n        if (typeof TextEncoder !== \"undefined\") {\n            return new TextEncoder().encode(str);\n        }\n        else if (typeof Buffer !== \"undefined\") {\n            const bytes = Buffer.from(str, \"utf8\");\n            return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n        }\n        else {\n            return utf8_encode(str); // polyfill\n        }\n    }\n    getString(bytes, index, count) {\n        const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n        let buffer = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        if (index != null && count != null) {\n            buffer = buffer.subarray(index, index + count);\n        }\n        else if (index != null) {\n            buffer = buffer.subarray(index);\n        }\n        if (typeof TextDecoder !== \"undefined\") {\n            return new TextDecoder().decode(buffer);\n        }\n        else if (typeof Buffer !== \"undefined\") {\n            return Buffer.from(buffer).toString(\"utf8\");\n        }\n        else {\n            return utf8_decode(buffer); // polyfill\n        }\n    }\n}\nconst _UTF16 = new UTF16LE();\nconst _UTF8 = new UTF8();\nexport function get_Unicode() { return _UTF16; }\nexport function get_UTF8() { return _UTF8; }\n","import { take as take_1, empty, cons, head, isEmpty, fold as fold_1, length as length_1, item, ofSeq, map, sortBy, sum, filter, ofArray } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { op_Addition, fromParts } from \"../../fable_modules/fable-library.3.6.3/Decimal.js\";\nimport { map as map_1, take, initializeInfinite, filter as filter_1, singleton, collect, delay, toList, fold } from \"../../fable_modules/fable-library.3.6.3/Seq.js\";\nimport { get_Unicode } from \"../../fable_modules/fable-library.3.6.3/Encoding.js\";\nimport { rangeDouble } from \"../../fable_modules/fable-library.3.6.3/Range.js\";\nimport { min, comparePrimitives, randomNext } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { some, value as value_1 } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\nimport { Account, LedgerEntry } from \"../Models.js\";\nimport { date, now, addDays } from \"../../fable_modules/fable-library.3.6.3/Date.js\";\nimport { op_UnaryNegation_Int32 } from \"../../fable_modules/fable-library.3.6.3/Int32.js\";\n\nconst listOfCompanies = ofArray([\"Hessel, Friesen and Boehm\", \"Rolfson, Keebler and Halvorson\", \"Morissette Inc\", \"Mueller - Ortiz\", \"Rowe, Murazik and Williamson\", \"Considine - Kassulke\", \"Haag - Cummings\", \"Schimmel and Sons\", \"Romaguera LLC\", \"Shields and Sons\", \"Hilll Inc\", \"Littel LLC\", \"Witting and Sons\", \"Murray and Sons\", \"Konopelski Group\", \"Langosh, Schinner and Roberts\", \"Gottlieb Inc\", \"Bednar Inc\", \"Connelly, Kuhn and Jacobson\", \"Mante - Medhurst\", \"Bergstrom and Sons\", \"Schaden Group\", \"Johnston and Sons\", \"Crist and Sons\", \"Torp, Cummerata and Harber\", \"Friesen - Flatley\", \"Goyette, Reinger and DuBuque\", \"Daugherty Inc\", \"Ruecker, Hyatt and Prosacco\", \"Purdy - Lebsack\", \"Barton Inc\", \"Mraz Group\", \"Rath, Hand and Schoen\", \"Turner LLC\", \"Dietrich - Morar\", \"Cormier, Crist and Hammes\", \"Hahn, Ledner and Stokes\", \"Casper LLC\", \"Hand, Bahringer and Medhurst\", \"Kirlin - Von\", \"Stanton - Bosco\", \"Reichert and Sons\", \"Crist - Williamson\", \"Bradtke, Hagenes and Keebler\", \"Rempel, Corkery and McDermott\", \"Jerde - Howe\", \"Rempel, Langworth and Effertz\", \"Kunze, Grady and Waelchi\", \"Gusikowski - Effertz\", \"Klocko - Sipes\", \"Heidenreich, Ledner and Mills\", \"Tromp - Sipes\", \"Herman - Mitchell\", \"Shanahan, Powlowski and Ankunding\", \"Dare and Sons\", \"Dicki Inc\", \"Upton and Sons\", \"Fay, Fahey and Wiza\", \"Runolfsson - Olson\", \"Miller, Stehr and Mertz\", \"Homenick, Muller and Wunsch\", \"Langworth LLC\", \"Hirthe Group\", \"Crist - Schmitt\", \"Schumm Inc\", \"Daniel, Hagenes and Huels\", \"Smitham, Anderson and Nolan\", \"Doyle - Walsh\", \"Sauer LLC\", \"Cronin, Wiza and Boyle\", \"Reilly LLC\", \"Veum - Pagac\", \"Schuster - Lesch\", \"Kassulke - Blanda\", \"Purdy - Rohan\", \"Schmidt - Lesch\", \"Koelpin Group\", \"Hills Group\", \"Walker - McGlynn\", \"Kunde LLC\", \"Gulgowski Inc\", \"Doyle, Botsford and Olson\", \"Gibson - Murray\", \"Volkman, Haag and McGlynn\", \"Gusikowski Group\", \"Larson Inc\", \"Hessel, Stroman and Langworth\", \"Wilderman and Sons\", \"Stanton - Yundt\", \"Erdman and Sons\", \"Jast, Champlin and Toy\", \"Kutch, O\\u0027Kon and Toy\", \"Goldner - Olson\", \"Welch - Schoen\", \"Rowe, Hagenes and Connelly\", \"Rutherford - Gleason\", \"O\\u0027Keefe, Keebler and Ortiz\", \"Funk - Robel\", \"Luettgen and Sons\", \"O\\u0027Reilly - McGlynn\", \"Daugherty - Bosco\", \"Bergnaum - Reichert\", \"Harvey, Kunde and Bogisich\", \"Wehner and Sons\", \"Marquardt Group\", \"Stamm - Reilly\", \"Berge - Beier\", \"Prohaska, Ernser and Gaylord\", \"Volkman Group\", \"Zulauf, Cartwright and Vandervort\", \"Herman - Mitchell\", \"Turner, Blick and Oberbrunner\", \"Waters, Gulgowski and Mann\", \"Reynolds Inc\", \"Cummings and Sons\", \"Kautzer Group\", \"Leffler and Sons\", \"Huel - Denesik\", \"Kozey, West and Lesch\", \"Borer - Bogisich\", \"Wehner Group\", \"Considine, Nicolas and Runte\", \"Lesch Inc\", \"Dickens, Kshlerin and Kuhn\", \"Connelly LLC\", \"Shields - Marvin\", \"Pouros Group\", \"Davis, Goodwin and Raynor\", \"D\\u0027Amore Group\", \"Oberbrunner - Kreiger\", \"Prosacco Inc\", \"Douglas Inc\", \"O\\u0027Kon - Rippin\", \"Huel, Murray and Feest\", \"Powlowski, Reilly and Harris\", \"Altenwerth Group\", \"Sauer - Hauck\", \"Smith Group\", \"VonRueden, Kutch and Ullrich\", \"Rice - Carroll\", \"Heidenreich, Schaefer and Stehr\", \"Little, Hudson and King\", \"Marks, Altenwerth and Kiehn\", \"White and Sons\", \"Little Group\", \"Howe, Senger and Willms\", \"Hilll - Champlin\", \"Johnson - Gibson\", \"Crist - Simonis\", \"Okuneva LLC\", \"Maggio - Upton\", \"Kuvalis, O\\u0027Keefe and Mosciski\", \"Metz - Effertz\", \"Ondricka LLC\", \"Lang, Tremblay and Will\", \"Schmidt and Sons\", \"Rohan Group\", \"Reilly - Hermann\", \"Christiansen Group\", \"Ritchie, Trantow and Sawayn\", \"Kautzer, Schmeler and Buckridge\", \"Hayes, Bruen and Runolfsson\", \"Hickle - Collins\", \"Konopelski Group\", \"Romaguera - Mante\", \"Runolfsdottir and Sons\", \"Erdman Group\", \"Kuhn - Corkery\", \"Legros and Sons\", \"Smith - Krajcik\", \"Thompson - Powlowski\", \"Rath - Sauer\", \"Reinger LLC\", \"Sporer - Howe\", \"Hoeger, Gerhold and Howell\", \"Hirthe - Johnston\", \"Wiza - Mayer\", \"Mertz - O\\u0027Keefe\", \"Murazik LLC\", \"McGlynn and Sons\", \"Legros LLC\", \"McGlynn - Goldner\", \"Bauch Group\", \"Bashirian, Murray and Reinger\", \"Howe - Prosacco\", \"Toy Group\", \"Bruen, Wisozk and Goodwin\", \"Stokes - Jakubowski\", \"Rosenbaum and Sons\", \"Rowe LLC\", \"Haag Group\", \"Dooley, Ryan and Osinski\", \"Homenick and Sons\", \"Oberbrunner - Weber\", \"Rogahn, Ernser and Gleichner\", \"Larson - Nicolas\", \"Mohr - Crooks\", \"Funk Inc\", \"Davis, Dach and Jast\", \"Murray - Crist\"]);\n\nconst listOfAmounts = ofArray([fromParts(99452, 0, 0, false, 2), fromParts(1500000, 0, 0, true, 2), fromParts(60100, 0, 0, true, 2), fromParts(1000000, 0, 0, false, 2), fromParts(250000, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(106926, 0, 0, true, 2), fromParts(131117, 0, 0, true, 2), fromParts(30950, 0, 0, true, 2), fromParts(511758, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(38000, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(122865, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(830000, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(421875, 0, 0, true, 2), fromParts(67263, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(49463, 0, 0, true, 2), fromParts(220000, 0, 0, true, 2), fromParts(180000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(711452, 0, 0, true, 2), fromParts(3130000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(38100, 0, 0, true, 2), fromParts(131139, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(368022, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(122865, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(830000, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(69764, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(5875, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(400000, 0, 0, true, 2), fromParts(76800, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(200000, 0, 0, true, 2), fromParts(10794, 0, 0, true, 0), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(1500, 0, 0, true, 2), fromParts(3000000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(131132, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(59183, 0, 0, true, 2), fromParts(123360, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(110000, 0, 0, true, 2), fromParts(1079470, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(150053, 0, 0, true, 2), fromParts(337500, 0, 0, true, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(86900, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(20000, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(1947862, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(188772, 0, 0, true, 2), fromParts(38100, 0, 0, true, 2), fromParts(11000, 0, 0, false, 0), fromParts(1000000, 0, 0, true, 2), fromParts(1500000, 0, 0, false, 2), fromParts(38000, 0, 0, true, 2), fromParts(2000000, 0, 0, false, 2), fromParts(1100000, 0, 0, true, 2), fromParts(74590, 0, 0, true, 2), fromParts(57947, 0, 0, true, 2), fromParts(66211, 0, 0, true, 2), fromParts(150000, 0, 0, true, 2), fromParts(700000, 0, 0, false, 2), fromParts(150000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(62100, 0, 0, true, 2), fromParts(30000, 0, 0, true, 2), fromParts(30000, 0, 0, true, 2), fromParts(1079474, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(131132, 0, 0, true, 2), fromParts(70810, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(5000, 0, 0, true, 0), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(2000000, 0, 0, false, 2), fromParts(231000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(127000, 0, 0, false, 2), fromParts(70410, 0, 0, true, 2), fromParts(64250, 0, 0, true, 2), fromParts(365000, 0, 0, true, 2), fromParts(202500, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(700000, 0, 0, false, 2), fromParts(150000, 0, 0, true, 2), fromParts(1079474, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(3010000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(250000, 0, 0, true, 2), fromParts(17100, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(17025, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(210938, 0, 0, true, 2), fromParts(20000, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(67756, 0, 0, true, 2), fromParts(133235, 0, 0, true, 2), fromParts(1000000, 0, 0, true, 2), fromParts(20990, 0, 0, true, 2), fromParts(75760, 0, 0, true, 2), fromParts(139500, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(150000, 0, 0, true, 2), fromParts(800, 0, 0, true, 0), fromParts(1079470, 0, 0, true, 2), fromParts(3660000, 0, 0, false, 2), fromParts(1286798, 0, 0, true, 2), fromParts(151702, 0, 0, true, 2), fromParts(100000, 0, 0, true, 2), fromParts(3010000, 0, 0, false, 2), fromParts(500000, 0, 0, true, 2), fromParts(300000, 0, 0, true, 2), fromParts(60000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(50000, 0, 0, true, 2), fromParts(25000, 0, 0, true, 2), fromParts(19200, 0, 0, true, 2), fromParts(10000, 0, 0, true, 2), fromParts(169500, 0, 0, true, 2), fromParts(99927, 0, 0, true, 2), fromParts(627480, 0, 0, true, 2), fromParts(308712, 0, 0, true, 2), fromParts(22889, 0, 0, true, 2), fromParts(397125, 0, 0, true, 2), fromParts(15475, 0, 0, true, 2), fromParts(131140, 0, 0, true, 2), fromParts(352500, 0, 0, true, 2), fromParts(50000, 0, 0, false, 2)]);\n\nexport const primes = new Int32Array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619]);\n\nexport function getSeed(name) {\n    return fold((res, b) => (res * primes[~(~b)]), 1, get_Unicode().getBytes(name));\n}\n\nexport function generate(name, maxLedgerLength) {\n    let rnd;\n    const arg00 = getSeed(name) | 0;\n    rnd = {};\n    const accountNames = filter((_arg1) => (Math.random() > 0.5), ofArray([\"Checking\", \"Savings\", \"Budget\", \"Household\", \"Children budget\", \"Childs savings\", \"Investment\", \"Mastercard\"]));\n    const length = (maxl) => sum(toList(delay(() => collect((matchValue) => singleton((Math.random() < 0.75) ? 1 : 0), rangeDouble(1, 1, maxl)))), {\n        GetZero: () => 0,\n        Add: (x_1, y_1) => (x_1 + y_1),\n    });\n    const randomElements = (lst) => {\n        let source_1;\n        const lst_1 = sortBy((_arg2) => randomNext(0, 2147483647), lst, {\n            Compare: (x_2, y_2) => comparePrimitives(x_2, y_2),\n        });\n        return map((option_1) => value_1(option_1), ofSeq((source_1 = filter_1((option) => (option != null), initializeInfinite((i) => {\n            const elem = item(i % length_1(lst_1), lst_1);\n            return (Math.random() < 0.5) ? some(elem) : (void 0);\n        })), take(length_1(lst_1), source_1))));\n    };\n    return map((accountName) => {\n        const listOfAmounts_1 = randomElements(listOfAmounts);\n        const listOfCompanies_1 = randomElements(listOfCompanies);\n        return new Account(accountName, fold_1((entries_1, entry) => cons(new LedgerEntry(entry.Date, entry.Amount, op_Addition((!isEmpty(entries_1)) ? head(entries_1).Balance : fromParts(0, 0, 0, false, 0), entry.Amount), entry.Text), entries_1), empty(), fold_1((entries, tupledArg) => {\n            let copyOfStruct_1, copyOfStruct;\n            const dateInterval_1 = tupledArg[2];\n            return cons(new LedgerEntry((!isEmpty(entries)) ? addDays(head(entries).Date, dateInterval_1) : ((copyOfStruct_1 = ((copyOfStruct = now(), date(copyOfStruct))), addDays(copyOfStruct_1, dateInterval_1))), tupledArg[0], fromParts(0, 0, 0, false, 0), tupledArg[1]), entries);\n        }, empty(), toList(delay(() => map_1((i_1) => [item(i_1, listOfAmounts_1), item(i_1, listOfCompanies_1), op_UnaryNegation_Int32(length(10))], rangeDouble(0, 1, length(maxLedgerLength) % maxLedgerLength)))))));\n    }, take_1(min((x, y) => comparePrimitives(x, y), length_1(accountNames), 4), accountNames));\n}\n\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nimport { fromInt as int64FromInt } from \"./Long.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    var _a;\n    return t.fullname === \"[]\" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case \"System.Int64\":\n            case \"System.UInt64\":\n                // typeof<int64> and typeof<uint64> get transformed to class_type(\"System.Int64\")\n                // and class_type(\"System.UInt64\") respectively. Test for the name of the primitive type.\n                return int64FromInt(0);\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","\"use strict\";\r\n\r\nexport function Parsimmon(action) {\r\n  if (!(this instanceof Parsimmon)) {\r\n    return new Parsimmon(action);\r\n  }\r\n  this._ = action;\r\n}\r\n\r\nvar _ = Parsimmon.prototype;\r\n\r\nexport function times(n, f) {\r\n  var i = 0;\r\n  for (i; i < n; i++) {\r\n    f(i);\r\n  }\r\n}\r\n\r\nexport function forEach(f, arr) {\r\n  times(arr.length, function(i) {\r\n    f(arr[i], i, arr);\r\n  });\r\n}\r\n\r\nexport function reduce(f, seed, arr) {\r\n  forEach(function(elem, i, arr) {\r\n    seed = f(seed, elem, i, arr);\r\n  }, arr);\r\n  return seed;\r\n}\r\n\r\nexport function map(f, arr) {\r\n  return reduce(\r\n    function(acc, elem, i, a) {\r\n      return acc.concat([f(elem, i, a)]);\r\n    },\r\n    [],\r\n    arr\r\n  );\r\n}\r\n\r\nexport function lshiftBuffer(input) {\r\n  var asTwoBytes = reduce(\r\n    function(a, v, i, b) {\r\n      return a.concat(\r\n        i === b.length - 1\r\n          ? Buffer.from([v, 0]).readUInt16BE(0)\r\n          : b.readUInt16BE(i)\r\n      );\r\n    },\r\n    [],\r\n    input\r\n  );\r\n  return Buffer.from(\r\n    map(function(x) {\r\n      return ((x << 1) & 0xffff) >> 8;\r\n    }, asTwoBytes)\r\n  );\r\n}\r\n\r\nfunction consumeBitsFromBuffer(n, input) {\r\n  var state = { v: 0, buf: input };\r\n  times(n, function() {\r\n    state = {\r\n      v: (state.v << 1) | bitPeekBuffer(state.buf),\r\n      buf: lshiftBuffer(state.buf)\r\n    };\r\n  });\r\n  return state;\r\n}\r\n\r\nfunction bitPeekBuffer(input) {\r\n  return input[0] >> 7;\r\n}\r\n\r\nexport function sum(numArr) {\r\n  return reduce(\r\n    function(x, y) {\r\n      return x + y;\r\n    },\r\n    0,\r\n    numArr\r\n  );\r\n}\r\n\r\nexport function find(pred, arr) {\r\n  return reduce(\r\n    function(found, elem) {\r\n      return found || (pred(elem) ? elem : found);\r\n    },\r\n    null,\r\n    arr\r\n  );\r\n}\r\n\r\nfunction bufferExists() {\r\n  return typeof Buffer !== \"undefined\";\r\n}\r\n\r\nfunction ensureBuffer() {\r\n  if (!bufferExists()) {\r\n    throw new Error(\r\n      \"Buffer global does not exist; please consider using https://github.com/feross/buffer if you are running Parsimmon in a browser.\"\r\n    );\r\n  }\r\n}\r\n\r\nfunction bitSeq(alignments) {\r\n  ensureBuffer();\r\n  var totalBits = sum(alignments);\r\n  if (totalBits % 8 !== 0) {\r\n    throw new Error(\r\n      \"The bits [\" +\r\n        alignments.join(\", \") +\r\n        \"] add up to \" +\r\n        totalBits +\r\n        \" which is not an even number of bytes; the total should be divisible by 8\"\r\n    );\r\n  }\r\n  var bytes = totalBits / 8;\r\n\r\n  var tooBigRange = find(function(x) {\r\n    return x > 48;\r\n  }, alignments);\r\n  if (tooBigRange) {\r\n    throw new Error(\r\n      tooBigRange + \" bit range requested exceeds 48 bit (6 byte) Number max.\"\r\n    );\r\n  }\r\n\r\n  return new Parsimmon(function(input, i) {\r\n    var newPos = bytes + i;\r\n    if (newPos > input.length) {\r\n      return makeFailure(i, bytes.toString() + \" bytes\");\r\n    }\r\n    return makeSuccess(\r\n      newPos,\r\n      reduce(\r\n        function(acc, bits) {\r\n          var state = consumeBitsFromBuffer(bits, acc.buf);\r\n          return {\r\n            coll: acc.coll.concat(state.v),\r\n            buf: state.buf\r\n          };\r\n        },\r\n        { coll: [], buf: input.slice(i, newPos) },\r\n        alignments\r\n      ).coll\r\n    );\r\n  });\r\n}\r\n\r\nfunction bitSeqObj(namedAlignments) {\r\n  ensureBuffer();\r\n  var seenKeys = {};\r\n  var totalKeys = 0;\r\n  var fullAlignments = map(function(item) {\r\n    if (isArray(item)) {\r\n      var pair = item;\r\n      if (pair.length !== 2) {\r\n        throw new Error(\r\n          \"[\" +\r\n            pair.join(\", \") +\r\n            \"] should be length 2, got length \" +\r\n            pair.length\r\n        );\r\n      }\r\n      assertString(pair[0]);\r\n      assertNumber(pair[1]);\r\n      if (Object.prototype.hasOwnProperty.call(seenKeys, pair[0])) {\r\n        throw new Error(\"duplicate key in bitSeqObj: \" + pair[0]);\r\n      }\r\n      seenKeys[pair[0]] = true;\r\n      totalKeys++;\r\n      return pair;\r\n    } else {\r\n      assertNumber(item);\r\n      return [null, item];\r\n    }\r\n  }, namedAlignments);\r\n  if (totalKeys < 1) {\r\n    throw new Error(\r\n      \"bitSeqObj expects at least one named pair, got [\" +\r\n        namedAlignments.join(\", \") +\r\n        \"]\"\r\n    );\r\n  }\r\n  var namesOnly = map(function(pair) {\r\n    return pair[0];\r\n  }, fullAlignments);\r\n  var alignmentsOnly = map(function(pair) {\r\n    return pair[1];\r\n  }, fullAlignments);\r\n\r\n  return bitSeq(alignmentsOnly).map(function(parsed) {\r\n    var namedParsed = map(function(name, i) {\r\n      return [name, parsed[i]];\r\n    }, namesOnly);\r\n\r\n    return reduce(\r\n      function(obj, kv) {\r\n        if (kv[0] !== null) {\r\n          obj[kv[0]] = kv[1];\r\n        }\r\n        return obj;\r\n      },\r\n      {},\r\n      namedParsed\r\n    );\r\n  });\r\n}\r\n\r\nfunction parseBufferFor(other, length) {\r\n  ensureBuffer();\r\n  return new Parsimmon(function(input, i) {\r\n    if (i + length > input.length) {\r\n      return makeFailure(i, length + \" bytes for \" + other);\r\n    }\r\n    return makeSuccess(i + length, input.slice(i, i + length));\r\n  });\r\n}\r\n\r\nfunction parseBuffer(length) {\r\n  return parseBufferFor(\"buffer\", length).map(function(unsafe) {\r\n    return Buffer.from(unsafe);\r\n  });\r\n}\r\n\r\nfunction encodedString(encoding, length) {\r\n  return parseBufferFor(\"string\", length).map(function(buff) {\r\n    return buff.toString(encoding);\r\n  });\r\n}\r\n\r\nfunction isInteger(value) {\r\n  return typeof value === \"number\" && Math.floor(value) === value;\r\n}\r\n\r\nfunction assertValidIntegerByteLengthFor(who, length) {\r\n  if (!isInteger(length) || length < 0 || length > 6) {\r\n    throw new Error(who + \" requires integer length in range [0, 6].\");\r\n  }\r\n}\r\n\r\nfunction uintBE(length) {\r\n  assertValidIntegerByteLengthFor(\"uintBE\", length);\r\n  return parseBufferFor(\"uintBE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readUIntBE(0, length);\r\n  });\r\n}\r\n\r\nfunction uintLE(length) {\r\n  assertValidIntegerByteLengthFor(\"uintLE\", length);\r\n  return parseBufferFor(\"uintLE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readUIntLE(0, length);\r\n  });\r\n}\r\n\r\nfunction intBE(length) {\r\n  assertValidIntegerByteLengthFor(\"intBE\", length);\r\n  return parseBufferFor(\"intBE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readIntBE(0, length);\r\n  });\r\n}\r\n\r\nfunction intLE(length) {\r\n  assertValidIntegerByteLengthFor(\"intLE\", length);\r\n  return parseBufferFor(\"intLE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readIntLE(0, length);\r\n  });\r\n}\r\n\r\nfunction floatBE() {\r\n  return parseBufferFor(\"floatBE\", 4).map(function(buff) {\r\n    return buff.readFloatBE(0);\r\n  });\r\n}\r\n\r\nfunction floatLE() {\r\n  return parseBufferFor(\"floatLE\", 4).map(function(buff) {\r\n    return buff.readFloatLE(0);\r\n  });\r\n}\r\n\r\nfunction doubleBE() {\r\n  return parseBufferFor(\"doubleBE\", 8).map(function(buff) {\r\n    return buff.readDoubleBE(0);\r\n  });\r\n}\r\n\r\nfunction doubleLE() {\r\n  return parseBufferFor(\"doubleLE\", 8).map(function(buff) {\r\n    return buff.readDoubleLE(0);\r\n  });\r\n}\r\n\r\nfunction toArray(arrLike) {\r\n  return Array.prototype.slice.call(arrLike);\r\n}\r\n// -*- Helpers -*-\r\n\r\nfunction isParser(obj) {\r\n  return obj instanceof Parsimmon;\r\n}\r\n\r\nfunction isArray(x) {\r\n  return {}.toString.call(x) === \"[object Array]\";\r\n}\r\n\r\nfunction isBuffer(x) {\r\n  /* global Buffer */\r\n  return bufferExists() && Buffer.isBuffer(x);\r\n}\r\n\r\nexport function makeSuccess(index, value) {\r\n  return {\r\n    status: true,\r\n    index: index,\r\n    value: value,\r\n    furthest: -1,\r\n    expected: []\r\n  };\r\n}\r\n\r\nexport function makeFailure(index, expected) {\r\n  if (!isArray(expected)) {\r\n    expected = [expected];\r\n  }\r\n  return {\r\n    status: false,\r\n    index: -1,\r\n    value: null,\r\n    furthest: index,\r\n    expected: expected\r\n  };\r\n}\r\n\r\nfunction mergeReplies(result, last) {\r\n  if (!last) {\r\n    return result;\r\n  }\r\n  if (result.furthest > last.furthest) {\r\n    return result;\r\n  }\r\n  var expected =\r\n    result.furthest === last.furthest\r\n      ? union(result.expected, last.expected)\r\n      : last.expected;\r\n  return {\r\n    status: result.status,\r\n    index: result.index,\r\n    value: result.value,\r\n    furthest: last.furthest,\r\n    expected: expected\r\n  };\r\n}\r\n\r\nfunction makeLineColumnIndex(input, i) {\r\n  if (isBuffer(input)) {\r\n    return {\r\n      offset: i,\r\n      line: -1,\r\n      column: -1\r\n    };\r\n  }\r\n  var lines = input.slice(0, i).split(\"\\n\");\r\n  // Note that unlike the character offset, the line and column offsets are\r\n  // 1-based.\r\n  var lineWeAreUpTo = lines.length;\r\n  var columnWeAreUpTo = lines[lines.length - 1].length + 1;\r\n  return {\r\n    offset: i,\r\n    line: lineWeAreUpTo,\r\n    column: columnWeAreUpTo\r\n  };\r\n}\r\n\r\n// Returns the sorted set union of two arrays of strings\r\nfunction union(xs, ys) {\r\n  var obj = {};\r\n  for (var i = 0; i < xs.length; i++) {\r\n    obj[xs[i]] = true;\r\n  }\r\n  for (var j = 0; j < ys.length; j++) {\r\n    obj[ys[j]] = true;\r\n  }\r\n  var keys = [];\r\n  for (var k in obj) {\r\n    if ({}.hasOwnProperty.call(obj, k)) {\r\n      keys.push(k);\r\n    }\r\n  }\r\n  keys.sort();\r\n  return keys;\r\n}\r\n\r\nfunction assertParser(p) {\r\n  if (!isParser(p)) {\r\n    throw new Error(\"not a parser: \" + p);\r\n  }\r\n}\r\n\r\nfunction get(input, i) {\r\n  if (typeof input === \"string\") {\r\n    return input.charAt(i);\r\n  }\r\n  return input[i];\r\n}\r\n\r\n// TODO[ES5]: Switch to Array.isArray eventually.\r\nfunction assertArray(x) {\r\n  if (!isArray(x)) {\r\n    throw new Error(\"not an array: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertNumber(x) {\r\n  if (typeof x !== \"number\") {\r\n    throw new Error(\"not a number: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertRegexp(x) {\r\n  if (!(x instanceof RegExp)) {\r\n    throw new Error(\"not a regexp: \" + x);\r\n  }\r\n  var f = flags(x);\r\n  for (var i = 0; i < f.length; i++) {\r\n    var c = f.charAt(i);\r\n    // Only allow regexp flags [imu] for now, since [g] and [y] specifically\r\n    // mess up Parsimmon. If more non-stateful regexp flags are added in the\r\n    // future, this will need to be revisited.\r\n    if (c !== \"i\" && c !== \"m\" && c !== \"u\") {\r\n      throw new Error('unsupported regexp flag \"' + c + '\": ' + x);\r\n    }\r\n  }\r\n}\r\n\r\nfunction assertFunction(x) {\r\n  if (typeof x !== \"function\") {\r\n    throw new Error(\"not a function: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertString(x) {\r\n  if (typeof x !== \"string\") {\r\n    throw new Error(\"not a string: \" + x);\r\n  }\r\n}\r\n\r\n// -*- Error Formatting -*-\r\n\r\nvar linesBeforeStringError = 2;\r\nvar linesAfterStringError = 3;\r\nvar bytesPerLine = 8;\r\nvar bytesBefore = bytesPerLine * 5;\r\nvar bytesAfter = bytesPerLine * 4;\r\nvar defaultLinePrefix = \"  \";\r\n\r\nexport function repeat(string, amount) {\r\n  return new Array(amount + 1).join(string);\r\n}\r\n\r\nexport function formatExpected(expected) {\r\n  if (expected.length === 1) {\r\n    return \"Expected:\\n\\n\" + expected[0];\r\n  }\r\n  return \"Expected one of the following: \\n\\n\" + expected.join(\", \");\r\n}\r\n\r\nexport function leftPad(str, pad, char) {\r\n  var add = pad - str.length;\r\n  if (add <= 0) {\r\n    return str;\r\n  }\r\n  return repeat(char, add) + str;\r\n}\r\n\r\nfunction toChunks(arr, chunkSize) {\r\n  var length = arr.length;\r\n  var chunks = [];\r\n  var chunkIndex = 0;\r\n\r\n  if (length <= chunkSize) {\r\n    return [arr.slice()];\r\n  }\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    if (!chunks[chunkIndex]) {\r\n      chunks.push([]);\r\n    }\r\n\r\n    chunks[chunkIndex].push(arr[i]);\r\n\r\n    if ((i + 1) % chunkSize === 0) {\r\n      chunkIndex++;\r\n    }\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\n// Get a range of indexes including `i`-th element and `before` and `after` amount of elements from `arr`.\r\nexport function rangeFromIndexAndOffsets(i, before, after, length) {\r\n  return {\r\n    // Guard against the negative upper bound for lines included in the output.\r\n    from: i - before > 0 ? i - before : 0,\r\n    to: i + after > length ? length : i + after\r\n  };\r\n}\r\n\r\nexport function byteRangeToRange(byteRange) {\r\n  // Exception for inputs smaller than `bytesPerLine`\r\n  if (byteRange.from === 0 && byteRange.to === 1) {\r\n    return {\r\n      from: byteRange.from,\r\n      to: byteRange.to\r\n    };\r\n  }\r\n\r\n  return {\r\n    from: byteRange.from / bytesPerLine,\r\n    // Round `to`, so we don't get float if the amount of bytes is not divisible by `bytesPerLine`\r\n    to: Math.floor(byteRange.to / bytesPerLine)\r\n  };\r\n}\r\n\r\nexport function formatGot(input, error) {\r\n  var index = error.index;\r\n  var i = index.offset;\r\n\r\n  var verticalMarkerLength = 1;\r\n  var column;\r\n  var lineWithErrorIndex;\r\n  var lines;\r\n  var lineRange;\r\n  var lastLineNumberLabelLength;\r\n\r\n  if (i === input.length) {\r\n    return \"Got the end of the input\";\r\n  }\r\n\r\n  if (isBuffer(input)) {\r\n    var byteLineWithErrorIndex = i - (i % bytesPerLine);\r\n    var columnByteIndex = i - byteLineWithErrorIndex;\r\n    var byteRange = rangeFromIndexAndOffsets(\r\n      byteLineWithErrorIndex,\r\n      bytesBefore,\r\n      bytesAfter + bytesPerLine,\r\n      input.length\r\n    );\r\n    var bytes = input.slice(byteRange.from, byteRange.to);\r\n    var bytesInChunks = toChunks(bytes.toJSON().data, bytesPerLine);\r\n\r\n    var byteLines = map(function(byteRow) {\r\n      return map(function(byteValue) {\r\n        // Prefix byte values with a `0` if they are shorter than 2 characters.\r\n        return leftPad(byteValue.toString(16), 2, \"0\");\r\n      }, byteRow);\r\n    }, bytesInChunks);\r\n\r\n    lineRange = byteRangeToRange(byteRange);\r\n    lineWithErrorIndex = byteLineWithErrorIndex / bytesPerLine;\r\n    column = columnByteIndex * 3;\r\n\r\n    // Account for an extra space.\r\n    if (columnByteIndex >= 4) {\r\n      column += 1;\r\n    }\r\n\r\n    verticalMarkerLength = 2;\r\n    lines = map(function(byteLine) {\r\n      return byteLine.length <= 4\r\n        ? byteLine.join(\" \")\r\n        : byteLine.slice(0, 4).join(\" \") + \"  \" + byteLine.slice(4).join(\" \");\r\n    }, byteLines);\r\n    lastLineNumberLabelLength = (\r\n      (lineRange.to > 0 ? lineRange.to - 1 : lineRange.to) * 8\r\n    ).toString(16).length;\r\n\r\n    if (lastLineNumberLabelLength < 2) {\r\n      lastLineNumberLabelLength = 2;\r\n    }\r\n  } else {\r\n    var inputLines = input.split(/\\r\\n|[\\n\\r\\u2028\\u2029]/);\r\n    column = index.column - 1;\r\n    lineWithErrorIndex = index.line - 1;\r\n    lineRange = rangeFromIndexAndOffsets(\r\n      lineWithErrorIndex,\r\n      linesBeforeStringError,\r\n      linesAfterStringError,\r\n      inputLines.length\r\n    );\r\n\r\n    lines = inputLines.slice(lineRange.from, lineRange.to);\r\n    lastLineNumberLabelLength = lineRange.to.toString().length;\r\n  }\r\n\r\n  var lineWithErrorCurrentIndex = lineWithErrorIndex - lineRange.from;\r\n\r\n  if (isBuffer(input)) {\r\n    lastLineNumberLabelLength = (\r\n      (lineRange.to > 0 ? lineRange.to - 1 : lineRange.to) * 8\r\n    ).toString(16).length;\r\n\r\n    if (lastLineNumberLabelLength < 2) {\r\n      lastLineNumberLabelLength = 2;\r\n    }\r\n  }\r\n\r\n  var linesWithLineNumbers = reduce(\r\n    function(acc, lineSource, index) {\r\n      var isLineWithError = index === lineWithErrorCurrentIndex;\r\n      var prefix = isLineWithError ? \"> \" : defaultLinePrefix;\r\n      var lineNumberLabel;\r\n\r\n      if (isBuffer(input)) {\r\n        lineNumberLabel = leftPad(\r\n          ((lineRange.from + index) * 8).toString(16),\r\n          lastLineNumberLabelLength,\r\n          \"0\"\r\n        );\r\n      } else {\r\n        lineNumberLabel = leftPad(\r\n          (lineRange.from + index + 1).toString(),\r\n          lastLineNumberLabelLength,\r\n          \" \"\r\n        );\r\n      }\r\n\r\n      return [].concat(\r\n        acc,\r\n        [prefix + lineNumberLabel + \" | \" + lineSource],\r\n        isLineWithError\r\n          ? [\r\n              defaultLinePrefix +\r\n                repeat(\" \", lastLineNumberLabelLength) +\r\n                \" | \" +\r\n                leftPad(\"\", column, \" \") +\r\n                repeat(\"^\", verticalMarkerLength)\r\n            ]\r\n          : []\r\n      );\r\n    },\r\n    [],\r\n    lines\r\n  );\r\n\r\n  return linesWithLineNumbers.join(\"\\n\");\r\n}\r\n\r\nexport function formatError(input, error) {\r\n  return [\r\n    \"\\n\",\r\n    \"-- PARSING FAILED \" + repeat(\"-\", 50),\r\n    \"\\n\\n\",\r\n    formatGot(input, error),\r\n    \"\\n\\n\",\r\n    formatExpected(error.expected),\r\n    \"\\n\"\r\n  ].join(\"\");\r\n}\r\n\r\nexport function flags(re) {\r\n  var s = \"\" + re;\r\n  return s.slice(s.lastIndexOf(\"/\") + 1);\r\n}\r\n\r\nexport function anchoredRegexp(re) {\r\n  return RegExp(\"^(?:\" + re.source + \")\", flags(re));\r\n}\r\n\r\n// -*- Combinators -*-\r\n\r\nexport function seq() {\r\n  var parsers = [].slice.call(arguments);\r\n  var numParsers = parsers.length;\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    assertParser(parsers[j]);\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    var accum = new Array(numParsers);\r\n    for (var j = 0; j < numParsers; j += 1) {\r\n      result = mergeReplies(parsers[j]._(input, i), result);\r\n      if (!result.status) {\r\n        return result;\r\n      }\r\n      accum[j] = result.value;\r\n      i = result.index;\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), result);\r\n  });\r\n}\r\n\r\nexport function seqObj() {\r\n  var seenKeys = {};\r\n  var totalKeys = 0;\r\n  var parsers = toArray(arguments);\r\n  var numParsers = parsers.length;\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    var p = parsers[j];\r\n    if (isParser(p)) {\r\n      continue;\r\n    }\r\n    if (isArray(p)) {\r\n      var isWellFormed =\r\n        p.length === 2 && typeof p[0] === \"string\" && isParser(p[1]);\r\n      if (isWellFormed) {\r\n        var key = p[0];\r\n        if (Object.prototype.hasOwnProperty.call(seenKeys, key)) {\r\n          throw new Error(\"seqObj: duplicate key \" + key);\r\n        }\r\n        seenKeys[key] = true;\r\n        totalKeys++;\r\n        continue;\r\n      }\r\n    }\r\n    throw new Error(\r\n      \"seqObj arguments must be parsers or [string, parser] array pairs.\"\r\n    );\r\n  }\r\n  if (totalKeys === 0) {\r\n    throw new Error(\"seqObj expects at least one named parser, found zero\");\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    var accum = {};\r\n    for (var j = 0; j < numParsers; j += 1) {\r\n      var name;\r\n      var parser;\r\n      if (isArray(parsers[j])) {\r\n        name = parsers[j][0];\r\n        parser = parsers[j][1];\r\n      } else {\r\n        name = null;\r\n        parser = parsers[j];\r\n      }\r\n      result = mergeReplies(parser._(input, i), result);\r\n      if (!result.status) {\r\n        return result;\r\n      }\r\n      if (name) {\r\n        accum[name] = result.value;\r\n      }\r\n      i = result.index;\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), result);\r\n  });\r\n}\r\n\r\nexport function seqMap() {\r\n  var args = [].slice.call(arguments);\r\n  if (args.length === 0) {\r\n    throw new Error(\"seqMap needs at least one argument\");\r\n  }\r\n  var mapper = args.pop();\r\n  assertFunction(mapper);\r\n  return seq.apply(null, args).map(function(results) {\r\n    return mapper.apply(null, results);\r\n  });\r\n}\r\n\r\n// TODO[ES5]: Revisit this with Object.keys and .bind.\r\nexport function createLanguage(parsers) {\r\n  var language = {};\r\n  for (var key in parsers) {\r\n    if ({}.hasOwnProperty.call(parsers, key)) {\r\n      (function(key) {\r\n        var func = function() {\r\n          return parsers[key](language);\r\n        };\r\n        language[key] = lazy(func);\r\n      })(key);\r\n    }\r\n  }\r\n  return language;\r\n}\r\n\r\nexport function alt() {\r\n  var parsers = [].slice.call(arguments);\r\n  var numParsers = parsers.length;\r\n  if (numParsers === 0) {\r\n    return fail(\"zero alternates\");\r\n  }\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    assertParser(parsers[j]);\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    for (var j = 0; j < parsers.length; j += 1) {\r\n      result = mergeReplies(parsers[j]._(input, i), result);\r\n      if (result.status) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  });\r\n}\r\n\r\nexport function sepBy(parser, separator) {\r\n  // Argument asserted by sepBy1\r\n  return sepBy1(parser, separator).or(succeed([]));\r\n}\r\n\r\nexport function sepBy1(parser, separator) {\r\n  assertParser(parser);\r\n  assertParser(separator);\r\n  var pairs = separator.then(parser).many();\r\n  return seqMap(parser, pairs, function(r, rs) {\r\n    return [r].concat(rs);\r\n  });\r\n}\r\n\r\n// -*- Core Parsing Methods -*-\r\n\r\n_.parse = function(input) {\r\n  if (typeof input !== \"string\" && !isBuffer(input)) {\r\n    throw new Error(\r\n      \".parse must be called with a string or Buffer as its argument\"\r\n    );\r\n  }\r\n  var result = this.skip(eof)._(input, 0);\r\n  if (result.status) {\r\n    return {\r\n      status: true,\r\n      value: result.value\r\n    };\r\n  }\r\n  return {\r\n    status: false,\r\n    index: makeLineColumnIndex(input, result.furthest),\r\n    expected: result.expected\r\n  };\r\n};\r\n\r\n// -*- Other Methods -*-\r\n\r\n_.tryParse = function(str) {\r\n  var result = this.parse(str);\r\n  if (result.status) {\r\n    return result.value;\r\n  } else {\r\n    var msg = formatError(str, result);\r\n    var err = new Error(msg);\r\n    err.type = \"ParsimmonError\";\r\n    err.result = result;\r\n    throw err;\r\n  }\r\n};\r\n\r\n_.or = function(alternative) {\r\n  return alt(this, alternative);\r\n};\r\n\r\n_.trim = function(parser) {\r\n  return this.wrap(parser, parser);\r\n};\r\n\r\n_.wrap = function(leftParser, rightParser) {\r\n  return seqMap(leftParser, this, rightParser, function(left, middle) {\r\n    return middle;\r\n  });\r\n};\r\n\r\n_.thru = function(wrapper) {\r\n  return wrapper(this);\r\n};\r\n\r\n_.then = function(next) {\r\n  assertParser(next);\r\n  return seq(this, next).map(function(results) {\r\n    return results[1];\r\n  });\r\n};\r\n\r\n_.many = function() {\r\n  var self = this;\r\n\r\n  return Parsimmon(function(input, i) {\r\n    var accum = [];\r\n    var result = undefined;\r\n\r\n    for (;;) {\r\n      result = mergeReplies(self._(input, i), result);\r\n      if (result.status) {\r\n        if (i === result.index) {\r\n          throw new Error(\r\n            \"infinite loop detected in .many() parser --- calling .many() on \" +\r\n              \"a parser which can accept zero characters is usually the cause\"\r\n          );\r\n        }\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        return mergeReplies(makeSuccess(i, accum), result);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n_.tieWith = function(separator) {\r\n  assertString(separator);\r\n  return this.map(function(args) {\r\n    assertArray(args);\r\n    if (args.length) {\r\n      assertString(args[0]);\r\n      var s = args[0];\r\n      for (var i = 1; i < args.length; i++) {\r\n        assertString(args[i]);\r\n        s += separator + args[i];\r\n      }\r\n      return s;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  });\r\n};\r\n\r\n_.tie = function() {\r\n  return this.tieWith(\"\");\r\n};\r\n\r\n_.times = function(min, max) {\r\n  var self = this;\r\n  if (arguments.length < 2) {\r\n    max = min;\r\n  }\r\n  assertNumber(min);\r\n  assertNumber(max);\r\n  return Parsimmon(function(input, i) {\r\n    var accum = [];\r\n    var result = undefined;\r\n    var prevResult = undefined;\r\n    for (var times = 0; times < min; times += 1) {\r\n      result = self._(input, i);\r\n      prevResult = mergeReplies(result, prevResult);\r\n      if (result.status) {\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        return prevResult;\r\n      }\r\n    }\r\n    for (; times < max; times += 1) {\r\n      result = self._(input, i);\r\n      prevResult = mergeReplies(result, prevResult);\r\n      if (result.status) {\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), prevResult);\r\n  });\r\n};\r\n\r\n_.result = function(res) {\r\n  return this.map(function() {\r\n    return res;\r\n  });\r\n};\r\n\r\n_.atMost = function(n) {\r\n  return this.times(0, n);\r\n};\r\n\r\n_.atLeast = function(n) {\r\n  return seqMap(this.times(n), this.many(), function(init, rest) {\r\n    return init.concat(rest);\r\n  });\r\n};\r\n\r\n_.map = function(fn) {\r\n  assertFunction(fn);\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self._(input, i);\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    return mergeReplies(makeSuccess(result.index, fn(result.value)), result);\r\n  });\r\n};\r\n\r\n_.contramap = function(fn) {\r\n  assertFunction(fn);\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self.parse(fn(input.slice(i)));\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    return makeSuccess(i + input.length, result.value);\r\n  });\r\n};\r\n\r\n_.promap = function(f, g) {\r\n  assertFunction(f);\r\n  assertFunction(g);\r\n  return this.contramap(f).map(g);\r\n};\r\n\r\n_.skip = function(next) {\r\n  return seq(this, next).map(function(results) {\r\n    return results[0];\r\n  });\r\n};\r\n\r\n_.mark = function() {\r\n  return seqMap(index, this, index, function(start, value, end) {\r\n    return {\r\n      start: start,\r\n      value: value,\r\n      end: end\r\n    };\r\n  });\r\n};\r\n\r\n_.node = function(name) {\r\n  return seqMap(index, this, index, function(start, value, end) {\r\n    return {\r\n      name: name,\r\n      value: value,\r\n      start: start,\r\n      end: end\r\n    };\r\n  });\r\n};\r\n\r\n_.sepBy = function(separator) {\r\n  return sepBy(this, separator);\r\n};\r\n\r\n_.sepBy1 = function(separator) {\r\n  return sepBy1(this, separator);\r\n};\r\n\r\n_.lookahead = function(x) {\r\n  return this.skip(lookahead(x));\r\n};\r\n\r\n_.notFollowedBy = function(x) {\r\n  return this.skip(notFollowedBy(x));\r\n};\r\n\r\n_.desc = function(expected) {\r\n  if (!isArray(expected)) {\r\n    expected = [expected];\r\n  }\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var reply = self._(input, i);\r\n    if (!reply.status) {\r\n      reply.expected = expected;\r\n    }\r\n    return reply;\r\n  });\r\n};\r\n\r\n_.fallback = function(result) {\r\n  return this.or(succeed(result));\r\n};\r\n\r\n_.ap = function(other) {\r\n  return seqMap(other, this, function(f, x) {\r\n    return f(x);\r\n  });\r\n};\r\n\r\n_.chain = function(f) {\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self._(input, i);\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    var nextParser = f(result.value);\r\n    return mergeReplies(nextParser._(input, result.index), result);\r\n  });\r\n};\r\n\r\n// -*- Constructors -*-\r\n\r\nexport function string(str) {\r\n  assertString(str);\r\n  var expected = \"'\" + str + \"'\";\r\n  return Parsimmon(function(input, i) {\r\n    var j = i + str.length;\r\n    var head = input.slice(i, j);\r\n    if (head === str) {\r\n      return makeSuccess(j, head);\r\n    } else {\r\n      return makeFailure(i, expected);\r\n    }\r\n  });\r\n}\r\n\r\nexport function byte(b) {\r\n  ensureBuffer();\r\n  assertNumber(b);\r\n  if (b > 0xff) {\r\n    throw new Error(\r\n      \"Value specified to byte constructor (\" +\r\n        b +\r\n        \"=0x\" +\r\n        b.toString(16) +\r\n        \") is larger in value than a single byte.\"\r\n    );\r\n  }\r\n  var expected = (b > 0xf ? \"0x\" : \"0x0\") + b.toString(16);\r\n  return Parsimmon(function(input, i) {\r\n    var head = get(input, i);\r\n    if (head === b) {\r\n      return makeSuccess(i + 1, head);\r\n    } else {\r\n      return makeFailure(i, expected);\r\n    }\r\n  });\r\n}\r\n\r\nexport function regexp(re, group) {\r\n  assertRegexp(re);\r\n  if (arguments.length >= 2) {\r\n    assertNumber(group);\r\n  } else {\r\n    group = 0;\r\n  }\r\n  var anchored = anchoredRegexp(re);\r\n  var expected = \"\" + re;\r\n  return Parsimmon(function(input, i) {\r\n    var match = anchored.exec(input.slice(i));\r\n    if (match) {\r\n      if (0 <= group && group <= match.length) {\r\n        var fullMatch = match[0];\r\n        var groupMatch = match[group];\r\n        return makeSuccess(i + fullMatch.length, groupMatch);\r\n      }\r\n      var message =\r\n        \"valid match group (0 to \" + match.length + \") in \" + expected;\r\n      return makeFailure(i, message);\r\n    }\r\n    return makeFailure(i, expected);\r\n  });\r\n}\r\n\r\nexport function succeed(value) {\r\n  return Parsimmon(function(input, i) {\r\n    return makeSuccess(i, value);\r\n  });\r\n}\r\n\r\nexport function fail(expected) {\r\n  return Parsimmon(function(input, i) {\r\n    return makeFailure(i, expected);\r\n  });\r\n}\r\n\r\nexport function lookahead(x) {\r\n  if (isParser(x)) {\r\n    return Parsimmon(function(input, i) {\r\n      var result = x._(input, i);\r\n      result.index = i;\r\n      result.value = \"\";\r\n      return result;\r\n    });\r\n  } else if (typeof x === \"string\") {\r\n    return lookahead(string(x));\r\n  } else if (x instanceof RegExp) {\r\n    return lookahead(regexp(x));\r\n  }\r\n  throw new Error(\"not a string, regexp, or parser: \" + x);\r\n}\r\n\r\nexport function notFollowedBy(parser) {\r\n  assertParser(parser);\r\n  return Parsimmon(function(input, i) {\r\n    var result = parser._(input, i);\r\n    var text = input.slice(i, result.index);\r\n    return result.status\r\n      ? makeFailure(i, 'not \"' + text + '\"')\r\n      : makeSuccess(i, null);\r\n  });\r\n}\r\n\r\nexport function test(predicate) {\r\n  assertFunction(predicate);\r\n  return Parsimmon(function(input, i) {\r\n    var char = get(input, i);\r\n    if (i < input.length && predicate(char)) {\r\n      return makeSuccess(i + 1, char);\r\n    } else {\r\n      return makeFailure(i, \"a character/byte matching \" + predicate);\r\n    }\r\n  });\r\n}\r\n\r\nexport function oneOf(str) {\r\n  var expected = str.split(\"\");\r\n  for (var idx = 0; idx < expected.length; idx++) {\r\n    expected[idx] = \"'\" + expected[idx] + \"'\";\r\n  }\r\n  return test(function(ch) {\r\n    return str.indexOf(ch) >= 0;\r\n  }).desc(expected);\r\n}\r\n\r\nexport function noneOf(str) {\r\n  return test(function(ch) {\r\n    return str.indexOf(ch) < 0;\r\n  }).desc(\"none of '\" + str + \"'\");\r\n}\r\n\r\nexport function custom(parsingFunction) {\r\n  return Parsimmon(parsingFunction(makeSuccess, makeFailure));\r\n}\r\n\r\n// TODO[ES5]: Improve error message using JSON.stringify eventually.\r\nexport function range(begin, end) {\r\n  return test(function(ch) {\r\n    return begin <= ch && ch <= end;\r\n  }).desc(begin + \"-\" + end);\r\n}\r\n\r\nexport function takeWhile(predicate) {\r\n  assertFunction(predicate);\r\n\r\n  return Parsimmon(function(input, i) {\r\n    var j = i;\r\n    while (j < input.length && predicate(get(input, j))) {\r\n      j++;\r\n    }\r\n    return makeSuccess(j, input.slice(i, j));\r\n  });\r\n}\r\n\r\nexport function lazy(desc, f) {\r\n  if (arguments.length < 2) {\r\n    f = desc;\r\n    desc = undefined;\r\n  }\r\n\r\n  var parser = Parsimmon(function(input, i) {\r\n    parser._ = f()._;\r\n    return parser._(input, i);\r\n  });\r\n\r\n  if (desc) {\r\n    return parser.desc(desc);\r\n  } else {\r\n    return parser;\r\n  }\r\n}\r\n\r\n// -*- Fantasy Land Extras -*-\r\n\r\nfunction empty() {\r\n  return fail(\"fantasy-land/empty\");\r\n}\r\n\r\n_.concat = _.or;\r\n_.empty = empty;\r\n_.of = succeed;\r\n_[\"fantasy-land/ap\"] = _.ap;\r\n_[\"fantasy-land/chain\"] = _.chain;\r\n_[\"fantasy-land/concat\"] = _.concat;\r\n_[\"fantasy-land/empty\"] = _.empty;\r\n_[\"fantasy-land/of\"] = _.of;\r\n_[\"fantasy-land/map\"] = _.map;\r\n\r\n// -*- Base Parsers -*-\r\n\r\nexport const index = Parsimmon(function(input, i) {\r\n  return makeSuccess(i, makeLineColumnIndex(input, i));\r\n});\r\n\r\nexport const any = Parsimmon(function(input, i) {\r\n  if (i >= input.length) {\r\n    return makeFailure(i, \"any character/byte\");\r\n  }\r\n  return makeSuccess(i + 1, get(input, i));\r\n});\r\n\r\nexport const all = Parsimmon(function(input, i) {\r\n  return makeSuccess(input.length, input.slice(i));\r\n});\r\n\r\nexport const eof = Parsimmon(function(input, i) {\r\n  if (i < input.length) {\r\n    return makeFailure(i, \"EOF\");\r\n  }\r\n  return makeSuccess(i, null);\r\n});\r\n\r\nexport const digit = regexp(/[0-9]/).desc(\"a digit\");\r\nexport const digits = regexp(/[0-9]*/).desc(\"optional digits\");\r\nexport const letter = regexp(/[a-z]/i).desc(\"a letter\");\r\nexport const letters = regexp(/[a-z]*/i).desc(\"optional letters\");\r\nexport const optWhitespace = regexp(/\\s*/).desc(\"optional whitespace\");\r\nexport const whitespace = regexp(/\\s+/).desc(\"whitespace\");\r\nexport const cr = string(\"\\r\");\r\nexport const lf = string(\"\\n\");\r\nexport const crlf = string(\"\\r\\n\");\r\nexport const newline = alt(crlf, lf, cr).desc(\"newline\");\r\nexport const end = alt(newline, eof);","import { Record } from \"../fable-library.3.6.3/Types.js\";\nimport { string_type, record_type, int32_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { some } from \"../fable-library.3.6.3/Option.js\";\nimport { seq, noneOf, optWhitespace, whitespace, oneOf, string, takeWhile, test, fail, all, any, digit, lookahead, succeed, eof, letters, letter, lazy, index } from \"./Parsimmon.js\";\nimport { join } from \"../fable-library.3.6.3/String.js\";\nimport { reduce } from \"../fable-library.3.6.3/List.js\";\n\nexport class TokenPosition extends Record {\n    constructor(offset, line, column) {\n        super();\n        this.offset = (offset | 0);\n        this.line = (line | 0);\n        this.column = (column | 0);\n    }\n}\n\nexport function TokenPosition$reflection() {\n    return record_type(\"Fable.Parsimmon.TokenPosition\", [], TokenPosition, () => [[\"offset\", int32_type], [\"line\", int32_type], [\"column\", int32_type]]);\n}\n\nexport class NodeResult$1 extends Record {\n    constructor(name, value, start, end) {\n        super();\n        this.name = name;\n        this.value = value;\n        this.start = start;\n        this.end = end;\n    }\n}\n\nexport function NodeResult$1$reflection(gen0) {\n    return record_type(\"Fable.Parsimmon.NodeResult`1\", [gen0], NodeResult$1, () => [[\"name\", string_type], [\"value\", gen0], [\"start\", TokenPosition$reflection()], [\"end\", TokenPosition$reflection()]]);\n}\n\nexport function Parsimmon_parseRaw(input, parser) {\n    return parser.parse(input);\n}\n\nexport function Parsimmon_parse(input, parser) {\n    const result = parser.parse(input);\n    if (result.status) {\n        return some(result.value);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport const Parsimmon_index = index;\n\nexport function Parsimmon_orTry(otherParser, parser) {\n    return parser.or(otherParser);\n}\n\nexport function Parsimmon_times(n, parser) {\n    return parser.times(n);\n}\n\nexport function Parsimmon_atLeast(n, parser) {\n    return parser.atLeast(n);\n}\n\nexport function Parsimmon_atMost(n, parser) {\n    return parser.atMost(n);\n}\n\nexport function Parsimmon_skip(skipped, keep) {\n    return keep.skip(skipped);\n}\n\nexport function Parsimmon_many(parser) {\n    return parser.many();\n}\n\nexport const Parsimmon_ofLazy = lazy;\n\nexport function Parsimmon_seperateByAtLeastOne(seperator, parser) {\n    return parser.sepBy1(seperator);\n}\n\nexport function Parsimmon_chain(after, before) {\n    return before.then(after);\n}\n\nexport function Parsimmon_bind(f, p) {\n    return p.chain(f);\n}\n\nexport const Parsimmon_letter = letter;\n\nexport function Parsimmon_timesBetween(min, max, parser) {\n    return parser.times(min, max);\n}\n\nexport const Parsimmon_letters = letters;\n\nexport const Parsimmon_endOfFile = eof;\n\nexport function Parsimmon_notFollowedBy(p, before) {\n    return before.notFollowedBy(p);\n}\n\nexport const Parsimmon_succeed = succeed;\n\nexport const Parsimmon_lookahead = lookahead;\n\nexport const Parsimmon_digit = digit;\n\nexport const Parsimmon_digits = Parsimmon_many(Parsimmon_digit);\n\nexport function Parsimmon_fallback(value, parser) {\n    return parser.fallback(value);\n}\n\nexport function Parsimmon_seperateBy(content, others) {\n    return others.sepBy(content);\n}\n\nexport function Parsimmon_between(left, right, middle) {\n    return Parsimmon_skip(right, Parsimmon_chain(middle, left));\n}\n\nexport function Parsimmon_map(f, parser) {\n    return parser.map(f);\n}\n\nexport function Parsimmon_tie(parser) {\n    return Parsimmon_map((strings) => join(\"\", strings), parser);\n}\n\nexport const Parsimmon_any = any;\n\nexport function Parsimmon_choose(ps) {\n    return reduce((acc, parser) => (acc.or(parser)), ps);\n}\n\nexport const Parsimmon_all = all;\n\nexport const Parsimmon_fail = fail;\n\nexport const Parsimmon_satisfy = test;\n\nexport const Parsimmon_takeWhile = takeWhile;\n\nexport const Parsimmon_str = string;\n\nexport const Parsimmon_oneOf = oneOf;\n\nexport const Parsimmon_whitespace = whitespace;\n\nexport const Parsimmon_optionalWhitespace = optWhitespace;\n\nexport function Parsimmon_atLeastOneOrMany(parser) {\n    return Parsimmon_atLeast(1, parser);\n}\n\nexport function Parsimmon_stringReturn(input, value) {\n    return Parsimmon_map((_arg1) => value, Parsimmon_str(input));\n}\n\nexport const Parsimmon_noneOf = noneOf;\n\nexport const Parsimmon_seq2 = seq;\n\nexport function Parsimmon_trim(trimmed, p) {\n    return p.trim(trimmed);\n}\n\nexport function Parsimmon_concat(parser) {\n    return parser.map((strings) => join(\"\", strings));\n}\n\nexport const Parsimmon_seq3 = seq;\n\nexport const Parsimmon_seq4 = seq;\n\nexport const Parsimmon_seq5 = seq;\n\nexport function Parsimmon_node(description, p) {\n    return p.node(description);\n}\n\n","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\n","import { Union } from \"../fable-library.3.6.3/Types.js\";\nimport { union_type, class_type, list_type, bool_type, string_type, float64_type } from \"../fable-library.3.6.3/Reflection.js\";\n\nexport class Json extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"JNumber\", \"JString\", \"JBool\", \"JNull\", \"JArray\", \"JObject\"];\n    }\n}\n\nexport function Json$reflection() {\n    return union_type(\"Fable.SimpleJson.Json\", [], Json, () => [[[\"Item\", float64_type]], [[\"Item\", string_type]], [[\"Item\", bool_type]], [], [[\"Item\", list_type(Json$reflection())]], [[\"Item\", class_type(\"Microsoft.FSharp.Collections.FSharpMap`2\", [string_type, Json$reflection()])]]]);\n}\n\n","import { Parsimmon_seperateBy, Parsimmon_ofLazy, Parsimmon_optionalWhitespace, Parsimmon_between, Parsimmon_satisfy, Parsimmon_orTry, Parsimmon_oneOf, Parsimmon_stringReturn, Parsimmon_choose, Parsimmon_many, Parsimmon_seq3, Parsimmon_str, Parsimmon_seq2, Parsimmon_map, Parsimmon_digit, Parsimmon_atLeastOneOrMany, Parsimmon_concat } from \"../Fable.Parsimmon.4.1.0/Parsimmon.fs.js\";\nimport { parse } from \"../fable-library.3.6.3/Double.js\";\nimport { join } from \"../fable-library.3.6.3/String.js\";\nimport { Json } from \"./Json.fs.js\";\nimport { map, ofArray } from \"../fable-library.3.6.3/List.js\";\nimport { ofList } from \"../fable-library.3.6.3/Map.js\";\nimport { Lazy } from \"../fable-library.3.6.3/Util.js\";\n\nexport const digits = Parsimmon_concat(Parsimmon_atLeastOneOrMany(Parsimmon_digit));\n\nexport const jint = Parsimmon_map((value) => parse(value), digits);\n\nexport const negJint = Parsimmon_map((tupledArg) => (-tupledArg[1]), Parsimmon_seq2(Parsimmon_str(\"-\"), jint));\n\nexport const jfloat = Parsimmon_map((tupledArg) => {\n    const digitsLeft = tupledArg[0];\n    return parse(join(\"\", [(digitsLeft === \"\") ? \"0\" : digitsLeft, tupledArg[1], tupledArg[2]]));\n}, Parsimmon_seq3(Parsimmon_concat(Parsimmon_many(Parsimmon_digit)), Parsimmon_str(\".\"), Parsimmon_concat(Parsimmon_atLeastOneOrMany(Parsimmon_digit))));\n\nexport const negativeJFloat = Parsimmon_map((tupledArg) => (-tupledArg[1]), Parsimmon_seq2(Parsimmon_str(\"-\"), jfloat));\n\nexport const jnumber = Parsimmon_map((arg0) => (new Json(0, arg0)), Parsimmon_choose(ofArray([jfloat, negativeJFloat, jint, negJint])));\n\nexport const jbool = Parsimmon_choose(ofArray([Parsimmon_stringReturn(\"true\", new Json(2, true)), Parsimmon_stringReturn(\"false\", new Json(2, false))]));\n\nexport const jnull = Parsimmon_stringReturn(\"null\", new Json(3));\n\nexport const stringLiteral = (() => {\n    const escape = Parsimmon_map((_arg1) => {\n        switch (_arg1) {\n            case \"b\": {\n                return \"\\b\";\n            }\n            case \"f\": {\n                return \"\\f\";\n            }\n            case \"n\": {\n                return \"\\n\";\n            }\n            case \"r\": {\n                return \"\\r\";\n            }\n            case \"t\": {\n                return \"\\t\";\n            }\n            default: {\n                return _arg1;\n            }\n        }\n    }, Parsimmon_oneOf(\"\\\"\\\\/bfnrt\"));\n    const anyCharSnippet = Parsimmon_concat(Parsimmon_many(Parsimmon_orTry(Parsimmon_map((tuple) => tuple[1], Parsimmon_seq2(Parsimmon_str(\"\\\\\"), escape)), Parsimmon_satisfy((c_1) => ((c_1 !== \"\\\"\") && (c_1 !== \"\\\\\"))))));\n    return Parsimmon_between(Parsimmon_str(\"\\\"\"), Parsimmon_str(\"\\\"\"), anyCharSnippet);\n})();\n\nexport const jstring = stringLiteral.map((arg0) => (new Json(1, arg0)));\n\nexport function withWhitespace(p) {\n    return Parsimmon_between(Parsimmon_optionalWhitespace, Parsimmon_optionalWhitespace, p);\n}\n\nexport const jvalue = Parsimmon_choose(map((p) => withWhitespace(p), ofArray([jnull, jbool, jnumber, jstring])));\n\nexport const comma = withWhitespace(Parsimmon_str(\",\"));\n\nfunction json$004099() {\n    return Parsimmon_ofLazy(() => Parsimmon_choose(ofArray([jvalue, Parsimmon_map((arg) => (new Json(4, ofArray(arg))), Parsimmon_between(withWhitespace(Parsimmon_str(\"[\")), withWhitespace(Parsimmon_str(\"]\")), Parsimmon_seperateBy(comma, json$004099$002D1.Value))), Parsimmon_map((arg_2) => (new Json(5, ofList(ofArray(arg_2)))), Parsimmon_between(withWhitespace(Parsimmon_str(\"{\")), withWhitespace(Parsimmon_str(\"}\")), Parsimmon_seperateBy(comma, Parsimmon_map((tupledArg) => [tupledArg[0], tupledArg[2]], Parsimmon_seq3(withWhitespace(stringLiteral), withWhitespace(Parsimmon_str(\":\")), withWhitespace(json$004099$002D1.Value))))))])));\n}\n\nconst json$004099$002D1 = new Lazy(json$004099);\n\nexport const json = json$004099$002D1.Value;\n\nexport const jsonParser = withWhitespace(json);\n\n","import { Record } from \"../Types.js\";\r\nimport { record_type, array_type, int32_type } from \"../Reflection.js\";\r\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, fromInteger, op_Multiply, op_Modulus, toInt, fromBits } from \"../Long.js\";\r\nimport { copy, initialize, map, fill } from \"../Array.js\";\r\nimport { toArray, empty, head, tail, isEmpty, cons } from \"../List.js\";\r\nimport { int32ToString } from \"../Util.js\";\r\nimport { isNullOrEmpty, join } from \"../String.js\";\r\n\r\nexport class BigNat extends Record {\r\n    constructor(bound, digits) {\r\n        super();\r\n        this.bound = (bound | 0);\r\n        this.digits = digits;\r\n    }\r\n}\r\n\r\nexport function BigNat$reflection() {\r\n    return record_type(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32_type], [\"digits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_FFT_pow32(x_mut, n_mut) {\r\n    BigNatModule_FFT_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_FFT_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_leastBounding2Power(b) {\r\n    const findBounding2Power = (b_1_mut, tp_mut, i_mut) => {\r\n        findBounding2Power:\r\n        while (true) {\r\n            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;\r\n            if (b_1 <= tp) {\r\n                return [tp, i];\r\n            }\r\n            else {\r\n                b_1_mut = b_1;\r\n                tp_mut = (tp * 2);\r\n                i_mut = (i + 1);\r\n                continue findBounding2Power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return findBounding2Power(b, 1, 0);\r\n}\r\n\r\nexport const BigNatModule_FFT_p = fromBits(2013265921, 0, false);\r\n\r\nconst BigNatModule_FFT_patternInput$004075 = [27, 15, 31, 440564289];\r\n\r\nexport const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];\r\n\r\nexport const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];\r\n\r\nexport const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];\r\n\r\nexport const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];\r\n\r\nexport const BigNatModule_FFT_primeP = BigNatModule_FFT_p;\r\n\r\nexport const BigNatModule_FFT_maxBitsInsideFp = 30;\r\n\r\nexport const BigNatModule_FFT_Fp_p = 2013265921;\r\n\r\nexport const BigNatModule_FFT_Fp_p64 = fromBits(2013265921, 0, true);\r\n\r\nexport function BigNatModule_FFT_Fp_toInt(x) {\r\n    return ~(~x);\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_ofInt32(x) {\r\n    return x >>> 0;\r\n}\r\n\r\nexport const BigNatModule_FFT_Fp_mzero = 0;\r\n\r\nexport const BigNatModule_FFT_Fp_mone = 1;\r\n\r\nexport const BigNatModule_FFT_Fp_mtwo = 2;\r\n\r\nexport function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpow:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_Fp_mpow;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpow(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~(~(n / 2)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpowL:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (equals(n, fromBits(0, 0, false))) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if (equals(op_Modulus(n, fromBits(2, 0, false)), fromBits(0, 0, false))) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = op_Division(n, fromBits(2, 0, false));\r\n            continue BigNatModule_FFT_Fp_mpowL;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, op_Division(n, fromBits(2, 0, false)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_m2PowNthRoot(n) {\r\n    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_minv(x) {\r\n    return BigNatModule_FFT_Fp_mpowL(x, op_Subtraction(BigNatModule_FFT_primeP, fromBits(2, 0, false)));\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {\r\n    let x_1, x_3, y_5;\r\n    if (n === 1) {\r\n        res[offset] = u[mu];\r\n    }\r\n    else {\r\n        const halfN = (~(~(n / 2))) | 0;\r\n        const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        const offsetHalfN = (offset + halfN) | 0;\r\n        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\r\n        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\r\n        let wj = BigNatModule_FFT_Fp_mone;\r\n        for (let j = 0; j <= (halfN - 1); j++) {\r\n            const even = res[offset + j];\r\n            const odd = res[offsetHalfN + j];\r\n            res[offset + j] = ((even + ((x_1 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_1, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            res[offsetHalfN + j] = (((even + BigNatModule_FFT_Fp_p) - ((x_3 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_3, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            wj = ((y_5 = wj, toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_computFftInPlace(n, w, u) {\r\n    const res = fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);\r\n    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {\r\n    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);\r\n    return map((y) => (toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0), BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_maxTwoPower = 29;\r\n\r\nexport const BigNatModule_FFT_twoPowerTable = initialize(BigNatModule_FFT_maxTwoPower - 1, (i) => BigNatModule_FFT_pow32(2, i), Int32Array);\r\n\r\nexport function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);\r\n    return BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array));\r\n}\r\n\r\nexport function BigNatModule_FFT_padTo(n, u) {\r\n    const uBound = u.length | 0;\r\n    return initialize(n, (i) => ((i < uBound) ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero), Uint32Array);\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {\r\n    const patternInput = BigNatModule_FFT_leastBounding2Power((degu + degv) + 1);\r\n    const bigK = patternInput[0] | 0;\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);\r\n    const u_1 = BigNatModule_FFT_padTo(bigK, u);\r\n    const v_1 = BigNatModule_FFT_padTo(bigK, v);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);\r\n    return map((x_1) => BigNatModule_FFT_Fp_toInt(x_1), BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array)), Int32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;\r\n\r\nexport const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;\r\n\r\nexport const BigNatModule_FFT_maxFp = ((BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p) - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;\r\n\r\nexport function BigNatModule_bound(n) {\r\n    return n.bound;\r\n}\r\n\r\nexport function BigNatModule_setBound(n, v) {\r\n    n.bound = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_coeff(n, i) {\r\n    return n.digits[i];\r\n}\r\n\r\nexport function BigNatModule_coeff64(n, i) {\r\n    return fromInteger(BigNatModule_coeff(n, i), false, 2);\r\n}\r\n\r\nexport function BigNatModule_setCoeff(n, i, v) {\r\n    n.digits[i] = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_pow64(x_mut, n_mut) {\r\n    BigNatModule_pow64:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return fromBits(1, 0, false);\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = op_Multiply(x, x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow64;\r\n        }\r\n        else {\r\n            return op_Multiply(x, BigNatModule_pow64(op_Multiply(x, x), ~(~(n / 2))));\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_pow32(x_mut, n_mut) {\r\n    BigNatModule_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_hash(n) {\r\n    let res = 0;\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        res = ((n.digits[i] + (res << 3)) | 0);\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function BigNatModule_maxInt(a, b) {\r\n    if (a < b) {\r\n        return b | 0;\r\n    }\r\n    else {\r\n        return a | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_minInt(a, b) {\r\n    if (a < b) {\r\n        return a | 0;\r\n    }\r\n    else {\r\n        return b | 0;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_baseBits = 24;\r\n\r\nexport const BigNatModule_baseN = 16777216;\r\n\r\nexport const BigNatModule_baseMask = 16777215;\r\n\r\nexport const BigNatModule_baseNi64 = fromBits(16777216, 0, false);\r\n\r\nexport const BigNatModule_baseMaski64 = fromBits(16777215, 0, false);\r\n\r\nexport const BigNatModule_baseMaskU = fromBits(16777215, 0, true);\r\n\r\nexport const BigNatModule_baseMask32A = 16777215;\r\n\r\nexport const BigNatModule_baseMask32B = 255;\r\n\r\nexport const BigNatModule_baseShift32B = 24;\r\n\r\nexport const BigNatModule_baseMask64A = 16777215;\r\n\r\nexport const BigNatModule_baseMask64B = 16777215;\r\n\r\nexport const BigNatModule_baseMask64C = 65535;\r\n\r\nexport const BigNatModule_baseShift64B = 24;\r\n\r\nexport const BigNatModule_baseShift64C = 48;\r\n\r\nexport function BigNatModule_divbase(x) {\r\n    return ~(~((x >>> 0) >>> BigNatModule_baseBits));\r\n}\r\n\r\nexport function BigNatModule_modbase(x) {\r\n    return x & BigNatModule_baseMask;\r\n}\r\n\r\nexport function BigNatModule_createN(b) {\r\n    return new BigNat(b, new Int32Array(b));\r\n}\r\n\r\nexport function BigNatModule_copyN(x) {\r\n    return new BigNat(x.bound, copy(x.digits));\r\n}\r\n\r\nexport function BigNatModule_normN(n) {\r\n    const findLeastBound = (na_mut, i_mut) => {\r\n        findLeastBound:\r\n        while (true) {\r\n            const na = na_mut, i = i_mut;\r\n            if ((i === -1) ? true : (na[i] !== 0)) {\r\n                return (i + 1) | 0;\r\n            }\r\n            else {\r\n                na_mut = na;\r\n                i_mut = (i - 1);\r\n                continue findLeastBound;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const bound = findLeastBound(n.digits, n.bound - 1) | 0;\r\n    n.bound = (bound | 0);\r\n    return n;\r\n}\r\n\r\nexport const BigNatModule_boundInt = 2;\r\n\r\nexport const BigNatModule_boundInt64 = 3;\r\n\r\nexport const BigNatModule_boundBase = 1;\r\n\r\nexport function BigNatModule_embed(x) {\r\n    const x_1 = ((x < 0) ? 0 : x) | 0;\r\n    if (x_1 < BigNatModule_baseN) {\r\n        const r = BigNatModule_createN(1);\r\n        r.digits[0] = (x_1 | 0);\r\n        return BigNatModule_normN(r);\r\n    }\r\n    else {\r\n        const r_1 = BigNatModule_createN(BigNatModule_boundInt);\r\n        for (let i = 0; i <= (BigNatModule_boundInt - 1); i++) {\r\n            r_1.digits[i] = (((~(~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)))) % BigNatModule_baseN) | 0);\r\n        }\r\n        return BigNatModule_normN(r_1);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_embed64(x) {\r\n    const x_1 = (compare(x, fromBits(0, 0, false)) < 0) ? fromBits(0, 0, false) : x;\r\n    const r = BigNatModule_createN(BigNatModule_boundInt64);\r\n    for (let i = 0; i <= (BigNatModule_boundInt64 - 1); i++) {\r\n        r.digits[i] = ((~(~toInt(op_Modulus(op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64)))) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_eval32(n) {\r\n    if (n.bound === 1) {\r\n        return n.digits[0] | 0;\r\n    }\r\n    else {\r\n        let acc = 0;\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = ((n.digits[i] + (BigNatModule_baseN * acc)) | 0);\r\n        }\r\n        return acc | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_eval64(n) {\r\n    if (n.bound === 1) {\r\n        return fromInteger(n.digits[0], false, 2);\r\n    }\r\n    else {\r\n        let acc = fromBits(0, 0, false);\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = op_Addition(fromInteger(n.digits[i], false, 2), op_Multiply(BigNatModule_baseNi64, acc));\r\n        }\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_one = BigNatModule_embed(1);\r\n\r\nexport const BigNatModule_zero = BigNatModule_embed(0);\r\n\r\nexport function BigNatModule_restrictTo(d, n) {\r\n    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);\r\n}\r\n\r\nexport function BigNatModule_shiftUp(d, n) {\r\n    const m = BigNatModule_createN(n.bound + d);\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        m.digits[i + d] = (n.digits[i] | 0);\r\n    }\r\n    return m;\r\n}\r\n\r\nexport function BigNatModule_shiftDown(d, n) {\r\n    if ((n.bound - d) <= 0) {\r\n        return BigNatModule_zero;\r\n    }\r\n    else {\r\n        const m = BigNatModule_createN(n.bound - d);\r\n        for (let i = 0; i <= (m.bound - 1); i++) {\r\n            m.digits[i] = (n.digits[i + d] | 0);\r\n        }\r\n        return m;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_degree(n) {\r\n    return n.bound - 1;\r\n}\r\n\r\nexport function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_addP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) + ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n            i_mut = (i + 1);\r\n            n_mut = n;\r\n            c_mut = BigNatModule_divbase(x);\r\n            p_mut = p;\r\n            q_mut = q;\r\n            r_mut = r;\r\n            continue BigNatModule_addP;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_add(p, q) {\r\n    const rbound = (1 + BigNatModule_maxInt(p.bound, q.bound)) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    BigNatModule_addP(0, rbound, 0, p, q, r);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_subP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) - ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            if (x > 0) {\r\n                r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = BigNatModule_divbase(x);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n            else {\r\n                const x_1 = (x + BigNatModule_baseN) | 0;\r\n                r.digits[i] = (BigNatModule_modbase(x_1) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = (BigNatModule_divbase(x_1) - 1);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n        }\r\n        else {\r\n            return c !== 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_sub(p, q) {\r\n    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    if (BigNatModule_subP(0, rbound, 0, p, q, r)) {\r\n        return BigNatModule_embed(0);\r\n    }\r\n    else {\r\n        return BigNatModule_normN(r);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_isZero(p) {\r\n    return p.bound === 0;\r\n}\r\n\r\nexport function BigNatModule_IsZero(p) {\r\n    return BigNatModule_isZero(p);\r\n}\r\n\r\nexport function BigNatModule_isOne(p) {\r\n    if (p.bound === 1) {\r\n        return p.digits[0] === 1;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_equal(p, q) {\r\n    if (p.bound === q.bound) {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return true;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_shiftCompare(p, pn, q, qn) {\r\n    if ((p.bound + pn) < (q.bound + qn)) {\r\n        return -1;\r\n    }\r\n    else if ((p.bound + pn) > (q.bound + pn)) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    const pai = ((i < pn) ? 0 : pa[i - pn]) | 0;\r\n                    const qai = ((i < qn) ? 0 : qa[i - qn]) | 0;\r\n                    if (pai === qai) {\r\n                        pa_mut = pa;\r\n                        qa_mut = qa;\r\n                        i_mut = (i - 1);\r\n                        continue check;\r\n                    }\r\n                    else if (pai < qai) {\r\n                        return -1;\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, (p.bound + pn) - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_compare(p, q) {\r\n    if (p.bound < q.bound) {\r\n        return -1;\r\n    }\r\n    else if (p.bound > q.bound) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else if (pa[i] < qa[i]) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_lt(p, q) {\r\n    return BigNatModule_compare(p, q) === -1;\r\n}\r\n\r\nexport function BigNatModule_gt(p, q) {\r\n    return BigNatModule_compare(p, q) === 1;\r\n}\r\n\r\nexport function BigNatModule_lte(p, q) {\r\n    return BigNatModule_compare(p, q) !== 1;\r\n}\r\n\r\nexport function BigNatModule_gte(p, q) {\r\n    return BigNatModule_compare(p, q) !== -1;\r\n}\r\n\r\nexport function BigNatModule_min(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return b;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_max(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return b;\r\n    }\r\n    else {\r\n        return a;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {\r\n    BigNatModule_contributeArr:\r\n    while (true) {\r\n        const a = a_mut, i = i_mut, c = c_mut;\r\n        const x = op_Addition(fromInteger(a[i], false, 2), c);\r\n        const c_1 = op_Division(x, BigNatModule_baseNi64);\r\n        const x_3 = (~(~toInt(op_BitwiseAnd(x, BigNatModule_baseMaski64)))) | 0;\r\n        a[i] = (x_3 | 0);\r\n        if (compare(c_1, fromBits(0, 0, false)) > 0) {\r\n            a_mut = a;\r\n            i_mut = (i + 1);\r\n            c_mut = c_1;\r\n            continue BigNatModule_contributeArr;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_scale(k, p) {\r\n    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);\r\n    const k_1 = fromInteger(k, false, 2);\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        BigNatModule_contributeArr(r.digits, i, op_Multiply(k_1, fromInteger(p.digits[i], false, 2)));\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookBothSmall(p, q) {\r\n    const r = BigNatModule_createN(2);\r\n    const rak = op_Multiply(fromInteger(p, false, 2), fromInteger(q, false, 2));\r\n    BigNatModule_setCoeff(r, 0, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n    BigNatModule_setCoeff(r, 1, ~(~toInt(op_Division(rak, BigNatModule_baseNi64))));\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {\r\n    BigNatModule_mulSchoolBookCarry:\r\n    while (true) {\r\n        const r = r_mut, c = c_mut, k = k_mut;\r\n        if (compare(c, fromBits(0, 0, false)) > 0) {\r\n            const rak = op_Addition(BigNatModule_coeff64(r, k), c);\r\n            BigNatModule_setCoeff(r, k, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n            r_mut = r;\r\n            c_mut = op_Division(rak, BigNatModule_baseNi64);\r\n            k_mut = (k + 1);\r\n            continue BigNatModule_mulSchoolBookCarry;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookOneSmall(p, q) {\r\n    const bp = BigNatModule_bound(p) | 0;\r\n    const r = BigNatModule_createN(bp + 1);\r\n    const q_1 = fromInteger(q, false, 2);\r\n    let c = fromBits(0, 0, false);\r\n    for (let i = 0; i <= (bp - 1); i++) {\r\n        const rak = op_Addition(op_Addition(c, BigNatModule_coeff64(r, i)), op_Multiply(BigNatModule_coeff64(p, i), q_1));\r\n        BigNatModule_setCoeff(r, i, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n        c = op_Division(rak, BigNatModule_baseNi64);\r\n    }\r\n    BigNatModule_mulSchoolBookCarry(r, c, bp);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookNeitherSmall(p, q) {\r\n    const r = BigNatModule_createN(p.bound + q.bound);\r\n    const ra = r.digits;\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        const pai = fromInteger(p.digits[i], false, 2);\r\n        let c = fromBits(0, 0, false);\r\n        let k = i;\r\n        for (let j = 0; j <= (q.bound - 1); j++) {\r\n            const qaj = fromInteger(q.digits[j], false, 2);\r\n            const rak = op_Addition(op_Addition(fromInteger(ra[k], false, 2), c), op_Multiply(pai, qaj));\r\n            ra[k] = ((~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64)))) | 0);\r\n            c = op_Division(rak, BigNatModule_baseNi64);\r\n            k = ((k + 1) | 0);\r\n        }\r\n        BigNatModule_mulSchoolBookCarry(r, c, k);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBook(p, q) {\r\n    const pSmall = BigNatModule_bound(p) === 1;\r\n    const qSmall = BigNatModule_bound(q) === 1;\r\n    if (pSmall && qSmall) {\r\n        return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));\r\n    }\r\n    else if (pSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));\r\n    }\r\n    else if (qSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBookNeitherSmall(p, q);\r\n    }\r\n}\r\n\r\nexport class BigNatModule_encoding extends Record {\r\n    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits) {\r\n        super();\r\n        this.bigL = (bigL | 0);\r\n        this.twoToBigL = (twoToBigL | 0);\r\n        this.k = (k | 0);\r\n        this.bigK = (bigK | 0);\r\n        this.bigN = (bigN | 0);\r\n        this.split = (split | 0);\r\n        this.splits = splits;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encoding$reflection() {\r\n    return record_type(\"BigInt.BigNatModule.encoding\", [], BigNatModule_encoding, () => [[\"bigL\", int32_type], [\"twoToBigL\", int32_type], [\"k\", int32_type], [\"bigK\", int32_type], [\"bigN\", int32_type], [\"split\", int32_type], [\"splits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_mkEncoding(bigL, k, bigK, bigN) {\r\n    return new BigNatModule_encoding(bigL, BigNatModule_pow32(2, bigL), k, bigK, bigN, ~(~(BigNatModule_baseBits / bigL)), initialize(~(~(BigNatModule_baseBits / bigL)), (i) => BigNatModule_pow32(2, bigL * i), Int32Array));\r\n}\r\n\r\nexport const BigNatModule_table = [BigNatModule_mkEncoding(1, 28, 268435456, 268435456), BigNatModule_mkEncoding(2, 26, 67108864, 134217728), BigNatModule_mkEncoding(3, 24, 16777216, 50331648), BigNatModule_mkEncoding(4, 22, 4194304, 16777216), BigNatModule_mkEncoding(5, 20, 1048576, 5242880), BigNatModule_mkEncoding(6, 18, 262144, 1572864), BigNatModule_mkEncoding(7, 16, 65536, 458752), BigNatModule_mkEncoding(8, 14, 16384, 131072), BigNatModule_mkEncoding(9, 12, 4096, 36864), BigNatModule_mkEncoding(10, 10, 1024, 10240), BigNatModule_mkEncoding(11, 8, 256, 2816), BigNatModule_mkEncoding(12, 6, 64, 768), BigNatModule_mkEncoding(13, 4, 16, 208)];\r\n\r\nexport function BigNatModule_calculateTableTow(bigL) {\r\n    const k = (BigNatModule_FFT_maxBitsInsideFp - (2 * bigL)) | 0;\r\n    const bigK = BigNatModule_pow64(fromBits(2, 0, false), k);\r\n    return [bigL, k, bigK, op_Multiply(bigK, fromInteger(bigL, false, 2))];\r\n}\r\n\r\nexport function BigNatModule_encodingGivenResultBits(bitsRes) {\r\n    const selectFrom = (i_mut) => {\r\n        selectFrom:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (((i + 1) < BigNatModule_table.length) && (bitsRes < BigNatModule_table[i + 1].bigN)) {\r\n                i_mut = (i + 1);\r\n                continue selectFrom;\r\n            }\r\n            else {\r\n                return BigNatModule_table[i];\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (bitsRes >= BigNatModule_table[0].bigN) {\r\n        throw (new Error(\"Product is huge, around 268435456 bits, beyond quickmul\"));\r\n    }\r\n    else {\r\n        return selectFrom(0);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_bitmask = initialize(BigNatModule_baseBits, (i) => (BigNatModule_pow32(2, i) - 1), Int32Array);\r\n\r\nexport const BigNatModule_twopowers = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow32(2, i), Int32Array);\r\n\r\nexport const BigNatModule_twopowersI64 = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow64(fromBits(2, 0, false), i));\r\n\r\nexport function BigNatModule_wordBits(word) {\r\n    const hi = (k_mut) => {\r\n        hi:\r\n        while (true) {\r\n            const k = k_mut;\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            else if ((word & BigNatModule_twopowers[k - 1]) !== 0) {\r\n                return k | 0;\r\n            }\r\n            else {\r\n                k_mut = (k - 1);\r\n                continue hi;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return hi(BigNatModule_baseBits) | 0;\r\n}\r\n\r\nexport function BigNatModule_bits(u) {\r\n    if (u.bound === 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return ((BigNatModule_degree(u) * BigNatModule_baseBits) + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)])) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_extractBits(n, enc, bi) {\r\n    let z, i, z_1, i_1, z_2, i_2;\r\n    const biw = (~(~(bi / BigNatModule_baseBits))) | 0;\r\n    const bjw = (~(~(((bi + enc.bigL) - 1) / BigNatModule_baseBits))) | 0;\r\n    if (biw !== bjw) {\r\n        const xbit = (bi % BigNatModule_baseBits) | 0;\r\n        return (((((z = n, (i = (biw | 0), (i < z.bound) ? z.digits[i] : 0))) >> xbit) | (((z_1 = n, (i_1 = (bjw | 0), (i_1 < z_1.bound) ? z_1.digits[i_1] : 0))) << (BigNatModule_baseBits - xbit))) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n    else {\r\n        return ((((z_2 = n, (i_2 = (biw | 0), (i_2 < z_2.bound) ? z_2.digits[i_2] : 0))) >> (bi % BigNatModule_baseBits)) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encodePoly(enc, n) {\r\n    const poly = fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));\r\n    const biMax = (n.bound * BigNatModule_baseBits) | 0;\r\n    const encoder = (i_mut, bi_mut) => {\r\n        encoder:\r\n        while (true) {\r\n            const i = i_mut, bi = bi_mut;\r\n            if ((i === enc.bigK) ? true : (bi > biMax)) {\r\n            }\r\n            else {\r\n                const pi = BigNatModule_extractBits(n, enc, bi) | 0;\r\n                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);\r\n                i_mut = (i + 1);\r\n                bi_mut = (bi + enc.bigL);\r\n                continue encoder;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    encoder(0, 0);\r\n    return poly;\r\n}\r\n\r\nexport function BigNatModule_decodeResultBits(enc, poly) {\r\n    let n = 0;\r\n    for (let i = 0; i <= (poly.length - 1); i++) {\r\n        if (poly[i] !== BigNatModule_FFT_mzero) {\r\n            n = (i | 0);\r\n        }\r\n    }\r\n    return (((BigNatModule_FFT_maxBitsInsideFp + (enc.bigL * n)) + 1) + 1) | 0;\r\n}\r\n\r\nexport function BigNatModule_decodePoly(enc, poly) {\r\n    const rbound = ((~(~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits))) + 1) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    const evaluate = (i_mut, j_mut, d_mut) => {\r\n        evaluate:\r\n        while (true) {\r\n            const i = i_mut, j = j_mut, d = d_mut;\r\n            if (i === enc.bigK) {\r\n            }\r\n            else {\r\n                if (j >= rbound) {\r\n                }\r\n                else {\r\n                    BigNatModule_contributeArr(r.digits, j, op_Multiply(fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));\r\n                }\r\n                const d_1 = (d + enc.bigL) | 0;\r\n                const patternInput = (d_1 >= BigNatModule_baseBits) ? [j + 1, d_1 - BigNatModule_baseBits] : [j, d_1];\r\n                i_mut = (i + 1);\r\n                j_mut = patternInput[0];\r\n                d_mut = patternInput[1];\r\n                continue evaluate;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    evaluate(0, 0, 0);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_quickMulUsingFft(u, v) {\r\n    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));\r\n    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));\r\n}\r\n\r\nexport const BigNatModule_minDigitsKaratsuba = 16;\r\n\r\nexport function BigNatModule_recMulKaratsuba(mul, p, q) {\r\n    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    if (bmax > BigNatModule_minDigitsKaratsuba) {\r\n        const k = (~(~(bmax / 2))) | 0;\r\n        const a0 = BigNatModule_restrictTo(k, p);\r\n        const a1 = BigNatModule_shiftDown(k, p);\r\n        const b0 = BigNatModule_restrictTo(k, q);\r\n        const b1 = BigNatModule_shiftDown(k, q);\r\n        const q0 = mul(a0, b0);\r\n        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));\r\n        const q2 = mul(a1, b1);\r\n        return BigNatModule_add(q0, BigNatModule_shiftUp(k, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k, q2))));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBook(p, q);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulKaratsuba(x, y) {\r\n    return BigNatModule_recMulKaratsuba((x_1, y_1) => BigNatModule_mulKaratsuba(x_1, y_1), x, y);\r\n}\r\n\r\nexport const BigNatModule_productDigitsUpperSchoolBook = ~(~(64000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_singleDigitForceSchoolBook = ~(~(32000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_productDigitsUpperFft = ~(~(BigNatModule_table[0].bigN / BigNatModule_baseBits));\r\n\r\nexport function BigNatModule_mul(p, q) {\r\n    return BigNatModule_mulSchoolBook(p, q);\r\n}\r\n\r\nexport function BigNatModule_scaleSubInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo <= x_1[j + n]) {\r\n            x_1[j + n] = ((x_1[j + n] - zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((x_1[j + n] + (BigNatModule_baseN - zLo)) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleSub(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleSubInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_scaleAddInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo < (BigNatModule_baseN - x_1[j + n])) {\r\n            x_1[j + n] = ((x_1[j + n] + zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((zLo - (BigNatModule_baseN - x_1[j + n])) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleAdd(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleAddInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_removeFactor(x, a, n) {\r\n    const patternInput = [BigNatModule_degree(a), BigNatModule_degree(x)];\r\n    const degx = patternInput[1] | 0;\r\n    const dega = patternInput[0] | 0;\r\n    if (degx < (dega + n)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const patternInput_1 = [a.digits, x.digits];\r\n        const xa = patternInput_1[1];\r\n        const aa = patternInput_1[0];\r\n        const f = ((dega === 0) ? ((degx === n) ? (~(~(xa[n] / aa[0]))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), fromInteger(aa[0], false, 2)))))) : ((degx === (dega + n)) ? (~(~(xa[degx] / (aa[dega] + 1)))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), op_Addition(fromInteger(aa[dega], false, 2), fromBits(1, 0, false)))))))) | 0;\r\n        if (f === 0) {\r\n            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        else {\r\n            return f | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_divmod(b, a) {\r\n    if (BigNatModule_isZero(a)) {\r\n        throw (new Error());\r\n    }\r\n    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) {\r\n        return [BigNatModule_zero, b];\r\n    }\r\n    else {\r\n        const x = BigNatModule_copyN(b);\r\n        const d = BigNatModule_createN(((BigNatModule_degree(b) - BigNatModule_degree(a)) + 1) + 1);\r\n        let p = BigNatModule_degree(b);\r\n        const m = BigNatModule_degree(a) | 0;\r\n        let n = p - m;\r\n        const Invariant = (tupledArg) => {\r\n        };\r\n        let finished = false;\r\n        while (!finished) {\r\n            Invariant([d, x, n, p]);\r\n            const f = BigNatModule_removeFactor(x, a, n) | 0;\r\n            if (f > 0) {\r\n                BigNatModule_scaleSubInPlace(x, f, a, n);\r\n                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);\r\n                Invariant([d, x, n, p]);\r\n            }\r\n            else {\r\n                finished = ((f === 0) && (n === 0));\r\n                if (!finished) {\r\n                    if (p === (m + n)) {\r\n                        Invariant([d, x, n - 1, p]);\r\n                        n = ((n - 1) | 0);\r\n                    }\r\n                    else {\r\n                        Invariant([d, x, n - 1, p - 1]);\r\n                        n = ((n - 1) | 0);\r\n                        p = ((p - 1) | 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [BigNatModule_normN(d), BigNatModule_normN(x)];\r\n    }\r\n}\r\n\r\nexport function BigNatModule_div(b, a) {\r\n    return BigNatModule_divmod(b, a)[0];\r\n}\r\n\r\nexport function BigNatModule_rem(b, a) {\r\n    return BigNatModule_divmod(b, a)[1];\r\n}\r\n\r\nexport function BigNatModule_bitAnd(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (r.bound - 1); i++) {\r\n        r.digits[i] = ((a.digits[i] & b.digits[i]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitOr(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] | a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] | b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitXor(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] ^ a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] ^ b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_hcf(a, b) {\r\n    const hcfloop = (a_1_mut, b_1_mut) => {\r\n        hcfloop:\r\n        while (true) {\r\n            const a_1 = a_1_mut, b_1 = b_1_mut;\r\n            if (BigNatModule_equal(BigNatModule_zero, a_1)) {\r\n                return b_1;\r\n            }\r\n            else {\r\n                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];\r\n                b_1_mut = a_1;\r\n                continue hcfloop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (BigNatModule_lt(a, b)) {\r\n        return hcfloop(a, b);\r\n    }\r\n    else {\r\n        return hcfloop(b, a);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_two = BigNatModule_embed(2);\r\n\r\nexport function BigNatModule_powi(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (n_1 === 0) {\r\n                return acc;\r\n            }\r\n            else if ((n_1 % 2) === 0) {\r\n                acc_mut = acc;\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            else {\r\n                acc_mut = BigNatModule_mul(x_1, acc);\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_pow(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (BigNatModule_isZero(n_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);\r\n                const ndiv2 = patternInput[0];\r\n                if (BigNatModule_isZero(patternInput[1])) {\r\n                    acc_mut = acc;\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n                else {\r\n                    acc_mut = BigNatModule_mul(x_1, acc);\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_toFloat(n) {\r\n    const evalFloat = (acc_mut, k_mut, i_mut) => {\r\n        evalFloat:\r\n        while (true) {\r\n            const acc = acc_mut, k = k_mut, i = i_mut;\r\n            if (i === n.bound) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = (acc + (k * n.digits[i]));\r\n                k_mut = (k * BigNatModule_baseN);\r\n                i_mut = (i + 1);\r\n                continue evalFloat;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return evalFloat(0, 1, 0);\r\n}\r\n\r\nexport function BigNatModule_ofInt32(n) {\r\n    return BigNatModule_embed(n);\r\n}\r\n\r\nexport function BigNatModule_ofInt64(n) {\r\n    return BigNatModule_embed64(n);\r\n}\r\n\r\nexport function BigNatModule_toUInt32(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            const value = n.digits[0] | 0;\r\n            return value >>> 0;\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            const xB = patternInput[1] | 0;\r\n            if (xB > BigNatModule_baseMask32B) {\r\n                throw (new Error());\r\n            }\r\n            return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((((xB & BigNatModule_baseMask32B) >>> 0) << BigNatModule_baseShift32B) >>> 0);\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toUInt64(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return fromBits(0, 0, true);\r\n        }\r\n        case 1: {\r\n            return fromInteger(n.digits[0], true, 2);\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            return op_Addition(fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));\r\n        }\r\n        case 3: {\r\n            const patternInput_1 = [n.digits[0], n.digits[1], n.digits[2]];\r\n            const xC = patternInput_1[2] | 0;\r\n            if (xC > BigNatModule_baseMask64C) {\r\n                throw (new Error());\r\n            }\r\n            return op_Addition(op_Addition(fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), op_LeftShift(fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toString(n) {\r\n    const degn = BigNatModule_degree(n) | 0;\r\n    const route = (prior_mut, k_mut, ten2k_mut) => {\r\n        route:\r\n        while (true) {\r\n            const prior = prior_mut, k = k_mut, ten2k = ten2k_mut;\r\n            if (BigNatModule_degree(ten2k) > degn) {\r\n                return cons([k, ten2k], prior);\r\n            }\r\n            else {\r\n                prior_mut = cons([k, ten2k], prior);\r\n                k_mut = (k + 1);\r\n                ten2k_mut = BigNatModule_mul(ten2k, ten2k);\r\n                continue route;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut) => {\r\n        collect:\r\n        while (true) {\r\n            const isLeading = isLeading_mut, digits = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;\r\n            if (!isEmpty(_arg1)) {\r\n                const prior_1 = tail(_arg1);\r\n                const patternInput = BigNatModule_divmod(n_1, head(_arg1)[1]);\r\n                const nL = patternInput[1];\r\n                const nH = patternInput[0];\r\n                if (isLeading && BigNatModule_isZero(nH)) {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = digits;\r\n                    n_1_mut = nL;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n                else {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = collect(false, digits, nL, prior_1);\r\n                    n_1_mut = nH;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n            }\r\n            else {\r\n                const n_2 = BigNatModule_eval32(n_1) | 0;\r\n                if (isLeading && (n_2 === 0)) {\r\n                    return digits;\r\n                }\r\n                else {\r\n                    return cons(int32ToString(n_2), digits);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const digits_4 = collect(true, empty(), n, route(empty(), 0, BigNatModule_embed(10)));\r\n    if (isEmpty(digits_4)) {\r\n        return \"0\";\r\n    }\r\n    else {\r\n        return join(\"\", toArray(digits_4));\r\n    }\r\n}\r\n\r\nexport function BigNatModule_ofString(str) {\r\n    const len = str.length | 0;\r\n    if (isNullOrEmpty(str)) {\r\n        throw (new Error(\"empty string\\\\nParameter name: str\"));\r\n    }\r\n    const ten = BigNatModule_embed(10);\r\n    const build = (acc_mut, i_mut) => {\r\n        build:\r\n        while (true) {\r\n            const acc = acc_mut, i = i_mut;\r\n            if (i === len) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const d = (str[i].charCodeAt(0) - 48) | 0;\r\n                if ((0 <= d) && (d <= 9)) {\r\n                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));\r\n                    i_mut = (i + 1);\r\n                    continue build;\r\n                }\r\n                else {\r\n                    throw (new Error());\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return build(BigNatModule_embed(0), 0);\r\n}\r\n\r\nexport function BigNatModule_isSmall(n) {\r\n    return n.bound <= 1;\r\n}\r\n\r\nexport function BigNatModule_getSmall(n) {\r\n    const z = n;\r\n    const i = 0;\r\n    if (i < z.bound) {\r\n        return z.digits[i] | 0;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_factorial(n) {\r\n    const productR = (a, b) => {\r\n        if (BigNatModule_equal(a, b)) {\r\n            return a;\r\n        }\r\n        else {\r\n            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));\r\n            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));\r\n        }\r\n    };\r\n    return productR(BigNatModule_one, n);\r\n}\r\n\r\n","import { BigNatModule_factorial, BigNatModule_ofString, BigNatModule_toFloat, BigNatModule_toUInt64, BigNatModule_toUInt32, BigNatModule_pow, BigNatModule_two, BigNatModule_rem, BigNatModule_lte, BigNatModule_hcf, BigNatModule_bitXor, BigNatModule_bitOr, BigNatModule_bitAnd, BigNatModule_divmod, BigNatModule_mul, BigNatModule_isOne, BigNatModule_sub, BigNatModule_gte, BigNatModule_scale, BigNatModule_one, BigNatModule_add, BigNatModule_ofInt64, BigNatModule_hash, BigNatModule_gt, BigNatModule_lt, BigNatModule_equal, BigNatModule_getSmall, BigNatModule_isSmall, BigNatModule_ofInt32, BigNatModule_toString, BigNatModule_isZero } from \"./n.js\";\r\nimport { Record, toString } from \"../Types.js\";\r\nimport { class_type } from \"../Reflection.js\";\r\nimport { initialize } from \"../Array.js\";\r\nimport { op_Addition, op_Multiply, fromValue, equals, fromBits, compare, fromInteger, op_UnaryNegation } from \"../Long.js\";\r\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\r\nimport Decimal from \"../Decimal.js\";\r\n\r\nexport class BigInteger extends Record {\r\n    constructor(signInt, v) {\r\n        super();\r\n        this.signInt = (signInt | 0);\r\n        this.v = v;\r\n    }\r\n    toString() {\r\n        const x = this;\r\n        const matchValue = BigInteger__get_SignInt(x) | 0;\r\n        switch (matchValue) {\r\n            case -1: {\r\n                return BigNatModule_isZero(BigInteger__get_V(x)) ? \"0\" : (\"-\" + BigNatModule_toString(BigInteger__get_V(x)));\r\n            }\r\n            case 0: {\r\n                return \"0\";\r\n            }\r\n            case 1: {\r\n                return BigNatModule_toString(BigInteger__get_V(x));\r\n            }\r\n            default: {\r\n                throw (new Error(\"signs should be +/- 1 or 0\"));\r\n            }\r\n        }\r\n    }\r\n    Equals(obj) {\r\n        const this$ = this;\r\n        return (obj instanceof BigInteger) && BigInteger_op_Equality_56F059C0(this$, obj);\r\n    }\r\n    GetHashCode() {\r\n        const x = this;\r\n        return BigInteger_hash_Z665282C2(x) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return toString(this$);\r\n    }\r\n    CompareTo(obj) {\r\n        const this$ = this;\r\n        if (obj instanceof BigInteger) {\r\n            return BigInteger_compare_56F059C0(this$, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"the objects are not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger$reflection() {\r\n    return class_type(\"BigInt.BigInteger\", void 0, BigInteger, class_type(\"System.ValueType\"));\r\n}\r\n\r\nexport function BigInteger_$ctor_Z2BE94A1(signInt, v) {\r\n    return new BigInteger(signInt, v);\r\n}\r\n\r\n(() => {\r\n    BigInteger.smallLim = 4096;\r\n    BigInteger.smallPosTab = initialize(BigInteger.smallLim, (n) => BigNatModule_ofInt32(n));\r\n    BigInteger.one = BigInteger_$ctor_Z524259A4(1);\r\n    BigInteger.two = BigInteger_$ctor_Z524259A4(2);\r\n    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);\r\n})();\r\n\r\nexport function BigInteger_nat_Z67CCE57D(n) {\r\n    if (BigNatModule_isSmall(n) && (BigNatModule_getSmall(n) < BigInteger.smallLim)) {\r\n        return BigInteger.smallPosTab[BigNatModule_getSmall(n)];\r\n    }\r\n    else {\r\n        return n;\r\n    }\r\n}\r\n\r\nexport function BigInteger_create_Z2BE94A1(s, n) {\r\n    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_posn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_negn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger__get_Sign(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return x.signInt | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_SignInt(x) {\r\n    return x.signInt;\r\n}\r\n\r\nexport function BigInteger__get_V(x) {\r\n    return x.v;\r\n}\r\n\r\nexport function BigInteger_op_Equality_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Inequality_56F059C0(x, y) {\r\n    return !BigInteger_op_Equality_56F059C0(x, y);\r\n}\r\n\r\nexport function BigInteger_op_LessThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return false;\r\n        }\r\n        case 3: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return false;\r\n        }\r\n        case 7: {\r\n            return false;\r\n        }\r\n        case 8: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 3: {\r\n            return false;\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return false;\r\n        }\r\n        case 6: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return false;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_compare_56F059C0(n, nn) {\r\n    if (BigInteger_op_LessThan_56F059C0(n, nn)) {\r\n        return -1;\r\n    }\r\n    else if (BigInteger_op_Equality_56F059C0(n, nn)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nexport function BigInteger_hash_Z665282C2(z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return (BigInteger__get_SignInt(z) + BigNatModule_hash(BigInteger__get_V(z))) | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_StructuredDisplayString(x) {\r\n    return toString(x);\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259A4(n) {\r\n    if (n >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(n)));\r\n    }\r\n    else if (n === -2147483648) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(fromInteger(n, false, 2)))));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(op_UnaryNegation_Int32(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259C1(n) {\r\n    if (compare(n, fromBits(0, 0, false)) >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(n)));\r\n    }\r\n    else if (equals(n, fromBits(0, 2147483648, false))) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_add(BigNatModule_ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule_one)));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_get_One() {\r\n    return BigInteger.one;\r\n}\r\n\r\nexport function BigInteger_get_Two() {\r\n    return BigInteger.two;\r\n}\r\n\r\nexport function BigInteger_get_Zero() {\r\n    return BigInteger.zero;\r\n}\r\n\r\nexport function BigInteger_op_UnaryNegation_Z665282C2(z) {\r\n    const matchValue = BigInteger__get_SignInt(z) | 0;\r\n    if (matchValue === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Scale_Z320F31E(k, z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else if (k < 0) {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), BigNatModule_scale(op_UnaryNegation_Int32(k), BigInteger__get_V(z)));\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), BigNatModule_scale(k, BigInteger__get_V(z)));\r\n    }\r\n}\r\n\r\nexport function BigInteger_subnn_6A57060(nx, ny) {\r\n    if (BigNatModule_gte(nx, ny)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_sub(nx, ny));\r\n    }\r\n    else {\r\n        return BigInteger_negn_Z67CCE57D(BigNatModule_sub(ny, nx));\r\n    }\r\n}\r\n\r\nexport function BigInteger_addnn_6A57060(nx, ny) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_add(nx, ny));\r\n}\r\n\r\nexport function BigInteger__get_IsZero(x) {\r\n    if (BigInteger__get_SignInt(x) === 0) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isZero(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsOne(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return BigNatModule_isOne(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Addition_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return y;\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 2: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Subtraction_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(y);\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 2: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Multiply_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(y)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(x)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(y)) {\r\n        return x;\r\n    }\r\n    else {\r\n        const m = BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);\r\n    }\r\n}\r\n\r\nexport function BigInteger_DivRem_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        throw (new Error());\r\n    }\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return [BigInteger_get_Zero(), BigInteger_get_Zero()];\r\n    }\r\n    else {\r\n        const patternInput = BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        const r = patternInput[1];\r\n        const d = patternInput[0];\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 1: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 2: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 3: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Division_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[0];\r\n}\r\n\r\nexport function BigInteger_op_Modulus_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[1];\r\n}\r\n\r\nexport function BigInteger_op_RightShift_62E082A2(x, y) {\r\n    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_LeftShift_62E082A2(x, y) {\r\n    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseAnd_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_ExclusiveOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    if (matchValue[0] === 0) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_Zero();\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));\r\n        }\r\n    }\r\n    else if (matchValue[1] === 0) {\r\n        return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsNegative(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsPositive(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_Abs_Z665282C2(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(x);\r\n    }\r\n    else {\r\n        return x;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            return true;\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 6: {\r\n            return true;\r\n        }\r\n        case 7: {\r\n            return true;\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return true;\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return true;\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 8: {\r\n            return true;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_Pow_62E082A2(x, y) {\r\n    if (y < 0) {\r\n        throw (new Error(\"y\"));\r\n    }\r\n    const matchValue = [BigInteger__get_IsZero(x), y];\r\n    if (matchValue[0]) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_One();\r\n        }\r\n        else {\r\n            return BigInteger_get_Zero();\r\n        }\r\n    }\r\n    else {\r\n        const yval = BigInteger_$ctor_Z524259A4(y);\r\n        return BigInteger_create_Z2BE94A1(BigNatModule_isZero(BigNatModule_rem(BigInteger__get_V(yval), BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt32(BigInteger__get_V(x));\r\n        if (u <= (2147483647 >>> 0)) {\r\n            return (BigInteger__get_SignInt(x) * (~(~u))) | 0;\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) && (u === ((2147483647 + 1) >>> 0))) {\r\n            return -2147483648;\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt32(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, false);\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt64(BigInteger__get_V(x));\r\n        if (compare(u, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\r\n            return op_Multiply(fromInteger(BigInteger__get_SignInt(x), false, 2), fromValue(u, false));\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) && equals(u, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true))) {\r\n            return fromBits(0, 2147483648, false);\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, true);\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt64(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToDouble(x) {\r\n    const matchValue = BigInteger__get_SignInt(x) | 0;\r\n    switch (matchValue) {\r\n        case -1: {\r\n            return -BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            return BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        default: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToSByte(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x80 & 0xFF) - 0x80;\r\n}\r\n\r\nexport function BigInteger__get_ToByte(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFF;\r\n}\r\n\r\nexport function BigInteger__get_ToInt16(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x8000 & 0xFFFF) - 0x8000;\r\n}\r\n\r\nexport function BigInteger__get_ToUInt16(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFFFF;\r\n}\r\n\r\nexport function BigInteger__get_ToSingle(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function BigInteger__get_ToDecimal(x) {\r\n    return new Decimal(BigInteger__get_ToDouble(x));\r\n}\r\n\r\nexport function BigInteger_Parse_Z721C83C5(text) {\r\n    if (text == null) {\r\n        throw (new Error(\"text\"));\r\n    }\r\n    const text_1 = text.trim();\r\n    const len = text_1.length | 0;\r\n    if (len === 0) {\r\n        throw (new Error());\r\n    }\r\n    const matchValue = [text_1[0], len];\r\n    if (matchValue[0] === \"+\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else if (matchValue[0] === \"-\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_negn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsSmall(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isSmall(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Factorial_Z665282C2(x) {\r\n    if (BigInteger__get_IsNegative(x)) {\r\n        throw (new Error(\"mustBeNonNegative\\\\nParameter name: x\"));\r\n    }\r\n    if (BigInteger__get_IsPositive(x)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_factorial(BigInteger__get_V(x)));\r\n    }\r\n    else {\r\n        return BigInteger_get_One();\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_UnaryPlus_Z665282C2(n1) {\r\n    return n1;\r\n}\r\n\r\nexport function BigInteger_FromInt64_Z524259C1(x) {\r\n    return BigInteger_$ctor_Z524259C1(x);\r\n}\r\n\r\nexport function BigInteger_FromInt32_Z524259A4(x) {\r\n    return BigInteger_$ctor_Z524259A4(x);\r\n}\r\n\r\n","import { BigInteger_op_Inequality_56F059C0, BigInteger_op_Equality_56F059C0, BigInteger_op_GreaterThanOrEqual_56F059C0, BigInteger_op_GreaterThan_56F059C0, BigInteger_op_LessThanOrEqual_56F059C0, BigInteger_op_LessThan_56F059C0, BigInteger_op_ExclusiveOr_56F059C0, BigInteger_op_BitwiseOr_56F059C0, BigInteger_op_BitwiseAnd_56F059C0, BigInteger_op_LeftShift_62E082A2, BigInteger_op_RightShift_62E082A2, BigInteger_op_UnaryPlus_Z665282C2, BigInteger_op_UnaryNegation_Z665282C2, BigInteger_op_Modulus_56F059C0, BigInteger_op_Division_56F059C0, BigInteger_op_Multiply_56F059C0, BigInteger_op_Subtraction_56F059C0, BigInteger_op_Addition_56F059C0, BigInteger__get_IsOne, BigInteger__get_IsZero, BigInteger__get_Sign, BigInteger__get_ToDecimal, BigInteger__get_ToDouble, BigInteger__get_ToSingle, BigInteger__get_ToUInt64, BigInteger__get_ToInt64, BigInteger__get_ToUInt32, BigInteger__get_ToInt32, BigInteger__get_ToUInt16, BigInteger__get_ToInt16, BigInteger__get_ToByte, BigInteger__get_ToSByte, BigInteger_$ctor_Z524259A4, BigInteger_$ctor_Z524259C1, BigInteger_get_Two, BigInteger_get_One, BigInteger_get_Zero, BigInteger_Abs_Z665282C2, BigInteger_Pow_62E082A2, BigInteger_GreatestCommonDivisor_56F059C0, BigInteger_DivRem_56F059C0, BigInteger_Parse_Z721C83C5, BigInteger } from \"./BigInt/z.js\";\r\nimport { fromInteger } from \"./Long.js\";\r\nimport { comparePrimitives, min, compare as compare_1, equals as equals_1, safeHash } from \"./Util.js\";\r\nimport { toString as toString_1 } from \"./Types.js\";\r\nimport { fold, empty, ofArrayWithTail, cons, toArray, head, skipWhile } from \"./List.js\";\r\nimport { fill, reverse } from \"./Array.js\";\r\n\r\nexport function isBigInt(x) {\r\n    return x instanceof BigInteger;\r\n}\r\n\r\nexport function tryParse(str, res) {\r\n    try {\r\n        res.contents = BigInteger_Parse_Z721C83C5(str);\r\n        return true;\r\n    }\r\n    catch (matchValue) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function divRem(x, y, remainder) {\r\n    const patternInput = BigInteger_DivRem_56F059C0(x, y);\r\n    remainder.contents = patternInput[1];\r\n    return patternInput[0];\r\n}\r\n\r\nexport function parse(arg00) {\r\n    return BigInteger_Parse_Z721C83C5(arg00);\r\n}\r\n\r\nexport function greatestCommonDivisor(arg00, arg01) {\r\n    return BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function pow(arg00, arg01) {\r\n    return BigInteger_Pow_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function abs(arg00) {\r\n    return BigInteger_Abs_Z665282C2(arg00);\r\n}\r\n\r\nexport const zero = BigInteger_get_Zero();\r\n\r\nexport const one = BigInteger_get_One();\r\n\r\nexport const two = BigInteger_get_Two();\r\n\r\nexport function fromString(s) {\r\n    return BigInteger_Parse_Z721C83C5(s);\r\n}\r\n\r\nexport function fromZero() {\r\n    return BigInteger_get_Zero();\r\n}\r\n\r\nexport function fromOne() {\r\n    return BigInteger_get_One();\r\n}\r\n\r\nexport function fromInt64(i) {\r\n    return BigInteger_$ctor_Z524259C1(i);\r\n}\r\n\r\nexport function fromInt32(i) {\r\n    if (i > 2147483647) {\r\n        return BigInteger_$ctor_Z524259C1(fromInteger(i, false, 6));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z524259A4(i);\r\n    }\r\n}\r\n\r\nexport function toSByte(x) {\r\n    return BigInteger__get_ToSByte(x);\r\n}\r\n\r\nexport function toByte(x) {\r\n    return BigInteger__get_ToByte(x);\r\n}\r\n\r\nexport function toInt16(x) {\r\n    return BigInteger__get_ToInt16(x);\r\n}\r\n\r\nexport function toUInt16(x) {\r\n    return BigInteger__get_ToUInt16(x);\r\n}\r\n\r\nexport function toInt32(x) {\r\n    return BigInteger__get_ToInt32(x);\r\n}\r\n\r\nexport function toUInt32(x) {\r\n    return BigInteger__get_ToUInt32(x);\r\n}\r\n\r\nexport function toInt64(x) {\r\n    return BigInteger__get_ToInt64(x);\r\n}\r\n\r\nexport function toUInt64(x) {\r\n    return BigInteger__get_ToUInt64(x);\r\n}\r\n\r\nexport function toSingle(x) {\r\n    return BigInteger__get_ToSingle(x);\r\n}\r\n\r\nexport function toDouble(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function toDecimal(x) {\r\n    return BigInteger__get_ToDecimal(x);\r\n}\r\n\r\nexport function sign(x) {\r\n    return BigInteger__get_Sign(x);\r\n}\r\n\r\nexport function isZero(x) {\r\n    return BigInteger__get_IsZero(x);\r\n}\r\n\r\nexport function isOne(x) {\r\n    return BigInteger__get_IsOne(x);\r\n}\r\n\r\nexport function hash(x) {\r\n    return safeHash(x);\r\n}\r\n\r\nexport function compare(x, y) {\r\n    return x.CompareTo(y);\r\n}\r\n\r\nexport function equals(x, y) {\r\n    return equals_1(x, y);\r\n}\r\n\r\nexport function toString(x) {\r\n    return toString_1(x);\r\n}\r\n\r\nexport const get_Zero = BigInteger_get_Zero();\r\n\r\nexport const get_One = BigInteger_get_One();\r\n\r\nexport function op_Addition(arg00, arg01) {\r\n    return BigInteger_op_Addition_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Subtraction(arg00, arg01) {\r\n    return BigInteger_op_Subtraction_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Multiply(arg00, arg01) {\r\n    return BigInteger_op_Multiply_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Division(arg00, arg01) {\r\n    return BigInteger_op_Division_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Modulus(arg00, arg01) {\r\n    return BigInteger_op_Modulus_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_UnaryNegation(arg00) {\r\n    return BigInteger_op_UnaryNegation_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_UnaryPlus(arg00) {\r\n    return BigInteger_op_UnaryPlus_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_RightShift(arg00, arg01) {\r\n    return BigInteger_op_RightShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_LeftShift(arg00, arg01) {\r\n    return BigInteger_op_LeftShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseAnd(arg00, arg01) {\r\n    return BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseOr(arg00, arg01) {\r\n    return BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_ExclusiveOr(arg00, arg01) {\r\n    return BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThan(arg00, arg01) {\r\n    return BigInteger_op_LessThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThan(arg00, arg01) {\r\n    return BigInteger_op_GreaterThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Equality(arg00, arg01) {\r\n    return BigInteger_op_Equality_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Inequality(arg00, arg01) {\r\n    return BigInteger_op_Inequality_56F059C0(arg00, arg01);\r\n}\r\n\r\nfunction flipTwosComplement(currByte, lowBitFound) {\r\n    const matchValue = [currByte, lowBitFound];\r\n    if (matchValue[1]) {\r\n        return [(currByte ^ 255) & 255, true];\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        return [0, false];\r\n    }\r\n    else {\r\n        return [(currByte ^ (254 << (new Int32Array([0, 1, 2, 3, 4, 5, 6, 7])).find((i) => ((currByte & (1 << i)) > 0)))) & 255, true];\r\n    }\r\n}\r\n\r\nexport function toByteArray(value) {\r\n    if (equals_1(value, zero)) {\r\n        return new Uint8Array([0]);\r\n    }\r\n    else {\r\n        const isPositive = compare_1(value, zero) > 0;\r\n        const value_1 = isPositive ? value : BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value);\r\n        const mask32 = fromInt64(fromInteger(4294967295, false, 6));\r\n        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut) => {\r\n            let value_6, value_8, value_9, value_10;\r\n            loop:\r\n            while (true) {\r\n                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;\r\n                if (compare_1(consumeValue, zero) <= 0) {\r\n                    const accumBytes_1 = isPositive ? skipWhile((b) => (b === 0), accumBytes) : skipWhile((b_1) => (b_1 === 255), accumBytes);\r\n                    const isHighBitOne = (head(accumBytes_1) & 128) !== 0;\r\n                    return reverse(toArray((isPositive && isHighBitOne) ? cons(0, accumBytes_1) : (((!isPositive) && (!isHighBitOne)) ? cons(255, accumBytes_1) : accumBytes_1)));\r\n                }\r\n                else {\r\n                    const currValue = toUInt32(BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));\r\n                    if (isPositive) {\r\n                        const b0 = currValue & 0xFF;\r\n                        let b1;\r\n                        const value_4 = currValue >>> 8;\r\n                        b1 = (value_4 & 0xFF);\r\n                        let b2;\r\n                        const value_5 = currValue >>> 16;\r\n                        b2 = (value_5 & 0xFF);\r\n                        accumBytes_mut = ofArrayWithTail([(value_6 = (currValue >>> 24), value_6 & 0xFF), b2, b1, b0], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement((value_8 = (currValue >>> 8), value_8 & 0xFF), patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement((value_9 = (currValue >>> 16), value_9 & 0xFF), patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement((value_10 = (currValue >>> 24), value_10 & 0xFF), patternInput_2[1]);\r\n                        accumBytes_mut = ofArrayWithTail([patternInput_3[0], patternInput_2[0], patternInput_1[0], patternInput[0]], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), value_1, false);\r\n    }\r\n}\r\n\r\nexport function fromByteArray(bytes) {\r\n    if (bytes == null) {\r\n        throw (new Error(\"bytes\"));\r\n    }\r\n    if (bytes.length === 0) {\r\n        return zero;\r\n    }\r\n    else {\r\n        const isPositive = (bytes[bytes.length - 1] & 128) === 0;\r\n        const buffer = fill(new Uint8Array(4), 0, 4, 0);\r\n        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;\r\n                if (bytesRemaining === 0) {\r\n                    const value_2 = fold((acc, value) => BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(fromInteger(value, false, 6))), zero, accumUInt32);\r\n                    if (isPositive) {\r\n                        return value_2;\r\n                    }\r\n                    else {\r\n                        return BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value_2);\r\n                    }\r\n                }\r\n                else {\r\n                    const bytesToProcess = min((x, y) => comparePrimitives(x, y), bytesRemaining, 4) | 0;\r\n                    for (let i_1 = 0; i_1 <= (bytesToProcess - 1); i_1++) {\r\n                        buffer[i_1] = bytes[currIndex + i_1];\r\n                    }\r\n                    if (isPositive) {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\r\n                        accumUInt32_mut = cons((((((buffer[0] | ((buffer[1] << 8) >>> 0)) >>> 0) | ((buffer[2] << 16) >>> 0)) >>> 0) | ((buffer[3] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\r\n                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);\r\n                        accumUInt32_mut = cons((((((patternInput[0] | ((patternInput_1[0] << 8) >>> 0)) >>> 0) | ((patternInput_2[0] << 16) >>> 0)) >>> 0) | ((patternInput_3[0] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), 0, bytes.length, false);\r\n    }\r\n}\r\n\r\n","import { Parsimmon_parse } from \"../Fable.Parsimmon.4.1.0/Parsimmon.fs.js\";\nimport { jsonParser } from \"./Parser.fs.js\";\nimport { join, toText, printf, toFail } from \"../fable-library.3.6.3/String.js\";\nimport { head, tail, isEmpty, empty, singleton, concat, ofArray, map as map_1 } from \"../fable-library.3.6.3/List.js\";\nimport { tryFind, ofList, toList } from \"../fable-library.3.6.3/Map.js\";\nimport { partialApply, isIterable, getEnumerator } from \"../fable-library.3.6.3/Util.js\";\nimport { toString } from \"../fable-library.3.6.3/Decimal.js\";\nimport { toDecimal } from \"../fable-library.3.6.3/BigInt.js\";\nimport { toString as toString_1 } from \"../fable-library.3.6.3/Date.js\";\nimport { value as value_5, some } from \"../fable-library.3.6.3/Option.js\";\nimport { $007CNativeObject$007C_$007C, $007CNativeArray$007C_$007C, $007CNull$007C_$007C, $007CNativeBool$007C_$007C, $007CNativeNumber$007C_$007C, $007CNativeString$007C_$007C } from \"./TypeCheck.fs.js\";\nimport { Json } from \"./Json.fs.js\";\nimport { map as map_2 } from \"../fable-library.3.6.3/Array.js\";\nimport { map as map_3, delay, toList as toList_1 } from \"../fable-library.3.6.3/Seq.js\";\n\nexport function InteropUtil_isDateOffset(x) {\n    if (x instanceof Date) {\n        return \"offset\" in x;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function InteropUtil_isObjectLiteral(x) {\n    return (typeof x) === \"object\";\n}\n\nexport function InteropUtil_isBigInt(x) {\n    if (((((!(x == null)) && InteropUtil_isObjectLiteral(x)) && (\"signInt\" in x)) && (\"v\" in x)) && (\"digits\" in (x[\"v\"]))) {\n        return \"bound\" in (x[\"v\"]);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function SimpleJson_tryParse(input) {\n    return Parsimmon_parse(input, jsonParser);\n}\n\nexport function SimpleJson_parse(input) {\n    const matchValue = SimpleJson_tryParse(input);\n    if (matchValue == null) {\n        return toFail(printf(\"Could not parse the JSON input: %s\"))(input);\n    }\n    else {\n        return matchValue;\n    }\n}\n\nexport function SimpleJson_toString(_arg1) {\n    if (_arg1.tag === 2) {\n        if (_arg1.fields[0]) {\n            return \"true\";\n        }\n        else {\n            return \"false\";\n        }\n    }\n    else if (_arg1.tag === 0) {\n        return _arg1.fields[0].toString();\n    }\n    else if (_arg1.tag === 1) {\n        return toText(printf(\"\\\"%s\\\"\"))(_arg1.fields[0]);\n    }\n    else if (_arg1.tag === 4) {\n        const arg10_1 = join(\",\", map_1((_arg1_1) => SimpleJson_toString(_arg1_1), _arg1.fields[0]));\n        return toText(printf(\"[%s]\"))(arg10_1);\n    }\n    else if (_arg1.tag === 5) {\n        const arg10_3 = join(\",\", map_1((tupledArg) => {\n            const arg20 = SimpleJson_toString(tupledArg[1]);\n            return toText(printf(\"\\\"%s\\\":%s\"))(tupledArg[0])(arg20);\n        }, toList(_arg1.fields[0])));\n        return toText(printf(\"{%s}\"))(arg10_3);\n    }\n    else {\n        return \"null\";\n    }\n}\n\nexport function SimpleJson_toPlainObject(input) {\n    switch (input.tag) {\n        case 2: {\n            return input.fields[0];\n        }\n        case 0: {\n            return input.fields[0];\n        }\n        case 1: {\n            return input.fields[0];\n        }\n        case 4: {\n            const array = [];\n            const enumerator = getEnumerator(input.fields[0]);\n            try {\n                while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const value_3 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    void (array.push(SimpleJson_toPlainObject(value_3)));\n                }\n            }\n            finally {\n                enumerator.Dispose();\n            }\n            return array;\n        }\n        case 5: {\n            const jsObject = ({});\n            const enumerator_1 = getEnumerator(toList(input.fields[0]));\n            try {\n                while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const forLoopVar = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    jsObject[forLoopVar[0]] = SimpleJson_toPlainObject(forLoopVar[1]);\n                }\n            }\n            finally {\n                enumerator_1.Dispose();\n            }\n            return jsObject;\n        }\n        default: {\n            return null;\n        }\n    }\n}\n\nexport function SimpleJson_stringify(value) {\n    if (value == null) {\n        return JSON.stringify(null);\n    }\n    else {\n        return JSON.stringify(value, (key, jsonValue) => {\n            let copyOfStruct;\n            return InteropUtil_isBigInt(jsonValue) ? toString(toDecimal(jsonValue)) : ((jsonValue instanceof Date) ? toString_1(jsonValue, \"o\") : (((typeof jsonValue) === \"string\") ? jsonValue : (isIterable(jsonValue) ? (Array.isArray(jsonValue) ? jsonValue : (Array.from(jsonValue))) : (InteropUtil_isBigInt(jsonValue) ? toString(toDecimal(jsonValue)) : (InteropUtil_isDateOffset(jsonValue) ? ((copyOfStruct = jsonValue, toString_1(copyOfStruct, \"O\"))) : jsonValue)))));\n        }, some(0));\n    }\n}\n\nexport function SimpleJson_parseNative$0027(x) {\n    const activePatternResult4727 = $007CNativeString$007C_$007C(x);\n    if (activePatternResult4727 != null) {\n        const str = activePatternResult4727;\n        return new Json(1, str);\n    }\n    else {\n        const activePatternResult4726 = $007CNativeNumber$007C_$007C(x);\n        if (activePatternResult4726 != null) {\n            const number = activePatternResult4726;\n            return new Json(0, number);\n        }\n        else {\n            const activePatternResult4725 = $007CNativeBool$007C_$007C(x);\n            if (activePatternResult4725 != null) {\n                const value = activePatternResult4725;\n                return new Json(2, value);\n            }\n            else if ($007CNull$007C_$007C(x) != null) {\n                return new Json(3);\n            }\n            else {\n                const activePatternResult4723 = $007CNativeArray$007C_$007C(x);\n                if (activePatternResult4723 != null) {\n                    const arr = activePatternResult4723;\n                    return new Json(4, ofArray(map_2((x_1) => SimpleJson_parseNative$0027(x_1), arr)));\n                }\n                else {\n                    const activePatternResult4722 = $007CNativeObject$007C_$007C(x);\n                    if (activePatternResult4722 != null) {\n                        const object = value_5(activePatternResult4722);\n                        return new Json(5, ofList(toList_1(delay(() => map_3((key) => [key, SimpleJson_parseNative$0027(object[key])], Object.keys(object))))));\n                    }\n                    else {\n                        return new Json(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function SimpleJson_parseNative(input) {\n    return SimpleJson_parseNative$0027(JSON.parse(input));\n}\n\nexport function SimpleJson_tryParseNative(input) {\n    try {\n        return SimpleJson_parseNative(input);\n    }\n    catch (ex) {\n        return void 0;\n    }\n}\n\nexport function SimpleJson_fromObjectLiteral(x) {\n    try {\n        return SimpleJson_parseNative$0027(x);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function SimpleJson_mapKeys(f, _arg1) {\n    switch (_arg1.tag) {\n        case 5: {\n            return new Json(5, ofList(map_1((tupledArg) => [f(tupledArg[0]), SimpleJson_mapKeys(f, tupledArg[1])], toList(_arg1.fields[0]))));\n        }\n        case 4: {\n            return new Json(4, map_1((_arg1_1) => SimpleJson_mapKeys(f, _arg1_1), _arg1.fields[0]));\n        }\n        default: {\n            return _arg1;\n        }\n    }\n}\n\nexport function SimpleJson_mapbyKey(f, _arg1) {\n    switch (_arg1.tag) {\n        case 5: {\n            return new Json(5, ofList(map_1((tupledArg) => {\n                const key = tupledArg[0];\n                return [key, f(key, tupledArg[1])];\n            }, toList(_arg1.fields[0]))));\n        }\n        case 4: {\n            return new Json(4, map_1((_arg1_1) => SimpleJson_mapbyKey(f, _arg1_1), _arg1.fields[0]));\n        }\n        default: {\n            return _arg1;\n        }\n    }\n}\n\nexport function SimpleJson_mapKeysByPath(f, json) {\n    const mapKey = (xs, _arg1) => {\n        switch (_arg1.tag) {\n            case 5: {\n                return new Json(5, ofList(map_1((tupledArg) => {\n                    const key = tupledArg[0];\n                    const value = tupledArg[1];\n                    const keyPath = concat([xs, singleton(key)]);\n                    const matchValue = f(keyPath);\n                    if (matchValue == null) {\n                        return [key, mapKey(keyPath, value)];\n                    }\n                    else {\n                        return [matchValue, mapKey(keyPath, value)];\n                    }\n                }, toList(_arg1.fields[0]))));\n            }\n            case 4: {\n                return new Json(4, map_1(partialApply(1, mapKey, [xs]), _arg1.fields[0]));\n            }\n            default: {\n                return _arg1;\n            }\n        }\n    };\n    return mapKey(empty(), json);\n}\n\nexport function SimpleJson_readPath(keys_mut, input_mut) {\n    SimpleJson_readPath:\n    while (true) {\n        const keys = keys_mut, input = input_mut;\n        const matchValue = [keys, input];\n        let pattern_matching_result, dict, key, dict_1, firstKey, rest;\n        if (!isEmpty(matchValue[0])) {\n            if (isEmpty(tail(matchValue[0]))) {\n                if (matchValue[1].tag === 5) {\n                    pattern_matching_result = 1;\n                    dict = matchValue[1].fields[0];\n                    key = head(matchValue[0]);\n                }\n                else {\n                    pattern_matching_result = 3;\n                }\n            }\n            else if (matchValue[1].tag === 5) {\n                pattern_matching_result = 2;\n                dict_1 = matchValue[1].fields[0];\n                firstKey = head(matchValue[0]);\n                rest = tail(matchValue[0]);\n            }\n            else {\n                pattern_matching_result = 3;\n            }\n        }\n        else {\n            pattern_matching_result = 0;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return void 0;\n            }\n            case 1: {\n                return tryFind(key, dict);\n            }\n            case 2: {\n                const matchValue_1 = tryFind(firstKey, dict_1);\n                let pattern_matching_result_1, nextDict;\n                if (matchValue_1 != null) {\n                    if (matchValue_1.tag === 5) {\n                        pattern_matching_result_1 = 0;\n                        nextDict = matchValue_1.fields[0];\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n                switch (pattern_matching_result_1) {\n                    case 0: {\n                        keys_mut = rest;\n                        input_mut = (new Json(5, nextDict));\n                        continue SimpleJson_readPath;\n                    }\n                    case 1: {\n                        return void 0;\n                    }\n                }\n            }\n            case 3: {\n                return void 0;\n            }\n        }\n        break;\n    }\n}\n\n","import { Union, Record } from \"../fable-library.3.6.3/Types.js\";\nimport { union_type, tuple_type, lambda_type, unit_type, array_type, record_type, class_type, string_type } from \"../fable-library.3.6.3/Reflection.js\";\n\nexport class RecordField extends Record {\n    constructor(FieldName, FieldType, PropertyInfo) {\n        super();\n        this.FieldName = FieldName;\n        this.FieldType = FieldType;\n        this.PropertyInfo = PropertyInfo;\n    }\n}\n\nexport function RecordField$reflection() {\n    return record_type(\"Fable.SimpleJson.RecordField\", [], RecordField, () => [[\"FieldName\", string_type], [\"FieldType\", TypeInfo$reflection()], [\"PropertyInfo\", class_type(\"System.Reflection.PropertyInfo\")]]);\n}\n\nexport class UnionCase extends Record {\n    constructor(CaseName, CaseTypes, Info) {\n        super();\n        this.CaseName = CaseName;\n        this.CaseTypes = CaseTypes;\n        this.Info = Info;\n    }\n}\n\nexport function UnionCase$reflection() {\n    return record_type(\"Fable.SimpleJson.UnionCase\", [], UnionCase, () => [[\"CaseName\", string_type], [\"CaseTypes\", array_type(TypeInfo$reflection())], [\"Info\", class_type(\"Microsoft.FSharp.Reflection.UnionCaseInfo\")]]);\n}\n\nexport class TypeInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Unit\", \"Char\", \"String\", \"UInt16\", \"UInt32\", \"UInt64\", \"Int32\", \"Bool\", \"Float32\", \"Float\", \"Decimal\", \"Short\", \"Long\", \"Byte\", \"SByte\", \"DateTime\", \"DateTimeOffset\", \"DateOnly\", \"TimeOnly\", \"BigInt\", \"TimeSpan\", \"Guid\", \"Object\", \"Any\", \"Async\", \"Promise\", \"Option\", \"List\", \"Set\", \"Array\", \"Seq\", \"Tuple\", \"Map\", \"Dictionary\", \"ResizeArray\", \"HashSet\", \"Func\", \"Enum\", \"Record\", \"Union\"];\n    }\n}\n\nexport function TypeInfo$reflection() {\n    return union_type(\"Fable.SimpleJson.TypeInfo\", [], TypeInfo, () => [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [[\"Item\", lambda_type(unit_type, class_type(\"System.Type\"))]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, array_type(TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), TypeInfo$reflection(), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, array_type(TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, tuple_type(array_type(RecordField$reflection()), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, tuple_type(array_type(UnionCase$reflection()), class_type(\"System.Type\")))]]]);\n}\n\n","import { equals, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { iterate, map, delay, toArray, iterateIndexed, concat } from \"./Seq.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\r\nimport { format } from \"./String.js\";\r\n\r\nexport class Dictionary {\r\n    constructor(pairs, comparer) {\r\n        const this$ = new FSharpRef(null);\r\n        this.comparer = comparer;\r\n        this$.contents = this;\r\n        this.hashMap = (new Map([]));\r\n        this[\"init@8-1\"] = 1;\r\n        const enumerator = getEnumerator(pairs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"Dictionary\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const this$ = this;\r\n        return getEnumerator(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const this$ = this;\r\n        return getEnumerator(concat(this$.hashMap.values()));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\r\n        const this$ = this;\r\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        const this$ = this;\r\n        Dictionary__Clear(this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\r\n        let pattern_matching_result;\r\n        if (matchValue != null) {\r\n            if (equals(matchValue[1], item[1])) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return true;\r\n            }\r\n            case 1: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\r\n        const this$ = this;\r\n        iterateIndexed((i, e) => {\r\n            array[arrayIndex + i] = e;\r\n        }, this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const this$ = this;\r\n        return Dictionary__get_Count(this$) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\r\n        if (matchValue != null) {\r\n            if (equals(matchValue[1], item[1])) {\r\n                Dictionary__Remove_2B595(this$, item[0]);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.Add5BDDA1\"](key, value) {\r\n        const this$ = this;\r\n        Dictionary__Add_5BDDA1(this$, key, value);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.ContainsKey2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__ContainsKey_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Item2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__get_Item_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.set_Item5BDDA1\"](key, v) {\r\n        const this$ = this;\r\n        Dictionary__set_Item_5BDDA1(this$, key, v);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Keys\"]() {\r\n        const this$ = this;\r\n        return toArray(delay(() => map((pair) => pair[0], this$)));\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.Remove2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__Remove_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.TryGetValue23A0B95A\"](key, value) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, key);\r\n        if (matchValue != null) {\r\n            const pair = matchValue;\r\n            value.contents = pair[1];\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Values\"]() {\r\n        const this$ = this;\r\n        return toArray(delay(() => map((pair) => pair[1], this$)));\r\n    }\r\n    get size() {\r\n        const this$ = this;\r\n        return Dictionary__get_Count(this$) | 0;\r\n    }\r\n    clear() {\r\n        const this$ = this;\r\n        Dictionary__Clear(this$);\r\n    }\r\n    delete(k) {\r\n        const this$ = this;\r\n        return Dictionary__Remove_2B595(this$, k);\r\n    }\r\n    entries() {\r\n        const this$ = this;\r\n        return map((p) => [p[0], p[1]], this$);\r\n    }\r\n    get(k) {\r\n        const this$ = this;\r\n        return Dictionary__get_Item_2B595(this$, k);\r\n    }\r\n    has(k) {\r\n        const this$ = this;\r\n        return Dictionary__ContainsKey_2B595(this$, k);\r\n    }\r\n    keys() {\r\n        const this$ = this;\r\n        return map((p) => p[0], this$);\r\n    }\r\n    set(k, v) {\r\n        const this$ = this;\r\n        Dictionary__set_Item_5BDDA1(this$, k, v);\r\n        return this$;\r\n    }\r\n    values() {\r\n        const this$ = this;\r\n        return map((p) => p[1], this$);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const this$ = this;\r\n        iterate((p) => {\r\n            f(p[1], p[0], this$);\r\n        }, this$);\r\n    }\r\n}\r\n\r\nexport function Dictionary$reflection(gen0, gen1) {\r\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\r\n}\r\n\r\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\r\n    return new Dictionary(pairs, comparer);\r\n}\r\n\r\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\r\n    const h = this$.comparer.GetHashCode(k) | 0;\r\n    let matchValue;\r\n    let outArg = null;\r\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\r\n        outArg = v;\r\n    })), outArg];\r\n    if (matchValue[0]) {\r\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\r\n    }\r\n    else {\r\n        return [false, h, -1];\r\n    }\r\n}\r\n\r\nexport function Dictionary__TryFind_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\r\n        }\r\n        case 1: {\r\n            return void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__get_Comparer(this$) {\r\n    return this$.comparer;\r\n}\r\n\r\nexport function Dictionary__Clear(this$) {\r\n    this$.hashMap.clear();\r\n}\r\n\r\nexport function Dictionary__get_Count(this$) {\r\n    let count = 0;\r\n    let enumerator = getEnumerator(this$.hashMap.values());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const pairs = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            count = ((count + pairs.length) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return count | 0;\r\n}\r\n\r\nexport function Dictionary__get_Item_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\r\n    if (matchValue != null) {\r\n        return matchValue[1];\r\n    }\r\n    else {\r\n        throw (new Error(\"The item was not found in collection\"));\r\n    }\r\n}\r\n\r\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [[k, v]]);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\r\n            throw (new Error(msg));\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [[k, v]]);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__ContainsKey_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__Remove_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n","import { equals, getEnumUnderlyingType, isEnum, getTupleElements, isTuple, getElementType, isArray, getFunctionElements, isFunction, getUnionCases, getUnionCaseFields, isUnion, getGenerics, getRecordElements, name, isRecord, fullName } from \"../fable-library.3.6.3/Reflection.js\";\nimport { UnionCase, RecordField, TypeInfo } from \"./TypeInfo.fs.js\";\nimport { map } from \"../fable-library.3.6.3/Array.js\";\nimport { collect, singleton, append, delay, toArray } from \"../fable-library.3.6.3/Seq.js\";\nimport { structuralHash, Lazy } from \"../fable-library.3.6.3/Util.js\";\nimport { Dictionary } from \"../fable-library.3.6.3/MutableMap.js\";\nimport { tryGetValue } from \"../fable-library.3.6.3/MapUtil.js\";\nimport { FSharpRef } from \"../fable-library.3.6.3/Types.js\";\nimport { endsWith, isNullOrEmpty } from \"../fable-library.3.6.3/String.js\";\n\nexport function $007CPrimitiveType$007C_$007C(primType) {\n    const matchValue = fullName(primType);\n    switch (matchValue) {\n        case \"System.String\": {\n            return new TypeInfo(2);\n        }\n        case \"System.Char\": {\n            return new TypeInfo(1);\n        }\n        case \"System.Int16\": {\n            return new TypeInfo(11);\n        }\n        case \"System.Int32\": {\n            return new TypeInfo(6);\n        }\n        case \"Microsoft.FSharp.Core.int64`1\":\n        case \"System.Int64\": {\n            return new TypeInfo(12);\n        }\n        case \"System.UInt16\": {\n            return new TypeInfo(3);\n        }\n        case \"System.UInt32\": {\n            return new TypeInfo(4);\n        }\n        case \"System.UInt64\": {\n            return new TypeInfo(5);\n        }\n        case \"System.DateTime\": {\n            return new TypeInfo(15);\n        }\n        case \"System.DateOnly\": {\n            return new TypeInfo(17);\n        }\n        case \"System.TimeOnly\": {\n            return new TypeInfo(18);\n        }\n        case \"System.TimeSpan\": {\n            return new TypeInfo(20);\n        }\n        case \"System.DateTimeOffset\": {\n            return new TypeInfo(16);\n        }\n        case \"System.Boolean\": {\n            return new TypeInfo(7);\n        }\n        case \"System.Single\": {\n            return new TypeInfo(8);\n        }\n        case \"System.Double\": {\n            return new TypeInfo(9);\n        }\n        case \"Microsoft.FSharp.Core.decimal`1\":\n        case \"System.Decimal\": {\n            return new TypeInfo(10);\n        }\n        case \"System.Numerics.BigInteger\": {\n            return new TypeInfo(19);\n        }\n        case \"Microsoft.FSharp.Core.Unit\": {\n            return new TypeInfo(0);\n        }\n        case \"System.Guid\": {\n            return new TypeInfo(21);\n        }\n        case \"System.Byte\": {\n            return new TypeInfo(13);\n        }\n        case \"System.SByte\": {\n            return new TypeInfo(14);\n        }\n        case \"System.Object\": {\n            return new TypeInfo(22);\n        }\n        default: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CRecordType$007C_$007C(t) {\n    if (isRecord(t)) {\n        return map((field) => [field, name(field), field[1]], getRecordElements(t));\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CSetType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpSet`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNullable$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Nullable`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CUnionType$007C_$007C(t) {\n    if (isUnion(t)) {\n        return map((info) => [name(info), info, map((prop) => prop[1], getUnionCaseFields(info))], getUnionCases(t));\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CMapType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpMap`2\") === 0) {\n        const genArgs = getGenerics(t);\n        return [genArgs[0], genArgs[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CListType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpList`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function flattenFuncTypes(typeDef) {\n    return toArray(delay(() => {\n        if (isFunction(typeDef)) {\n            const patternInput = getFunctionElements(typeDef);\n            return append(flattenFuncTypes(patternInput[0]), delay(() => flattenFuncTypes(patternInput[1])));\n        }\n        else {\n            return singleton(typeDef);\n        }\n    }));\n}\n\nexport function $007CFuncType$007C_$007C(t) {\n    if (isFunction(t)) {\n        return flattenFuncTypes(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CArrayType$007C_$007C(t) {\n    if (isArray(t)) {\n        return getElementType(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007COptionType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Core.FSharpOption`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CTupleType$007C_$007C(t) {\n    if (isTuple(t)) {\n        return getTupleElements(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CSeqType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.IEnumerable`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CDictionaryType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.Dictionary\") === 0) {\n        const genArgs = getGenerics(t);\n        return [genArgs[0], genArgs[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CResizeArrayType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.List\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CHashSetType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.HashSet\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CAsyncType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Control.FSharpAsync`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CPromiseType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Fable.Core.JS.Promise`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nfunction lazyToDelayed(l, unitVar0) {\n    return l.Value;\n}\n\nexport function $007CEnumType$007C_$007C(t) {\n    if (isEnum(t)) {\n        return getEnumUnderlyingType(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nfunction _createTypeInfo(resolvedType) {\n    let l, l_3, l_4, l_5, l_6, l_7, l_8, l_9, l_10, l_11, l_12, l_13, l_14, l_15, l_16, l_17;\n    const activePatternResult4642 = $007CPrimitiveType$007C_$007C(resolvedType);\n    if (activePatternResult4642 != null) {\n        const typeInfo = activePatternResult4642;\n        return typeInfo;\n    }\n    else {\n        const activePatternResult4641 = $007CFuncType$007C_$007C(resolvedType);\n        if (activePatternResult4641 != null) {\n            const types = activePatternResult4641;\n            return new TypeInfo(36, (l = (new Lazy(() => map((resolvedType_1) => createTypeInfo(resolvedType_1), types))), () => lazyToDelayed(l, void 0)));\n        }\n        else {\n            const activePatternResult4640 = $007CRecordType$007C_$007C(resolvedType);\n            if (activePatternResult4640 != null) {\n                const fields = activePatternResult4640;\n                const l_1 = new Lazy(() => [toArray(delay(() => collect((matchValue) => singleton(new RecordField(matchValue[1], createTypeInfo(matchValue[2]), matchValue[0])), fields))), resolvedType]);\n                return new TypeInfo(38, () => lazyToDelayed(l_1, void 0));\n            }\n            else {\n                const activePatternResult4639 = $007CUnionType$007C_$007C(resolvedType);\n                if (activePatternResult4639 != null) {\n                    const cases = activePatternResult4639;\n                    const l_2 = new Lazy(() => [toArray(delay(() => collect((matchValue_1) => singleton(new UnionCase(matchValue_1[0], map((resolvedType_2) => createTypeInfo(resolvedType_2), matchValue_1[2]), matchValue_1[1])), cases))), resolvedType]);\n                    return new TypeInfo(39, () => lazyToDelayed(l_2, void 0));\n                }\n                else {\n                    const activePatternResult4638 = $007CEnumType$007C_$007C(resolvedType);\n                    if (activePatternResult4638 != null) {\n                        const elemType = activePatternResult4638;\n                        return new TypeInfo(37, (l_3 = (new Lazy(() => [createTypeInfo(elemType), resolvedType])), () => lazyToDelayed(l_3, void 0)));\n                    }\n                    else {\n                        const activePatternResult4637 = $007CListType$007C_$007C(resolvedType);\n                        if (activePatternResult4637 != null) {\n                            const elemType_1 = activePatternResult4637;\n                            return new TypeInfo(27, (l_4 = (new Lazy(() => createTypeInfo(elemType_1))), () => lazyToDelayed(l_4, void 0)));\n                        }\n                        else {\n                            const activePatternResult4636 = $007CResizeArrayType$007C_$007C(resolvedType);\n                            if (activePatternResult4636 != null) {\n                                const elemType_2 = activePatternResult4636;\n                                return new TypeInfo(34, (l_5 = (new Lazy(() => createTypeInfo(elemType_2))), () => lazyToDelayed(l_5, void 0)));\n                            }\n                            else {\n                                const activePatternResult4635 = $007CHashSetType$007C_$007C(resolvedType);\n                                if (activePatternResult4635 != null) {\n                                    const elemType_3 = activePatternResult4635;\n                                    return new TypeInfo(35, (l_6 = (new Lazy(() => createTypeInfo(elemType_3))), () => lazyToDelayed(l_6, void 0)));\n                                }\n                                else {\n                                    const activePatternResult4634 = $007CArrayType$007C_$007C(resolvedType);\n                                    if (activePatternResult4634 != null) {\n                                        const elemType_4 = activePatternResult4634;\n                                        return new TypeInfo(29, (l_7 = (new Lazy(() => createTypeInfo(elemType_4))), () => lazyToDelayed(l_7, void 0)));\n                                    }\n                                    else {\n                                        const activePatternResult4633 = $007CTupleType$007C_$007C(resolvedType);\n                                        if (activePatternResult4633 != null) {\n                                            const types_1 = activePatternResult4633;\n                                            return new TypeInfo(31, (l_8 = (new Lazy(() => map((resolvedType_3) => createTypeInfo(resolvedType_3), types_1))), () => lazyToDelayed(l_8, void 0)));\n                                        }\n                                        else {\n                                            const activePatternResult4632 = $007COptionType$007C_$007C(resolvedType);\n                                            if (activePatternResult4632 != null) {\n                                                const elemType_5 = activePatternResult4632;\n                                                return new TypeInfo(26, (l_9 = (new Lazy(() => createTypeInfo(elemType_5))), () => lazyToDelayed(l_9, void 0)));\n                                            }\n                                            else {\n                                                const activePatternResult4631 = $007CNullable$007C_$007C(resolvedType);\n                                                if (activePatternResult4631 != null) {\n                                                    const elemType_6 = activePatternResult4631;\n                                                    return new TypeInfo(26, (l_10 = (new Lazy(() => createTypeInfo(elemType_6))), () => lazyToDelayed(l_10, void 0)));\n                                                }\n                                                else {\n                                                    const activePatternResult4630 = $007CSetType$007C_$007C(resolvedType);\n                                                    if (activePatternResult4630 != null) {\n                                                        const elemType_7 = activePatternResult4630;\n                                                        return new TypeInfo(28, (l_11 = (new Lazy(() => createTypeInfo(elemType_7))), () => lazyToDelayed(l_11, void 0)));\n                                                    }\n                                                    else {\n                                                        const activePatternResult4629 = $007CMapType$007C_$007C(resolvedType);\n                                                        if (activePatternResult4629 != null) {\n                                                            const keyType = activePatternResult4629[0];\n                                                            const valueType = activePatternResult4629[1];\n                                                            return new TypeInfo(32, (l_12 = (new Lazy(() => [createTypeInfo(keyType), createTypeInfo(valueType)])), () => lazyToDelayed(l_12, void 0)));\n                                                        }\n                                                        else {\n                                                            const activePatternResult4628 = $007CDictionaryType$007C_$007C(resolvedType);\n                                                            if (activePatternResult4628 != null) {\n                                                                const keyType_1 = activePatternResult4628[0];\n                                                                const valueType_1 = activePatternResult4628[1];\n                                                                return new TypeInfo(33, (l_13 = (new Lazy(() => [createTypeInfo(keyType_1), createTypeInfo(valueType_1), valueType_1])), () => lazyToDelayed(l_13, void 0)));\n                                                            }\n                                                            else {\n                                                                const activePatternResult4627 = $007CSeqType$007C_$007C(resolvedType);\n                                                                if (activePatternResult4627 != null) {\n                                                                    const elemType_8 = activePatternResult4627;\n                                                                    return new TypeInfo(30, (l_14 = (new Lazy(() => createTypeInfo(elemType_8))), () => lazyToDelayed(l_14, void 0)));\n                                                                }\n                                                                else {\n                                                                    const activePatternResult4626 = $007CAsyncType$007C_$007C(resolvedType);\n                                                                    if (activePatternResult4626 != null) {\n                                                                        const elemType_9 = activePatternResult4626;\n                                                                        return new TypeInfo(24, (l_15 = (new Lazy(() => createTypeInfo(elemType_9))), () => lazyToDelayed(l_15, void 0)));\n                                                                    }\n                                                                    else {\n                                                                        const activePatternResult4625 = $007CPromiseType$007C_$007C(resolvedType);\n                                                                        if (activePatternResult4625 != null) {\n                                                                            const elemType_10 = activePatternResult4625;\n                                                                            return new TypeInfo(25, (l_16 = (new Lazy(() => createTypeInfo(elemType_10))), () => lazyToDelayed(l_16, void 0)));\n                                                                        }\n                                                                        else {\n                                                                            return new TypeInfo(23, (l_17 = (new Lazy(() => resolvedType)), () => lazyToDelayed(l_17, void 0)));\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst typeInfoCache = new Dictionary([], {\n    Equals: (x, y) => equals(x, y),\n    GetHashCode: (x) => structuralHash(x),\n});\n\nexport function createTypeInfo(resolvedType) {\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(typeInfoCache, resolvedType, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        const ti_1 = _createTypeInfo(resolvedType);\n        if (((!isNullOrEmpty(fullName(resolvedType))) && (!endsWith(fullName(resolvedType), \"`1[]\"))) && (!endsWith(fullName(resolvedType), \"`2[]\"))) {\n            typeInfoCache.set(resolvedType, ti_1);\n            return ti_1;\n        }\n        else {\n            return ti_1;\n        }\n    }\n}\n\nexport function isPrimitive(_arg1) {\n    switch (_arg1.tag) {\n        case 0:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 21:\n        case 26: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\n\nexport function enumUnion(_arg1) {\n    if (_arg1.tag === 39) {\n        return _arg1.fields[0]()[0].every((case$) => (case$.CaseTypes.length === 0));\n    }\n    else {\n        return false;\n    }\n}\n\n","import { FSharpRef, Union } from \"../fable-library.3.6.3/Types.js\";\nimport { getUnionFields, getRecordField, makeRecord, fullName, makeUnion, name as name_2, union_type, string_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { Json, Json$reflection } from \"./Json.fs.js\";\nimport { map as map_3, choose, ofArray, tryFind as tryFind_2, toArray, length, tail as tail_1, head, isEmpty, empty, singleton } from \"../fable-library.3.6.3/List.js\";\nimport { toArray as toArray_1, map as map_4, collect, tryFind as tryFind_3, forAll, empty as empty_1, singleton as singleton_1, append, delay, toList } from \"../fable-library.3.6.3/Seq.js\";\nimport { value as value_89, some, map as map_1 } from \"../fable-library.3.6.3/Option.js\";\nimport { toArray as toArray_2, isEmpty as isEmpty_1, ofList as ofList_1, find, count, containsKey, toList as toList_1, tryFind, remove } from \"../fable-library.3.6.3/Map.js\";\nimport { toText, join, fromBase64String, printf, toFail, substring, endsWith } from \"../fable-library.3.6.3/String.js\";\nimport { parse } from \"../fable-library.3.6.3/Double.js\";\nimport { tryParse, parse as parse_1 } from \"../fable-library.3.6.3/Int32.js\";\nimport { toString as toString_2 } from \"../fable-library.3.6.3/Decimal.js\";\nimport Decimal from \"../fable-library.3.6.3/Decimal.js\";\nimport { toString, fromInteger, toNumber, tryParse as tryParse_1, fromInt, parse as parse_2, fromNumber } from \"../fable-library.3.6.3/Long.js\";\nimport { SimpleJson_stringify, SimpleJson_parseNative, SimpleJson_parse, SimpleJson_toString, SimpleJson_toPlainObject } from \"./SimpleJson.fs.js\";\nimport { toString as toString_1, fromInt32, parse as parse_3 } from \"../fable-library.3.6.3/BigInt.js\";\nimport { toString as toString_3, parse as parse_4 } from \"../fable-library.3.6.3/Date.js\";\nimport { parse as parse_5 } from \"../fable-library.3.6.3/DateOffset.js\";\nimport DateOffset from \"../fable-library.3.6.3/DateOffset.js\";\nimport { dayNumber, fromDayNumber } from \"../fable-library.3.6.3/DateOnly.js\";\nimport { create } from \"../fable-library.3.6.3/TimeOnly.js\";\nimport { concat, mapIndexed, equalsWith, zip, map as map_2, tryFind as tryFind_1 } from \"../fable-library.3.6.3/Array.js\";\nimport { int32ToString, getEnumerator, structuralHash, safeHash, compare, equals } from \"../fable-library.3.6.3/Util.js\";\nimport { parse as parse_6 } from \"../fable-library.3.6.3/Guid.js\";\nimport { getBytesInt32, toInt64 } from \"../fable-library.3.6.3/BitConverter.js\";\nimport { ofList } from \"../fable-library.3.6.3/Set.js\";\nimport { TypeInfo } from \"./TypeInfo.fs.js\";\nimport { Dictionary } from \"../fable-library.3.6.3/MutableMap.js\";\nimport { addToSet, addToDict } from \"../fable-library.3.6.3/MapUtil.js\";\nimport { HashSet } from \"../fable-library.3.6.3/MutableSet.js\";\nimport { enumUnion, isPrimitive } from \"./TypeInfo.Converter.fs.js\";\nimport quote from \"./quote.js\";\nimport { ticks } from \"../fable-library.3.6.3/TimeSpan.js\";\n\nexport const Convert_insideBrowser = (new Function(\"try {return this===window;}catch(e){ return false;}\"))();\n\nfunction Convert_isDefined(value) {\n    return !((value === undefined));\n}\n\nexport function Convert_usingFable3() {\n    return true;\n}\n\nexport const Convert_isUsingFable3 = Convert_usingFable3();\n\nexport class Convert_InternalMap extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"MapEmpty\", \"MapOne\", \"MapNode\"];\n    }\n}\n\nexport function Convert_InternalMap$reflection() {\n    return union_type(\"Fable.SimpleJson.Convert.InternalMap\", [], Convert_InternalMap, () => [[], [[\"Item1\", string_type], [\"Item2\", Json$reflection()]], [[\"Item1\", string_type], [\"Item2\", Json$reflection()], [\"Item3\", Convert_InternalMap$reflection()], [\"Item4\", Convert_InternalMap$reflection()]]]);\n}\n\nexport function Convert_flattenMap(_arg1) {\n    switch (_arg1.tag) {\n        case 1: {\n            return singleton([_arg1.fields[0], _arg1.fields[1]]);\n        }\n        case 2: {\n            return toList(delay(() => append(Convert_flattenMap(_arg1.fields[2]), delay(() => append(Convert_flattenMap(_arg1.fields[3]), delay(() => singleton_1([_arg1.fields[0], _arg1.fields[1]])))))));\n        }\n        default: {\n            return empty();\n        }\n    }\n}\n\nexport function Convert_$007CKeyValue$007C_$007C(key, map) {\n    return map_1((value) => [key, value, remove(key, map)], tryFind(key, map));\n}\n\nexport function Convert_$007CNonArray$007C_$007C(_arg1) {\n    if (_arg1.tag === 4) {\n        return void 0;\n    }\n    else {\n        return _arg1;\n    }\n}\n\nexport function Convert_$007CMapEmpty$007C_$007C(json) {\n    let pattern_matching_result;\n    if (json.tag === 1) {\n        if (json.fields[0] === \"MapEmpty\") {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return json;\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapKey$007C_$007C(_arg1) {\n    switch (_arg1.tag) {\n        case 0: {\n            return _arg1.fields[0].toString();\n        }\n        case 1: {\n            return _arg1.fields[0];\n        }\n        default: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapOne$007C_$007C(_arg1) {\n    let pattern_matching_result, key, value;\n    if (_arg1.tag === 4) {\n        if (!isEmpty(_arg1.fields[0])) {\n            if (head(_arg1.fields[0]).tag === 1) {\n                if (head(_arg1.fields[0]).fields[0] === \"MapOne\") {\n                    if (!isEmpty(tail_1(_arg1.fields[0]))) {\n                        const activePatternResult4800 = Convert_$007CMapKey$007C_$007C(head(tail_1(_arg1.fields[0])));\n                        if (activePatternResult4800 != null) {\n                            if (!isEmpty(tail_1(tail_1(_arg1.fields[0])))) {\n                                if (isEmpty(tail_1(tail_1(tail_1(_arg1.fields[0]))))) {\n                                    pattern_matching_result = 0;\n                                    key = activePatternResult4800;\n                                    value = head(tail_1(tail_1(_arg1.fields[0])));\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [key, value];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapNode$007C_$007C(_arg1) {\n    let pattern_matching_result, key, left, right, value;\n    if (_arg1.tag === 4) {\n        if (!isEmpty(_arg1.fields[0])) {\n            if (head(_arg1.fields[0]).tag === 1) {\n                if (head(_arg1.fields[0]).fields[0] === \"MapNode\") {\n                    if (!isEmpty(tail_1(_arg1.fields[0]))) {\n                        const activePatternResult4802 = Convert_$007CMapKey$007C_$007C(head(tail_1(_arg1.fields[0])));\n                        if (activePatternResult4802 != null) {\n                            if (!isEmpty(tail_1(tail_1(_arg1.fields[0])))) {\n                                if (!isEmpty(tail_1(tail_1(tail_1(_arg1.fields[0]))))) {\n                                    if (!isEmpty(tail_1(tail_1(tail_1(tail_1(_arg1.fields[0])))))) {\n                                        if (!isEmpty(tail_1(tail_1(tail_1(tail_1(tail_1(_arg1.fields[0]))))))) {\n                                            if (head(tail_1(tail_1(tail_1(tail_1(tail_1(_arg1.fields[0])))))).tag === 0) {\n                                                if (isEmpty(tail_1(tail_1(tail_1(tail_1(tail_1(tail_1(_arg1.fields[0])))))))) {\n                                                    pattern_matching_result = 0;\n                                                    key = activePatternResult4802;\n                                                    left = head(tail_1(tail_1(tail_1(_arg1.fields[0]))));\n                                                    right = head(tail_1(tail_1(tail_1(tail_1(_arg1.fields[0])))));\n                                                    value = head(tail_1(tail_1(_arg1.fields[0])));\n                                                }\n                                                else {\n                                                    pattern_matching_result = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [key, value, left, right];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_generateMap(json) {\n    if (Convert_$007CMapEmpty$007C_$007C(json) != null) {\n        return new Convert_InternalMap(0);\n    }\n    else {\n        const activePatternResult4805 = Convert_$007CMapOne$007C_$007C(json);\n        if (activePatternResult4805 != null) {\n            const key = activePatternResult4805[0];\n            const value = activePatternResult4805[1];\n            return new Convert_InternalMap(1, key, value);\n        }\n        else {\n            const activePatternResult4804 = Convert_$007CMapNode$007C_$007C(json);\n            if (activePatternResult4804 != null) {\n                const key_1 = activePatternResult4804[0];\n                const left = activePatternResult4804[2];\n                const right = activePatternResult4804[3];\n                const value_1 = activePatternResult4804[1];\n                const matchValue = [Convert_generateMap(left), Convert_generateMap(right)];\n                let pattern_matching_result, leftMap, rightMap;\n                if (matchValue[0] != null) {\n                    if (matchValue[1] != null) {\n                        pattern_matching_result = 0;\n                        leftMap = matchValue[0];\n                        rightMap = matchValue[1];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return new Convert_InternalMap(2, key_1, value_1, leftMap, rightMap);\n                    }\n                    case 1: {\n                        return void 0;\n                    }\n                }\n            }\n            else {\n                return void 0;\n            }\n        }\n    }\n}\n\nexport function Convert_flatteFable3Map(tree) {\n    return toList(delay(() => {\n        let matchValue, key, value;\n        return append((matchValue = [tryFind(\"k\", tree), tryFind(\"v\", tree)], (matchValue[0] != null) ? ((matchValue[0].tag === 1) ? ((matchValue[1] != null) ? ((key = matchValue[0].fields[0], (value = matchValue[1], singleton_1([key, value])))) : ((empty_1()))) : ((empty_1()))) : ((empty_1()))), delay(() => {\n            let matchValue_1, left;\n            return append((matchValue_1 = tryFind(\"left\", tree), (matchValue_1 != null) ? ((matchValue_1.tag === 5) ? ((left = matchValue_1.fields[0], Convert_flatteFable3Map(left))) : ((empty_1()))) : ((empty_1()))), delay(() => {\n                const matchValue_2 = tryFind(\"right\", tree);\n                let pattern_matching_result, right;\n                if (matchValue_2 != null) {\n                    if (matchValue_2.tag === 5) {\n                        pattern_matching_result = 0;\n                        right = matchValue_2.fields[0];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return Convert_flatteFable3Map(right);\n                    }\n                    case 1: {\n                        return empty_1();\n                    }\n                }\n            }));\n        }));\n    }));\n}\n\nexport function Convert_flattenFable3Lists(linkedList) {\n    return toList(delay(() => {\n        let matchValue;\n        return append((matchValue = tryFind(\"head\", linkedList), (matchValue == null) ? ((empty_1())) : singleton_1(matchValue)), delay(() => {\n            const matchValue_1 = tryFind(\"tail\", linkedList);\n            let pattern_matching_result, tail;\n            if (matchValue_1 != null) {\n                if (matchValue_1.tag === 5) {\n                    pattern_matching_result = 0;\n                    tail = matchValue_1.fields[0];\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    return Convert_flattenFable3Lists(tail);\n                }\n                case 1: {\n                    return empty_1();\n                }\n            }\n        }));\n    }));\n}\n\nexport function Convert_arrayLike(_arg1) {\n    switch (_arg1.tag) {\n        case 29: {\n            return true;\n        }\n        case 27: {\n            return true;\n        }\n        case 30: {\n            return true;\n        }\n        case 31: {\n            return true;\n        }\n        case 28: {\n            return true;\n        }\n        case 34: {\n            return true;\n        }\n        case 35: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\n\nexport function Convert_isRecord(_arg1) {\n    if (_arg1.tag === 38) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_unionOfRecords(_arg1) {\n    if (_arg1.tag === 39) {\n        return forAll((case$) => {\n            if (case$.CaseTypes.length === 1) {\n                return Convert_isRecord(case$.CaseTypes[0]);\n            }\n            else {\n                return false;\n            }\n        }, _arg1.fields[0]()[0]);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_optional(_arg1) {\n    if (_arg1.tag === 26) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_isQuoted(input) {\n    if (input.indexOf(\"\\\"\") === 0) {\n        return endsWith(input, \"\\\"\");\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_betweenQuotes(input) {\n    return (\"\\\"\" + input) + \"\\\"\";\n}\n\nexport function Convert_removeQuotes(input) {\n    return substring(input, 1, input.length - 2);\n}\n\nexport function Convert_fromJsonAs(input_mut, typeInfo_mut) {\n    let foundCase, foundCase_2, testExpr, values_8, tree_2, tree;\n    Convert_fromJsonAs:\n    while (true) {\n        const input = input_mut, typeInfo = typeInfo_mut;\n        const matchValue = [input, typeInfo];\n        let pattern_matching_result, value_1;\n        if (matchValue[0].tag === 0) {\n            if (matchValue[1].tag === 9) {\n                pattern_matching_result = 0;\n                value_1 = matchValue[0].fields[0];\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[0].tag === 1) {\n            if (matchValue[1].tag === 9) {\n                if (matchValue[0].fields[0].toLocaleLowerCase() === \"nan\") {\n                    pattern_matching_result = 1;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return value_1;\n            }\n            case 1: {\n                return NaN;\n            }\n            case 2: {\n                let pattern_matching_result_1, value_4, value_5;\n                if (matchValue[0].tag === 1) {\n                    if (matchValue[1].tag === 9) {\n                        pattern_matching_result_1 = 0;\n                        value_4 = matchValue[0].fields[0];\n                    }\n                    else if (matchValue[1].tag === 8) {\n                        if (matchValue[0].fields[0].toLocaleLowerCase() === \"nan\") {\n                            pattern_matching_result_1 = 2;\n                        }\n                        else {\n                            pattern_matching_result_1 = 3;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 3;\n                    }\n                }\n                else if (matchValue[0].tag === 0) {\n                    if (matchValue[1].tag === 8) {\n                        pattern_matching_result_1 = 1;\n                        value_5 = matchValue[0].fields[0];\n                    }\n                    else {\n                        pattern_matching_result_1 = 3;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 3;\n                }\n                switch (pattern_matching_result_1) {\n                    case 0: {\n                        return parse(value_4);\n                    }\n                    case 1: {\n                        return value_5;\n                    }\n                    case 2: {\n                        return NaN;\n                    }\n                    case 3: {\n                        let pattern_matching_result_2, value_7, value_8, value_9, value_10, value_11, value_12, value_13, value_14, value_15, value_16, value_17, value_18, value_19, value_20, value_21, value_22, value_23, value_24, value_25, getlElemType, value_26, getElemType, value_27, getElemType_1, value_28, genericJson, value_29, value_30, value_31, value_32, value_33, value_34, value_35, value_36, value_37, value_38, value_39, value_40, getTypes, values, jsonValue_5, optionalTypeDelayed_5;\n                        if (matchValue[0].tag === 1) {\n                            if (matchValue[1].tag === 8) {\n                                pattern_matching_result_2 = 0;\n                                value_7 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 6) {\n                                pattern_matching_result_2 = 3;\n                                value_10 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 1) {\n                                pattern_matching_result_2 = 4;\n                                value_11 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 2) {\n                                pattern_matching_result_2 = 6;\n                                value_13 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 10) {\n                                pattern_matching_result_2 = 8;\n                                value_15 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 11) {\n                                pattern_matching_result_2 = 10;\n                                value_17 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 3) {\n                                pattern_matching_result_2 = 13;\n                                value_20 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 4) {\n                                pattern_matching_result_2 = 15;\n                                value_22 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 5) {\n                                pattern_matching_result_2 = 17;\n                                value_24 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 37) {\n                                pattern_matching_result_2 = 19;\n                                getlElemType = matchValue[1].fields[0];\n                                value_26 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 29) {\n                                pattern_matching_result_2 = 21;\n                                getElemType_1 = matchValue[1].fields[0];\n                                value_28 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 24;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 12) {\n                                pattern_matching_result_2 = 25;\n                                value_29 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 13) {\n                                pattern_matching_result_2 = 26;\n                                value_30 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 14) {\n                                pattern_matching_result_2 = 29;\n                                value_33 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 19) {\n                                pattern_matching_result_2 = 30;\n                                value_34 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 15) {\n                                pattern_matching_result_2 = 32;\n                                value_36 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 16) {\n                                pattern_matching_result_2 = 33;\n                                value_37 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 36;\n                                value_40 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 26) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 39;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 40;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else if (matchValue[0].tag === 0) {\n                            if (matchValue[1].tag === 6) {\n                                pattern_matching_result_2 = 1;\n                                value_8 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 1) {\n                                pattern_matching_result_2 = 5;\n                                value_12 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 2) {\n                                pattern_matching_result_2 = 7;\n                                value_14 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 10) {\n                                pattern_matching_result_2 = 9;\n                                value_16 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 11) {\n                                pattern_matching_result_2 = 11;\n                                value_18 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 3) {\n                                pattern_matching_result_2 = 12;\n                                value_19 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 4) {\n                                pattern_matching_result_2 = 14;\n                                value_21 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 5) {\n                                pattern_matching_result_2 = 16;\n                                value_23 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 20) {\n                                pattern_matching_result_2 = 18;\n                                value_25 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 37) {\n                                pattern_matching_result_2 = 20;\n                                getElemType = matchValue[1].fields[0];\n                                value_27 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 24;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 13) {\n                                pattern_matching_result_2 = 27;\n                                value_31 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 14) {\n                                pattern_matching_result_2 = 28;\n                                value_32 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 19) {\n                                pattern_matching_result_2 = 31;\n                                value_35 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 16) {\n                                pattern_matching_result_2 = 34;\n                                value_38 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 17) {\n                                pattern_matching_result_2 = 35;\n                                value_39 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 26) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 39;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 40;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else if (matchValue[0].tag === 2) {\n                            if (matchValue[1].tag === 7) {\n                                pattern_matching_result_2 = 2;\n                                value_9 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 24;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 26) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 39;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 40;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else if (matchValue[0].tag === 3) {\n                            if (matchValue[1].tag === 2) {\n                                pattern_matching_result_2 = 22;\n                            }\n                            else if (matchValue[1].tag === 0) {\n                                pattern_matching_result_2 = 23;\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 24;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 26) {\n                                pattern_matching_result_2 = 38;\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else if (matchValue[0].tag === 5) {\n                            if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 24;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 39) {\n                                pattern_matching_result_2 = 37;\n                                getTypes = matchValue[1].fields[0];\n                                values = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 26) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 39;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 40;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else if (matchValue[1].tag === 22) {\n                            pattern_matching_result_2 = 24;\n                            genericJson = matchValue[0];\n                        }\n                        else if (matchValue[1].tag === 26) {\n                            if (!equals(matchValue[0], new Json(3))) {\n                                pattern_matching_result_2 = 39;\n                                jsonValue_5 = matchValue[0];\n                                optionalTypeDelayed_5 = matchValue[1].fields[0];\n                            }\n                            else {\n                                pattern_matching_result_2 = 40;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_2 = 40;\n                        }\n                        switch (pattern_matching_result_2) {\n                            case 0: {\n                                return parse(value_7);\n                            }\n                            case 1: {\n                                return Math.floor(value_8);\n                            }\n                            case 2: {\n                                return value_9;\n                            }\n                            case 3: {\n                                return parse_1(value_10, 511, false, 32);\n                            }\n                            case 4: {\n                                return value_11;\n                            }\n                            case 5: {\n                                return String.fromCharCode(value_12);\n                            }\n                            case 6: {\n                                return value_13;\n                            }\n                            case 7: {\n                                return value_14.toString();\n                            }\n                            case 8: {\n                                return new Decimal(value_15);\n                            }\n                            case 9: {\n                                return new Decimal(value_16);\n                            }\n                            case 10: {\n                                return parse_1(value_17, 511, false, 16);\n                            }\n                            case 11: {\n                                return (value_18 + 0x8000 & 0xFFFF) - 0x8000;\n                            }\n                            case 12: {\n                                return value_19 & 0xFFFF;\n                            }\n                            case 13: {\n                                return parse_1(value_20, 511, true, 16);\n                            }\n                            case 14: {\n                                return value_21 >>> 0;\n                            }\n                            case 15: {\n                                return parse_1(value_22, 511, true, 32);\n                            }\n                            case 16: {\n                                return fromNumber(value_23, true);\n                            }\n                            case 17: {\n                                return parse_2(value_24, 511, true, 64);\n                            }\n                            case 18: {\n                                return Math.floor(value_25);\n                            }\n                            case 19: {\n                                const patternInput = getlElemType();\n                                const underlyingType = patternInput[0];\n                                const originalType = patternInput[1];\n                                switch (underlyingType.tag) {\n                                    case 6: {\n                                        let matchValue_1;\n                                        let outArg = 0;\n                                        matchValue_1 = [tryParse(value_26, 511, false, 32, new FSharpRef(() => outArg, (v) => {\n                                            outArg = (v | 0);\n                                        })), outArg];\n                                        if (matchValue_1[0]) {\n                                            return matchValue_1[1];\n                                        }\n                                        else {\n                                            const arg20 = name_2(originalType);\n                                            return toFail(printf(\"The value \\u0027%s\\u0027 is not valid for enum of type \\u0027%s\\u0027\"))(value_26)(arg20);\n                                        }\n                                    }\n                                    case 12: {\n                                        let matchValue_2;\n                                        let outArg_1 = fromInt(0);\n                                        matchValue_2 = [tryParse_1(value_26, 511, false, 64, new FSharpRef(() => outArg_1, (v_1) => {\n                                            outArg_1 = v_1;\n                                        })), outArg_1];\n                                        if (matchValue_2[0]) {\n                                            return matchValue_2[1];\n                                        }\n                                        else {\n                                            const arg20_1 = name_2(originalType);\n                                            return toFail(printf(\"The value \\u0027%s\\u0027 is not valid for enum of type \\u0027%s\\u0027\"))(value_26)(arg20_1);\n                                        }\n                                    }\n                                    default: {\n                                        const arg20_2 = name_2(originalType);\n                                        return toFail(printf(\"The value \\u0027%s\\u0027 cannot be converted to enum of type \\u0027%s\\u0027\"))(value_26)(arg20_2);\n                                    }\n                                }\n                            }\n                            case 20: {\n                                const patternInput_1 = getElemType();\n                                return value_27;\n                            }\n                            case 21: {\n                                const elemType = getElemType_1();\n                                if (elemType.tag === 13) {\n                                    if ((typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? true : Convert_insideBrowser) {\n                                        return fromBase64String(value_28);\n                                    }\n                                    else {\n                                        return Array.prototype.slice.call(Buffer.from(value_28, 'base64'));\n                                    }\n                                }\n                                else {\n                                    return toFail(printf(\"Cannot convert arbitrary string \\u0027%s\\u0027 to %A\"))(value_28)(elemType);\n                                }\n                            }\n                            case 22: {\n                                return null;\n                            }\n                            case 23: {\n                                return void 0;\n                            }\n                            case 24: {\n                                return SimpleJson_toPlainObject(genericJson);\n                            }\n                            case 25: {\n                                return parse_2(value_29, 511, false, 64);\n                            }\n                            case 26: {\n                                return parse_1(value_30, 511, true, 8);\n                            }\n                            case 27: {\n                                return value_31 & 0xFF;\n                            }\n                            case 28: {\n                                return (value_32 + 0x80 & 0xFF) - 0x80;\n                            }\n                            case 29: {\n                                return parse_1(value_33, 511, false, 8);\n                            }\n                            case 30: {\n                                return parse_3(value_34);\n                            }\n                            case 31: {\n                                return fromInt32(Math.floor(value_35));\n                            }\n                            case 32: {\n                                return parse_4(value_36);\n                            }\n                            case 33: {\n                                return parse_5(value_37);\n                            }\n                            case 34: {\n                                return DateOffset(toNumber(fromNumber(Math.floor(value_38), false)) * 1000, 0);\n                            }\n                            case 35: {\n                                return fromDayNumber(~(~value_39));\n                            }\n                            case 36: {\n                                return create(parse_2(value_40, 511, false, 64));\n                            }\n                            case 37: {\n                                const patternInput_2 = getTypes();\n                                const unionType = patternInput_2[1];\n                                const cases = patternInput_2[0];\n                                const matchValue_3 = toList_1(values);\n                                let pattern_matching_result_3, caseName, values_1, caseName_1, json;\n                                if (!isEmpty(matchValue_3)) {\n                                    if (head(matchValue_3)[1].tag === 4) {\n                                        if (isEmpty(tail_1(matchValue_3))) {\n                                            pattern_matching_result_3 = 0;\n                                            caseName = head(matchValue_3)[0];\n                                            values_1 = head(matchValue_3)[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 2;\n                                        }\n                                    }\n                                    else {\n                                        const activePatternResult4834 = Convert_$007CNonArray$007C_$007C(head(matchValue_3)[1]);\n                                        if (activePatternResult4834 != null) {\n                                            if (isEmpty(tail_1(matchValue_3))) {\n                                                pattern_matching_result_3 = 1;\n                                                caseName_1 = head(matchValue_3)[0];\n                                                json = activePatternResult4834;\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 2;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 2;\n                                        }\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_3 = 2;\n                                }\n                                switch (pattern_matching_result_3) {\n                                    case 0: {\n                                        const _arg1 = tryFind_1((case$) => (case$.CaseName === caseName), cases);\n                                        if (_arg1 != null) {\n                                            if ((foundCase = _arg1, (foundCase.CaseTypes.length === 1) && Convert_arrayLike(foundCase.CaseTypes[0]))) {\n                                                const foundCase_1 = _arg1;\n                                                return makeUnion(foundCase_1.Info, [Convert_fromJsonAs(new Json(4, values_1), foundCase_1.CaseTypes[0])]);\n                                            }\n                                            else {\n                                                let pattern_matching_result_4, foundCase_3;\n                                                if (_arg1 != null) {\n                                                    if ((foundCase_2 = _arg1, (foundCase_2.CaseTypes.length === 1) && Convert_optional(foundCase_2.CaseTypes[0]))) {\n                                                        pattern_matching_result_4 = 0;\n                                                        foundCase_3 = _arg1;\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        return makeUnion(foundCase_3.Info, [Convert_fromJsonAs(new Json(4, values_1), foundCase_3.CaseTypes[0])]);\n                                                    }\n                                                    case 1: {\n                                                        if (_arg1 != null) {\n                                                            const foundCase_4 = _arg1;\n                                                            if (((foundCase_4.CaseTypes.length === 1) && (!Convert_arrayLike(foundCase_4.CaseTypes[0]))) && (foundCase_4.CaseTypes.length !== length(values_1))) {\n                                                                const arg30_1 = length(values_1) | 0;\n                                                                const arg20_5 = foundCase_4.CaseTypes.length | 0;\n                                                                toFail(printf(\"Expected case \\u0027%s\\u0027 to have %d argument types but the JSON data only contained %d values\"))(foundCase_4.CaseName)(arg20_5)(arg30_1);\n                                                            }\n                                                            return makeUnion(foundCase_4.Info, map_2((tupledArg) => Convert_fromJsonAs(tupledArg[1], tupledArg[0]), zip(foundCase_4.CaseTypes, toArray(values_1))));\n                                                        }\n                                                        else {\n                                                            throw (new Error(\"Match failure\"));\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            const expectedCases = join(\", \", map_2((case$_1) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_1.CaseName), cases));\n                                            const arg20_4 = name_2(unionType);\n                                            return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName)(arg20_4)(expectedCases);\n                                        }\n                                    }\n                                    case 1: {\n                                        const _arg2 = tryFind_1((case$_2) => (case$_2.CaseName === caseName_1), cases);\n                                        let pattern_matching_result_5, caseInfo, caseName_2, caseType;\n                                        if (_arg2 != null) {\n                                            if ((testExpr = _arg2.CaseTypes, (!equalsWith((x, y) => equals(x, y), testExpr, null)) && (testExpr.length === 1))) {\n                                                pattern_matching_result_5 = 0;\n                                                caseInfo = _arg2.Info;\n                                                caseName_2 = _arg2.CaseName;\n                                                caseType = _arg2.CaseTypes[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_5 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_5 = 1;\n                                        }\n                                        switch (pattern_matching_result_5) {\n                                            case 0: {\n                                                return makeUnion(caseInfo, [((input_1) => ((typeInfo_1) => Convert_fromJsonAs(input_1, typeInfo_1)))(json)(caseType)]);\n                                            }\n                                            case 1: {\n                                                const expectedCases_1 = join(\", \", map_2((case$_3) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_3.CaseName), cases));\n                                                const arg20_7 = name_2(unionType);\n                                                return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_1)(arg20_7)(expectedCases_1);\n                                            }\n                                        }\n                                    }\n                                    case 2: {\n                                        if ((containsKey(\"tag\", values) && containsKey(\"fields\", values)) && (count(values) === 2)) {\n                                            const matchValue_4 = [tryFind(\"tag\", values), tryFind(\"fields\", values)];\n                                            let pattern_matching_result_6, caseIndex, fieldValues;\n                                            if (matchValue_4[0] != null) {\n                                                if (matchValue_4[0].tag === 0) {\n                                                    if (matchValue_4[1] != null) {\n                                                        if (matchValue_4[1].tag === 4) {\n                                                            pattern_matching_result_6 = 0;\n                                                            caseIndex = matchValue_4[0].fields[0];\n                                                            fieldValues = matchValue_4[1].fields[0];\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_6 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_6 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_6 = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result_6 = 1;\n                                            }\n                                            switch (pattern_matching_result_6) {\n                                                case 0: {\n                                                    const foundCase_5 = cases[~(~caseIndex)];\n                                                    return makeUnion(foundCase_5.Info, mapIndexed((index, value_46) => Convert_fromJsonAs(value_46, foundCase_5.CaseTypes[index]), toArray(fieldValues)));\n                                                }\n                                                case 1: {\n                                                    const arg20_8 = fullName(unionType);\n                                                    const arg10_10 = SimpleJson_toString(new Json(5, values));\n                                                    return toFail(printf(\"Could not deserialize JSON(%s) into type %s\"))(arg10_10)(arg20_8);\n                                                }\n                                            }\n                                        }\n                                        else if (Convert_unionOfRecords(typeInfo)) {\n                                            const foundDiscriminatorKey = tryFind_2((keyword) => containsKey(keyword, values), ofArray([\"__typename\", \"$typename\", \"$type\"]));\n                                            if (foundDiscriminatorKey != null) {\n                                                const discriminatorValueJson = find(foundDiscriminatorKey, values);\n                                                if (discriminatorValueJson.tag === 1) {\n                                                    const discriminatorValue = discriminatorValueJson.fields[0];\n                                                    const foundUnionCase = tryFind_3((case$_4) => (case$_4.CaseName.toUpperCase() === discriminatorValue.toUpperCase()), cases);\n                                                    if (foundUnionCase != null) {\n                                                        const case$_5 = foundUnionCase;\n                                                        return makeUnion(case$_5.Info, [Convert_fromJsonAs(new Json(5, values), case$_5.CaseTypes[0])]);\n                                                    }\n                                                    else {\n                                                        const arg10_12 = name_2(unionType);\n                                                        return toFail(printf(\"Union of records of type \\u0027%s\\u0027 does not have a matching case \\u0027%s\\u0027\"))(arg10_12)(discriminatorValue);\n                                                    }\n                                                }\n                                                else {\n                                                    const arg10_13 = name_2(unionType);\n                                                    return toFail(printf(\"Union of records of type \\u0027%s\\u0027 cannot be deserialized with the value of the discriminator key is not a string to match against a specific union case\"))(arg10_13);\n                                                }\n                                            }\n                                            else {\n                                                const arg10_11 = name_2(unionType);\n                                                return toFail(printf(\"Could not serialize the JSON object into the union of records of type %s because the JSON did not contain a known discriminator. Expected \\u0027__typename\\u0027, \\u0027$typeName\\u0027 or \\u0027$type\\u0027\"))(arg10_11);\n                                            }\n                                        }\n                                        else {\n                                            const unexpectedJson = JSON.stringify(matchValue_3);\n                                            const expectedType = JSON.stringify(cases);\n                                            return toFail(printf(\"Expected JSON:\\n%s\\nto match the type\\n%s\"))(unexpectedJson)(expectedType);\n                                        }\n                                    }\n                                }\n                            }\n                            case 38: {\n                                return void 0;\n                            }\n                            case 39: {\n                                return ((arg0) => some(arg0))(Convert_fromJsonAs(jsonValue_5, optionalTypeDelayed_5()));\n                            }\n                            case 40: {\n                                let pattern_matching_result_7, value_47, value_48, dict, caseName_4, getTypes_2;\n                                if (matchValue[0].tag === 1) {\n                                    if (matchValue[1].tag === 21) {\n                                        pattern_matching_result_7 = 0;\n                                        value_47 = matchValue[0].fields[0];\n                                    }\n                                    else if (matchValue[1].tag === 39) {\n                                        if (Convert_isQuoted(matchValue[0].fields[0])) {\n                                            pattern_matching_result_7 = 3;\n                                            caseName_4 = matchValue[0].fields[0];\n                                            getTypes_2 = matchValue[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_7 = 4;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else if (matchValue[0].tag === 0) {\n                                    if (matchValue[1].tag === 12) {\n                                        pattern_matching_result_7 = 1;\n                                        value_48 = matchValue[0].fields[0];\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else if (matchValue[0].tag === 5) {\n                                    if (matchValue[1].tag === 12) {\n                                        pattern_matching_result_7 = 2;\n                                        dict = matchValue[0].fields[0];\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_7 = 4;\n                                }\n                                switch (pattern_matching_result_7) {\n                                    case 0: {\n                                        return parse_6(value_47);\n                                    }\n                                    case 1: {\n                                        return ((value_49) => fromInteger(value_49, false, 2))(~(~value_48));\n                                    }\n                                    case 2: {\n                                        const get$ = (key) => tryFind(key, dict);\n                                        const _arg3 = choose((x_1) => x_1, ofArray([get$(\"low\"), get$(\"high\"), get$(\"unsigned\")]));\n                                        let pattern_matching_result_8, high, low;\n                                        if (!isEmpty(_arg3)) {\n                                            if (head(_arg3).tag === 0) {\n                                                if (!isEmpty(tail_1(_arg3))) {\n                                                    if (head(tail_1(_arg3)).tag === 0) {\n                                                        if (!isEmpty(tail_1(tail_1(_arg3)))) {\n                                                            if (head(tail_1(tail_1(_arg3))).tag === 2) {\n                                                                if (isEmpty(tail_1(tail_1(tail_1(_arg3))))) {\n                                                                    pattern_matching_result_8 = 0;\n                                                                    high = head(tail_1(_arg3)).fields[0];\n                                                                    low = head(_arg3).fields[0];\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_8 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_8 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_8 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_8 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_8 = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result_8 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_8 = 1;\n                                        }\n                                        switch (pattern_matching_result_8) {\n                                            case 0: {\n                                                return toInt64(concat([getBytesInt32(~(~low)), getBytesInt32(~(~high))], Uint8Array), 0);\n                                            }\n                                            case 1: {\n                                                return toFail(printf(\"Unable to construct int64 from object literal { low: int, high: int, unsigned: bool }\"));\n                                            }\n                                        }\n                                    }\n                                    case 3: {\n                                        const patternInput_3 = getTypes_2();\n                                        const caseTypes = patternInput_3[0];\n                                        const _arg4 = tryFind_1((case$_6) => (case$_6.CaseName === Convert_removeQuotes(caseName_4)), caseTypes);\n                                        if (_arg4 == null) {\n                                            const expectedCases_2 = join(\", \", map_2((case$_7) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_7.CaseName), caseTypes));\n                                            const arg20_11 = name_2(patternInput_3[1]);\n                                            return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_4)(arg20_11)(expectedCases_2);\n                                        }\n                                        else {\n                                            return makeUnion(_arg4.Info, []);\n                                        }\n                                    }\n                                    case 4: {\n                                        let pattern_matching_result_9, caseName_5, getTypes_3, getFields, serializedRecord, caseValue, getTypes_4, elementTypeDelayed, values_4, elementTypeDelayed_1, values_5, elementTypeDelayed_2, linkedList, elementTypeDelayed_3, values_6, elementTypeDelayed_4, values_7, array_9, tupleTypesDelayed, dict_1, getTypes_5, getTypes_6, tuples, getTypes_7, tuples_1, dict_2, getTypes_8, getType, items, getTypes_9, map, getType_1;\n                                        if (matchValue[0].tag === 1) {\n                                            if (matchValue[1].tag === 39) {\n                                                pattern_matching_result_9 = 0;\n                                                caseName_5 = matchValue[0].fields[0];\n                                                getTypes_3 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 38) {\n                                                pattern_matching_result_9 = 1;\n                                                getFields = matchValue[1].fields[0];\n                                                serializedRecord = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 23) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[0].tag === 4) {\n                                            if (matchValue[1].tag === 39) {\n                                                pattern_matching_result_9 = 2;\n                                                caseValue = matchValue[0].fields[0];\n                                                getTypes_4 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 29) {\n                                                pattern_matching_result_9 = 3;\n                                                elementTypeDelayed = matchValue[1].fields[0];\n                                                values_4 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 27) {\n                                                pattern_matching_result_9 = 4;\n                                                elementTypeDelayed_1 = matchValue[1].fields[0];\n                                                values_5 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 28) {\n                                                pattern_matching_result_9 = 6;\n                                                elementTypeDelayed_3 = matchValue[1].fields[0];\n                                                values_6 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 30) {\n                                                pattern_matching_result_9 = 7;\n                                                elementTypeDelayed_4 = matchValue[1].fields[0];\n                                                values_7 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 31) {\n                                                pattern_matching_result_9 = 8;\n                                                array_9 = matchValue[0].fields[0];\n                                                tupleTypesDelayed = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 32) {\n                                                pattern_matching_result_9 = 10;\n                                                getTypes_6 = matchValue[1].fields[0];\n                                                tuples = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 33) {\n                                                pattern_matching_result_9 = 11;\n                                                getTypes_7 = matchValue[1].fields[0];\n                                                tuples_1 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 35) {\n                                                pattern_matching_result_9 = 13;\n                                                getType = matchValue[1].fields[0];\n                                                items = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 23) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[0].tag === 5) {\n                                            if (matchValue[1].tag === 27) {\n                                                pattern_matching_result_9 = 5;\n                                                elementTypeDelayed_2 = matchValue[1].fields[0];\n                                                linkedList = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 38) {\n                                                pattern_matching_result_9 = 9;\n                                                dict_1 = matchValue[0].fields[0];\n                                                getTypes_5 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 33) {\n                                                pattern_matching_result_9 = 12;\n                                                dict_2 = matchValue[0].fields[0];\n                                                getTypes_8 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 32) {\n                                                pattern_matching_result_9 = 14;\n                                                getTypes_9 = matchValue[1].fields[0];\n                                                map = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 23) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[1].tag === 23) {\n                                            pattern_matching_result_9 = 15;\n                                            getType_1 = matchValue[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 16;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                const patternInput_4 = getTypes_3();\n                                                const caseTypes_1 = patternInput_4[0];\n                                                const _arg5 = tryFind_1((case$_8) => (case$_8.CaseName === caseName_5), caseTypes_1);\n                                                if (_arg5 == null) {\n                                                    const expectedCases_3 = join(\", \", map_2((case$_9) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_9.CaseName), caseTypes_1));\n                                                    const arg20_12 = name_2(patternInput_4[1]);\n                                                    return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_5)(arg20_12)(expectedCases_3);\n                                                }\n                                                else {\n                                                    return makeUnion(_arg5.Info, []);\n                                                }\n                                            }\n                                            case 1: {\n                                                input_mut = SimpleJson_parse(serializedRecord);\n                                                typeInfo_mut = typeInfo;\n                                                continue Convert_fromJsonAs;\n                                            }\n                                            case 2: {\n                                                const patternInput_5 = getTypes_4();\n                                                const cases_1 = patternInput_5[0];\n                                                let pattern_matching_result_10, caseName_6, caseName_8, values_3, otherwise_6;\n                                                if (!isEmpty(caseValue)) {\n                                                    if (head(caseValue).tag === 1) {\n                                                        if (isEmpty(tail_1(caseValue))) {\n                                                            pattern_matching_result_10 = 0;\n                                                            caseName_6 = head(caseValue).fields[0];\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_10 = 1;\n                                                            caseName_8 = head(caseValue).fields[0];\n                                                            values_3 = tail_1(caseValue);\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_10 = 2;\n                                                        otherwise_6 = caseValue;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_10 = 2;\n                                                    otherwise_6 = caseValue;\n                                                }\n                                                switch (pattern_matching_result_10) {\n                                                    case 0: {\n                                                        const _arg6 = tryFind_1((case$_10) => (case$_10.CaseName === caseName_6), cases_1);\n                                                        if (_arg6 == null) {\n                                                            const expectedCases_4 = join(\", \", map_2((case$_11) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_11.CaseName), cases_1));\n                                                            const arg20_13 = name_2(patternInput_5[1]);\n                                                            return toFail(printf(\"Case \\u0027%s\\u0027 was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_6)(arg20_13)(expectedCases_4);\n                                                        }\n                                                        else {\n                                                            const caseName_7 = _arg6.CaseName;\n                                                            const caseInfoTypes = _arg6.CaseTypes;\n                                                            return makeUnion(_arg6.Info, []);\n                                                        }\n                                                    }\n                                                    case 1: {\n                                                        const _arg7 = tryFind_1((case$_12) => (case$_12.CaseName === caseName_8), cases_1);\n                                                        if (_arg7 != null) {\n                                                            const types = _arg7.CaseTypes;\n                                                            const foundCaseName = _arg7.CaseName;\n                                                            const caseInfo_4 = _arg7.Info;\n                                                            if (types.length !== length(values_3)) {\n                                                                toFail(printf(\"The number of union case parameters for \\u0027%s\\u0027 is different\"))(foundCaseName);\n                                                            }\n                                                            return makeUnion(caseInfo_4, map_2((tupledArg_1) => Convert_fromJsonAs(tupledArg_1[1], tupledArg_1[0]), zip(types, toArray(values_3))));\n                                                        }\n                                                        else {\n                                                            const expectedCases_5 = join(\", \", map_2((_arg1_1) => _arg1_1.CaseName, cases_1));\n                                                            return toFail(printf(\"Case %s was not valid, expected one of [%s]\"))(caseName_8)(expectedCases_5);\n                                                        }\n                                                    }\n                                                    case 2: {\n                                                        const unexpectedJson_1 = JSON.stringify(otherwise_6);\n                                                        const expectedType_1 = JSON.stringify(cases_1);\n                                                        return toFail(printf(\"Expected JSON:\\n%s\\nto match the type\\n%s\"))(unexpectedJson_1)(expectedType_1);\n                                                    }\n                                                }\n                                            }\n                                            case 3: {\n                                                const elementType = elementTypeDelayed();\n                                                return toArray(map_3((value_53) => Convert_fromJsonAs(value_53, elementType), values_4));\n                                            }\n                                            case 4: {\n                                                const elementType_1 = elementTypeDelayed_1();\n                                                return map_3((value_55) => Convert_fromJsonAs(value_55, elementType_1), values_5);\n                                            }\n                                            case 5: {\n                                                const elementType_2 = elementTypeDelayed_2();\n                                                return map_3((value_57) => Convert_fromJsonAs(value_57, elementType_2), Convert_flattenFable3Lists(linkedList));\n                                            }\n                                            case 6: {\n                                                const elementType_3 = elementTypeDelayed_3();\n                                                return ofList(map_3((value_59) => Convert_fromJsonAs(value_59, elementType_3), values_6), {\n                                                    Compare: (x_2, y_1) => compare(x_2, y_1),\n                                                });\n                                            }\n                                            case 7: {\n                                                const elementType_4 = elementTypeDelayed_4();\n                                                return map_3((value_61) => Convert_fromJsonAs(value_61, elementType_4), values_7);\n                                            }\n                                            case 8: {\n                                                return map_2((tupledArg_2) => Convert_fromJsonAs(tupledArg_2[1], tupledArg_2[0]), zip(tupleTypesDelayed(), toArray(array_9)));\n                                            }\n                                            case 9: {\n                                                const patternInput_6 = getTypes_5();\n                                                const recordType = patternInput_6[1];\n                                                const fields = patternInput_6[0];\n                                                return makeRecord(recordType, (values_8 = toList_1(dict_1), map_2((_arg3_1) => {\n                                                    const fieldType = _arg3_1.FieldType;\n                                                    const fieldName = _arg3_1.FieldName;\n                                                    const _arg8 = tryFind_2((tupledArg_3) => (fieldName === tupledArg_3[0]), values_8);\n                                                    if (_arg8 == null) {\n                                                        if (fieldType.tag === 26) {\n                                                            return void 0;\n                                                        }\n                                                        else {\n                                                            let dictKeys;\n                                                            const arg10_27 = join(\", \", map_3((arg) => toText(printf(\"\\u0027%s\\u0027\"))(arg[0]), toList_1(dict_1)));\n                                                            dictKeys = toText(printf(\"[ %s ]\"))(arg10_27);\n                                                            let recordFields;\n                                                            const arg10_30 = join(\", \", map_2((_arg2_1) => {\n                                                                const name_1 = _arg2_1.FieldName;\n                                                                if (_arg2_1.FieldType.tag === 26) {\n                                                                    return toText(printf(\"optional(\\u0027%s\\u0027)\"))(name_1);\n                                                                }\n                                                                else {\n                                                                    return toText(printf(\"required(\\u0027%s\\u0027)\"))(name_1);\n                                                                }\n                                                            }, fields));\n                                                            recordFields = toText(printf(\"[ %s ]\"))(arg10_30);\n                                                            const arg30_6 = name_2(recordType);\n                                                            return toFail(printf(\"Could not find the required key \\u0027%s\\u0027 in the JSON object literal with keys %s to match with record type \\u0027%s\\u0027 that has fields %s\"))(fieldName)(dictKeys)(arg30_6)(recordFields);\n                                                        }\n                                                    }\n                                                    else {\n                                                        const key_2 = _arg8[0];\n                                                        return Convert_fromJsonAs(_arg8[1], fieldType);\n                                                    }\n                                                }, fields)));\n                                            }\n                                            case 10: {\n                                                const patternInput_7 = getTypes_6();\n                                                const keyType = patternInput_7[0];\n                                                const pairs = toList(delay(() => collect((keyValuePair) => {\n                                                    let a;\n                                                    return singleton_1(Convert_fromJsonAs(keyValuePair, new TypeInfo(31, (a = [keyType, patternInput_7[1]], () => a))));\n                                                }, tuples)));\n                                                switch (keyType.tag) {\n                                                    case 6:\n                                                    case 2:\n                                                    case 7: {\n                                                        return ofList_1(pairs);\n                                                    }\n                                                    default: {\n                                                        return ofList_1(pairs);\n                                                    }\n                                                }\n                                            }\n                                            case 11: {\n                                                const patternInput_8 = getTypes_7();\n                                                const keyType_1 = patternInput_8[0];\n                                                const pairs_1 = toList(delay(() => collect((keyValuePair_1) => singleton_1(Convert_fromJsonAs(keyValuePair_1, new TypeInfo(31, () => [keyType_1, patternInput_8[1]]))), tuples_1)));\n                                                const output = (keyType_1.tag === 39) ? (new Dictionary([], {\n                                                    Equals: (x_3, y_2) => equals(x_3, y_2),\n                                                    GetHashCode: (x_3) => safeHash(x_3),\n                                                })) : ((keyType_1.tag === 38) ? (new Dictionary([], {\n                                                    Equals: (x_4, y_3) => equals(x_4, y_3),\n                                                    GetHashCode: (x_4) => structuralHash(x_4),\n                                                })) : (new Dictionary([], {\n                                                    Equals: (x_5, y_4) => equals(x_5, y_4),\n                                                    GetHashCode: (x_5) => structuralHash(x_5),\n                                                })));\n                                                const enumerator = getEnumerator(pairs_1);\n                                                try {\n                                                    while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                                        addToDict(output, forLoopVar[0], forLoopVar[1]);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator.Dispose();\n                                                }\n                                                return output;\n                                            }\n                                            case 12: {\n                                                const patternInput_9 = getTypes_8();\n                                                const keyType_2 = patternInput_9[0];\n                                                const pairs_2 = map_3((tupledArg_4) => [Convert_fromJsonAs(new Json(1, tupledArg_4[0]), keyType_2), Convert_fromJsonAs(tupledArg_4[1], patternInput_9[1])], toList_1(dict_2));\n                                                const output_1 = (keyType_2.tag === 39) ? (new Dictionary([], {\n                                                    Equals: (x_6, y_5) => equals(x_6, y_5),\n                                                    GetHashCode: (x_6) => safeHash(x_6),\n                                                })) : ((keyType_2.tag === 38) ? (new Dictionary([], {\n                                                    Equals: (x_7, y_6) => equals(x_7, y_6),\n                                                    GetHashCode: (x_7) => structuralHash(x_7),\n                                                })) : (new Dictionary([], {\n                                                    Equals: (x_8, y_7) => equals(x_8, y_7),\n                                                    GetHashCode: (x_8) => structuralHash(x_8),\n                                                })));\n                                                const enumerator_1 = getEnumerator(pairs_2);\n                                                try {\n                                                    while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        const forLoopVar_1 = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                                        addToDict(output_1, forLoopVar_1[0], forLoopVar_1[1]);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator_1.Dispose();\n                                                }\n                                                return output_1;\n                                            }\n                                            case 13: {\n                                                const elemType_1 = getType();\n                                                const hashset = (elemType_1.tag === 39) ? (new HashSet([], {\n                                                    Equals: (x_9, y_8) => equals(x_9, y_8),\n                                                    GetHashCode: (x_9) => safeHash(x_9),\n                                                })) : ((elemType_1.tag === 38) ? (new HashSet([], {\n                                                    Equals: (x_10, y_9) => equals(x_10, y_9),\n                                                    GetHashCode: (x_10) => structuralHash(x_10),\n                                                })) : (new HashSet([], {\n                                                    Equals: (x_11, y_10) => equals(x_11, y_10),\n                                                    GetHashCode: (x_11) => structuralHash(x_11),\n                                                })));\n                                                const enumerator_2 = getEnumerator(items);\n                                                try {\n                                                    while (enumerator_2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        addToSet(Convert_fromJsonAs(enumerator_2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), elemType_1), hashset);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator_2.Dispose();\n                                                }\n                                                return hashset;\n                                            }\n                                            case 14: {\n                                                const patternInput_10 = getTypes_9();\n                                                const valueType_5 = patternInput_10[1];\n                                                const keyType_3 = patternInput_10[0];\n                                                const matchValue_5 = [tryFind(\"comparer\", map), tryFind(\"tree\", map)];\n                                                let pattern_matching_result_11, comparer_1, tree_1;\n                                                if (matchValue_5[0] != null) {\n                                                    if (matchValue_5[0].tag === 5) {\n                                                        if (matchValue_5[1] != null) {\n                                                            if (matchValue_5[1].tag === 4) {\n                                                                if ((tree = matchValue_5[1].fields[0], isEmpty_1(matchValue_5[0].fields[0]))) {\n                                                                    pattern_matching_result_11 = 0;\n                                                                    comparer_1 = matchValue_5[0].fields[0];\n                                                                    tree_1 = matchValue_5[1].fields[0];\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_11 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_11 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_11 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_11 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_11 = 1;\n                                                }\n                                                switch (pattern_matching_result_11) {\n                                                    case 0: {\n                                                        const matchValue_6 = Convert_generateMap(new Json(4, tree_1));\n                                                        if (matchValue_6 == null) {\n                                                            const inputJson = SimpleJson_toString(new Json(4, tree_1));\n                                                            return toFail(printf(\"Could not generate map from JSON\\n %s\"))(inputJson);\n                                                        }\n                                                        else {\n                                                            const pairs_3 = map_3((tupledArg_5) => {\n                                                                const key_6 = tupledArg_5[0];\n                                                                return [(!Convert_isQuoted(key_6)) ? Convert_fromJsonAs(new Json(1, key_6), keyType_3) : Convert_fromJsonAs(SimpleJson_parseNative(key_6), keyType_3), Convert_fromJsonAs(tupledArg_5[1], valueType_5)];\n                                                            }, Convert_flattenMap(matchValue_6));\n                                                            switch (keyType_3.tag) {\n                                                                case 6:\n                                                                case 2:\n                                                                case 7: {\n                                                                    return ofList_1(pairs_3);\n                                                                }\n                                                                default: {\n                                                                    return ofList_1(pairs_3);\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    case 1: {\n                                                        let pattern_matching_result_12, comparer_3, tree_3;\n                                                        if (matchValue_5[0] != null) {\n                                                            if (matchValue_5[0].tag === 5) {\n                                                                if (matchValue_5[1] != null) {\n                                                                    if (matchValue_5[1].tag === 5) {\n                                                                        if ((tree_2 = matchValue_5[1].fields[0], isEmpty_1(matchValue_5[0].fields[0]))) {\n                                                                            pattern_matching_result_12 = 0;\n                                                                            comparer_3 = matchValue_5[0].fields[0];\n                                                                            tree_3 = matchValue_5[1].fields[0];\n                                                                        }\n                                                                        else {\n                                                                            pattern_matching_result_12 = 1;\n                                                                        }\n                                                                    }\n                                                                    else {\n                                                                        pattern_matching_result_12 = 1;\n                                                                    }\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_12 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_12 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_12 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_12) {\n                                                            case 0: {\n                                                                input_mut = (new Json(5, ofList_1(Convert_flatteFable3Map(tree_3))));\n                                                                typeInfo_mut = typeInfo;\n                                                                continue Convert_fromJsonAs;\n                                                            }\n                                                            case 1: {\n                                                                const pairs_4 = map_3((tupledArg_6) => {\n                                                                    const key_7 = tupledArg_6[0];\n                                                                    return [(!Convert_isQuoted(key_7)) ? ((isPrimitive(keyType_3) ? true : enumUnion(keyType_3)) ? Convert_fromJsonAs(new Json(1, key_7), keyType_3) : Convert_fromJsonAs(SimpleJson_parseNative(key_7), keyType_3)) : Convert_fromJsonAs(SimpleJson_parseNative(key_7), keyType_3), Convert_fromJsonAs(tupledArg_6[1], valueType_5)];\n                                                                }, toList_1(map));\n                                                                switch (keyType_3.tag) {\n                                                                    case 6:\n                                                                    case 2:\n                                                                    case 7: {\n                                                                        return ofList_1(pairs_4);\n                                                                    }\n                                                                    default: {\n                                                                        return ofList_1(pairs_4);\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            case 15: {\n                                                const arg20_17 = fullName(getType_1());\n                                                const arg10_33 = SimpleJson_toString(input);\n                                                return toFail(printf(\"Cannot convert %s to %s\"))(arg10_33)(arg20_17);\n                                            }\n                                            case 16: {\n                                                const arg20_18 = JSON.stringify(typeInfo);\n                                                const arg10_34 = SimpleJson_toString(input);\n                                                return toFail(printf(\"Cannot convert %s to %s\"))(arg10_34)(arg20_18);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        break;\n    }\n}\n\nexport function Convert_fromJson(json, typeInfo) {\n    return Convert_fromJsonAs(json, typeInfo);\n}\n\nexport const Convert_quoteText = quote;\n\nexport function Convert_serialize(value_mut, typeInfo_mut) {\n    let copyOfStruct, copyOfStruct_1, copyOfStruct_2, copyOfStruct_3, copyOfStruct_4;\n    Convert_serialize:\n    while (true) {\n        const value = value_mut, typeInfo = typeInfo_mut;\n        switch (typeInfo.tag) {\n            case 2: {\n                const content = value;\n                if (content == null) {\n                    return \"null\";\n                }\n                else {\n                    return Convert_quoteText(content);\n                }\n            }\n            case 0: {\n                return \"null\";\n            }\n            case 9:\n            case 8: {\n                if (Number.isNaN(value)) {\n                    return Convert_quoteText(\"NaN\");\n                }\n                else {\n                    return value.toString();\n                }\n            }\n            case 1: {\n                return Convert_quoteText(value);\n            }\n            case 13:\n            case 14:\n            case 3:\n            case 4:\n            case 11:\n            case 37:\n            case 20:\n            case 6: {\n                return int32ToString(value);\n            }\n            case 5:\n            case 12: {\n                return Convert_betweenQuotes(toString(value));\n            }\n            case 19: {\n                return Convert_betweenQuotes(toString_1(value));\n            }\n            case 10: {\n                return Convert_betweenQuotes(toString_2(value));\n            }\n            case 7: {\n                if (value) {\n                    return \"true\";\n                }\n                else {\n                    return \"false\";\n                }\n            }\n            case 21: {\n                return Convert_betweenQuotes((copyOfStruct = value, copyOfStruct));\n            }\n            case 15: {\n                return Convert_betweenQuotes((copyOfStruct_1 = value, toString_3(copyOfStruct_1, \"O\")));\n            }\n            case 16: {\n                return Convert_betweenQuotes((copyOfStruct_2 = value, toString_3(copyOfStruct_2, \"O\")));\n            }\n            case 17: {\n                return int32ToString((copyOfStruct_3 = value, dayNumber(copyOfStruct_3)));\n            }\n            case 18: {\n                return Convert_betweenQuotes(toString((copyOfStruct_4 = value, ticks(copyOfStruct_4))));\n            }\n            case 38: {\n                return (\"{\" + join(\", \", map_2((field) => {\n                    const arg20 = Convert_serialize(getRecordField(value, field.PropertyInfo), field.FieldType);\n                    return toText(printf(\"\\\"%s\\\": %s\"))(field.FieldName)(arg20);\n                }, typeInfo.fields[0]()[0]))) + \"}\";\n            }\n            case 34: {\n                const elementType = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element) => Convert_serialize(element, elementType), value))) + \"]\";\n            }\n            case 35: {\n                const elementType_1 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element_1) => Convert_serialize(element_1, elementType_1), value))) + \"]\";\n            }\n            case 28: {\n                const elementType_2 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element_2) => Convert_serialize(element_2, elementType_2), value))) + \"]\";\n            }\n            case 29: {\n                const elementType_3 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_2((element_3) => Convert_serialize(element_3, elementType_3), value))) + \"]\";\n            }\n            case 27: {\n                const elementType_4 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_3((element_4) => Convert_serialize(element_4, elementType_4), value))) + \"]\";\n            }\n            case 30: {\n                const elementType_5 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_2((element_5) => Convert_serialize(element_5, elementType_5), toArray_1(value)))) + \"]\";\n            }\n            case 26: {\n                const matchValue = value;\n                if (matchValue != null) {\n                    value_mut = value_89(matchValue);\n                    typeInfo_mut = typeInfo.fields[0]();\n                    continue Convert_serialize;\n                }\n                else {\n                    return \"null\";\n                }\n            }\n            case 39: {\n                const patternInput_1 = typeInfo.fields[0]();\n                const patternInput_2 = getUnionFields(value, patternInput_1[1]);\n                const usedCase = patternInput_2[0];\n                const fields = patternInput_2[1];\n                const caseTypes = patternInput_1[0].find((case$) => (case$.CaseName === name_2(usedCase))).CaseTypes;\n                if (enumUnion(typeInfo) ? true : (caseTypes.length === 0)) {\n                    return Convert_betweenQuotes(name_2(usedCase));\n                }\n                else if (caseTypes.length === 1) {\n                    return (((\"{\" + Convert_betweenQuotes(name_2(usedCase))) + \": \") + Convert_serialize(fields[0], caseTypes[0])) + \"}\";\n                }\n                else {\n                    const serializedFields_1 = join(\", \", mapIndexed((index, caseType) => Convert_serialize(fields[index], caseType), caseTypes));\n                    return ((((\"{\" + Convert_betweenQuotes(name_2(usedCase))) + \": \") + \"[\") + serializedFields_1) + \"] }\";\n                }\n            }\n            case 32: {\n                const patternInput_3 = typeInfo.fields[0]();\n                const keyType = patternInput_3[0];\n                const serializedValues = join(\", \", map_2((tupledArg) => {\n                    const serializedKey = Convert_serialize(tupledArg[0], keyType);\n                    const serializedValue = Convert_serialize(tupledArg[1], patternInput_3[1]);\n                    if (isPrimitive(keyType) ? true : enumUnion(keyType)) {\n                        if (!Convert_isQuoted(serializedKey)) {\n                            return (Convert_quoteText(serializedKey) + \": \") + serializedValue;\n                        }\n                        else {\n                            return (serializedKey + \": \") + serializedValue;\n                        }\n                    }\n                    else {\n                        return (((\"[\" + serializedKey) + \", \") + serializedValue) + \"]\";\n                    }\n                }, toArray_2(value)));\n                if (isPrimitive(keyType) ? true : enumUnion(keyType)) {\n                    return (\"{\" + serializedValues) + \"}\";\n                }\n                else {\n                    return (\"[\" + serializedValues) + \"]\";\n                }\n            }\n            case 33: {\n                const patternInput_4 = typeInfo.fields[0]();\n                const keyType_1 = patternInput_4[0];\n                const serializedValues_1 = join(\", \", map_4((pair) => {\n                    const patternInput_5 = [pair[0], pair[1]];\n                    const serializedKey_1 = Convert_serialize(patternInput_5[0], keyType_1);\n                    const serializedValue_1 = Convert_serialize(patternInput_5[1], patternInput_4[1]);\n                    if (isPrimitive(keyType_1) ? true : enumUnion(keyType_1)) {\n                        if (!Convert_isQuoted(serializedKey_1)) {\n                            return (Convert_betweenQuotes(serializedKey_1) + \": \") + serializedValue_1;\n                        }\n                        else {\n                            return (serializedKey_1 + \": \") + serializedValue_1;\n                        }\n                    }\n                    else {\n                        return (((\"[\" + serializedKey_1) + \", \") + serializedValue_1) + \"]\";\n                    }\n                }, value));\n                if (isPrimitive(keyType_1) ? true : enumUnion(keyType_1)) {\n                    return (\"{\" + serializedValues_1) + \"}\";\n                }\n                else {\n                    return (\"[\" + serializedValues_1) + \"]\";\n                }\n            }\n            case 31: {\n                const tupleTypes = typeInfo.fields[0]();\n                if (tupleTypes.length === 1) {\n                    return (\"[\" + Convert_serialize(value, tupleTypes[0])) + \"]\";\n                }\n                else {\n                    return (\"[\" + join(\", \", mapIndexed((index_1, element_6) => Convert_serialize(element_6, tupleTypes[index_1]), value))) + \"]\";\n                }\n            }\n            case 22: {\n                return SimpleJson_stringify(value);\n            }\n            case 23: {\n                return SimpleJson_stringify(value);\n            }\n            default: {\n                return \"null\";\n            }\n        }\n        break;\n    }\n}\n\nexport function Fable_SimpleJson_Json__Json_stringify_Static_4E60E31B(value) {\n    if (Convert_isUsingFable3) {\n        console.warn(\"It looks like you using the function Json.stringify from Fable.SimpleJson while also using Fable 3 (nagareyama). Please use Json.serialize instead which supports both Fable 3 and Fable 2.x\");\n    }\n    return SimpleJson_stringify(value);\n}\n\n","export default function quote(inputText) {\r\n    var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\r\n    var meta = {\r\n        '\\b': '\\\\b',\r\n        '\\t': '\\\\t',\r\n        '\\n': '\\\\n',\r\n        '\\f': '\\\\f',\r\n        '\\r': '\\\\r',\r\n        '\"': '\\\\\"',\r\n        '\\\\': '\\\\\\\\'\r\n    }\r\n\r\n    escapable.lastIndex = 0;\r\n    return escapable.test(inputText) ?\r\n        '\"' + inputText.replace(escapable, function (a) {\r\n            var c = meta[a];\r\n            return typeof c === 'string' ? c :\r\n                '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\r\n        }) + '\"' :\r\n        '\"' + inputText + '\"';\r\n}","import { DateTime, getTicks, dayOfYear as Date_dayOfYear, year as Date_year, month as Date_month, day as Date_day, daysInMonth as Date_daysInMonth } from \"./Date.js\";\nimport { padWithZeros } from \"./Util.js\";\nimport { toInt, fromNumber, op_Division as Long_op_Division, op_Multiply as Long_op_Multiply, ticksToUnixEpochMilliseconds } from \"./Long.js\";\nexport function fromUnixMilliseconds(value) {\n    return DateTime(value, 1 /* UTC */);\n}\nexport function create(year, month, day) {\n    const d = fromUnixMilliseconds(Date.UTC(year, month - 1, day));\n    if (year <= 99) {\n        d.setUTCFullYear(year);\n    }\n    return d;\n}\nexport function maxValue() {\n    // This is \"9999-12-31T00:00:00.000Z\"\n    return fromUnixMilliseconds(253402214400000);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\"\n    return fromUnixMilliseconds(-62135596800000);\n}\nexport function dayNumber(d) {\n    return toInt(Long_op_Division(getTicks(d), 864000000000));\n}\nexport function fromDayNumber(dayNumber) {\n    const ticks = Long_op_Multiply(fromNumber(864000000000), dayNumber);\n    return fromUnixMilliseconds(ticksToUnixEpochMilliseconds(ticks));\n}\nexport function fromDateTime(d) {\n    return create(Date_year(d), Date_month(d), Date_day(d));\n}\nexport function day(d) {\n    return d.getUTCDate();\n}\nexport function month(d) {\n    return d.getUTCMonth() + 1;\n}\nexport function year(d) {\n    return d.getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.getUTCDay();\n}\nexport function dayOfYear(d) {\n    return Date_dayOfYear(d);\n}\nexport function toDateTime(d, time, kind = 0 /* Unspecified */) {\n    return DateTime(d.getTime() + time + (kind !== 1 /* UTC */ ? d.getTimezoneOffset() : 0) * 60000, kind);\n}\nexport function toString(d, format = \"d\", _provider) {\n    if ([\"d\", \"o\", \"O\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const y = padWithZeros(year(d), 4);\n    const m = padWithZeros(month(d), 2);\n    const dd = padWithZeros(day(d), 2);\n    return format === \"d\" ? `${m}/${dd}/${y}` : `${y}-${m}-${dd}`;\n}\nexport function parse(str) {\n    function fail() {\n        throw new Error(`String '${str}' was not recognized as a valid DateOnly.`);\n    }\n    // Allowed separators: . , / -\n    // TODO whitespace alone as the separator\n    //\n    // Whitespace around separators\n    //\n    // Allowed format types:\n    // yyyy/mm/dd\n    // mm/dd/yyyy\n    // mm/dd\n    // mm/yyyy\n    // yyyy/mm\n    const r = /^\\s*(\\d{1,4})(?:\\s*[.,-\\/]\\s*(\\d{1,2}))?\\s*[.,-\\/]\\s*(\\d{1,4})\\s*$/.exec(str);\n    if (r != null) {\n        let y = 0;\n        let m = 0;\n        let d = 1;\n        if (r[2] == null) {\n            if (r[1].length < 3) {\n                if (r[3].length < 3) {\n                    // 12/30 = December 30, {CurrentYear}\n                    y = new Date().getFullYear();\n                    m = +r[1];\n                    d = +r[3];\n                }\n                else {\n                    // 12/2000 = December 1, 2000\n                    m = +r[1];\n                    y = +r[3];\n                }\n            }\n            else {\n                if (r[3].length > 2)\n                    fail();\n                // 2000/12 = December 1, 2000\n                y = +r[1];\n                m = +r[3];\n            }\n        }\n        else {\n            // 2000/1/30 or 1/30/2000\n            const yearFirst = r[1].length > 2;\n            const yTmp = r[yearFirst ? 1 : 3];\n            y = +yTmp;\n            // year 0-29 is 2000-2029, 30-99 is 1930-1999\n            if (yTmp.length < 3)\n                y += y >= 30 ? 1900 : 2000;\n            m = +r[yearFirst ? 2 : 1];\n            d = +r[yearFirst ? 3 : 2];\n        }\n        if (y > 0 && m > 0 && m < 13 && d > 0 && d <= Date_daysInMonth(y, m))\n            return create(y, m, d);\n    }\n    return fail();\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n","import { Union } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { int32_type, obj_type, array_type, anonRecord_type, string_type, bool_type, class_type, union_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Convert_serialize } from \"../../fable_modules/Fable.SimpleJson.3.22.0/Json.Converter.fs.js\";\nimport { map } from \"../../fable_modules/fable-library.3.6.3/Array.js\";\nimport { createTypeInfo } from \"../../fable_modules/Fable.SimpleJson.3.22.0/TypeInfo.Converter.fs.js\";\nimport { startAsPromise } from \"../../fable_modules/fable-library.3.6.3/Async.js\";\nimport { singleton } from \"../../fable_modules/fable-library.3.6.3/AsyncBuilder.js\";\nimport { Headers_authorization, Headers_contentType, Http_headers, Http_request, Http_method, Http_content, Http_send } from \"../../fable_modules/Fable.SimpleHttp.3.0.0/Http.fs.js\";\nimport { HttpMethod, BodyContent } from \"../../fable_modules/Fable.SimpleHttp.3.0.0/Types.fs.js\";\nimport { printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { ofArray } from \"../../fable_modules/fable-library.3.6.3/List.js\";\n\nclass Operation extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"CreateOrder\", \"CancelOrder\", \"CloseOrder\", \"AddSignatory\", \"AddSignatories\"];\n    }\n    toString() {\n        const x = this;\n        switch (x.tag) {\n            case 1: {\n                return \"cancelOrder\";\n            }\n            case 2: {\n                return \"closeOrder\";\n            }\n            case 3: {\n                return \"addSignatory\";\n            }\n            case 4: {\n                return \"addSignatories\";\n            }\n            default: {\n                return \"createOrder\";\n            }\n        }\n    }\n}\n\nfunction Operation$reflection() {\n    return union_type(\"Signatures.Implementation.Operation\", [], Operation, () => [[], [], [], [], []]);\n}\n\nexport class Client {\n    constructor(apiRoot, token) {\n        this.apiRoot = apiRoot;\n        this.token = token;\n    }\n}\n\nexport function Client$reflection() {\n    return class_type(\"Signatures.Implementation.Client\", void 0, Client);\n}\n\nexport function Client_$ctor_Z384F8060(apiRoot, token) {\n    return new Client(apiRoot, token);\n}\n\nexport function Client__CreateSignatureOrder_738863A5(__, title, documents) {\n    return Client__post(__, new Operation(0), Convert_serialize({\n        disableVerifyEvidenceProvider: false,\n        documents: map((doc) => {\n            let matchValue;\n            return {\n                Content: doc.Content,\n                Reference: (matchValue = doc.Reference, (matchValue != null) ? matchValue : null),\n                Title: doc.Title,\n            };\n        }, documents),\n        evidenceProviders: null,\n        fixDocumentFormattingErrors: true,\n        maxSignatories: 14,\n        signatories: null,\n        signatoryUIRedirectUri: null,\n        title: title,\n        webhookUrl: null,\n    }, createTypeInfo(anonRecord_type([\"disableVerifyEvidenceProvider\", bool_type], [\"documents\", array_type(anonRecord_type([\"Content\", string_type], [\"Reference\", string_type], [\"Title\", string_type]))], [\"evidenceProviders\", obj_type], [\"fixDocumentFormattingErrors\", bool_type], [\"maxSignatories\", int32_type], [\"signatories\", obj_type], [\"signatoryUIRedirectUri\", obj_type], [\"title\", string_type], [\"webhookUrl\", obj_type]))));\n}\n\nexport function Client__AddSignatory_Z384F8060(__, orderId, userRef) {\n    return Client__post(__, new Operation(3), Convert_serialize({\n        Signatory: {\n            documents: null,\n            evidenceValidation: null,\n            reference: userRef,\n        },\n        SignatureOrderId: orderId,\n    }, createTypeInfo(anonRecord_type([\"Signatory\", anonRecord_type([\"documents\", obj_type], [\"evidenceValidation\", obj_type], [\"reference\", string_type])], [\"SignatureOrderId\", string_type]))));\n}\n\nexport function Client__CancelSignatureOrder_Z721C83C5(__, orderId) {\n    return Client__post(__, new Operation(1), Convert_serialize(orderId, createTypeInfo(string_type)));\n}\n\nfunction Client__post(this$, operation, json) {\n    return startAsPromise(singleton.Delay(() => {\n        let req_1;\n        return singleton.Bind(Http_send(Http_content(new BodyContent(1, json), (req_1 = Http_method(new HttpMethod(1), Http_request(toText(printf(\"%s%A\"))(this$.apiRoot)(operation))), Http_headers(ofArray([Headers_contentType(\"application/json\"), Headers_authorization(toText(printf(\"Bearer %s\"))(this$.token))]), req_1)))), (_arg1) => {\n            const response = _arg1;\n            return singleton.Return([response.statusCode, response.responseText]);\n        });\n    }));\n}\n\n","import { Record } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { record_type, lambda_type, class_type, int32_type, tuple_type, array_type, string_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { DocumentInfo$reflection } from \"./Types.js\";\nimport { Client__CancelSignatureOrder_Z721C83C5, Client__AddSignatory_Z384F8060, Client__CreateSignatureOrder_738863A5, Client_$ctor_Z384F8060 } from \"./Implementation.js\";\n\nexport class IClient extends Record {\n    constructor(createSignatureOrder, addSignatory, cancelSignatureOrder) {\n        super();\n        this.createSignatureOrder = createSignatureOrder;\n        this.addSignatory = addSignatory;\n        this.cancelSignatureOrder = cancelSignatureOrder;\n    }\n}\n\nexport function IClient$reflection() {\n    return record_type(\"Signatures.Client.IClient\", [], IClient, () => [[\"createSignatureOrder\", lambda_type(tuple_type(string_type, array_type(DocumentInfo$reflection())), class_type(\"Fable.Core.JS.Promise`1\", [tuple_type(int32_type, string_type)]))], [\"addSignatory\", lambda_type(tuple_type(string_type, string_type), class_type(\"Fable.Core.JS.Promise`1\", [tuple_type(int32_type, string_type)]))], [\"cancelSignatureOrder\", lambda_type(string_type, class_type(\"Fable.Core.JS.Promise`1\", [tuple_type(int32_type, string_type)]))]]);\n}\n\nexport function Client(apiRoot, token) {\n    const client = Client_$ctor_Z384F8060(apiRoot, token);\n    return new IClient((tupledArg) => Client__CreateSignatureOrder_738863A5(client, tupledArg[0], tupledArg[1]), (tupledArg_1) => Client__AddSignatory_Z384F8060(client, tupledArg_1[0], tupledArg_1[1]), (arg00_2) => Client__CancelSignatureOrder_Z721C83C5(client, arg00_2));\n}\n\n","import { Result_MapError, Result_Map, FSharpResult$2 } from \"../fable-library.3.6.3/Choice.js\";\nimport { class_type } from \"../fable-library.3.6.3/Reflection.js\";\nimport { getEnumerator } from \"../fable-library.3.6.3/Util.js\";\n\nexport function tap(fn, a) {\n    return a.then((x) => {\n        fn(x);\n        return x;\n    });\n}\n\nexport function result(a) {\n    return a.then((arg0) => (new FSharpResult$2(0, arg0))).catch((arg0_1) => (new FSharpResult$2(1, arg0_1)));\n}\n\nexport function mapResult(fn, a) {\n    return a.then((result_1) => Result_Map(fn, result_1));\n}\n\nexport function bindResult(fn, a) {\n    return a.then((a_1) => {\n        if (a_1.tag === 1) {\n            return Promise.resolve(new FSharpResult$2(1, a_1.fields[0]));\n        }\n        else {\n            const pr = fn(a_1.fields[0]);\n            return pr.then((arg0) => (new FSharpResult$2(0, arg0)));\n        }\n    });\n}\n\nexport function mapResultError(fn, a) {\n    return a.then((result_1) => Result_MapError(fn, result_1));\n}\n\nexport class PromiseBuilder {\n    constructor() {\n    }\n}\n\nexport function PromiseBuilder$reflection() {\n    return class_type(\"Promise.PromiseBuilder\", void 0, PromiseBuilder);\n}\n\nexport function PromiseBuilder_$ctor() {\n    return new PromiseBuilder();\n}\n\nexport function PromiseBuilder__For_1565554B(_, seq, body) {\n    let pr;\n    let p = Promise.resolve(undefined);\n    const enumerator = getEnumerator(seq);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const a = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            p = ((pr = p, pr.then(() => body(a))));\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return p;\n}\n\nexport function PromiseBuilder__While_2044D34(this$, guard, p) {\n    if (guard()) {\n        return p.then(() => PromiseBuilder__While_2044D34(this$, guard, p));\n    }\n    else {\n        return Promise.resolve(undefined);\n    }\n}\n\nexport function PromiseBuilder__TryFinally_7D49A2FD(_, p, compensation) {\n    return p.then((x) => {\n        compensation();\n        return x;\n    }).catch((er) => {\n        compensation();\n        throw er;\n    });\n}\n\nexport function PromiseBuilder__Delay_62FBFDE1(_, generator) {\n    return {\n        then: (onSuccess, onError) => {\n            try {\n                return generator().then(onSuccess, onError);\n            }\n            catch (er) {\n                if (onError == null) {\n                    return Promise.reject(er);\n                }\n                else {\n                    try {\n                        const a = onError(er);\n                        return Promise.resolve(a);\n                    }\n                    catch (er_1) {\n                        return Promise.reject(er_1);\n                    }\n                }\n            }\n        },\n        catch: (onError_1) => {\n            try {\n                return generator().catch(onError_1);\n            }\n            catch (er_2) {\n                try {\n                    const a_1 = onError_1(er_2);\n                    return Promise.resolve(a_1);\n                }\n                catch (er_3) {\n                    return Promise.reject(er_3);\n                }\n            }\n        },\n    };\n}\n\nexport function PromiseBuilder__Run_212F1D4B(_, p) {\n    return p.then((x) => x);\n}\n\nexport function PromiseBuilder__Using_74F7E79D(this$, resource, binder) {\n    return PromiseBuilder__TryFinally_7D49A2FD(this$, binder(resource), () => {\n        let copyOfStruct = resource;\n        copyOfStruct.Dispose();\n    });\n}\n\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","import { Record } from \"../fable_modules/fable-library.3.6.3/Types.js\";\nimport { record_type, int32_type, string_type } from \"../fable_modules/fable-library.3.6.3/Reflection.js\";\n\nexport class ErrorResponse extends Record {\n    constructor(Error$, StatusCode) {\n        super();\n        this.Error = Error$;\n        this.StatusCode = (StatusCode | 0);\n    }\n}\n\nexport function ErrorResponse$reflection() {\n    return record_type(\"Signatures.Signatures.ErrorResponse\", [], ErrorResponse, () => [[\"Error\", string_type], [\"StatusCode\", int32_type]]);\n}\n\n","import { Record } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { record_type, option_type, string_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\n\nexport class DocumentInfo extends Record {\n    constructor(Title, Content, Reference) {\n        super();\n        this.Title = Title;\n        this.Content = Content;\n        this.Reference = Reference;\n    }\n}\n\nexport function DocumentInfo$reflection() {\n    return record_type(\"Signatures.Types.DocumentInfo\", [], DocumentInfo, () => [[\"Title\", string_type], [\"Content\", string_type], [\"Reference\", option_type(string_type)]]);\n}\n\n","import { class_type } from \"../../fable_modules/fable-library.3.6.3/Reflection.js\";\nimport { Interop_reactApi } from \"../../fable_modules/Feliz.1.57.0/Interop.fs.js\";\nimport { Types_View, Types_View__get_IconName } from \"./Elements.js\";\nimport { toBase64String, replace, toConsole, toConsoleError, printf, toText } from \"../../fable_modules/fable-library.3.6.3/String.js\";\nimport { head, sumBy, empty, cons, find, filter, ofArray, singleton } from \"../../fable_modules/fable-library.3.6.3/List.js\";\nimport { createElement } from \"react\";\nimport { createObj } from \"../../fable_modules/fable-library.3.6.3/Util.js\";\nimport { Helpers_combineClasses } from \"../../fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { toString } from \"../../fable_modules/fable-library.3.6.3/Types.js\";\nimport { Components_Splash, Components_IdCard_Z34C1F15A } from \"./Components.js\";\nimport { Message_List_3D36A079 } from \"./Message.js\";\nimport { Account_Transactions_Z2F12D0CA, Account_Box_130DA4ED } from \"./Account.js\";\nimport { awaitPromise, startImmediate } from \"../../fable_modules/fable-library.3.6.3/Async.js\";\nimport { useFeliz_React__React_useState_Static_1505 } from \"../../fable_modules/Feliz.1.57.0/React.fs.js\";\nimport { fetch$ } from \"../Data/Messages.js\";\nimport { fetch$ as fetch$_1 } from \"../Data/Documents.js\";\nimport { Navigation_SidePanel_AB71DB6, Navigation_Topbar_700867CD } from \"./Navigation.js\";\nimport { isAuthenticated, logIn, hasRequestedAuthentication, logOut } from \"../../Authentication/Identity.js\";\nimport { map } from \"../../fable_modules/fable-library.3.6.3/Option.js\";\nimport { generate } from \"../Data/Statements.js\";\nimport { Message, MessageType, User } from \"../Models.js\";\nimport { singleton as singleton_1 } from \"../../fable_modules/fable-library.3.6.3/AsyncBuilder.js\";\nimport { Client } from \"../../Signatures/Npm/Client.js\";\nimport { PromiseBuilder__Delay_62FBFDE1, PromiseBuilder__Run_212F1D4B } from \"../../fable_modules/Fable.Promise.3.1.3/Promise.fs.js\";\nimport { promise } from \"../../fable_modules/Fable.Promise.3.1.3/PromiseImpl.fs.js\";\nimport { FSharpResult$2 } from \"../../fable_modules/fable-library.3.6.3/Choice.js\";\nimport { ErrorResponse } from \"../../Signatures/Signatures.js\";\nimport { DocumentInfo } from \"../../Signatures/Npm/Types.js\";\nimport { get_Unicode } from \"../../fable_modules/fable-library.3.6.3/Encoding.js\";\nimport { getTicks, now } from \"../../fable_modules/fable-library.3.6.3/Date.js\";\nimport { toString as toString_1 } from \"../../fable_modules/fable-library.3.6.3/Long.js\";\n\nexport class Page {\n    constructor() {\n    }\n}\n\nexport function Page$reflection() {\n    return class_type(\"App.Components.Page\", void 0, Page);\n}\n\nexport function Page_$ctor() {\n    return new Page();\n}\n\n(() => {\n    Page.accordions = [];\n})();\n\nexport function Page_Overview_2B9534(page_Overview_2B9534InputProps) {\n    const setMessages = page_Overview_2B9534InputProps.setMessages;\n    const documents = page_Overview_2B9534InputProps.documents;\n    const messages = page_Overview_2B9534InputProps.messages;\n    const setView = page_Overview_2B9534InputProps.setView;\n    const activeView = page_Overview_2B9534InputProps.activeView;\n    const user = page_Overview_2B9534InputProps.user;\n    const placeholderContent = (v) => {\n        let elms_3, elms_1, elms, props, arg10, elms_2, props_4;\n        const props_8 = ofArray([[\"style\", {\n            boxShadow: \"none\",\n            backgroundColor: \"#FFFFFF\",\n        }], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton((props = singleton([\"className\", (arg10 = Types_View__get_IconName(v), toText(printf(\"is-32x32 icon %s\"))(arg10))]), createElement(\"figure\", createObj(Helpers_combineClasses(\"image\", props))))), createElement(\"div\", {\n            className: \"media-left\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms)),\n        }))), createElement(\"article\", {\n            className: \"media\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n        })), (elms_2 = singleton((props_4 = singleton([\"children\", toString(v)]), createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", props_4))))), createElement(\"div\", {\n            className: \"content\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n        }))]), createElement(\"div\", {\n            className: \"card-content\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n        }))])]]);\n        return createElement(\"div\", createObj(Helpers_combineClasses(\"card\", props_8)));\n    };\n    const cancelSignatureOrder = (orderId) => Page_cancelSignatureOrder((predicate) => {\n        setMessages(filter((arg) => (!predicate(arg)), messages));\n    }, user.Token, orderId);\n    const components = (activeView.tag === 0) ? ofArray([createElement(Components_IdCard_Z34C1F15A, user), createElement(Message_List_3D36A079, {\n        title: \"New messages\",\n        messages: messages,\n        setMessages: setMessages,\n        setView: setView,\n        maxCount: 2,\n        cancelSignatureOrder: cancelSignatureOrder,\n    }), createElement(Account_Box_130DA4ED, {\n        accounts: user.Accounts,\n        viewAccount: (name_14) => {\n            setView(new Types_View(1, name_14));\n        },\n    })]) : ((activeView.tag === 8) ? singleton(createElement(Account_Box_130DA4ED, {\n        accounts: user.Accounts,\n        viewAccount: (name_15) => {\n            setView(new Types_View(1, name_15));\n        },\n    })) : ((activeView.tag === 1) ? singleton(createElement(Account_Transactions_Z2F12D0CA, find((a) => (a.Name === activeView.fields[0]), user.Accounts))) : ((activeView.tag === 5) ? singleton(createElement(Message_List_3D36A079, {\n        title: \"Messages\",\n        messages: messages,\n        setMessages: setMessages,\n        setView: setView,\n        maxCount: void 0,\n        cancelSignatureOrder: cancelSignatureOrder,\n    })) : ((activeView.tag === 4) ? ofArray([placeholderContent(new Types_View(4)), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", ofArray([[\"children\", \"Apply\"], [\"onClick\", (_arg1) => {\n        startImmediate(Page_createOrder(user, documents, (msg) => {\n            setMessages(cons(msg, messages));\n        }));\n    }]]))))]) : singleton(placeholderContent(activeView))))));\n    return createElement(\"div\", {\n        className: \"container\",\n        children: Interop_reactApi.Children.toArray(Array.from(components)),\n    });\n}\n\nexport function Page_Layout() {\n    let elms, props_6, props_2, props_4;\n    const patternInput = useFeliz_React__React_useState_Static_1505(new Types_View(0));\n    const view = patternInput[0];\n    const setView = patternInput[1];\n    const patternInput_1 = useFeliz_React__React_useState_Static_1505(void 0);\n    const user = patternInput_1[0];\n    const patternInput_2 = useFeliz_React__React_useState_Static_1505(empty());\n    const patternInput_3 = useFeliz_React__React_useState_Static_1505(empty());\n    const patternInput_4 = useFeliz_React__React_useState_Static_1505(0);\n    const setMessages = (msgs) => {\n        patternInput_4[1](sumBy((m) => {\n            if (m.Unread) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }, msgs, {\n            GetZero: () => 0,\n            Add: (x, y) => (x + y),\n        }));\n        patternInput_2[1](msgs);\n    };\n    fetch$(setMessages);\n    fetch$_1(patternInput_3[1]);\n    if (user != null) {\n        const user_2 = user;\n        const children_3 = ofArray([createElement(Navigation_Topbar_700867CD, {\n            userButtonText: \"Log off\",\n            action: () => {\n                logOut();\n            },\n        }), (elms = singleton((props_6 = ofArray([[\"style\", {\n            marginTop: 40,\n        }], [\"className\", \"is-centered\"], [\"children\", Interop_reactApi.Children.toArray([(props_2 = ofArray([[\"style\", {\n            boxShadow: \"none\",\n        }], [\"className\", \"is-one-quarter\"], [\"className\", \"is-one-fifth-fullhd\"], [\"children\", Interop_reactApi.Children.toArray([createElement(Navigation_SidePanel_AB71DB6, {\n            messageCount: patternInput_4[0],\n            activeView: view,\n            setView: setView,\n        })])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_2)))), (props_4 = singleton([\"children\", Interop_reactApi.Children.toArray([createElement(Page_Overview_2B9534, {\n            user: user_2,\n            activeView: view,\n            setView: setView,\n            messages: patternInput_2[0],\n            documents: patternInput_3[0],\n            setMessages: setMessages,\n        })])]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_4))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_6))))), createElement(\"div\", {\n            className: \"container\",\n            children: Interop_reactApi.Children.toArray(Array.from(elms)),\n        }))]);\n        return createElement(\"div\", {\n            children: Interop_reactApi.Children.toArray(Array.from(children_3)),\n        });\n    }\n    else if (!hasRequestedAuthentication()) {\n        const children = ofArray([createElement(Navigation_Topbar_700867CD, {\n            userButtonText: \"Log on\",\n            action: () => {\n                logIn();\n            },\n        }), createElement(Components_Splash, null)]);\n        return createElement(\"div\", {\n            children: Interop_reactApi.Children.toArray(Array.from(children)),\n        });\n    }\n    else {\n        const value_1 = isAuthenticated((oidcUser) => {\n            const user_1 = map((ou) => (new User(ou.profile.name, ou.profile.birthdate, generate(ou.profile.name, 200), ou.id_token)), oidcUser);\n            if (user_1 == null) {\n            }\n            else {\n                patternInput_1[1](user_1);\n            }\n        });\n        return createElement(\"div\", {});\n    }\n}\n\nfunction Page_cancelSignatureOrder(removeMessage, userToken, orderId) {\n    return () => {\n        startImmediate(singleton_1.Delay(() => {\n            let client;\n            return singleton_1.Bind((client = Client(\"https://demo-app-signature-api.azurewebsites.net/api/\", userToken), awaitPromise(PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (client.cancelSignatureOrder(orderId).then((_arg1) => {\n                let tupledArg, statusCode_1, responseText_1;\n                return Promise.resolve((tupledArg = _arg1, (statusCode_1 = (tupledArg[0] | 0), (responseText_1 = tupledArg[1], (statusCode_1 === 200) ? (new FSharpResult$2(0, responseText_1)) : (new FSharpResult$2(1, new ErrorResponse(responseText_1, statusCode_1)))))));\n            })))))), (_arg1_1) => {\n                const res_1 = _arg1_1;\n                if (res_1.tag === 1) {\n                    toConsoleError(printf(\"Failed to cancel %s. Errors: %A\"))(orderId)(res_1.fields[0]);\n                    return singleton_1.Zero();\n                }\n                else {\n                    toConsole(printf(\"Cancel: %A\"))(res_1.fields[0]);\n                    removeMessage((msg) => {\n                        const matchValue = msg.Type;\n                        let pattern_matching_result;\n                        if (matchValue.tag === 1) {\n                            if (matchValue.fields[1] === orderId) {\n                                pattern_matching_result = 0;\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                        switch (pattern_matching_result) {\n                            case 0: {\n                                return true;\n                            }\n                            case 1: {\n                                return false;\n                            }\n                        }\n                    });\n                    return singleton_1.Zero();\n                }\n            });\n        }));\n    };\n}\n\nfunction Page_createOrder(user, documents, addMessages) {\n    return singleton_1.Delay(() => {\n        let documents_1, client;\n        const doc = head(documents);\n        const userToken = user.Token;\n        return singleton_1.Bind((documents_1 = [new DocumentInfo(replace(doc.Name, \"%USERNAME%\", user.Name), replace(doc.Content, \"%USERNAME%\", user.Name), void 0)], (client = Client(\"https://demo-app-signature-api.azurewebsites.net/api/\", userToken), awaitPromise(PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (client.createSignatureOrder([\"Signature order\", documents_1]).then((_arg1) => {\n            let tupledArg, statusCode_1, responseText_1;\n            return Promise.resolve((tupledArg = _arg1, (statusCode_1 = (tupledArg[0] | 0), (responseText_1 = tupledArg[1], (statusCode_1 === 200) ? (new FSharpResult$2(0, JSON.parse(responseText_1))) : (new FSharpResult$2(1, new ErrorResponse(responseText_1, statusCode_1)))))));\n        }))))))), (_arg2) => {\n            const signatureOrderResult = _arg2;\n            if (signatureOrderResult.tag === 1) {\n                toConsole(printf(\"Error occurred while creating signature order %A\"))(signatureOrderResult.fields[0]);\n                return singleton_1.Zero();\n            }\n            else {\n                const order = signatureOrderResult.fields[0];\n                startImmediate(singleton_1.Delay(() => {\n                    let orderId, client_1;\n                    const userRef = toBase64String(get_Unicode().getBytes(user.Name));\n                    return singleton_1.Bind((orderId = (order[\"id\"]), (client_1 = Client(\"https://demo-app-signature-api.azurewebsites.net/api/\", userToken), awaitPromise(PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (client_1.addSignatory([orderId, userRef]).then((_arg1_1) => {\n                        let tupledArg_1, statusCode_3, responseText_3;\n                        return Promise.resolve((tupledArg_1 = _arg1_1, (statusCode_3 = (tupledArg_1[0] | 0), (responseText_3 = tupledArg_1[1], (statusCode_3 === 200) ? (new FSharpResult$2(0, JSON.parse(responseText_3))) : (new FSharpResult$2(1, new ErrorResponse(responseText_3, statusCode_3)))))));\n                    }))))))), (_arg3) => {\n                        let copyOfStruct_1, copyOfStruct;\n                        const signatoryAddedResult = _arg3;\n                        if (signatoryAddedResult.tag === 1) {\n                            toConsoleError(printf(\"Erros while adding signatory %A\"))(signatoryAddedResult.fields[0]);\n                            return singleton_1.Zero();\n                        }\n                        else {\n                            const linkToDoc = (signatoryAddedResult.fields[0][\"signatory\"])[\"documentLink\"];\n                            addMessages(new Message(userRef + ((copyOfStruct_1 = ((copyOfStruct = now(), getTicks(copyOfStruct))), toString_1(copyOfStruct_1))), \"Document to be signed\", \"Your loan is awaiting your signature. To read the document and sign it press the button below\", \"Your bank advisor\", now(), true, new MessageType(1, linkToDoc, order[\"id\"])));\n                            return singleton_1.Zero();\n                        }\n                    });\n                }));\n                return singleton_1.Zero();\n            }\n        });\n    });\n}\n\n","import { render } from \"react-dom\";\nimport { createElement } from \"react\";\nimport { Page_Layout } from \"./App/Components/Page.js\";\nimport \"../src/styles/global.scss\";\n\n\ndocument.title = \"Criipto Bank\";\n\nrender(createElement(Page_Layout, null), document.getElementById(\"app\"));\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(965)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Interop_reactApi","react","isArrayLike","x","Array","isArray","ArrayBuffer","isView","sameConstructor","y","Object","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","value","done","Error","getEnumerator","o","GetEnumerator","Symbol","iterator","toIterator","en","hasNext","undefined","Lazy","factory","isValueCreated","createdValue","padWithZeros","i","length","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","GetHashCode","isHashable","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","equalArrays","equals","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","min","comparer","createAtom","atom","isSetter","createObj","fields","obj","kv","WeakMap","CURRIED","seqToString","self","callStack","cons","entries","join","name","String","Union","cases","tag","concat","fieldStr","withParens","indexOf","unionToString","splice","other","Record","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","FSharpRef","contentsOrGetter","setter","getter","Some","some","defaultArg","opt","defaultValue","mapping","LanguagePrimitives_FastGenericComparer","e1","e2","Compare","Helpers_allocateArrayFromCons","fill","target","targetIndex","start","mapIndexed","f","source","initialize","initializer","sortBy","projection","xs","xs_1","slice","x_1","symbol","isNumeric","multiply","toFixed","dp","toPrecision","sd","toExponential","toHex","Number","wasm","WebAssembly","Instance","Module","Uint8Array","exports","e","Long","low","high","unsigned","isLong","prototype","toJSON","substr","bytes","le","fromBytesLE","fromBytesBE","fromBytes","$this","hi","lo","toBytesLE","toBytesBE","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","p","substring","radixToPower","size","parseInt","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","toNumber","isZero","isNegative","radixLong","div","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","res","div_u","div_s","toUnsigned","numBits","shiftRightUnsigned","shiftLeft","shiftRight","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Addition","LongLib","op_Multiply","op_Division","op_UnaryNegation","op_BitwiseAnd","fromInteger","xh","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","replace","match","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","_provider","_a","_b","_c","dateWithOffset","d","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","DateTime","getTicks","ms","parseRaw","input","fail","trim","m","exec","baseDate","timeInSeconds","timeParts","split","parseFloat","toUpperCase","offsetInMinutes","create","year","month","day","dateValue","UTC","setFullYear","now","ts","newDate","oldTzOffset","newTzOffset","addDays","toShortDateString","pattern","options","flags","RegExp","escape","reg","startAt","lastIndex","fsFormatRegExp","formatRegExp","isLessThan","numericCompare","printf","cont","strParts","matches","strIdx","matchIndex","index","push","createPrinter","continuePrint","arg","toConsole","console","toConsoleError","error","toText","toFail","formatReplacement","padLength","precision","sign","toLowerCase","dateToString","zeroFlag","minusFlag","ch","padLeft","_strParts","_matches","_result","padArg","args","_padLength","shift","_","idx","intPart","decimalPart","decimalPartLength","thousandGroups","thousands","intPartLength","endsWith","search","lastIndexOf","isNullOrEmpty","isNullOrWhiteSpace","test","delimiter","from","isRight","replicate","n","getCharAtIndex","splitters","removeEmpty","filter","splits","findSplits","candidate","trimStart","chars","trimEnd","startIndex","SR_inputMustBeNonNegative","SR_notEnoughElements","FSharpList","head","tail","xs_1_mut","ys_1_mut","loop","ys_1","matchValue","xt","yt","i_mut","h_mut","t","_key","c","ListEnumerator$1","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Length","FSharpList__get_Head","SR_inputWasEmpty","FSharpList__get_Tail","empty","singleton","isEmpty","toArray","fold","folder","state","acc","reverse","ofArrayWithTail","tail_1","ofArray","ofSeq","xs_3","root","node","enumerator","Dispose","xs_5","t_2","append","ys","collect","zs","acc_mut","foldIndexed","find","tryPick","tryFind","value_1","item","SR_indexOutOfBounds","FSharpList__get_Item_Z524259A4","choose","xs_2","zip","fold2","map2","sortWith","arr","sumBy","adder","Add","GetZero","skip","count_mut","xs_mut","skipWhile","predicate_mut","predicate","take","takeWhile","splitAt","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","started","curr","finish","matchValue_1","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","delay","generator","sources","outerOpt","innerOpt","finished","inner","outer","inner_1","outer_1","ie","Enumerator_concat","unfold","st_1","Enumerator_unfold","ar","singleton_1","toArray_1","toList","ofArray_1","ofSeq_1","generate","generateIndexed","exists","found","iterate","action","unitVar0","e_1","chooser","tupledArg","tupledArg_1","Helpers_combineClasses","cn","arity","uncurried","uncurry","classes","props","Helpers_extractClasses","Elements_IconButton_62C67EE5","elements_IconButton_62C67EE5InputProps","iconName","label","props_2","backgroundColor","borderStyle","fontSize","createElement","className","children","value_12","arg10","Types_View","Types_View__get_IconName","Components_IdCard_Z34C1F15A","user","elms_3","elms_1","elms","elms_2","props_6","props_10","boxShadow","Name","DateOfBirth","Components_Splash","props_41","props_15","props_13","props_27","props_25","props_23","props_31","props_29","props_39","props_37","props_35","props_9","MarkdownRange","StartLine","StartColumn","EndLine","EndColumn","MarkdownRangeModule_zero","MarkdownRangeModule_mergeRanges","ranges","startRange","r","endRange","maxBy","r_1","y_1","List_partitionWhile","_arg1_mut","_arg1","pattern_matching_result","hd_1","tl_1","tail_6","List_partitionWhileLookahead","List_partitionUntil","List_partitionUntilLookahead","List_partitionUntilEquals","endl","start_1_mut","list_1_mut","loop_1","Tree$1","Tree_takeAtLevel","indent","i_1","tail_2","patternInput","Tree_takeDeeperThan","patternInput_1","StringPosition_$007CWhiteSpace$007C_$007C","_n","StringPosition_$007CUnindented$007C_$007C","StringPosition_$007CTrimBoth$007C","text","inputRecord","trimmedStart","trimmed","contents","StringPosition_$007CTrimEnd$007C","StringPosition_$007CTrimStartAndCount$007C","StringPosition_$007CStartsWithNTimesTrimIgnoreStartWhitespace$007C_$007C","beforeStart","startNum","length_1","windowSize","map_1","windowed_1","windowed","StringPosition_$007CStartsAndEndsWith$007C_$007C","starts","ends","StringPosition_$007CStartsWithRepeated$007C_$007C","repeated","ln","StringPosition_$007CStartsWithWrapped$007C_$007C","StringPosition_$007CEqualsRepeated$007C_$007C","_arg1_0","_arg1_1","activePatternResult1690","List_$007CBracketDelimited$007C_$007C","startc","endc","pattern_matching_result_4","xs_10","pattern_matching_result_1","pattern_matching_result_2","x_5","pattern_matching_result_3","x_7","xs_7","List_$007CAsString$007C","Lines_$007CTrimBlankStart$007C","lines","takeWhile_1","$007CLet$007C","a","b","MarkdownListKind","MarkdownColumnAlignment","MarkdownSpan","MarkdownParagraph","unicodeCategoryFunc","a1","codePointAt","a2","codepoints","Uint32Array","categories","cp","mid","getCategoryFunc","isDigit","getUnicodeCategory2","isDigit2","isWhiteSpace","isWhiteSpace2","rangeDouble","step","stop","zero","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","integralRangeStep","tryGetValue","getItemFromDict","getLinkAndTitle","$007CDelimitedMarkdown$007C_$007C","bracket","start_3_mut","list_3_mut","loop_2","ys_3","matchValue_2","activePatternResult1887","input_1","rest","post","$007CDelimitedLatexDisplayMath$007C_$007C","activePatternResult1892","$007CDelimitedLatexInlineMath$007C_$007C","activePatternResult1897","$007CIndirectLink$007C_$007C","body","link","activePatternResult1917","activePatternResult1919","activePatternResult1920","body_1","link_1","rest_1","activePatternResult1910","activePatternResult1914","activePatternResult1915","activePatternResult1912","activePatternResult1913","body_2","link_2","rest_2","activePatternResult1905","activePatternResult1907","activePatternResult1908","activePatternResult1903","$007CDirectLink$007C_$007C","activePatternResult1923","activePatternResult1925","$007CHtmlEntity$007C_$007C","match$0027","entity","ParsingContext","Links","Newline","IsFirst","CurrentRange","ParseOptions","ParsingContext__get_ParseNonCodeAsOther","parseChars","ctx","matchValue_7","n_3","inputRecord_3","accLiterals","n_1","inputRecord_1","range","ctx_1","activePatternResult2022","activePatternResult2020","activePatternResult2018","activePatternResult2017","activePatternResult2019","activePatternResult2021","Value","ctx_2","ctx_3","rest_4","c_2","rest_5","activePatternResult2016","pattern_matching_result_11","c_1","rest_3","input_2","activePatternResult2015","pattern_matching_result_10","rest_6","activePatternResult2013","startl","input_3","list_2_mut","pattern_matching_result_8","matchValue_3","activePatternResult2014","input_4","strs","str_1","startl_1","endl_1","input_6","list_4_mut","matchValue_4","pattern_matching_result_9","matchValue_5","post_1","patternInput_3","ctx_4","inputRecord_2","rng","matchValue_6","n_2","activePatternResult2010","rest_7","patternInput_4","ctx_5","activePatternResult2008","rest_8","patternInput_5","ctx_6","ctx_7","matchValue_8","n_4","inputRecord_4","code","rest_10","activePatternResult2005","startl_2","endl_2","input_7","start_5_mut","list_6_mut","matchValue_9","pattern_matching_result_7","ys_5","matchValue_10","post_2","activePatternResult2006","patternInput_6","ctx_8","activePatternResult2003","startl_3","endl_3","input_8","start_7_mut","list_8_mut","loop_3","matchValue_11","ys_7","matchValue_12","post_3","rest_11","append_1","activePatternResult2001","body_3","rest_12","patternInput_7","ctx_9","patternInput_8","activePatternResult2000","body_4","link_4","original","rest_13","patternInput_9","ctx_10","pattern_matching_result_5","body_5","link_6","rest_15","activePatternResult1999","scheme","activePatternResult1931","prefix","activePatternResult1932","activePatternResult1928","$007CAutoLink$007C_$007C","link_5","rest_14","patternInput_10","ctx_11","activePatternResult1998","patternInput_11","ctx_12","patternInput_12","pattern_matching_result_6","body_6","link_8","original_1","rest_16","activePatternResult1997","patternInput_13","ctx_13","key_1","activePatternResult1996","activePatternResult1949","activePatternResult1950","arg_1","activePatternResult1945","activePatternResult1946","activePatternResult1941","activePatternResult1942","tupledArg_2","$007CEmphasised$007C_$007C","body_7","rest_17","patternInput_14","ctx_14","parseSpans","activePatternResult2027","trimSpaces","numSpaces_mut","s_mut","numSpaces","$007CHeading$007C_$007C","noHash","header","line1","line2","activePatternResult2041","activePatternResult2042","header_1","line1_1","line2_1","activePatternResult2037","activePatternResult2038","tupledArg_3","header_2","line1_2","ln_1","n_5","activePatternResult2035","tupledArg_4","activePatternResult2036","tupledArg_5","$007CHorizontalRule$007C_$007C","line","arg_mut","u","$007CFencedCodeBlock$007C_$007C","header_3","indent_3","lines_4","num_3","start_6","takenLine_3","activePatternResult2067","activePatternResult2069","activePatternResult2070","activePatternResult2072","activePatternResult2073","activePatternResult2075","endStr","patternInput_2","activePatternResult2059","codeLines","codeWithoutIndent","l","langString","ignoredString","tl","takenLine2","hd","after","$007CListStart$007C_$007C","activePatternResult2085","arg00","li","startIndent2","item_1","skipNumCount","startIndent_1","activePatternResult2083","activePatternResult2082","$007CSkipSomeNumbers$007C_$007C","activePatternResult2084","startIndent2_1","$007CListItems$007C_$007C","prevSimple","activePatternResult2122","activePatternResult2107","tupledArg_6","tupledArg_7","continued","endIndent","more","startIndent","takenLine","activePatternResult2113","activePatternResult2114","$007CLinesUntilListOrWhite$007C","activePatternResult2115","$007CLinesUntilListOrUnindented$007C","line_1","$007CListItem$007C_$007C","info","nextSimple","takenLines","activePatternResult2119","items","takenLines2","pipeTableFindSplits","delim","cLstToStr","delim_1_mut","line_1_mut","delim_1","activePatternResult2134","activePatternResult2132","activePatternResult2130","activePatternResult2128","y_4","ptfs","$007CTableCellSeparator$007C_$007C","activePatternResult2150","activePatternResult2146","activePatternResult2142","$007CPipeTableRow$007C_$007C","delimiters","parts","value_14","$007CPipeSeparatorRow$007C_$007C","activePatternResult2159","alignments","$007CEmacsTableLine$007C_$007C","grid","check","i_2","$007CBlockquoteStart$007C_$007C","group","$007CTakeParagraphLines$007C_$007C","$007CBlockquote$007C_$007C","activePatternResult2215","lines_1","quoteLine","takenLines2_1","activePatternResult2219","activePatternResult2224","activePatternResult2222","$007CEmptyBlockquote$007C_$007C","activePatternResult2220","activePatternResult2216","activePatternResult2217","activePatternResult2218","updateCurrentRange","parseParagraphs","activePatternResult2249","loc","yaml","l_2","yamlTextLines","tuple","tuple_1","$007CYamlFrontmatter$007C_$007C","moreLines","frontMatter","empty_1","tree","nestUnmatchingItems","formatTree","unifySimpleProperty","all","activePatternResult2302","wrapped","activePatternResult2238","activePatternResult2239","activePatternResult2240","activePatternResult2241","activePatternResult2242","activePatternResult2243","activePatternResult2244","activePatternResult2245","$007CLinkDefinition$007C_$007C","activePatternResult2303","dict","k","addToDict","ignoredLine","lines_2","takenLines_1","activePatternResult2298","activePatternResult2055","s_1","normalized","spaceNum","activePatternResult2056","Lines_$007CTrimBlank$007C","$007CNestedCodeBlock$007C_$007C","activePatternResult2299","activePatternResult2300","activePatternResult2301","activePatternResult2296","activePatternResult2297","takenLines_2","headers","rows","takenLines_3","takenLines2_3","activePatternResult2292","grid_1","activePatternResult2199","emptyCur","flag_mut","takenLines2_mut","headers_mut","prevRows_mut","cur_mut","lines_1_mut","tupledArg_9","tupledArg_8","flag","prevRows","others","parts_1","activePatternResult2191","others_1","takenLine2_1","list_1","others_3","takenLine2_3","arg_2","list_2","$007CEmacsTableBlock$007C_$007C","activePatternResult2293","activePatternResult2294","takenLine_1","getTableRows","size_mut","takenLinesAcc_mut","lines_mut","takenLinesAcc","columns","activePatternResult2164","activePatternResult2175","takenLine_2","activePatternResult2173","alignments_1","activePatternResult2171","l_1","$007CPipeTableBlock$007C_$007C","activePatternResult2295","lines_3","takenLines2_4","activePatternResult2290","activePatternResult2291","activePatternResult2288","first_2","activePatternResult2228","first_3","rest_9","takenLine_5","s_2","res_1","s_3","$007CLatexBlock$007C_$007C","activePatternResult2289","env","takenLines_4","activePatternResult2286","activePatternResult2287","takenLines_5","Tree_ofIndentedList","items_1","_arg2","nodes","nested_1","tuple_2","nodes_1","_arg2_1","activePatternResult2283","activePatternResult2284","takenLines_6","code_3","lines_6","takenLines_8","takenLines2_9","activePatternResult2281","html_1","activePatternResult2208","$007CHtmlBlock$007C_$007C","activePatternResult2282","tuple_3","tuple_4","activePatternResult2278","activePatternResult2279","endsWithTwoSpaces","Lines_$007CTrimParagraphLines$007C","activePatternResult2280","takenLines_9","tuple_5","tuple_6","FableTextWriter","buffer","FableTextWriter_$ctor","FableTextWriter__Write_Z721C83C5","MarkdownUtils_FormattingContext","Substitutions","ResolveApiDocReference","DefineSymbol","MarkdownUtils_mapText","MarkdownUtils_mapSpans","f_0","f_1","md","_arg8","map_2","text_1","text_2","MarkdownUtils_mapInlineCode","MarkdownUtils_mapParagraphs","_arg9","md_1","list","md_2","md_3","MarkdownUtils_applySubstitutionsInMarkdown","MarkdownUtils_applySubstitutionsInText","MarkdownUtils_applyCodeReferenceResolver","htmlEncode","htmlEncodeQuotes","$007CLookupKey$007C_$007C","outArg","UniqueNameGenerator","generated","Map","FormattingContext","LineBreak","Writer","WrapCodeSnippets","GenerateHeaderAnchors","ParagraphIndent","formatSpan","span","cmd","title","activePatternResult2497","formatSpans","Render","title_1","title_2","activePatternResult2495","title_3","formatAnchor","spans","gather","global","gathers","spans_1","UniqueNameGenerator__GetName_Z721C83C5","formatParagraph","paragraph","formatParagraphs","anchorName","langCode","aligns","enumerator_1","value_2","forLoopVar","enumerator_2","enumerator_3","forLoopVar_1","enumerator_4","forLoopVar_2","enumerator_5","enumerator_6","sb","f_mut","g_mut","input_mut","List_iterInterleaved","g","paragraph_3","withInner","enumerator_7","paragraphs","smallCtx","unitVar1","smallBreak","bigCtx","bigBreak","MarkdownDocument","links","Markdown_WriteHtml_2ED819BE","doc","writer","newline","substitutions","crefResolver","newline_1","substitutions_1","crefResolver_1","generateAnchors","wrap","paragraphs_1","formatMarkdown","MarkdownDocument__get_Paragraphs","Markdown_ToHtml_Z3EA62BCD","markdownText","wr","Markdown_ToHtml_Z6BE9E069","parseOptions","parseOptions_1","MarkdownDocument_$ctor_Z1468BDFA","Markdown_Parse_Z33F6198B","P","_this","cmp","MAX_DP","NAME","INVALID","INVALID_DP","DIV_BY_ZERO","UNDEFINED","NUMERIC","parse","nl","charAt","round","Big","DP","RM","rm","xc","findIndex","xci","unshift","pop","stringify","doExponential","isNonzero","isneg","yc","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","one","prec","sqrt","NE","PE","strict","valueOf","_Big_","normalize","TypeError","setInt32Bits","hexDigits","bits","fromParts","scale","bitSize","decDigits","hex","dec","decCount","carry","hexToDecimal","big","Decimal","LedgerEntry","Date$","Amount","Balance","Text$","Text","MessageType","Message","Id","Subject","Content","From","Unread","Type","Document$","Reference","Account","Ledger","Account__get_Balance","User","Accounts","Token","ActionType","Message_MarkdownDiv_Z721C83C5","message_MarkdownDiv_Z721C83C5InputProps","__html","Message_List_3D36A079","message_List_3D36A079InputProps","msgs","cancelSignatureOrder","maxCount","setView","setMessages","messages","maxCount_1","actionButton","actionText","messageViews","message","buttons","onClick","messageHeader","document","getElementsByClassName","parentElement","classList","toggle","dot","contains","Message_1","style","marginRight","arg00_2","props_24","_arg3","Account_Transactions_Z2F12D0CA","account","arg00_3","transactions","ledgerEntry","props_4","formatCurrency","clo1","props_12","props_22","Account_Box_130DA4ED","account_Box_130DA4EDInputProps","arg00_1","viewAccount","accounts","accounts_1","props_8","copyOfStruct","window","location","href","color","arg10_1","props_20","CancellationToken","cancelled","_id","_cancelled","_listeners","listener","$","addListener","removeListener","OperationCanceledError","setPrototypeOf","Trampoline","callCount","maxTrampolineCallCount","setTimeout","protectedCont","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","AsyncBuilder","computation","binder","onSuccess","ex","protectedBind","computation1","computation2","Bind","sequence","While","Delay","protectedReturn","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","emptyContinuation","_x","awaitPromise","fromContinuations","conts","then","defaultCancellationToken","parallel","computations","Promise","w","startAsPromise","startImmediate","cancellationToken","startWithContinuations","continuation","exceptionContinuation","cancellationContinuation","resolve","reject","useFeliz_React__React_useState_Static_1505","initial","HttpMethod","Header","BodyContent","HttpRequest","url","method","withCredentials","overridenMimeType","overridenResponseType","content","ResponseContent","HttpResponse","statusCode","responseText","responseType","responseHeaders","MapTreeLeaf$2","MapTreeLeaf$2_$ctor_5BDDA1","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","left","right","MapTreeNode$2_$ctor_499A11FD","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeNode$2__get_Height","MapTreeModule_sizeAux","m_mut","m2","MapTreeModule_size","MapTreeModule_mk","hl","hr","m_2","MapTreeModule_rebalance","t1","t2","m2_2","m_3","m2_3","t1h","t2h","MapTreeModule_add","MapTreeModule_empty","MapTreeModule_iterOpt","MapTreeModule_iter","MapTreeModule_copyToArray","MapTreeModule_ofArray","MapTreeModule_MapIterator$2","stack","MapTreeModule_collapseLHS","stack_mut","isEmpty_1","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","this$","combineHash","activePatternResult5790","FSharpMap__ComputeHashCode","that","m1","e1c","e2c","toStringTag","b1","b2","compareWith","kvp1","kvp2","FSharpMap__ContainsKey","FSharpMap__get_Item","FSharpMap__get_Count","thisArg","iterate_1","FSharpMap_$ctor","FSharpMap_Create","fold_1","MapTreeModule_ofList","comparer_mut","e_mut","MapTreeModule_mkFromEnumerator","MapTreeModule_ofSeq","FSharpMap__Add","k_mut","MapTreeModule_tryFind","MapTreeModule_find","MapTreeModule_mem","table","m_1_mut","MapTreeModule_toList","Headers_contentType","Headers_authorization","Http_defaultRequest","Http_splitAt","Http_request","Http_method","httpVerb","req","Http_send","xhr","XMLHttpRequest","open","Http_serializeMethod","onreadystatechange","elements","readyState","status","response","array","headerLine","toLocaleLowerCase","getAllResponseHeaders","setRequestHeader","overrideMimeType","send","Http_get","documents","Navigation_SidePanel_AB71DB6","navigation_SidePanel_AB71DB6InputProps","activeView","messageCount","props_7","view","view_1","value_28","Navigation_Topbar_700867CD","navigation_Topbar_700867CDInputProps","userButtonText","elms_4","UserProfile","identityscheme","authenticationtype","authenticationmethod","authenticationinstant","nameidentifier","sessionindex","loA","ial","aal","fal","uuid","cprNumberIdentifier","birthdate","dateofbirth","age","country","UserInfo","id_token","access_token","token_type","scope","profile","expires_at","Options","authority","client_id","redirect_uri","response_type","post_logout_redirect_uri","acr_values","userManager","UserManager","storageKey","storage","sessionStorage","isAuthenticated","updateUserProfile","json","userInfo","userProfile_1","userProfile","nowInUnixTime","arg30","removeItem","getItem","JSON","processSigninResponse","setItem","NumberStyles","UTF16LE","Buffer","byteOffset","byteLength","DataView","setUint16","utf16le_encode","subarray","TextDecoder","decode","getUint16","fromCharCode","utf16le_decode","UTF8","TextEncoder","encode","pos","buf","nextCode","utf8_encode","decodeUtf8","i1","fromCodePoint","utf8_decode","_UTF16","get_Unicode","op_UnaryNegation_Int32","listOfCompanies","listOfAmounts","primes","Int32Array","maxLedgerLength","getBytes","getSeed","accountNames","random","maxl","randomElements","lst","source_1","lst_1","x_2","y_2","option_1","filter_1","option","elem","accountName","listOfAmounts_1","listOfCompanies_1","entries_1","entry","dateInterval_1","take_1","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","getHashCode","getGenerics","fullnameHash","genHashes","getRecordElements","k1","v1","k2","v2","anonRecord_type","obj_type","string_type","bool_type","int32_type","elemType","getElementType","getUnionCases","isTuple","startsWith","isFunction","Parsimmon","seed","forEach","isParser","call","isBuffer","makeSuccess","furthest","expected","makeFailure","mergeReplies","last","hasOwnProperty","union","makeLineColumnIndex","column","assertParser","assertNumber","assertRegexp","assertFunction","assertString","repeat","string","amount","leftPad","pad","char","rangeFromIndexAndOffsets","before","to","formatGot","lineWithErrorIndex","lineRange","lastLineNumberLabelLength","verticalMarkerLength","byteLineWithErrorIndex","columnByteIndex","byteRange","bytesPerLine","bytesAfter","bytesInChunks","chunkSize","chunks","chunkIndex","toChunks","data","byteLines","byteRow","byteValue","byteRangeToRange","byteLine","inputLines","lineWithErrorCurrentIndex","linesWithLineNumbers","lineSource","lineNumberLabel","isLineWithError","re","anchoredRegexp","seq","parsers","arguments","numParsers","accum","seqMap","mapper","apply","results","alt","sepBy1","parser","separator","many","rs","regexp","anchored","fullMatch","groupMatch","succeed","lookahead","eof","tryParse","msg","type","or","alternative","leftParser","rightParser","middle","thru","wrapper","tieWith","assertArray","tie","prevResult","atMost","atLeast","init","fn","contramap","promap","mark","end","sepBy","notFollowedBy","desc","reply","fallback","ap","chain","of","digit","optWhitespace","cr","lf","Parsimmon_many","Parsimmon_ofLazy","Parsimmon_digit","Parsimmon_seperateBy","Parsimmon_between","skipped","Parsimmon_map","Parsimmon_choose","ps","Parsimmon_satisfy","Parsimmon_str","Parsimmon_optionalWhitespace","Parsimmon_atLeastOneOrMany","Parsimmon_atLeast","Parsimmon_stringReturn","Parsimmon_seq2","Parsimmon_concat","strings","Parsimmon_seq3","defValue","otherParser","anyCharSnippet","Json","jint","negJint","jfloat","digitsLeft","negativeJFloat","jnumber","arg0","jbool","jnull","stringLiteral","Parsimmon_oneOf","withWhitespace","jvalue","comma","json$004099$002D1","BigNat","bound","BigNatModule_FFT_pow32","x_mut","n_mut","BigNatModule_bound","BigNatModule_coeff","BigNatModule_coeff64","BigNatModule_setCoeff","BigNatModule_pow64","BigNatModule_pow32","BigNatModule_FFT_maxTwoPower","BigNatModule_baseN","BigNatModule_baseNi64","BigNatModule_baseMaski64","BigNatModule_createN","BigNatModule_normN","na_mut","na","findLeastBound","BigNatModule_embed","BigNatModule_boundInt","BigNatModule_eval32","BigNatModule_one","BigNatModule_zero","BigNatModule_degree","BigNatModule_isZero","BigNatModule_lt","pa_mut","qa_mut","pa","qa","BigNatModule_compare","BigNatModule_mulSchoolBookCarry","r_mut","c_mut","rak","BigNatModule_mulSchoolBookOneSmall","bp","q_1","BigNatModule_encoding","bigL","twoToBigL","bigK","bigN","BigNatModule_mkEncoding","BigNatModule_table","BigNatModule_mul","pSmall","qSmall","BigNatModule_mulSchoolBookBothSmall","ra","pai","qaj","BigNatModule_mulSchoolBookNeitherSmall","BigNatModule_mulSchoolBook","BigNatModule_scaleSubInPlace","ad","a_1","z","zLo","zHi","BigNatModule_scaleAddInPlace","BigNatModule_removeFactor","degx","dega","pn","xa","aa","qai","BigNatModule_divmod","BigNatModule_copyN","BigNatModule_toFloat","evalFloat","BigNatModule_ofInt32","BigNatModule_toString","degn","digits_4","isLeading_mut","digits_mut","n_1_mut","isLeading","prior_1","nL","nH","prior_mut","ten2k_mut","prior","ten2k","route","BigNatModule_getSmall","BigInteger","signInt","BigInteger__get_SignInt","BigInteger__get_V","BigInteger_op_Equality_56F059C0","BigNatModule_hash","nn","BigInteger_op_LessThan_56F059C0","BigInteger_$ctor_Z2BE94A1","BigInteger_nat_Z67CCE57D","BigNatModule_isSmall","smallLim","smallPosTab","BigInteger_$ctor_Z524259A4","BigNatModule_boundInt64","rem_u","rem_s","BigNatModule_embed64","BigNatModule_ofInt64","BigInteger_get_One","BigInteger_get_Zero","toDecimal","BigInteger__get_ToDouble","BigInteger__get_ToDecimal","InteropUtil_isBigInt","InteropUtil_isObjectLiteral","SimpleJson_stringify","jsonValue","toString_1","InteropUtil_isDateOffset","two","RecordField","FieldName","FieldType","PropertyInfo","UnionCase","CaseName","CaseTypes","Info","Dictionary","pairs","hashMap","pair","Dictionary__Add_5BDDA1","Dictionary__Clear","Dictionary__TryFind_2B595","arrayIndex","Dictionary__get_Count","Dictionary__Remove_2B595","Dictionary__ContainsKey_2B595","Dictionary__get_Item_2B595","Dictionary__set_Item_5BDDA1","Dictionary__TryFindIndex_2B595","clear","flattenFuncTypes","typeDef","gen","getFunctionElements","lazyToDelayed","_createTypeInfo","resolvedType","l_3","l_4","l_5","l_6","l_7","l_8","l_9","l_10","l_11","l_12","l_13","l_14","l_15","l_16","l_17","activePatternResult4642","primType","$007CPrimitiveType$007C_$007C","activePatternResult4641","types","resolvedType_1","createTypeInfo","activePatternResult4640","isRecord","field","$007CRecordType$007C_$007C","activePatternResult4639","isUnion","prop","uci","$007CUnionType$007C_$007C","resolvedType_2","activePatternResult4638","isEnum","getEnumUnderlyingType","$007CEnumType$007C_$007C","activePatternResult4637","$007CListType$007C_$007C","elemType_1","activePatternResult4636","$007CResizeArrayType$007C_$007C","elemType_2","activePatternResult4635","$007CHashSetType$007C_$007C","elemType_3","activePatternResult4634","$007CArrayType$007C_$007C","elemType_4","activePatternResult4633","getTupleElements","$007CTupleType$007C_$007C","types_1","resolvedType_3","activePatternResult4632","$007COptionType$007C_$007C","elemType_5","activePatternResult4631","$007CNullable$007C_$007C","elemType_6","activePatternResult4630","$007CSetType$007C_$007C","elemType_7","activePatternResult4629","genArgs","$007CMapType$007C_$007C","keyType","valueType","activePatternResult4628","$007CDictionaryType$007C_$007C","keyType_1","valueType_1","activePatternResult4627","$007CSeqType$007C_$007C","elemType_8","activePatternResult4626","$007CAsyncType$007C_$007C","elemType_9","activePatternResult4625","$007CPromiseType$007C_$007C","elemType_10","typeInfoCache","ti_1","isPrimitive","enumUnion","every","case$","Convert_isQuoted","Convert_betweenQuotes","Function","Convert_quoteText","inputText","escapable","meta","Convert_serialize","value_mut","typeInfo_mut","copyOfStruct_1","copyOfStruct_2","copyOfStruct_3","copyOfStruct_4","typeInfo","toString_2","toString_3","Long_op_Division","Long_op_Multiply","Long_fromNumber","arg20","getRecordField","elementType","map_4","element","elementType_1","element_1","elementType_2","element_2","elementType_3","element_3","elementType_4","map_3","element_4","elementType_5","element_5","value_89","case_","getUnionFields","usedCase","caseTypes","name_2","serializedFields_1","caseType","serializedValues","serializedKey","serializedValue","MapTreeModule_toArray","serializedValues_1","serializedKey_1","serializedValue_1","tupleTypes","index_1","element_6","Operation","Client","apiRoot","token","Client__post","operation","req_1","bodyContent","Http_content","IClient","createSignatureOrder","addSignatory","client","Client_$ctor_Z384F8060","disableVerifyEvidenceProvider","Title","evidenceProviders","fixDocumentFormattingErrors","maxSignatories","signatories","signatoryUIRedirectUri","webhookUrl","generic","Client__CreateSignatureOrder_738863A5","orderId","userRef","Signatory","evidenceValidation","reference","SignatureOrderId","PromiseBuilder__Delay_62FBFDE1","er","er_1","catch","onError_1","er_2","er_3","PromiseBuilder__Run_212F1D4B","FSharpResult$2","ErrorResponse","Error$","StatusCode","DocumentInfo","Page_Overview_2B9534","page_Overview_2B9534InputProps","placeholderContent","removeMessage","userToken","promise","statusCode_1","responseText_1","Page_cancelSignatureOrder","components","name_14","name_15","addMessages","documents_1","signatureOrderResult","order","client_1","inArray","btoa","notSupported","toBase64String","statusCode_3","responseText_3","signatoryAddedResult","linkToDoc","Page_createOrder","Page_Layout","setDocuments","priority","src","messagesRaw","messages_1","mapIndexed_1","m_1","detectUTC","list_3","fetch$","documentsRaw","doc_2","content_1","option_2","_arg4","doc_3","user_2","children_3","signoutRedirect","logOut","marginTop","oidcUser","user_1","ou","signinRedirect","accordions","render","getElementById","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","O","chunkIds","notFulfilled","Infinity","fulfilled","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}